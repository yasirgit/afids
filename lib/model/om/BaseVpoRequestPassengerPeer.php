<?php

/**
 * Base static class for performing query and update operations on the 'vpo_request_passenger' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue May 24 06:33:33 2011
 *
 * @package    lib.model.om
 */
abstract class BaseVpoRequestPassengerPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'vpo_request_passenger';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.VpoRequestPassenger';

	/** The total number of columns. */
	const NUM_COLUMNS = 41;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the ID field */
	const ID = 'vpo_request_passenger.ID';

	/** the column name for the REQUEST_ID field */
	const REQUEST_ID = 'vpo_request_passenger.REQUEST_ID';

	/** the column name for the FEMA_NO field */
	const FEMA_NO = 'vpo_request_passenger.FEMA_NO';

	/** the column name for the FIRST_NAME field */
	const FIRST_NAME = 'vpo_request_passenger.FIRST_NAME';

	/** the column name for the LAST_LAME field */
	const LAST_LAME = 'vpo_request_passenger.LAST_LAME';

	/** the column name for the ADDRESS1 field */
	const ADDRESS1 = 'vpo_request_passenger.ADDRESS1';

	/** the column name for the ADDRESS2 field */
	const ADDRESS2 = 'vpo_request_passenger.ADDRESS2';

	/** the column name for the CITY field */
	const CITY = 'vpo_request_passenger.CITY';

	/** the column name for the STATE field */
	const STATE = 'vpo_request_passenger.STATE';

	/** the column name for the COUNTRY field */
	const COUNTRY = 'vpo_request_passenger.COUNTRY';

	/** the column name for the ZIPCODE field */
	const ZIPCODE = 'vpo_request_passenger.ZIPCODE';

	/** the column name for the DAY_PHONE field */
	const DAY_PHONE = 'vpo_request_passenger.DAY_PHONE';

	/** the column name for the DAY_COMMENT field */
	const DAY_COMMENT = 'vpo_request_passenger.DAY_COMMENT';

	/** the column name for the EVE_PHONE field */
	const EVE_PHONE = 'vpo_request_passenger.EVE_PHONE';

	/** the column name for the EVE_COMMENT field */
	const EVE_COMMENT = 'vpo_request_passenger.EVE_COMMENT';

	/** the column name for the MOBILE_PHONE field */
	const MOBILE_PHONE = 'vpo_request_passenger.MOBILE_PHONE';

	/** the column name for the MOBILE_COMMENT field */
	const MOBILE_COMMENT = 'vpo_request_passenger.MOBILE_COMMENT';

	/** the column name for the FAX_PHONE field */
	const FAX_PHONE = 'vpo_request_passenger.FAX_PHONE';

	/** the column name for the FAX_COMMENT field */
	const FAX_COMMENT = 'vpo_request_passenger.FAX_COMMENT';

	/** the column name for the PAGER_PHONE field */
	const PAGER_PHONE = 'vpo_request_passenger.PAGER_PHONE';

	/** the column name for the PAGER_COMMENT field */
	const PAGER_COMMENT = 'vpo_request_passenger.PAGER_COMMENT';

	/** the column name for the OTHER_PHONE1 field */
	const OTHER_PHONE1 = 'vpo_request_passenger.OTHER_PHONE1';

	/** the column name for the OTHER_COMMENT1 field */
	const OTHER_COMMENT1 = 'vpo_request_passenger.OTHER_COMMENT1';

	/** the column name for the OTHER_PHONE2 field */
	const OTHER_PHONE2 = 'vpo_request_passenger.OTHER_PHONE2';

	/** the column name for the OTHER_COMMENT2 field */
	const OTHER_COMMENT2 = 'vpo_request_passenger.OTHER_COMMENT2';

	/** the column name for the OTHER_PHONE3 field */
	const OTHER_PHONE3 = 'vpo_request_passenger.OTHER_PHONE3';

	/** the column name for the OTHER_COMMENT3 field */
	const OTHER_COMMENT3 = 'vpo_request_passenger.OTHER_COMMENT3';

	/** the column name for the EMAIL field */
	const EMAIL = 'vpo_request_passenger.EMAIL';

	/** the column name for the ALT_EMAIL field */
	const ALT_EMAIL = 'vpo_request_passenger.ALT_EMAIL';

	/** the column name for the AGE field */
	const AGE = 'vpo_request_passenger.AGE';

	/** the column name for the DATE_OF_BIRTH field */
	const DATE_OF_BIRTH = 'vpo_request_passenger.DATE_OF_BIRTH';

	/** the column name for the PRIMARY_LANGUAGE field */
	const PRIMARY_LANGUAGE = 'vpo_request_passenger.PRIMARY_LANGUAGE';

	/** the column name for the ENGLISH_SPOKEN field */
	const ENGLISH_SPOKEN = 'vpo_request_passenger.ENGLISH_SPOKEN';

	/** the column name for the PREGNANT field */
	const PREGNANT = 'vpo_request_passenger.PREGNANT';

	/** the column name for the OXYGEN_REQUIRED field */
	const OXYGEN_REQUIRED = 'vpo_request_passenger.OXYGEN_REQUIRED';

	/** the column name for the WEIGHT field */
	const WEIGHT = 'vpo_request_passenger.WEIGHT';

	/** the column name for the AMBULATORY field */
	const AMBULATORY = 'vpo_request_passenger.AMBULATORY';

	/** the column name for the NOTES field */
	const NOTES = 'vpo_request_passenger.NOTES';

	/** the column name for the KNOWN_MEDICALCONDITION field */
	const KNOWN_MEDICALCONDITION = 'vpo_request_passenger.KNOWN_MEDICALCONDITION';

	/** the column name for the BAGGAGE_WEIGHT field */
	const BAGGAGE_WEIGHT = 'vpo_request_passenger.BAGGAGE_WEIGHT';

	/** the column name for the BAGGAGE_DESC field */
	const BAGGAGE_DESC = 'vpo_request_passenger.BAGGAGE_DESC';

	/**
	 * An identiy map to hold any loaded instances of VpoRequestPassenger objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array VpoRequestPassenger[]
	 */
	public static $instances = array();

	/**
	 * The MapBuilder instance for this peer.
	 * @var        MapBuilder
	 */
	private static $mapBuilder = null;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('Id', 'RequestId', 'FemaNo', 'FirstName', 'LastLame', 'Address1', 'Address2', 'City', 'State', 'Country', 'Zipcode', 'DayPhone', 'DayComment', 'EvePhone', 'EveComment', 'MobilePhone', 'MobileComment', 'FaxPhone', 'FaxComment', 'PagerPhone', 'PagerComment', 'OtherPhone1', 'OtherComment1', 'OtherPhone2', 'OtherComment2', 'OtherPhone3', 'OtherComment3', 'Email', 'AltEmail', 'Age', 'DateOfBirth', 'PrimaryLanguage', 'EnglishSpoken', 'Pregnant', 'OxygenRequired', 'Weight', 'Ambulatory', 'Notes', 'KnownMedicalcondition', 'BaggageWeight', 'BaggageDesc', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id', 'requestId', 'femaNo', 'firstName', 'lastLame', 'address1', 'address2', 'city', 'state', 'country', 'zipcode', 'dayPhone', 'dayComment', 'evePhone', 'eveComment', 'mobilePhone', 'mobileComment', 'faxPhone', 'faxComment', 'pagerPhone', 'pagerComment', 'otherPhone1', 'otherComment1', 'otherPhone2', 'otherComment2', 'otherPhone3', 'otherComment3', 'email', 'altEmail', 'age', 'dateOfBirth', 'primaryLanguage', 'englishSpoken', 'pregnant', 'oxygenRequired', 'weight', 'ambulatory', 'notes', 'knownMedicalcondition', 'baggageWeight', 'baggageDesc', ),
		BasePeer::TYPE_COLNAME => array (self::ID, self::REQUEST_ID, self::FEMA_NO, self::FIRST_NAME, self::LAST_LAME, self::ADDRESS1, self::ADDRESS2, self::CITY, self::STATE, self::COUNTRY, self::ZIPCODE, self::DAY_PHONE, self::DAY_COMMENT, self::EVE_PHONE, self::EVE_COMMENT, self::MOBILE_PHONE, self::MOBILE_COMMENT, self::FAX_PHONE, self::FAX_COMMENT, self::PAGER_PHONE, self::PAGER_COMMENT, self::OTHER_PHONE1, self::OTHER_COMMENT1, self::OTHER_PHONE2, self::OTHER_COMMENT2, self::OTHER_PHONE3, self::OTHER_COMMENT3, self::EMAIL, self::ALT_EMAIL, self::AGE, self::DATE_OF_BIRTH, self::PRIMARY_LANGUAGE, self::ENGLISH_SPOKEN, self::PREGNANT, self::OXYGEN_REQUIRED, self::WEIGHT, self::AMBULATORY, self::NOTES, self::KNOWN_MEDICALCONDITION, self::BAGGAGE_WEIGHT, self::BAGGAGE_DESC, ),
		BasePeer::TYPE_FIELDNAME => array ('id', 'request_id', 'fema_no', 'first_name', 'last_lame', 'address1', 'address2', 'city', 'state', 'country', 'zipcode', 'day_phone', 'day_comment', 'eve_phone', 'eve_comment', 'mobile_phone', 'mobile_comment', 'fax_phone', 'fax_comment', 'pager_phone', 'pager_comment', 'other_phone1', 'other_comment1', 'other_phone2', 'other_comment2', 'other_phone3', 'other_comment3', 'email', 'alt_email', 'age', 'date_of_birth', 'primary_language', 'english_spoken', 'pregnant', 'oxygen_required', 'weight', 'ambulatory', 'notes', 'known_medicalCondition', 'baggage_weight', 'baggage_desc', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('Id' => 0, 'RequestId' => 1, 'FemaNo' => 2, 'FirstName' => 3, 'LastLame' => 4, 'Address1' => 5, 'Address2' => 6, 'City' => 7, 'State' => 8, 'Country' => 9, 'Zipcode' => 10, 'DayPhone' => 11, 'DayComment' => 12, 'EvePhone' => 13, 'EveComment' => 14, 'MobilePhone' => 15, 'MobileComment' => 16, 'FaxPhone' => 17, 'FaxComment' => 18, 'PagerPhone' => 19, 'PagerComment' => 20, 'OtherPhone1' => 21, 'OtherComment1' => 22, 'OtherPhone2' => 23, 'OtherComment2' => 24, 'OtherPhone3' => 25, 'OtherComment3' => 26, 'Email' => 27, 'AltEmail' => 28, 'Age' => 29, 'DateOfBirth' => 30, 'PrimaryLanguage' => 31, 'EnglishSpoken' => 32, 'Pregnant' => 33, 'OxygenRequired' => 34, 'Weight' => 35, 'Ambulatory' => 36, 'Notes' => 37, 'KnownMedicalcondition' => 38, 'BaggageWeight' => 39, 'BaggageDesc' => 40, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id' => 0, 'requestId' => 1, 'femaNo' => 2, 'firstName' => 3, 'lastLame' => 4, 'address1' => 5, 'address2' => 6, 'city' => 7, 'state' => 8, 'country' => 9, 'zipcode' => 10, 'dayPhone' => 11, 'dayComment' => 12, 'evePhone' => 13, 'eveComment' => 14, 'mobilePhone' => 15, 'mobileComment' => 16, 'faxPhone' => 17, 'faxComment' => 18, 'pagerPhone' => 19, 'pagerComment' => 20, 'otherPhone1' => 21, 'otherComment1' => 22, 'otherPhone2' => 23, 'otherComment2' => 24, 'otherPhone3' => 25, 'otherComment3' => 26, 'email' => 27, 'altEmail' => 28, 'age' => 29, 'dateOfBirth' => 30, 'primaryLanguage' => 31, 'englishSpoken' => 32, 'pregnant' => 33, 'oxygenRequired' => 34, 'weight' => 35, 'ambulatory' => 36, 'notes' => 37, 'knownMedicalcondition' => 38, 'baggageWeight' => 39, 'baggageDesc' => 40, ),
		BasePeer::TYPE_COLNAME => array (self::ID => 0, self::REQUEST_ID => 1, self::FEMA_NO => 2, self::FIRST_NAME => 3, self::LAST_LAME => 4, self::ADDRESS1 => 5, self::ADDRESS2 => 6, self::CITY => 7, self::STATE => 8, self::COUNTRY => 9, self::ZIPCODE => 10, self::DAY_PHONE => 11, self::DAY_COMMENT => 12, self::EVE_PHONE => 13, self::EVE_COMMENT => 14, self::MOBILE_PHONE => 15, self::MOBILE_COMMENT => 16, self::FAX_PHONE => 17, self::FAX_COMMENT => 18, self::PAGER_PHONE => 19, self::PAGER_COMMENT => 20, self::OTHER_PHONE1 => 21, self::OTHER_COMMENT1 => 22, self::OTHER_PHONE2 => 23, self::OTHER_COMMENT2 => 24, self::OTHER_PHONE3 => 25, self::OTHER_COMMENT3 => 26, self::EMAIL => 27, self::ALT_EMAIL => 28, self::AGE => 29, self::DATE_OF_BIRTH => 30, self::PRIMARY_LANGUAGE => 31, self::ENGLISH_SPOKEN => 32, self::PREGNANT => 33, self::OXYGEN_REQUIRED => 34, self::WEIGHT => 35, self::AMBULATORY => 36, self::NOTES => 37, self::KNOWN_MEDICALCONDITION => 38, self::BAGGAGE_WEIGHT => 39, self::BAGGAGE_DESC => 40, ),
		BasePeer::TYPE_FIELDNAME => array ('id' => 0, 'request_id' => 1, 'fema_no' => 2, 'first_name' => 3, 'last_lame' => 4, 'address1' => 5, 'address2' => 6, 'city' => 7, 'state' => 8, 'country' => 9, 'zipcode' => 10, 'day_phone' => 11, 'day_comment' => 12, 'eve_phone' => 13, 'eve_comment' => 14, 'mobile_phone' => 15, 'mobile_comment' => 16, 'fax_phone' => 17, 'fax_comment' => 18, 'pager_phone' => 19, 'pager_comment' => 20, 'other_phone1' => 21, 'other_comment1' => 22, 'other_phone2' => 23, 'other_comment2' => 24, 'other_phone3' => 25, 'other_comment3' => 26, 'email' => 27, 'alt_email' => 28, 'age' => 29, 'date_of_birth' => 30, 'primary_language' => 31, 'english_spoken' => 32, 'pregnant' => 33, 'oxygen_required' => 34, 'weight' => 35, 'ambulatory' => 36, 'notes' => 37, 'known_medicalCondition' => 38, 'baggage_weight' => 39, 'baggage_desc' => 40, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, )
	);

	/**
	 * Get a (singleton) instance of the MapBuilder for this peer class.
	 * @return     MapBuilder The map builder for this peer
	 */
	public static function getMapBuilder()
	{
		if (self::$mapBuilder === null) {
			self::$mapBuilder = new VpoRequestPassengerMapBuilder();
		}
		return self::$mapBuilder;
	}
	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. VpoRequestPassengerPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(VpoRequestPassengerPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{

		$criteria->addSelectColumn(VpoRequestPassengerPeer::ID);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::REQUEST_ID);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::FEMA_NO);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::FIRST_NAME);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::LAST_LAME);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::ADDRESS1);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::ADDRESS2);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::CITY);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::STATE);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::COUNTRY);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::ZIPCODE);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::DAY_PHONE);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::DAY_COMMENT);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::EVE_PHONE);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::EVE_COMMENT);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::MOBILE_PHONE);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::MOBILE_COMMENT);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::FAX_PHONE);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::FAX_COMMENT);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::PAGER_PHONE);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::PAGER_COMMENT);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::OTHER_PHONE1);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::OTHER_COMMENT1);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::OTHER_PHONE2);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::OTHER_COMMENT2);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::OTHER_PHONE3);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::OTHER_COMMENT3);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::EMAIL);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::ALT_EMAIL);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::AGE);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::DATE_OF_BIRTH);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::PRIMARY_LANGUAGE);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::ENGLISH_SPOKEN);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::PREGNANT);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::OXYGEN_REQUIRED);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::WEIGHT);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::AMBULATORY);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::NOTES);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::KNOWN_MEDICALCONDITION);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::BAGGAGE_WEIGHT);

		$criteria->addSelectColumn(VpoRequestPassengerPeer::BAGGAGE_DESC);

	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(VpoRequestPassengerPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			VpoRequestPassengerPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(VpoRequestPassengerPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}


    foreach (sfMixer::getCallables('BaseVpoRequestPassengerPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseVpoRequestPassengerPeer', $criteria, $con);
    }


		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     VpoRequestPassenger
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = VpoRequestPassengerPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return VpoRequestPassengerPeer::populateObjects(VpoRequestPassengerPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseVpoRequestPassengerPeer:doSelectStmt:doSelectStmt') as $callable)
    {
      call_user_func($callable, 'BaseVpoRequestPassengerPeer', $criteria, $con);
    }


		if ($con === null) {
			$con = Propel::getConnection(VpoRequestPassengerPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			VpoRequestPassengerPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      VpoRequestPassenger $value A VpoRequestPassenger object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(VpoRequestPassenger $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getId();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A VpoRequestPassenger object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof VpoRequestPassenger) {
				$key = (string) $value->getId();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or VpoRequestPassenger object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     VpoRequestPassenger Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 0] === null) {
			return null;
		}
		return (string) $row[$startcol + 0];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = VpoRequestPassengerPeer::getOMClass();
		$cls = substr('.'.$cls, strrpos('.'.$cls, '.') + 1);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = VpoRequestPassengerPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = VpoRequestPassengerPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
		
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				VpoRequestPassengerPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related VpoRequest table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinVpoRequest(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(VpoRequestPassengerPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			VpoRequestPassengerPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(VpoRequestPassengerPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(VpoRequestPassengerPeer::REQUEST_ID,), array(VpoRequestPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseVpoRequestPassengerPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseVpoRequestPassengerPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of VpoRequestPassenger objects pre-filled with their VpoRequest objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of VpoRequestPassenger objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinVpoRequest(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseVpoRequestPassengerPeer:doSelectJoin:doSelectJoin') as $callable)
    {
      call_user_func($callable, 'BaseVpoRequestPassengerPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		VpoRequestPassengerPeer::addSelectColumns($c);
		$startcol = (VpoRequestPassengerPeer::NUM_COLUMNS - VpoRequestPassengerPeer::NUM_LAZY_LOAD_COLUMNS);
		VpoRequestPeer::addSelectColumns($c);

		$c->addJoin(array(VpoRequestPassengerPeer::REQUEST_ID,), array(VpoRequestPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = VpoRequestPassengerPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = VpoRequestPassengerPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = VpoRequestPassengerPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				VpoRequestPassengerPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = VpoRequestPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = VpoRequestPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = VpoRequestPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					VpoRequestPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (VpoRequestPassenger) to $obj2 (VpoRequest)
				$obj2->addVpoRequestPassenger($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(VpoRequestPassengerPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			VpoRequestPassengerPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(VpoRequestPassengerPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(VpoRequestPassengerPeer::REQUEST_ID,), array(VpoRequestPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseVpoRequestPassengerPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseVpoRequestPassengerPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of VpoRequestPassenger objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of VpoRequestPassenger objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseVpoRequestPassengerPeer:doSelectJoinAll:doSelectJoinAll') as $callable)
    {
      call_user_func($callable, 'BaseVpoRequestPassengerPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		VpoRequestPassengerPeer::addSelectColumns($c);
		$startcol2 = (VpoRequestPassengerPeer::NUM_COLUMNS - VpoRequestPassengerPeer::NUM_LAZY_LOAD_COLUMNS);

		VpoRequestPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (VpoRequestPeer::NUM_COLUMNS - VpoRequestPeer::NUM_LAZY_LOAD_COLUMNS);

		$c->addJoin(array(VpoRequestPassengerPeer::REQUEST_ID,), array(VpoRequestPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = VpoRequestPassengerPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = VpoRequestPassengerPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = VpoRequestPassengerPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				VpoRequestPassengerPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined VpoRequest rows

			$key2 = VpoRequestPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = VpoRequestPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = VpoRequestPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					VpoRequestPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (VpoRequestPassenger) to the collection in $obj2 (VpoRequest)
				$obj2->addVpoRequestPassenger($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


  static public function getUniqueColumnNames()
  {
    return array();
  }
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * This uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass()
	{
		return VpoRequestPassengerPeer::CLASS_DEFAULT;
	}

	/**
	 * Method perform an INSERT on the database, given a VpoRequestPassenger or Criteria object.
	 *
	 * @param      mixed $values Criteria or VpoRequestPassenger object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseVpoRequestPassengerPeer:doInsert:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseVpoRequestPassengerPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(VpoRequestPassengerPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from VpoRequestPassenger object
		}

		if ($criteria->containsKey(VpoRequestPassengerPeer::ID) && $criteria->keyContainsValue(VpoRequestPassengerPeer::ID) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.VpoRequestPassengerPeer::ID.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		
    foreach (sfMixer::getCallables('BaseVpoRequestPassengerPeer:doInsert:post') as $callable)
    {
      call_user_func($callable, 'BaseVpoRequestPassengerPeer', $values, $con, $pk);
    }

    return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a VpoRequestPassenger or Criteria object.
	 *
	 * @param      mixed $values Criteria or VpoRequestPassenger object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseVpoRequestPassengerPeer:doUpdate:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseVpoRequestPassengerPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(VpoRequestPassengerPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(VpoRequestPassengerPeer::ID);
			$selectCriteria->add(VpoRequestPassengerPeer::ID, $criteria->remove(VpoRequestPassengerPeer::ID), $comparison);

		} else { // $values is VpoRequestPassenger object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);
	

    foreach (sfMixer::getCallables('BaseVpoRequestPassengerPeer:doUpdate:post') as $callable)
    {
      call_user_func($callable, 'BaseVpoRequestPassengerPeer', $values, $con, $ret);
    }

    return $ret;
  }

	/**
	 * Method to DELETE all rows from the vpo_request_passenger table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(VpoRequestPassengerPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(VpoRequestPassengerPeer::TABLE_NAME, $con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a VpoRequestPassenger or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or VpoRequestPassenger object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(VpoRequestPassengerPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			VpoRequestPassengerPeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof VpoRequestPassenger) {
			// invalidate the cache for this single object
			VpoRequestPassengerPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(VpoRequestPassengerPeer::ID, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				VpoRequestPassengerPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);

			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given VpoRequestPassenger object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      VpoRequestPassenger $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(VpoRequestPassenger $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(VpoRequestPassengerPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(VpoRequestPassengerPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		$res =  BasePeer::doValidate(VpoRequestPassengerPeer::DATABASE_NAME, VpoRequestPassengerPeer::TABLE_NAME, $columns);
    if ($res !== true) {
        $request = sfContext::getInstance()->getRequest();
        foreach ($res as $failed) {
            $col = VpoRequestPassengerPeer::translateFieldname($failed->getColumn(), BasePeer::TYPE_COLNAME, BasePeer::TYPE_PHPNAME);
        }
    }

    return $res;
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     VpoRequestPassenger
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = VpoRequestPassengerPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(VpoRequestPassengerPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(VpoRequestPassengerPeer::DATABASE_NAME);
		$criteria->add(VpoRequestPassengerPeer::ID, $pk);

		$v = VpoRequestPassengerPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(VpoRequestPassengerPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(VpoRequestPassengerPeer::DATABASE_NAME);
			$criteria->add(VpoRequestPassengerPeer::ID, $pks, Criteria::IN);
			$objs = VpoRequestPassengerPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

} // BaseVpoRequestPassengerPeer

// This is the static code needed to register the MapBuilder for this table with the main Propel class.
//
// NOTE: This static code cannot call methods on the VpoRequestPassengerPeer class, because it is not defined yet.
// If you need to use overridden methods, you can add this code to the bottom of the VpoRequestPassengerPeer class:
//
// Propel::getDatabaseMap(VpoRequestPassengerPeer::DATABASE_NAME)->addTableBuilder(VpoRequestPassengerPeer::TABLE_NAME, VpoRequestPassengerPeer::getMapBuilder());
//
// Doing so will effectively overwrite the registration below.

Propel::getDatabaseMap(BaseVpoRequestPassengerPeer::DATABASE_NAME)->addTableBuilder(BaseVpoRequestPassengerPeer::TABLE_NAME, BaseVpoRequestPassengerPeer::getMapBuilder());

