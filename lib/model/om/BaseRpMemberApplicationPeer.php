<?php

/**
 * Base static class for performing query and update operations on the 'rp_member_application' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue May 24 06:33:32 2011
 *
 * @package    lib.model.om
 */
abstract class BaseRpMemberApplicationPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'rp_member_application';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.RpMemberApplication';

	/** The total number of columns. */
	const NUM_COLUMNS = 116;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the APPLICATIONID field */
	const APPLICATIONID = 'rp_member_application.APPLICATIONID';

	/** the column name for the APPLICATIONDATE field */
	const APPLICATIONDATE = 'rp_member_application.APPLICATIONDATE';

	/** the column name for the TITLE field */
	const TITLE = 'rp_member_application.TITLE';

	/** the column name for the FIRSTNAME field */
	const FIRSTNAME = 'rp_member_application.FIRSTNAME';

	/** the column name for the LASTNAME field */
	const LASTNAME = 'rp_member_application.LASTNAME';

	/** the column name for the ADDRESSONE field */
	const ADDRESSONE = 'rp_member_application.ADDRESSONE';

	/** the column name for the ADDRESSTWO field */
	const ADDRESSTWO = 'rp_member_application.ADDRESSTWO';

	/** the column name for the CITY field */
	const CITY = 'rp_member_application.CITY';

	/** the column name for the STATE field */
	const STATE = 'rp_member_application.STATE';

	/** the column name for the ZIPCODE field */
	const ZIPCODE = 'rp_member_application.ZIPCODE';

	/** the column name for the DAYPHONE field */
	const DAYPHONE = 'rp_member_application.DAYPHONE';

	/** the column name for the PILOTDAYCOMMENT field */
	const PILOTDAYCOMMENT = 'rp_member_application.PILOTDAYCOMMENT';

	/** the column name for the EVEPHONE field */
	const EVEPHONE = 'rp_member_application.EVEPHONE';

	/** the column name for the PILOTEVECOMMENT field */
	const PILOTEVECOMMENT = 'rp_member_application.PILOTEVECOMMENT';

	/** the column name for the FAXPHONE1 field */
	const FAXPHONE1 = 'rp_member_application.FAXPHONE1';

	/** the column name for the PILOTFAXCOMMENT field */
	const PILOTFAXCOMMENT = 'rp_member_application.PILOTFAXCOMMENT';

	/** the column name for the FAXPHONE2 field */
	const FAXPHONE2 = 'rp_member_application.FAXPHONE2';

	/** the column name for the PILOTFAXCOMMENT2 field */
	const PILOTFAXCOMMENT2 = 'rp_member_application.PILOTFAXCOMMENT2';

	/** the column name for the MOBILEPHONE field */
	const MOBILEPHONE = 'rp_member_application.MOBILEPHONE';

	/** the column name for the PILOTMOBILECOMMENT field */
	const PILOTMOBILECOMMENT = 'rp_member_application.PILOTMOBILECOMMENT';

	/** the column name for the PAGERPHONE field */
	const PAGERPHONE = 'rp_member_application.PAGERPHONE';

	/** the column name for the PILOTPAGERCOMMENT field */
	const PILOTPAGERCOMMENT = 'rp_member_application.PILOTPAGERCOMMENT';

	/** the column name for the OTHERPHONE field */
	const OTHERPHONE = 'rp_member_application.OTHERPHONE';

	/** the column name for the PILOTOTHERCOMMENT field */
	const PILOTOTHERCOMMENT = 'rp_member_application.PILOTOTHERCOMMENT';

	/** the column name for the EMAIL field */
	const EMAIL = 'rp_member_application.EMAIL';

	/** the column name for the PAGEEMAIL field */
	const PAGEEMAIL = 'rp_member_application.PAGEEMAIL';

	/** the column name for the SECONDARYEMAIL field */
	const SECONDARYEMAIL = 'rp_member_application.SECONDARYEMAIL';

	/** the column name for the SPOUSEFIRSTNAME field */
	const SPOUSEFIRSTNAME = 'rp_member_application.SPOUSEFIRSTNAME';

	/** the column name for the SPOUSELASTNAME field */
	const SPOUSELASTNAME = 'rp_member_application.SPOUSELASTNAME';

	/** the column name for the APPLICANTPILOT field */
	const APPLICANTPILOT = 'rp_member_application.APPLICANTPILOT';

	/** the column name for the SPOUSEPILOT field */
	const SPOUSEPILOT = 'rp_member_application.SPOUSEPILOT';

	/** the column name for the APPLICANTCOPILOT field */
	const APPLICANTCOPILOT = 'rp_member_application.APPLICANTCOPILOT';

	/** the column name for the LANGUAGESSPOKEN field */
	const LANGUAGESSPOKEN = 'rp_member_application.LANGUAGESSPOKEN';

	/** the column name for the HOMEBASE field */
	const HOMEBASE = 'rp_member_application.HOMEBASE';

	/** the column name for the FBONAME field */
	const FBONAME = 'rp_member_application.FBONAME';

	/** the column name for the APMAKE field */
	const APMAKE = 'rp_member_application.APMAKE';

	/** the column name for the APMODEL field */
	const APMODEL = 'rp_member_application.APMODEL';

	/** the column name for the AIRCRAFTPRIMARYOWN field */
	const AIRCRAFTPRIMARYOWN = 'rp_member_application.AIRCRAFTPRIMARYOWN';

	/** the column name for the AIRCRAFTPRIMARYICE field */
	const AIRCRAFTPRIMARYICE = 'rp_member_application.AIRCRAFTPRIMARYICE';

	/** the column name for the AIRCRAFTPRIMARYSEATS field */
	const AIRCRAFTPRIMARYSEATS = 'rp_member_application.AIRCRAFTPRIMARYSEATS';

	/** the column name for the AIRCRAFTPRIMARYNNUMBER field */
	const AIRCRAFTPRIMARYNNUMBER = 'rp_member_application.AIRCRAFTPRIMARYNNUMBER';

	/** the column name for the ASMAKE field */
	const ASMAKE = 'rp_member_application.ASMAKE';

	/** the column name for the ASMODEL field */
	const ASMODEL = 'rp_member_application.ASMODEL';

	/** the column name for the AIRCRAFTSECONDARYOWN field */
	const AIRCRAFTSECONDARYOWN = 'rp_member_application.AIRCRAFTSECONDARYOWN';

	/** the column name for the AIRCRAFTSECONDARYICE field */
	const AIRCRAFTSECONDARYICE = 'rp_member_application.AIRCRAFTSECONDARYICE';

	/** the column name for the AIRCRAFTSECONDARYSEATS field */
	const AIRCRAFTSECONDARYSEATS = 'rp_member_application.AIRCRAFTSECONDARYSEATS';

	/** the column name for the AIRCRAFTSECONDARYNNUMBER field */
	const AIRCRAFTSECONDARYNNUMBER = 'rp_member_application.AIRCRAFTSECONDARYNNUMBER';

	/** the column name for the PILOTCERTIFICATE field */
	const PILOTCERTIFICATE = 'rp_member_application.PILOTCERTIFICATE';

	/** the column name for the RATINGS field */
	const RATINGS = 'rp_member_application.RATINGS';

	/** the column name for the MEDICALCLASS field */
	const MEDICALCLASS = 'rp_member_application.MEDICALCLASS';

	/** the column name for the LICENSETYPE field */
	const LICENSETYPE = 'rp_member_application.LICENSETYPE';

	/** the column name for the TOTALHOURS field */
	const TOTALHOURS = 'rp_member_application.TOTALHOURS';

	/** the column name for the IFRHOURS field */
	const IFRHOURS = 'rp_member_application.IFRHOURS';

	/** the column name for the MULTIHOURS field */
	const MULTIHOURS = 'rp_member_application.MULTIHOURS';

	/** the column name for the OTHERHOURS field */
	const OTHERHOURS = 'rp_member_application.OTHERHOURS';

	/** the column name for the DATEOFBIRTH field */
	const DATEOFBIRTH = 'rp_member_application.DATEOFBIRTH';

	/** the column name for the HEIGHT field */
	const HEIGHT = 'rp_member_application.HEIGHT';

	/** the column name for the WEIGHT field */
	const WEIGHT = 'rp_member_application.WEIGHT';

	/** the column name for the AVAILABILITYWEEKDAYS field */
	const AVAILABILITYWEEKDAYS = 'rp_member_application.AVAILABILITYWEEKDAYS';

	/** the column name for the AVAILABILITYWEEKNIGHTS field */
	const AVAILABILITYWEEKNIGHTS = 'rp_member_application.AVAILABILITYWEEKNIGHTS';

	/** the column name for the AVAILABILITYWEEKENDS field */
	const AVAILABILITYWEEKENDS = 'rp_member_application.AVAILABILITYWEEKENDS';

	/** the column name for the AVAILABILITYNOTICE field */
	const AVAILABILITYNOTICE = 'rp_member_application.AVAILABILITYNOTICE';

	/** the column name for the AVAILABILITYLASTMINUTE field */
	const AVAILABILITYLASTMINUTE = 'rp_member_application.AVAILABILITYLASTMINUTE';

	/** the column name for the AVAILABILITYCOPILOT field */
	const AVAILABILITYCOPILOT = 'rp_member_application.AVAILABILITYCOPILOT';

	/** the column name for the AFFIRMATIONAGREED field */
	const AFFIRMATIONAGREED = 'rp_member_application.AFFIRMATIONAGREED';

	/** the column name for the INSURANCEAGREED field */
	const INSURANCEAGREED = 'rp_member_application.INSURANCEAGREED';

	/** the column name for the HSEATSINTEREST field */
	const HSEATSINTEREST = 'rp_member_application.HSEATSINTEREST';

	/** the column name for the VOLUNTEERINTEREST field */
	const VOLUNTEERINTEREST = 'rp_member_application.VOLUNTEERINTEREST';

	/** the column name for the COMPANYPOSITION field */
	const COMPANYPOSITION = 'rp_member_application.COMPANYPOSITION';

	/** the column name for the COMPANYMATCHFUNDS field */
	const COMPANYMATCHFUNDS = 'rp_member_application.COMPANYMATCHFUNDS';

	/** the column name for the COMPANYBUSINESSCATEGORYID field */
	const COMPANYBUSINESSCATEGORYID = 'rp_member_application.COMPANYBUSINESSCATEGORYID';

	/** the column name for the REFERRALSOURCE field */
	const REFERRALSOURCE = 'rp_member_application.REFERRALSOURCE';

	/** the column name for the REFERRALSOURCEOTHER field */
	const REFERRALSOURCEOTHER = 'rp_member_application.REFERRALSOURCEOTHER';

	/** the column name for the PREMIUMCHOICE field */
	const PREMIUMCHOICE = 'rp_member_application.PREMIUMCHOICE';

	/** the column name for the PREMIUMSIZE field */
	const PREMIUMSIZE = 'rp_member_application.PREMIUMSIZE';

	/** the column name for the DUESAMOUNTPAID field */
	const DUESAMOUNTPAID = 'rp_member_application.DUESAMOUNTPAID';

	/** the column name for the DONATIONAMOUNTPAID field */
	const DONATIONAMOUNTPAID = 'rp_member_application.DONATIONAMOUNTPAID';

	/** the column name for the METHODOFPAYMENTID field */
	const METHODOFPAYMENTID = 'rp_member_application.METHODOFPAYMENTID';

	/** the column name for the CCARDAPPROVALNUMBER field */
	const CCARDAPPROVALNUMBER = 'rp_member_application.CCARDAPPROVALNUMBER';

	/** the column name for the PROCESSEDDATE field */
	const PROCESSEDDATE = 'rp_member_application.PROCESSEDDATE';

	/** the column name for the MISSIONORIENTATION field */
	const MISSIONORIENTATION = 'rp_member_application.MISSIONORIENTATION';

	/** the column name for the MISSIONCOORDINATION field */
	const MISSIONCOORDINATION = 'rp_member_application.MISSIONCOORDINATION';

	/** the column name for the PILOTRECRUITMENT field */
	const PILOTRECRUITMENT = 'rp_member_application.PILOTRECRUITMENT';

	/** the column name for the FUNDRAISING field */
	const FUNDRAISING = 'rp_member_application.FUNDRAISING';

	/** the column name for the CELEBRITYCONTACTS field */
	const CELEBRITYCONTACTS = 'rp_member_application.CELEBRITYCONTACTS';

	/** the column name for the HOSPITALOUTREACH field */
	const HOSPITALOUTREACH = 'rp_member_application.HOSPITALOUTREACH';

	/** the column name for the MEDIARELATIONS field */
	const MEDIARELATIONS = 'rp_member_application.MEDIARELATIONS';

	/** the column name for the TELEPHONEWORK field */
	const TELEPHONEWORK = 'rp_member_application.TELEPHONEWORK';

	/** the column name for the COMPUTERS field */
	const COMPUTERS = 'rp_member_application.COMPUTERS';

	/** the column name for the CLERICAL field */
	const CLERICAL = 'rp_member_application.CLERICAL';

	/** the column name for the PUBLICITY field */
	const PUBLICITY = 'rp_member_application.PUBLICITY';

	/** the column name for the WRITING field */
	const WRITING = 'rp_member_application.WRITING';

	/** the column name for the SPEAKERSBUREAU field */
	const SPEAKERSBUREAU = 'rp_member_application.SPEAKERSBUREAU';

	/** the column name for the WINGTEAM field */
	const WINGTEAM = 'rp_member_application.WINGTEAM';

	/** the column name for the GRAPHICARTS field */
	const GRAPHICARTS = 'rp_member_application.GRAPHICARTS';

	/** the column name for the EVENTPLANNING field */
	const EVENTPLANNING = 'rp_member_application.EVENTPLANNING';

	/** the column name for the WEBINTERNET field */
	const WEBINTERNET = 'rp_member_application.WEBINTERNET';

	/** the column name for the FOUNDATIONCONTACTS field */
	const FOUNDATIONCONTACTS = 'rp_member_application.FOUNDATIONCONTACTS';

	/** the column name for the AVIATIONCONTACTS field */
	const AVIATIONCONTACTS = 'rp_member_application.AVIATIONCONTACTS';

	/** the column name for the PRINTING field */
	const PRINTING = 'rp_member_application.PRINTING';

	/** the column name for the MEMBERAOPA field */
	const MEMBERAOPA = 'rp_member_application.MEMBERAOPA';

	/** the column name for the MEMBERKIWANIS field */
	const MEMBERKIWANIS = 'rp_member_application.MEMBERKIWANIS';

	/** the column name for the MEMBERROTARY field */
	const MEMBERROTARY = 'rp_member_application.MEMBERROTARY';

	/** the column name for the MEMBERLIONS field */
	const MEMBERLIONS = 'rp_member_application.MEMBERLIONS';

	/** the column name for the MEMBERNINETYNINES field */
	const MEMBERNINETYNINES = 'rp_member_application.MEMBERNINETYNINES';

	/** the column name for the MEMBERWIA field */
	const MEMBERWIA = 'rp_member_application.MEMBERWIA';

	/** the column name for the EDNEWMEMBERNOTIFY field */
	const EDNEWMEMBERNOTIFY = 'rp_member_application.EDNEWMEMBERNOTIFY';

	/** the column name for the WNEWMEMBERNOTIFY field */
	const WNEWMEMBERNOTIFY = 'rp_member_application.WNEWMEMBERNOTIFY';

	/** the column name for the BADGEMADE field */
	const BADGEMADE = 'rp_member_application.BADGEMADE';

	/** the column name for the NOTEBOOKSENT field */
	const NOTEBOOKSENT = 'rp_member_application.NOTEBOOKSENT';

	/** the column name for the EXTERNALID field */
	const EXTERNALID = 'rp_member_application.EXTERNALID';

	/** the column name for the NOVAPOINTEID field */
	const NOVAPOINTEID = 'rp_member_application.NOVAPOINTEID';

	/** the column name for the PREMIUMSHIPDATE field */
	const PREMIUMSHIPDATE = 'rp_member_application.PREMIUMSHIPDATE';

	/** the column name for the PREMIUMSHIPMETHOD field */
	const PREMIUMSHIPMETHOD = 'rp_member_application.PREMIUMSHIPMETHOD';

	/** the column name for the PREMIUMSHIPTRACKINGNUMBER field */
	const PREMIUMSHIPTRACKINGNUMBER = 'rp_member_application.PREMIUMSHIPTRACKINGNUMBER';

	/** the column name for the ID field */
	const ID = 'rp_member_application.ID';

	/**
	 * An identiy map to hold any loaded instances of RpMemberApplication objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array RpMemberApplication[]
	 */
	public static $instances = array();

	/**
	 * The MapBuilder instance for this peer.
	 * @var        MapBuilder
	 */
	private static $mapBuilder = null;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('Applicationid', 'Applicationdate', 'Title', 'Firstname', 'Lastname', 'Addressone', 'Addresstwo', 'City', 'State', 'Zipcode', 'Dayphone', 'Pilotdaycomment', 'Evephone', 'Pilotevecomment', 'Faxphone1', 'Pilotfaxcomment', 'Faxphone2', 'Pilotfaxcomment2', 'Mobilephone', 'Pilotmobilecomment', 'Pagerphone', 'Pilotpagercomment', 'Otherphone', 'Pilotothercomment', 'Email', 'Pageemail', 'Secondaryemail', 'Spousefirstname', 'Spouselastname', 'Applicantpilot', 'Spousepilot', 'Applicantcopilot', 'Languagesspoken', 'Homebase', 'Fboname', 'Apmake', 'Apmodel', 'Aircraftprimaryown', 'Aircraftprimaryice', 'Aircraftprimaryseats', 'Aircraftprimarynnumber', 'Asmake', 'Asmodel', 'Aircraftsecondaryown', 'Aircraftsecondaryice', 'Aircraftsecondaryseats', 'Aircraftsecondarynnumber', 'Pilotcertificate', 'Ratings', 'Medicalclass', 'Licensetype', 'Totalhours', 'Ifrhours', 'Multihours', 'Otherhours', 'Dateofbirth', 'Height', 'Weight', 'Availabilityweekdays', 'Availabilityweeknights', 'Availabilityweekends', 'Availabilitynotice', 'Availabilitylastminute', 'Availabilitycopilot', 'Affirmationagreed', 'Insuranceagreed', 'Hseatsinterest', 'Volunteerinterest', 'Companyposition', 'Companymatchfunds', 'Companybusinesscategoryid', 'Referralsource', 'Referralsourceother', 'Premiumchoice', 'Premiumsize', 'Duesamountpaid', 'Donationamountpaid', 'Methodofpaymentid', 'Ccardapprovalnumber', 'Processeddate', 'Missionorientation', 'Missioncoordination', 'Pilotrecruitment', 'Fundraising', 'Celebritycontacts', 'Hospitaloutreach', 'Mediarelations', 'Telephonework', 'Computers', 'Clerical', 'Publicity', 'Writing', 'Speakersbureau', 'Wingteam', 'Graphicarts', 'Eventplanning', 'Webinternet', 'Foundationcontacts', 'Aviationcontacts', 'Printing', 'Memberaopa', 'Memberkiwanis', 'Memberrotary', 'Memberlions', 'Memberninetynines', 'Memberwia', 'Ednewmembernotify', 'Wnewmembernotify', 'Badgemade', 'Notebooksent', 'Externalid', 'Novapointeid', 'Premiumshipdate', 'Premiumshipmethod', 'Premiumshiptrackingnumber', 'Id', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('applicationid', 'applicationdate', 'title', 'firstname', 'lastname', 'addressone', 'addresstwo', 'city', 'state', 'zipcode', 'dayphone', 'pilotdaycomment', 'evephone', 'pilotevecomment', 'faxphone1', 'pilotfaxcomment', 'faxphone2', 'pilotfaxcomment2', 'mobilephone', 'pilotmobilecomment', 'pagerphone', 'pilotpagercomment', 'otherphone', 'pilotothercomment', 'email', 'pageemail', 'secondaryemail', 'spousefirstname', 'spouselastname', 'applicantpilot', 'spousepilot', 'applicantcopilot', 'languagesspoken', 'homebase', 'fboname', 'apmake', 'apmodel', 'aircraftprimaryown', 'aircraftprimaryice', 'aircraftprimaryseats', 'aircraftprimarynnumber', 'asmake', 'asmodel', 'aircraftsecondaryown', 'aircraftsecondaryice', 'aircraftsecondaryseats', 'aircraftsecondarynnumber', 'pilotcertificate', 'ratings', 'medicalclass', 'licensetype', 'totalhours', 'ifrhours', 'multihours', 'otherhours', 'dateofbirth', 'height', 'weight', 'availabilityweekdays', 'availabilityweeknights', 'availabilityweekends', 'availabilitynotice', 'availabilitylastminute', 'availabilitycopilot', 'affirmationagreed', 'insuranceagreed', 'hseatsinterest', 'volunteerinterest', 'companyposition', 'companymatchfunds', 'companybusinesscategoryid', 'referralsource', 'referralsourceother', 'premiumchoice', 'premiumsize', 'duesamountpaid', 'donationamountpaid', 'methodofpaymentid', 'ccardapprovalnumber', 'processeddate', 'missionorientation', 'missioncoordination', 'pilotrecruitment', 'fundraising', 'celebritycontacts', 'hospitaloutreach', 'mediarelations', 'telephonework', 'computers', 'clerical', 'publicity', 'writing', 'speakersbureau', 'wingteam', 'graphicarts', 'eventplanning', 'webinternet', 'foundationcontacts', 'aviationcontacts', 'printing', 'memberaopa', 'memberkiwanis', 'memberrotary', 'memberlions', 'memberninetynines', 'memberwia', 'ednewmembernotify', 'wnewmembernotify', 'badgemade', 'notebooksent', 'externalid', 'novapointeid', 'premiumshipdate', 'premiumshipmethod', 'premiumshiptrackingnumber', 'id', ),
		BasePeer::TYPE_COLNAME => array (self::APPLICATIONID, self::APPLICATIONDATE, self::TITLE, self::FIRSTNAME, self::LASTNAME, self::ADDRESSONE, self::ADDRESSTWO, self::CITY, self::STATE, self::ZIPCODE, self::DAYPHONE, self::PILOTDAYCOMMENT, self::EVEPHONE, self::PILOTEVECOMMENT, self::FAXPHONE1, self::PILOTFAXCOMMENT, self::FAXPHONE2, self::PILOTFAXCOMMENT2, self::MOBILEPHONE, self::PILOTMOBILECOMMENT, self::PAGERPHONE, self::PILOTPAGERCOMMENT, self::OTHERPHONE, self::PILOTOTHERCOMMENT, self::EMAIL, self::PAGEEMAIL, self::SECONDARYEMAIL, self::SPOUSEFIRSTNAME, self::SPOUSELASTNAME, self::APPLICANTPILOT, self::SPOUSEPILOT, self::APPLICANTCOPILOT, self::LANGUAGESSPOKEN, self::HOMEBASE, self::FBONAME, self::APMAKE, self::APMODEL, self::AIRCRAFTPRIMARYOWN, self::AIRCRAFTPRIMARYICE, self::AIRCRAFTPRIMARYSEATS, self::AIRCRAFTPRIMARYNNUMBER, self::ASMAKE, self::ASMODEL, self::AIRCRAFTSECONDARYOWN, self::AIRCRAFTSECONDARYICE, self::AIRCRAFTSECONDARYSEATS, self::AIRCRAFTSECONDARYNNUMBER, self::PILOTCERTIFICATE, self::RATINGS, self::MEDICALCLASS, self::LICENSETYPE, self::TOTALHOURS, self::IFRHOURS, self::MULTIHOURS, self::OTHERHOURS, self::DATEOFBIRTH, self::HEIGHT, self::WEIGHT, self::AVAILABILITYWEEKDAYS, self::AVAILABILITYWEEKNIGHTS, self::AVAILABILITYWEEKENDS, self::AVAILABILITYNOTICE, self::AVAILABILITYLASTMINUTE, self::AVAILABILITYCOPILOT, self::AFFIRMATIONAGREED, self::INSURANCEAGREED, self::HSEATSINTEREST, self::VOLUNTEERINTEREST, self::COMPANYPOSITION, self::COMPANYMATCHFUNDS, self::COMPANYBUSINESSCATEGORYID, self::REFERRALSOURCE, self::REFERRALSOURCEOTHER, self::PREMIUMCHOICE, self::PREMIUMSIZE, self::DUESAMOUNTPAID, self::DONATIONAMOUNTPAID, self::METHODOFPAYMENTID, self::CCARDAPPROVALNUMBER, self::PROCESSEDDATE, self::MISSIONORIENTATION, self::MISSIONCOORDINATION, self::PILOTRECRUITMENT, self::FUNDRAISING, self::CELEBRITYCONTACTS, self::HOSPITALOUTREACH, self::MEDIARELATIONS, self::TELEPHONEWORK, self::COMPUTERS, self::CLERICAL, self::PUBLICITY, self::WRITING, self::SPEAKERSBUREAU, self::WINGTEAM, self::GRAPHICARTS, self::EVENTPLANNING, self::WEBINTERNET, self::FOUNDATIONCONTACTS, self::AVIATIONCONTACTS, self::PRINTING, self::MEMBERAOPA, self::MEMBERKIWANIS, self::MEMBERROTARY, self::MEMBERLIONS, self::MEMBERNINETYNINES, self::MEMBERWIA, self::EDNEWMEMBERNOTIFY, self::WNEWMEMBERNOTIFY, self::BADGEMADE, self::NOTEBOOKSENT, self::EXTERNALID, self::NOVAPOINTEID, self::PREMIUMSHIPDATE, self::PREMIUMSHIPMETHOD, self::PREMIUMSHIPTRACKINGNUMBER, self::ID, ),
		BasePeer::TYPE_FIELDNAME => array ('applicationID', 'applicationDate', 'title', 'firstName', 'lastName', 'addressOne', 'addressTwo', 'city', 'state', 'zipcode', 'dayPhone', 'pilotDayComment', 'evePhone', 'pilotEveComment', 'faxPhone1', 'pilotFaxComment', 'faxPhone2', 'pilotFaxComment2', 'mobilePhone', 'pilotMobileComment', 'pagerPhone', 'pilotPagerComment', 'otherPhone', 'pilotOtherComment', 'email', 'pageEmail', 'secondaryEmail', 'spouseFirstName', 'spouseLastName', 'applicantPilot', 'spousePilot', 'applicantCopilot', 'languagesSpoken', 'homeBase', 'fboName', 'apMake', 'apModel', 'aircraftPrimaryOwn', 'aircraftPrimaryIce', 'aircraftPrimarySeats', 'aircraftPrimaryNNumber', 'asMake', 'asModel', 'aircraftSecondaryOwn', 'aircraftSecondaryIce', 'aircraftSecondarySeats', 'aircraftSecondaryNNumber', 'pilotCertificate', 'ratings', 'medicalClass', 'licenseType', 'totalHours', 'ifrHours', 'multiHours', 'otherHours', 'dateOfBirth', 'height', 'weight', 'availabilityWeekdays', 'availabilityWeeknights', 'availabilityWeekends', 'availabilityNotice', 'availabilityLastMinute', 'availabilityCopilot', 'affirmationAgreed', 'insuranceAgreed', 'hseatsInterest', 'volunteerInterest', 'companyPosition', 'companyMatchFunds', 'companyBusinessCategoryID', 'referralSource', 'referralSourceOther', 'premiumChoice', 'premiumSize', 'duesAmountPaid', 'donationAmountPaid', 'methodOfPaymentID', 'ccardApprovalNumber', 'processedDate', 'missionOrientation', 'missionCoordination', 'pilotRecruitment', 'fundRaising', 'celebrityContacts', 'hospitalOutreach', 'mediaRelations', 'telephoneWork', 'computers', 'clerical', 'publicity', 'writing', 'speakersBureau', 'wingTeam', 'graphicArts', 'eventPlanning', 'webInternet', 'foundationContacts', 'aviationContacts', 'printing', 'memberAOPA', 'memberKiwanis', 'memberRotary', 'memberLions', 'memberNinetyNines', 'memberWIA', 'EDNewMemberNotify', 'WNewMemberNotify', 'badgeMade', 'notebookSent', 'externalID', 'novapointeID', 'premiumShipDate', 'premiumShipMethod', 'premiumShipTrackingNumber', 'id', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('Applicationid' => 0, 'Applicationdate' => 1, 'Title' => 2, 'Firstname' => 3, 'Lastname' => 4, 'Addressone' => 5, 'Addresstwo' => 6, 'City' => 7, 'State' => 8, 'Zipcode' => 9, 'Dayphone' => 10, 'Pilotdaycomment' => 11, 'Evephone' => 12, 'Pilotevecomment' => 13, 'Faxphone1' => 14, 'Pilotfaxcomment' => 15, 'Faxphone2' => 16, 'Pilotfaxcomment2' => 17, 'Mobilephone' => 18, 'Pilotmobilecomment' => 19, 'Pagerphone' => 20, 'Pilotpagercomment' => 21, 'Otherphone' => 22, 'Pilotothercomment' => 23, 'Email' => 24, 'Pageemail' => 25, 'Secondaryemail' => 26, 'Spousefirstname' => 27, 'Spouselastname' => 28, 'Applicantpilot' => 29, 'Spousepilot' => 30, 'Applicantcopilot' => 31, 'Languagesspoken' => 32, 'Homebase' => 33, 'Fboname' => 34, 'Apmake' => 35, 'Apmodel' => 36, 'Aircraftprimaryown' => 37, 'Aircraftprimaryice' => 38, 'Aircraftprimaryseats' => 39, 'Aircraftprimarynnumber' => 40, 'Asmake' => 41, 'Asmodel' => 42, 'Aircraftsecondaryown' => 43, 'Aircraftsecondaryice' => 44, 'Aircraftsecondaryseats' => 45, 'Aircraftsecondarynnumber' => 46, 'Pilotcertificate' => 47, 'Ratings' => 48, 'Medicalclass' => 49, 'Licensetype' => 50, 'Totalhours' => 51, 'Ifrhours' => 52, 'Multihours' => 53, 'Otherhours' => 54, 'Dateofbirth' => 55, 'Height' => 56, 'Weight' => 57, 'Availabilityweekdays' => 58, 'Availabilityweeknights' => 59, 'Availabilityweekends' => 60, 'Availabilitynotice' => 61, 'Availabilitylastminute' => 62, 'Availabilitycopilot' => 63, 'Affirmationagreed' => 64, 'Insuranceagreed' => 65, 'Hseatsinterest' => 66, 'Volunteerinterest' => 67, 'Companyposition' => 68, 'Companymatchfunds' => 69, 'Companybusinesscategoryid' => 70, 'Referralsource' => 71, 'Referralsourceother' => 72, 'Premiumchoice' => 73, 'Premiumsize' => 74, 'Duesamountpaid' => 75, 'Donationamountpaid' => 76, 'Methodofpaymentid' => 77, 'Ccardapprovalnumber' => 78, 'Processeddate' => 79, 'Missionorientation' => 80, 'Missioncoordination' => 81, 'Pilotrecruitment' => 82, 'Fundraising' => 83, 'Celebritycontacts' => 84, 'Hospitaloutreach' => 85, 'Mediarelations' => 86, 'Telephonework' => 87, 'Computers' => 88, 'Clerical' => 89, 'Publicity' => 90, 'Writing' => 91, 'Speakersbureau' => 92, 'Wingteam' => 93, 'Graphicarts' => 94, 'Eventplanning' => 95, 'Webinternet' => 96, 'Foundationcontacts' => 97, 'Aviationcontacts' => 98, 'Printing' => 99, 'Memberaopa' => 100, 'Memberkiwanis' => 101, 'Memberrotary' => 102, 'Memberlions' => 103, 'Memberninetynines' => 104, 'Memberwia' => 105, 'Ednewmembernotify' => 106, 'Wnewmembernotify' => 107, 'Badgemade' => 108, 'Notebooksent' => 109, 'Externalid' => 110, 'Novapointeid' => 111, 'Premiumshipdate' => 112, 'Premiumshipmethod' => 113, 'Premiumshiptrackingnumber' => 114, 'Id' => 115, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('applicationid' => 0, 'applicationdate' => 1, 'title' => 2, 'firstname' => 3, 'lastname' => 4, 'addressone' => 5, 'addresstwo' => 6, 'city' => 7, 'state' => 8, 'zipcode' => 9, 'dayphone' => 10, 'pilotdaycomment' => 11, 'evephone' => 12, 'pilotevecomment' => 13, 'faxphone1' => 14, 'pilotfaxcomment' => 15, 'faxphone2' => 16, 'pilotfaxcomment2' => 17, 'mobilephone' => 18, 'pilotmobilecomment' => 19, 'pagerphone' => 20, 'pilotpagercomment' => 21, 'otherphone' => 22, 'pilotothercomment' => 23, 'email' => 24, 'pageemail' => 25, 'secondaryemail' => 26, 'spousefirstname' => 27, 'spouselastname' => 28, 'applicantpilot' => 29, 'spousepilot' => 30, 'applicantcopilot' => 31, 'languagesspoken' => 32, 'homebase' => 33, 'fboname' => 34, 'apmake' => 35, 'apmodel' => 36, 'aircraftprimaryown' => 37, 'aircraftprimaryice' => 38, 'aircraftprimaryseats' => 39, 'aircraftprimarynnumber' => 40, 'asmake' => 41, 'asmodel' => 42, 'aircraftsecondaryown' => 43, 'aircraftsecondaryice' => 44, 'aircraftsecondaryseats' => 45, 'aircraftsecondarynnumber' => 46, 'pilotcertificate' => 47, 'ratings' => 48, 'medicalclass' => 49, 'licensetype' => 50, 'totalhours' => 51, 'ifrhours' => 52, 'multihours' => 53, 'otherhours' => 54, 'dateofbirth' => 55, 'height' => 56, 'weight' => 57, 'availabilityweekdays' => 58, 'availabilityweeknights' => 59, 'availabilityweekends' => 60, 'availabilitynotice' => 61, 'availabilitylastminute' => 62, 'availabilitycopilot' => 63, 'affirmationagreed' => 64, 'insuranceagreed' => 65, 'hseatsinterest' => 66, 'volunteerinterest' => 67, 'companyposition' => 68, 'companymatchfunds' => 69, 'companybusinesscategoryid' => 70, 'referralsource' => 71, 'referralsourceother' => 72, 'premiumchoice' => 73, 'premiumsize' => 74, 'duesamountpaid' => 75, 'donationamountpaid' => 76, 'methodofpaymentid' => 77, 'ccardapprovalnumber' => 78, 'processeddate' => 79, 'missionorientation' => 80, 'missioncoordination' => 81, 'pilotrecruitment' => 82, 'fundraising' => 83, 'celebritycontacts' => 84, 'hospitaloutreach' => 85, 'mediarelations' => 86, 'telephonework' => 87, 'computers' => 88, 'clerical' => 89, 'publicity' => 90, 'writing' => 91, 'speakersbureau' => 92, 'wingteam' => 93, 'graphicarts' => 94, 'eventplanning' => 95, 'webinternet' => 96, 'foundationcontacts' => 97, 'aviationcontacts' => 98, 'printing' => 99, 'memberaopa' => 100, 'memberkiwanis' => 101, 'memberrotary' => 102, 'memberlions' => 103, 'memberninetynines' => 104, 'memberwia' => 105, 'ednewmembernotify' => 106, 'wnewmembernotify' => 107, 'badgemade' => 108, 'notebooksent' => 109, 'externalid' => 110, 'novapointeid' => 111, 'premiumshipdate' => 112, 'premiumshipmethod' => 113, 'premiumshiptrackingnumber' => 114, 'id' => 115, ),
		BasePeer::TYPE_COLNAME => array (self::APPLICATIONID => 0, self::APPLICATIONDATE => 1, self::TITLE => 2, self::FIRSTNAME => 3, self::LASTNAME => 4, self::ADDRESSONE => 5, self::ADDRESSTWO => 6, self::CITY => 7, self::STATE => 8, self::ZIPCODE => 9, self::DAYPHONE => 10, self::PILOTDAYCOMMENT => 11, self::EVEPHONE => 12, self::PILOTEVECOMMENT => 13, self::FAXPHONE1 => 14, self::PILOTFAXCOMMENT => 15, self::FAXPHONE2 => 16, self::PILOTFAXCOMMENT2 => 17, self::MOBILEPHONE => 18, self::PILOTMOBILECOMMENT => 19, self::PAGERPHONE => 20, self::PILOTPAGERCOMMENT => 21, self::OTHERPHONE => 22, self::PILOTOTHERCOMMENT => 23, self::EMAIL => 24, self::PAGEEMAIL => 25, self::SECONDARYEMAIL => 26, self::SPOUSEFIRSTNAME => 27, self::SPOUSELASTNAME => 28, self::APPLICANTPILOT => 29, self::SPOUSEPILOT => 30, self::APPLICANTCOPILOT => 31, self::LANGUAGESSPOKEN => 32, self::HOMEBASE => 33, self::FBONAME => 34, self::APMAKE => 35, self::APMODEL => 36, self::AIRCRAFTPRIMARYOWN => 37, self::AIRCRAFTPRIMARYICE => 38, self::AIRCRAFTPRIMARYSEATS => 39, self::AIRCRAFTPRIMARYNNUMBER => 40, self::ASMAKE => 41, self::ASMODEL => 42, self::AIRCRAFTSECONDARYOWN => 43, self::AIRCRAFTSECONDARYICE => 44, self::AIRCRAFTSECONDARYSEATS => 45, self::AIRCRAFTSECONDARYNNUMBER => 46, self::PILOTCERTIFICATE => 47, self::RATINGS => 48, self::MEDICALCLASS => 49, self::LICENSETYPE => 50, self::TOTALHOURS => 51, self::IFRHOURS => 52, self::MULTIHOURS => 53, self::OTHERHOURS => 54, self::DATEOFBIRTH => 55, self::HEIGHT => 56, self::WEIGHT => 57, self::AVAILABILITYWEEKDAYS => 58, self::AVAILABILITYWEEKNIGHTS => 59, self::AVAILABILITYWEEKENDS => 60, self::AVAILABILITYNOTICE => 61, self::AVAILABILITYLASTMINUTE => 62, self::AVAILABILITYCOPILOT => 63, self::AFFIRMATIONAGREED => 64, self::INSURANCEAGREED => 65, self::HSEATSINTEREST => 66, self::VOLUNTEERINTEREST => 67, self::COMPANYPOSITION => 68, self::COMPANYMATCHFUNDS => 69, self::COMPANYBUSINESSCATEGORYID => 70, self::REFERRALSOURCE => 71, self::REFERRALSOURCEOTHER => 72, self::PREMIUMCHOICE => 73, self::PREMIUMSIZE => 74, self::DUESAMOUNTPAID => 75, self::DONATIONAMOUNTPAID => 76, self::METHODOFPAYMENTID => 77, self::CCARDAPPROVALNUMBER => 78, self::PROCESSEDDATE => 79, self::MISSIONORIENTATION => 80, self::MISSIONCOORDINATION => 81, self::PILOTRECRUITMENT => 82, self::FUNDRAISING => 83, self::CELEBRITYCONTACTS => 84, self::HOSPITALOUTREACH => 85, self::MEDIARELATIONS => 86, self::TELEPHONEWORK => 87, self::COMPUTERS => 88, self::CLERICAL => 89, self::PUBLICITY => 90, self::WRITING => 91, self::SPEAKERSBUREAU => 92, self::WINGTEAM => 93, self::GRAPHICARTS => 94, self::EVENTPLANNING => 95, self::WEBINTERNET => 96, self::FOUNDATIONCONTACTS => 97, self::AVIATIONCONTACTS => 98, self::PRINTING => 99, self::MEMBERAOPA => 100, self::MEMBERKIWANIS => 101, self::MEMBERROTARY => 102, self::MEMBERLIONS => 103, self::MEMBERNINETYNINES => 104, self::MEMBERWIA => 105, self::EDNEWMEMBERNOTIFY => 106, self::WNEWMEMBERNOTIFY => 107, self::BADGEMADE => 108, self::NOTEBOOKSENT => 109, self::EXTERNALID => 110, self::NOVAPOINTEID => 111, self::PREMIUMSHIPDATE => 112, self::PREMIUMSHIPMETHOD => 113, self::PREMIUMSHIPTRACKINGNUMBER => 114, self::ID => 115, ),
		BasePeer::TYPE_FIELDNAME => array ('applicationID' => 0, 'applicationDate' => 1, 'title' => 2, 'firstName' => 3, 'lastName' => 4, 'addressOne' => 5, 'addressTwo' => 6, 'city' => 7, 'state' => 8, 'zipcode' => 9, 'dayPhone' => 10, 'pilotDayComment' => 11, 'evePhone' => 12, 'pilotEveComment' => 13, 'faxPhone1' => 14, 'pilotFaxComment' => 15, 'faxPhone2' => 16, 'pilotFaxComment2' => 17, 'mobilePhone' => 18, 'pilotMobileComment' => 19, 'pagerPhone' => 20, 'pilotPagerComment' => 21, 'otherPhone' => 22, 'pilotOtherComment' => 23, 'email' => 24, 'pageEmail' => 25, 'secondaryEmail' => 26, 'spouseFirstName' => 27, 'spouseLastName' => 28, 'applicantPilot' => 29, 'spousePilot' => 30, 'applicantCopilot' => 31, 'languagesSpoken' => 32, 'homeBase' => 33, 'fboName' => 34, 'apMake' => 35, 'apModel' => 36, 'aircraftPrimaryOwn' => 37, 'aircraftPrimaryIce' => 38, 'aircraftPrimarySeats' => 39, 'aircraftPrimaryNNumber' => 40, 'asMake' => 41, 'asModel' => 42, 'aircraftSecondaryOwn' => 43, 'aircraftSecondaryIce' => 44, 'aircraftSecondarySeats' => 45, 'aircraftSecondaryNNumber' => 46, 'pilotCertificate' => 47, 'ratings' => 48, 'medicalClass' => 49, 'licenseType' => 50, 'totalHours' => 51, 'ifrHours' => 52, 'multiHours' => 53, 'otherHours' => 54, 'dateOfBirth' => 55, 'height' => 56, 'weight' => 57, 'availabilityWeekdays' => 58, 'availabilityWeeknights' => 59, 'availabilityWeekends' => 60, 'availabilityNotice' => 61, 'availabilityLastMinute' => 62, 'availabilityCopilot' => 63, 'affirmationAgreed' => 64, 'insuranceAgreed' => 65, 'hseatsInterest' => 66, 'volunteerInterest' => 67, 'companyPosition' => 68, 'companyMatchFunds' => 69, 'companyBusinessCategoryID' => 70, 'referralSource' => 71, 'referralSourceOther' => 72, 'premiumChoice' => 73, 'premiumSize' => 74, 'duesAmountPaid' => 75, 'donationAmountPaid' => 76, 'methodOfPaymentID' => 77, 'ccardApprovalNumber' => 78, 'processedDate' => 79, 'missionOrientation' => 80, 'missionCoordination' => 81, 'pilotRecruitment' => 82, 'fundRaising' => 83, 'celebrityContacts' => 84, 'hospitalOutreach' => 85, 'mediaRelations' => 86, 'telephoneWork' => 87, 'computers' => 88, 'clerical' => 89, 'publicity' => 90, 'writing' => 91, 'speakersBureau' => 92, 'wingTeam' => 93, 'graphicArts' => 94, 'eventPlanning' => 95, 'webInternet' => 96, 'foundationContacts' => 97, 'aviationContacts' => 98, 'printing' => 99, 'memberAOPA' => 100, 'memberKiwanis' => 101, 'memberRotary' => 102, 'memberLions' => 103, 'memberNinetyNines' => 104, 'memberWIA' => 105, 'EDNewMemberNotify' => 106, 'WNewMemberNotify' => 107, 'badgeMade' => 108, 'notebookSent' => 109, 'externalID' => 110, 'novapointeID' => 111, 'premiumShipDate' => 112, 'premiumShipMethod' => 113, 'premiumShipTrackingNumber' => 114, 'id' => 115, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, )
	);

	/**
	 * Get a (singleton) instance of the MapBuilder for this peer class.
	 * @return     MapBuilder The map builder for this peer
	 */
	public static function getMapBuilder()
	{
		if (self::$mapBuilder === null) {
			self::$mapBuilder = new RpMemberApplicationMapBuilder();
		}
		return self::$mapBuilder;
	}
	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. RpMemberApplicationPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(RpMemberApplicationPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{

		$criteria->addSelectColumn(RpMemberApplicationPeer::APPLICATIONID);

		$criteria->addSelectColumn(RpMemberApplicationPeer::APPLICATIONDATE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::TITLE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::FIRSTNAME);

		$criteria->addSelectColumn(RpMemberApplicationPeer::LASTNAME);

		$criteria->addSelectColumn(RpMemberApplicationPeer::ADDRESSONE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::ADDRESSTWO);

		$criteria->addSelectColumn(RpMemberApplicationPeer::CITY);

		$criteria->addSelectColumn(RpMemberApplicationPeer::STATE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::ZIPCODE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::DAYPHONE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PILOTDAYCOMMENT);

		$criteria->addSelectColumn(RpMemberApplicationPeer::EVEPHONE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PILOTEVECOMMENT);

		$criteria->addSelectColumn(RpMemberApplicationPeer::FAXPHONE1);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PILOTFAXCOMMENT);

		$criteria->addSelectColumn(RpMemberApplicationPeer::FAXPHONE2);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PILOTFAXCOMMENT2);

		$criteria->addSelectColumn(RpMemberApplicationPeer::MOBILEPHONE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PILOTMOBILECOMMENT);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PAGERPHONE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PILOTPAGERCOMMENT);

		$criteria->addSelectColumn(RpMemberApplicationPeer::OTHERPHONE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PILOTOTHERCOMMENT);

		$criteria->addSelectColumn(RpMemberApplicationPeer::EMAIL);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PAGEEMAIL);

		$criteria->addSelectColumn(RpMemberApplicationPeer::SECONDARYEMAIL);

		$criteria->addSelectColumn(RpMemberApplicationPeer::SPOUSEFIRSTNAME);

		$criteria->addSelectColumn(RpMemberApplicationPeer::SPOUSELASTNAME);

		$criteria->addSelectColumn(RpMemberApplicationPeer::APPLICANTPILOT);

		$criteria->addSelectColumn(RpMemberApplicationPeer::SPOUSEPILOT);

		$criteria->addSelectColumn(RpMemberApplicationPeer::APPLICANTCOPILOT);

		$criteria->addSelectColumn(RpMemberApplicationPeer::LANGUAGESSPOKEN);

		$criteria->addSelectColumn(RpMemberApplicationPeer::HOMEBASE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::FBONAME);

		$criteria->addSelectColumn(RpMemberApplicationPeer::APMAKE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::APMODEL);

		$criteria->addSelectColumn(RpMemberApplicationPeer::AIRCRAFTPRIMARYOWN);

		$criteria->addSelectColumn(RpMemberApplicationPeer::AIRCRAFTPRIMARYICE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::AIRCRAFTPRIMARYSEATS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::AIRCRAFTPRIMARYNNUMBER);

		$criteria->addSelectColumn(RpMemberApplicationPeer::ASMAKE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::ASMODEL);

		$criteria->addSelectColumn(RpMemberApplicationPeer::AIRCRAFTSECONDARYOWN);

		$criteria->addSelectColumn(RpMemberApplicationPeer::AIRCRAFTSECONDARYICE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::AIRCRAFTSECONDARYSEATS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::AIRCRAFTSECONDARYNNUMBER);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PILOTCERTIFICATE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::RATINGS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::MEDICALCLASS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::LICENSETYPE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::TOTALHOURS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::IFRHOURS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::MULTIHOURS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::OTHERHOURS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::DATEOFBIRTH);

		$criteria->addSelectColumn(RpMemberApplicationPeer::HEIGHT);

		$criteria->addSelectColumn(RpMemberApplicationPeer::WEIGHT);

		$criteria->addSelectColumn(RpMemberApplicationPeer::AVAILABILITYWEEKDAYS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::AVAILABILITYWEEKNIGHTS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::AVAILABILITYWEEKENDS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::AVAILABILITYNOTICE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::AVAILABILITYLASTMINUTE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::AVAILABILITYCOPILOT);

		$criteria->addSelectColumn(RpMemberApplicationPeer::AFFIRMATIONAGREED);

		$criteria->addSelectColumn(RpMemberApplicationPeer::INSURANCEAGREED);

		$criteria->addSelectColumn(RpMemberApplicationPeer::HSEATSINTEREST);

		$criteria->addSelectColumn(RpMemberApplicationPeer::VOLUNTEERINTEREST);

		$criteria->addSelectColumn(RpMemberApplicationPeer::COMPANYPOSITION);

		$criteria->addSelectColumn(RpMemberApplicationPeer::COMPANYMATCHFUNDS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::COMPANYBUSINESSCATEGORYID);

		$criteria->addSelectColumn(RpMemberApplicationPeer::REFERRALSOURCE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::REFERRALSOURCEOTHER);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PREMIUMCHOICE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PREMIUMSIZE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::DUESAMOUNTPAID);

		$criteria->addSelectColumn(RpMemberApplicationPeer::DONATIONAMOUNTPAID);

		$criteria->addSelectColumn(RpMemberApplicationPeer::METHODOFPAYMENTID);

		$criteria->addSelectColumn(RpMemberApplicationPeer::CCARDAPPROVALNUMBER);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PROCESSEDDATE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::MISSIONORIENTATION);

		$criteria->addSelectColumn(RpMemberApplicationPeer::MISSIONCOORDINATION);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PILOTRECRUITMENT);

		$criteria->addSelectColumn(RpMemberApplicationPeer::FUNDRAISING);

		$criteria->addSelectColumn(RpMemberApplicationPeer::CELEBRITYCONTACTS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::HOSPITALOUTREACH);

		$criteria->addSelectColumn(RpMemberApplicationPeer::MEDIARELATIONS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::TELEPHONEWORK);

		$criteria->addSelectColumn(RpMemberApplicationPeer::COMPUTERS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::CLERICAL);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PUBLICITY);

		$criteria->addSelectColumn(RpMemberApplicationPeer::WRITING);

		$criteria->addSelectColumn(RpMemberApplicationPeer::SPEAKERSBUREAU);

		$criteria->addSelectColumn(RpMemberApplicationPeer::WINGTEAM);

		$criteria->addSelectColumn(RpMemberApplicationPeer::GRAPHICARTS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::EVENTPLANNING);

		$criteria->addSelectColumn(RpMemberApplicationPeer::WEBINTERNET);

		$criteria->addSelectColumn(RpMemberApplicationPeer::FOUNDATIONCONTACTS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::AVIATIONCONTACTS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PRINTING);

		$criteria->addSelectColumn(RpMemberApplicationPeer::MEMBERAOPA);

		$criteria->addSelectColumn(RpMemberApplicationPeer::MEMBERKIWANIS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::MEMBERROTARY);

		$criteria->addSelectColumn(RpMemberApplicationPeer::MEMBERLIONS);

		$criteria->addSelectColumn(RpMemberApplicationPeer::MEMBERNINETYNINES);

		$criteria->addSelectColumn(RpMemberApplicationPeer::MEMBERWIA);

		$criteria->addSelectColumn(RpMemberApplicationPeer::EDNEWMEMBERNOTIFY);

		$criteria->addSelectColumn(RpMemberApplicationPeer::WNEWMEMBERNOTIFY);

		$criteria->addSelectColumn(RpMemberApplicationPeer::BADGEMADE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::NOTEBOOKSENT);

		$criteria->addSelectColumn(RpMemberApplicationPeer::EXTERNALID);

		$criteria->addSelectColumn(RpMemberApplicationPeer::NOVAPOINTEID);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PREMIUMSHIPDATE);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PREMIUMSHIPMETHOD);

		$criteria->addSelectColumn(RpMemberApplicationPeer::PREMIUMSHIPTRACKINGNUMBER);

		$criteria->addSelectColumn(RpMemberApplicationPeer::ID);

	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(RpMemberApplicationPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			RpMemberApplicationPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(RpMemberApplicationPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}


    foreach (sfMixer::getCallables('BaseRpMemberApplicationPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseRpMemberApplicationPeer', $criteria, $con);
    }


		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     RpMemberApplication
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = RpMemberApplicationPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return RpMemberApplicationPeer::populateObjects(RpMemberApplicationPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRpMemberApplicationPeer:doSelectStmt:doSelectStmt') as $callable)
    {
      call_user_func($callable, 'BaseRpMemberApplicationPeer', $criteria, $con);
    }


		if ($con === null) {
			$con = Propel::getConnection(RpMemberApplicationPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			RpMemberApplicationPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      RpMemberApplication $value A RpMemberApplication object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(RpMemberApplication $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getId();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A RpMemberApplication object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof RpMemberApplication) {
				$key = (string) $value->getId();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or RpMemberApplication object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     RpMemberApplication Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 115] === null) {
			return null;
		}
		return (string) $row[$startcol + 115];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = RpMemberApplicationPeer::getOMClass();
		$cls = substr('.'.$cls, strrpos('.'.$cls, '.') + 1);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = RpMemberApplicationPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = RpMemberApplicationPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
		
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				RpMemberApplicationPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

  static public function getUniqueColumnNames()
  {
    return array();
  }
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * This uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass()
	{
		return RpMemberApplicationPeer::CLASS_DEFAULT;
	}

	/**
	 * Method perform an INSERT on the database, given a RpMemberApplication or Criteria object.
	 *
	 * @param      mixed $values Criteria or RpMemberApplication object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRpMemberApplicationPeer:doInsert:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseRpMemberApplicationPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(RpMemberApplicationPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from RpMemberApplication object
		}

		if ($criteria->containsKey(RpMemberApplicationPeer::ID) && $criteria->keyContainsValue(RpMemberApplicationPeer::ID) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.RpMemberApplicationPeer::ID.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		
    foreach (sfMixer::getCallables('BaseRpMemberApplicationPeer:doInsert:post') as $callable)
    {
      call_user_func($callable, 'BaseRpMemberApplicationPeer', $values, $con, $pk);
    }

    return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a RpMemberApplication or Criteria object.
	 *
	 * @param      mixed $values Criteria or RpMemberApplication object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRpMemberApplicationPeer:doUpdate:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseRpMemberApplicationPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(RpMemberApplicationPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(RpMemberApplicationPeer::ID);
			$selectCriteria->add(RpMemberApplicationPeer::ID, $criteria->remove(RpMemberApplicationPeer::ID), $comparison);

		} else { // $values is RpMemberApplication object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);
	

    foreach (sfMixer::getCallables('BaseRpMemberApplicationPeer:doUpdate:post') as $callable)
    {
      call_user_func($callable, 'BaseRpMemberApplicationPeer', $values, $con, $ret);
    }

    return $ret;
  }

	/**
	 * Method to DELETE all rows from the rp_member_application table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(RpMemberApplicationPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(RpMemberApplicationPeer::TABLE_NAME, $con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a RpMemberApplication or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or RpMemberApplication object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(RpMemberApplicationPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			RpMemberApplicationPeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof RpMemberApplication) {
			// invalidate the cache for this single object
			RpMemberApplicationPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(RpMemberApplicationPeer::ID, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				RpMemberApplicationPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);

			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given RpMemberApplication object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      RpMemberApplication $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(RpMemberApplication $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(RpMemberApplicationPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(RpMemberApplicationPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		$res =  BasePeer::doValidate(RpMemberApplicationPeer::DATABASE_NAME, RpMemberApplicationPeer::TABLE_NAME, $columns);
    if ($res !== true) {
        $request = sfContext::getInstance()->getRequest();
        foreach ($res as $failed) {
            $col = RpMemberApplicationPeer::translateFieldname($failed->getColumn(), BasePeer::TYPE_COLNAME, BasePeer::TYPE_PHPNAME);
        }
    }

    return $res;
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     RpMemberApplication
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = RpMemberApplicationPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(RpMemberApplicationPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(RpMemberApplicationPeer::DATABASE_NAME);
		$criteria->add(RpMemberApplicationPeer::ID, $pk);

		$v = RpMemberApplicationPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(RpMemberApplicationPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(RpMemberApplicationPeer::DATABASE_NAME);
			$criteria->add(RpMemberApplicationPeer::ID, $pks, Criteria::IN);
			$objs = RpMemberApplicationPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

} // BaseRpMemberApplicationPeer

// This is the static code needed to register the MapBuilder for this table with the main Propel class.
//
// NOTE: This static code cannot call methods on the RpMemberApplicationPeer class, because it is not defined yet.
// If you need to use overridden methods, you can add this code to the bottom of the RpMemberApplicationPeer class:
//
// Propel::getDatabaseMap(RpMemberApplicationPeer::DATABASE_NAME)->addTableBuilder(RpMemberApplicationPeer::TABLE_NAME, RpMemberApplicationPeer::getMapBuilder());
//
// Doing so will effectively overwrite the registration below.

Propel::getDatabaseMap(BaseRpMemberApplicationPeer::DATABASE_NAME)->addTableBuilder(BaseRpMemberApplicationPeer::TABLE_NAME, BaseRpMemberApplicationPeer::getMapBuilder());

