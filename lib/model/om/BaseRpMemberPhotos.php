<?php

/**
 * Base class that represents a row from the 'rp_member_photos' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue May 24 06:33:32 2011
 *
 * @package    lib.model.om
 */
abstract class BaseRpMemberPhotos extends BaseObject  implements Persistent {


  const PEER = 'RpMemberPhotosPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        RpMemberPhotosPeer
	 */
	protected static $peer;

	/**
	 * The value for the memberid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $memberid;

	/**
	 * The value for the passid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $passid;

	/**
	 * The value for the photoid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $photoid;

	/**
	 * The value for the submissiondate field.
	 * @var        string
	 */
	protected $submissiondate;

	/**
	 * The value for the missiondate field.
	 * @var        string
	 */
	protected $missiondate;

	/**
	 * The value for the passengername field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $passengername;

	/**
	 * The value for the pilotname field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $pilotname;

	/**
	 * The value for the photo_quality field.
	 * @var        int
	 */
	protected $photo_quality;

	/**
	 * The value for the photo_filename field.
	 * @var        string
	 */
	protected $photo_filename;

	/**
	 * The value for the photothumb field.
	 * @var        string
	 */
	protected $photothumb;

	/**
	 * The value for the wing_id field.
	 * @var        int
	 */
	protected $wing_id;

	/**
	 * The value for the passlastname field.
	 * @var        string
	 */
	protected $passlastname;

	/**
	 * The value for the pilotlastname field.
	 * @var        string
	 */
	protected $pilotlastname;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseRpMemberPhotos object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->memberid = 0;
		$this->passid = 0;
		$this->photoid = 0;
		$this->passengername = '';
		$this->pilotname = '';
	}

	/**
	 * Get the [memberid] column value.
	 * 
	 * @return     int
	 */
	public function getMemberid()
	{
		return $this->memberid;
	}

	/**
	 * Get the [passid] column value.
	 * 
	 * @return     int
	 */
	public function getPassid()
	{
		return $this->passid;
	}

	/**
	 * Get the [photoid] column value.
	 * 
	 * @return     int
	 */
	public function getPhotoid()
	{
		return $this->photoid;
	}

	/**
	 * Get the [submissiondate] column value.
	 * 
	 * @return     string
	 */
	public function getSubmissiondate()
	{
		return $this->submissiondate;
	}

	/**
	 * Get the [missiondate] column value.
	 * 
	 * @return     string
	 */
	public function getMissiondate()
	{
		return $this->missiondate;
	}

	/**
	 * Get the [passengername] column value.
	 * 
	 * @return     string
	 */
	public function getPassengername()
	{
		return $this->passengername;
	}

	/**
	 * Get the [pilotname] column value.
	 * 
	 * @return     string
	 */
	public function getPilotname()
	{
		return $this->pilotname;
	}

	/**
	 * Get the [photo_quality] column value.
	 * 
	 * @return     int
	 */
	public function getPhotoQuality()
	{
		return $this->photo_quality;
	}

	/**
	 * Get the [photo_filename] column value.
	 * 
	 * @return     string
	 */
	public function getPhotoFilename()
	{
		return $this->photo_filename;
	}

	/**
	 * Get the [photothumb] column value.
	 * 
	 * @return     string
	 */
	public function getPhotothumb()
	{
		return $this->photothumb;
	}

	/**
	 * Get the [wing_id] column value.
	 * 
	 * @return     int
	 */
	public function getWingId()
	{
		return $this->wing_id;
	}

	/**
	 * Get the [passlastname] column value.
	 * 
	 * @return     string
	 */
	public function getPasslastname()
	{
		return $this->passlastname;
	}

	/**
	 * Get the [pilotlastname] column value.
	 * 
	 * @return     string
	 */
	public function getPilotlastname()
	{
		return $this->pilotlastname;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Set the value of [memberid] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberPhotos The current object (for fluent API support)
	 */
	public function setMemberid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->memberid !== $v || $v === 0) {
			$this->memberid = $v;
			$this->modifiedColumns[] = RpMemberPhotosPeer::MEMBERID;
		}

		return $this;
	} // setMemberid()

	/**
	 * Set the value of [passid] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberPhotos The current object (for fluent API support)
	 */
	public function setPassid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->passid !== $v || $v === 0) {
			$this->passid = $v;
			$this->modifiedColumns[] = RpMemberPhotosPeer::PASSID;
		}

		return $this;
	} // setPassid()

	/**
	 * Set the value of [photoid] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberPhotos The current object (for fluent API support)
	 */
	public function setPhotoid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->photoid !== $v || $v === 0) {
			$this->photoid = $v;
			$this->modifiedColumns[] = RpMemberPhotosPeer::PHOTOID;
		}

		return $this;
	} // setPhotoid()

	/**
	 * Set the value of [submissiondate] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberPhotos The current object (for fluent API support)
	 */
	public function setSubmissiondate($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->submissiondate !== $v) {
			$this->submissiondate = $v;
			$this->modifiedColumns[] = RpMemberPhotosPeer::SUBMISSIONDATE;
		}

		return $this;
	} // setSubmissiondate()

	/**
	 * Set the value of [missiondate] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberPhotos The current object (for fluent API support)
	 */
	public function setMissiondate($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->missiondate !== $v) {
			$this->missiondate = $v;
			$this->modifiedColumns[] = RpMemberPhotosPeer::MISSIONDATE;
		}

		return $this;
	} // setMissiondate()

	/**
	 * Set the value of [passengername] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberPhotos The current object (for fluent API support)
	 */
	public function setPassengername($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passengername !== $v || $v === '') {
			$this->passengername = $v;
			$this->modifiedColumns[] = RpMemberPhotosPeer::PASSENGERNAME;
		}

		return $this;
	} // setPassengername()

	/**
	 * Set the value of [pilotname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberPhotos The current object (for fluent API support)
	 */
	public function setPilotname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilotname !== $v || $v === '') {
			$this->pilotname = $v;
			$this->modifiedColumns[] = RpMemberPhotosPeer::PILOTNAME;
		}

		return $this;
	} // setPilotname()

	/**
	 * Set the value of [photo_quality] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberPhotos The current object (for fluent API support)
	 */
	public function setPhotoQuality($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->photo_quality !== $v) {
			$this->photo_quality = $v;
			$this->modifiedColumns[] = RpMemberPhotosPeer::PHOTO_QUALITY;
		}

		return $this;
	} // setPhotoQuality()

	/**
	 * Set the value of [photo_filename] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberPhotos The current object (for fluent API support)
	 */
	public function setPhotoFilename($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->photo_filename !== $v) {
			$this->photo_filename = $v;
			$this->modifiedColumns[] = RpMemberPhotosPeer::PHOTO_FILENAME;
		}

		return $this;
	} // setPhotoFilename()

	/**
	 * Set the value of [photothumb] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberPhotos The current object (for fluent API support)
	 */
	public function setPhotothumb($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->photothumb !== $v) {
			$this->photothumb = $v;
			$this->modifiedColumns[] = RpMemberPhotosPeer::PHOTOTHUMB;
		}

		return $this;
	} // setPhotothumb()

	/**
	 * Set the value of [wing_id] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberPhotos The current object (for fluent API support)
	 */
	public function setWingId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->wing_id !== $v) {
			$this->wing_id = $v;
			$this->modifiedColumns[] = RpMemberPhotosPeer::WING_ID;
		}

		return $this;
	} // setWingId()

	/**
	 * Set the value of [passlastname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberPhotos The current object (for fluent API support)
	 */
	public function setPasslastname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passlastname !== $v) {
			$this->passlastname = $v;
			$this->modifiedColumns[] = RpMemberPhotosPeer::PASSLASTNAME;
		}

		return $this;
	} // setPasslastname()

	/**
	 * Set the value of [pilotlastname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberPhotos The current object (for fluent API support)
	 */
	public function setPilotlastname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilotlastname !== $v) {
			$this->pilotlastname = $v;
			$this->modifiedColumns[] = RpMemberPhotosPeer::PILOTLASTNAME;
		}

		return $this;
	} // setPilotlastname()

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberPhotos The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = RpMemberPhotosPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(RpMemberPhotosPeer::MEMBERID,RpMemberPhotosPeer::PASSID,RpMemberPhotosPeer::PHOTOID,RpMemberPhotosPeer::PASSENGERNAME,RpMemberPhotosPeer::PILOTNAME))) {
				return false;
			}

			if ($this->memberid !== 0) {
				return false;
			}

			if ($this->passid !== 0) {
				return false;
			}

			if ($this->photoid !== 0) {
				return false;
			}

			if ($this->passengername !== '') {
				return false;
			}

			if ($this->pilotname !== '') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->memberid = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->passid = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->photoid = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->submissiondate = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->missiondate = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->passengername = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->pilotname = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->photo_quality = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->photo_filename = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->photothumb = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->wing_id = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->passlastname = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->pilotlastname = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->id = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 14; // 14 = RpMemberPhotosPeer::NUM_COLUMNS - RpMemberPhotosPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating RpMemberPhotos object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RpMemberPhotosPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = RpMemberPhotosPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRpMemberPhotos:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RpMemberPhotosPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			RpMemberPhotosPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseRpMemberPhotos:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRpMemberPhotos:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RpMemberPhotosPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseRpMemberPhotos:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			RpMemberPhotosPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = RpMemberPhotosPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = RpMemberPhotosPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += RpMemberPhotosPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = RpMemberPhotosPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RpMemberPhotosPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getMemberid();
				break;
			case 1:
				return $this->getPassid();
				break;
			case 2:
				return $this->getPhotoid();
				break;
			case 3:
				return $this->getSubmissiondate();
				break;
			case 4:
				return $this->getMissiondate();
				break;
			case 5:
				return $this->getPassengername();
				break;
			case 6:
				return $this->getPilotname();
				break;
			case 7:
				return $this->getPhotoQuality();
				break;
			case 8:
				return $this->getPhotoFilename();
				break;
			case 9:
				return $this->getPhotothumb();
				break;
			case 10:
				return $this->getWingId();
				break;
			case 11:
				return $this->getPasslastname();
				break;
			case 12:
				return $this->getPilotlastname();
				break;
			case 13:
				return $this->getId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = RpMemberPhotosPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getMemberid(),
			$keys[1] => $this->getPassid(),
			$keys[2] => $this->getPhotoid(),
			$keys[3] => $this->getSubmissiondate(),
			$keys[4] => $this->getMissiondate(),
			$keys[5] => $this->getPassengername(),
			$keys[6] => $this->getPilotname(),
			$keys[7] => $this->getPhotoQuality(),
			$keys[8] => $this->getPhotoFilename(),
			$keys[9] => $this->getPhotothumb(),
			$keys[10] => $this->getWingId(),
			$keys[11] => $this->getPasslastname(),
			$keys[12] => $this->getPilotlastname(),
			$keys[13] => $this->getId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RpMemberPhotosPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setMemberid($value);
				break;
			case 1:
				$this->setPassid($value);
				break;
			case 2:
				$this->setPhotoid($value);
				break;
			case 3:
				$this->setSubmissiondate($value);
				break;
			case 4:
				$this->setMissiondate($value);
				break;
			case 5:
				$this->setPassengername($value);
				break;
			case 6:
				$this->setPilotname($value);
				break;
			case 7:
				$this->setPhotoQuality($value);
				break;
			case 8:
				$this->setPhotoFilename($value);
				break;
			case 9:
				$this->setPhotothumb($value);
				break;
			case 10:
				$this->setWingId($value);
				break;
			case 11:
				$this->setPasslastname($value);
				break;
			case 12:
				$this->setPilotlastname($value);
				break;
			case 13:
				$this->setId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = RpMemberPhotosPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setMemberid($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setPassid($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setPhotoid($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setSubmissiondate($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setMissiondate($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setPassengername($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setPilotname($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setPhotoQuality($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setPhotoFilename($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPhotothumb($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setWingId($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setPasslastname($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setPilotlastname($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setId($arr[$keys[13]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(RpMemberPhotosPeer::DATABASE_NAME);

		if ($this->isColumnModified(RpMemberPhotosPeer::MEMBERID)) $criteria->add(RpMemberPhotosPeer::MEMBERID, $this->memberid);
		if ($this->isColumnModified(RpMemberPhotosPeer::PASSID)) $criteria->add(RpMemberPhotosPeer::PASSID, $this->passid);
		if ($this->isColumnModified(RpMemberPhotosPeer::PHOTOID)) $criteria->add(RpMemberPhotosPeer::PHOTOID, $this->photoid);
		if ($this->isColumnModified(RpMemberPhotosPeer::SUBMISSIONDATE)) $criteria->add(RpMemberPhotosPeer::SUBMISSIONDATE, $this->submissiondate);
		if ($this->isColumnModified(RpMemberPhotosPeer::MISSIONDATE)) $criteria->add(RpMemberPhotosPeer::MISSIONDATE, $this->missiondate);
		if ($this->isColumnModified(RpMemberPhotosPeer::PASSENGERNAME)) $criteria->add(RpMemberPhotosPeer::PASSENGERNAME, $this->passengername);
		if ($this->isColumnModified(RpMemberPhotosPeer::PILOTNAME)) $criteria->add(RpMemberPhotosPeer::PILOTNAME, $this->pilotname);
		if ($this->isColumnModified(RpMemberPhotosPeer::PHOTO_QUALITY)) $criteria->add(RpMemberPhotosPeer::PHOTO_QUALITY, $this->photo_quality);
		if ($this->isColumnModified(RpMemberPhotosPeer::PHOTO_FILENAME)) $criteria->add(RpMemberPhotosPeer::PHOTO_FILENAME, $this->photo_filename);
		if ($this->isColumnModified(RpMemberPhotosPeer::PHOTOTHUMB)) $criteria->add(RpMemberPhotosPeer::PHOTOTHUMB, $this->photothumb);
		if ($this->isColumnModified(RpMemberPhotosPeer::WING_ID)) $criteria->add(RpMemberPhotosPeer::WING_ID, $this->wing_id);
		if ($this->isColumnModified(RpMemberPhotosPeer::PASSLASTNAME)) $criteria->add(RpMemberPhotosPeer::PASSLASTNAME, $this->passlastname);
		if ($this->isColumnModified(RpMemberPhotosPeer::PILOTLASTNAME)) $criteria->add(RpMemberPhotosPeer::PILOTLASTNAME, $this->pilotlastname);
		if ($this->isColumnModified(RpMemberPhotosPeer::ID)) $criteria->add(RpMemberPhotosPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(RpMemberPhotosPeer::DATABASE_NAME);

		$criteria->add(RpMemberPhotosPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of RpMemberPhotos (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setMemberid($this->memberid);

		$copyObj->setPassid($this->passid);

		$copyObj->setPhotoid($this->photoid);

		$copyObj->setSubmissiondate($this->submissiondate);

		$copyObj->setMissiondate($this->missiondate);

		$copyObj->setPassengername($this->passengername);

		$copyObj->setPilotname($this->pilotname);

		$copyObj->setPhotoQuality($this->photo_quality);

		$copyObj->setPhotoFilename($this->photo_filename);

		$copyObj->setPhotothumb($this->photothumb);

		$copyObj->setWingId($this->wing_id);

		$copyObj->setPasslastname($this->passlastname);

		$copyObj->setPilotlastname($this->pilotlastname);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     RpMemberPhotos Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     RpMemberPhotosPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new RpMemberPhotosPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseRpMemberPhotos:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseRpMemberPhotos::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseRpMemberPhotos
