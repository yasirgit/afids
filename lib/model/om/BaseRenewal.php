<?php

/**
 * Base class that represents a row from the 'renewal' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue May 24 06:33:31 2011
 *
 * @package    lib.model.om
 */
abstract class BaseRenewal extends BaseObject  implements Persistent {


  const PEER = 'RenewalPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        RenewalPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the renewal_date field.
	 * @var        string
	 */
	protected $renewal_date;

	/**
	 * The value for the renewal_desc field.
	 * @var        string
	 */
	protected $renewal_desc;

	/**
	 * The value for the renewal_month field.
	 * @var        int
	 */
	protected $renewal_month;

	/**
	 * The value for the renewal_year field.
	 * @var        int
	 */
	protected $renewal_year;

	/**
	 * The value for the letter_count field.
	 * @var        int
	 */
	protected $letter_count;

	/**
	 * The value for the invoice_total field.
	 * @var        int
	 */
	protected $invoice_total;

	/**
	 * The value for the product_price field.
	 * @var        int
	 */
	protected $product_price;

	/**
	 * The value for the printing_cost_total field.
	 * @var        int
	 */
	protected $printing_cost_total;

	/**
	 * The value for the verified_postage_count field.
	 * @var        int
	 */
	protected $verified_postage_count;

	/**
	 * The value for the verified_postage_cost field.
	 * @var        int
	 */
	protected $verified_postage_cost;

	/**
	 * The value for the unverified_postage_count field.
	 * @var        int
	 */
	protected $unverified_postage_count;

	/**
	 * The value for the unverified_postage_cost field.
	 * @var        int
	 */
	protected $unverified_postage_cost;

	/**
	 * The value for the undeliverable_postage_count field.
	 * @var        int
	 */
	protected $undeliverable_postage_count;

	/**
	 * The value for the undeliverable_postage_cost field.
	 * @var        int
	 */
	protected $undeliverable_postage_cost;

	/**
	 * The value for the international_postage_count field.
	 * @var        int
	 */
	protected $international_postage_count;

	/**
	 * The value for the international_postage_cost field.
	 * @var        int
	 */
	protected $international_postage_cost;

	/**
	 * The value for the postage_cost_total field.
	 * @var        int
	 */
	protected $postage_cost_total;

	/**
	 * The value for the mailers_club_order_number field.
	 * @var        int
	 */
	protected $mailers_club_order_number;

	/**
	 * The value for the mailers_club_order_date field.
	 * @var        string
	 */
	protected $mailers_club_order_date;

	/**
	 * The value for the mailers_club_completed_date field.
	 * @var        string
	 */
	protected $mailers_club_completed_date;

	/**
	 * The value for the mailers_club_mailing_name field.
	 * @var        string
	 */
	protected $mailers_club_mailing_name;

	/**
	 * The value for the processing_log_text field.
	 * @var        string
	 */
	protected $processing_log_text;

	/**
	 * The value for the data_file_name field.
	 * @var        string
	 */
	protected $data_file_name;

	/**
	 * The value for the data_file_size field.
	 * @var        int
	 */
	protected $data_file_size;

	/**
	 * The value for the proof_url field.
	 * @var        string
	 */
	protected $proof_url;

	/**
	 * The value for the proof_approved_date field.
	 * @var        string
	 */
	protected $proof_approved_date;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseRenewal object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [optionally formatted] temporal [renewal_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRenewalDate($format = 'Y-m-d H:i:s')
	{
		if ($this->renewal_date === null) {
			return null;
		}


		if ($this->renewal_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->renewal_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->renewal_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [renewal_desc] column value.
	 * 
	 * @return     string
	 */
	public function getRenewalDesc()
	{
		return $this->renewal_desc;
	}

	/**
	 * Get the [renewal_month] column value.
	 * 
	 * @return     int
	 */
	public function getRenewalMonth()
	{
		return $this->renewal_month;
	}

	/**
	 * Get the [renewal_year] column value.
	 * 
	 * @return     int
	 */
	public function getRenewalYear()
	{
		return $this->renewal_year;
	}

	/**
	 * Get the [letter_count] column value.
	 * 
	 * @return     int
	 */
	public function getLetterCount()
	{
		return $this->letter_count;
	}

	/**
	 * Get the [invoice_total] column value.
	 * 
	 * @return     int
	 */
	public function getInvoiceTotal()
	{
		return $this->invoice_total;
	}

	/**
	 * Get the [product_price] column value.
	 * 
	 * @return     int
	 */
	public function getProductPrice()
	{
		return $this->product_price;
	}

	/**
	 * Get the [printing_cost_total] column value.
	 * 
	 * @return     int
	 */
	public function getPrintingCostTotal()
	{
		return $this->printing_cost_total;
	}

	/**
	 * Get the [verified_postage_count] column value.
	 * 
	 * @return     int
	 */
	public function getVerifiedPostageCount()
	{
		return $this->verified_postage_count;
	}

	/**
	 * Get the [verified_postage_cost] column value.
	 * 
	 * @return     int
	 */
	public function getVerifiedPostageCost()
	{
		return $this->verified_postage_cost;
	}

	/**
	 * Get the [unverified_postage_count] column value.
	 * 
	 * @return     int
	 */
	public function getUnverifiedPostageCount()
	{
		return $this->unverified_postage_count;
	}

	/**
	 * Get the [unverified_postage_cost] column value.
	 * 
	 * @return     int
	 */
	public function getUnverifiedPostageCost()
	{
		return $this->unverified_postage_cost;
	}

	/**
	 * Get the [undeliverable_postage_count] column value.
	 * 
	 * @return     int
	 */
	public function getUndeliverablePostageCount()
	{
		return $this->undeliverable_postage_count;
	}

	/**
	 * Get the [undeliverable_postage_cost] column value.
	 * 
	 * @return     int
	 */
	public function getUndeliverablePostageCost()
	{
		return $this->undeliverable_postage_cost;
	}

	/**
	 * Get the [international_postage_count] column value.
	 * 
	 * @return     int
	 */
	public function getInternationalPostageCount()
	{
		return $this->international_postage_count;
	}

	/**
	 * Get the [international_postage_cost] column value.
	 * 
	 * @return     int
	 */
	public function getInternationalPostageCost()
	{
		return $this->international_postage_cost;
	}

	/**
	 * Get the [postage_cost_total] column value.
	 * 
	 * @return     int
	 */
	public function getPostageCostTotal()
	{
		return $this->postage_cost_total;
	}

	/**
	 * Get the [mailers_club_order_number] column value.
	 * 
	 * @return     int
	 */
	public function getMailersClubOrderNumber()
	{
		return $this->mailers_club_order_number;
	}

	/**
	 * Get the [optionally formatted] temporal [mailers_club_order_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getMailersClubOrderDate($format = 'Y-m-d H:i:s')
	{
		if ($this->mailers_club_order_date === null) {
			return null;
		}


		if ($this->mailers_club_order_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->mailers_club_order_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->mailers_club_order_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [mailers_club_completed_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getMailersClubCompletedDate($format = 'Y-m-d H:i:s')
	{
		if ($this->mailers_club_completed_date === null) {
			return null;
		}


		if ($this->mailers_club_completed_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->mailers_club_completed_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->mailers_club_completed_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [mailers_club_mailing_name] column value.
	 * 
	 * @return     string
	 */
	public function getMailersClubMailingName()
	{
		return $this->mailers_club_mailing_name;
	}

	/**
	 * Get the [processing_log_text] column value.
	 * 
	 * @return     string
	 */
	public function getProcessingLogText()
	{
		return $this->processing_log_text;
	}

	/**
	 * Get the [data_file_name] column value.
	 * 
	 * @return     string
	 */
	public function getDataFileName()
	{
		return $this->data_file_name;
	}

	/**
	 * Get the [data_file_size] column value.
	 * 
	 * @return     int
	 */
	public function getDataFileSize()
	{
		return $this->data_file_size;
	}

	/**
	 * Get the [proof_url] column value.
	 * 
	 * @return     string
	 */
	public function getProofUrl()
	{
		return $this->proof_url;
	}

	/**
	 * Get the [optionally formatted] temporal [proof_approved_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getProofApprovedDate($format = 'Y-m-d H:i:s')
	{
		if ($this->proof_approved_date === null) {
			return null;
		}


		if ($this->proof_approved_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->proof_approved_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->proof_approved_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = RenewalPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Sets the value of [renewal_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setRenewalDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->renewal_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->renewal_date !== null && $tmpDt = new DateTime($this->renewal_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->renewal_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = RenewalPeer::RENEWAL_DATE;
			}
		} // if either are not null

		return $this;
	} // setRenewalDate()

	/**
	 * Set the value of [renewal_desc] column.
	 * 
	 * @param      string $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setRenewalDesc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->renewal_desc !== $v) {
			$this->renewal_desc = $v;
			$this->modifiedColumns[] = RenewalPeer::RENEWAL_DESC;
		}

		return $this;
	} // setRenewalDesc()

	/**
	 * Set the value of [renewal_month] column.
	 * 
	 * @param      int $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setRenewalMonth($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->renewal_month !== $v) {
			$this->renewal_month = $v;
			$this->modifiedColumns[] = RenewalPeer::RENEWAL_MONTH;
		}

		return $this;
	} // setRenewalMonth()

	/**
	 * Set the value of [renewal_year] column.
	 * 
	 * @param      int $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setRenewalYear($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->renewal_year !== $v) {
			$this->renewal_year = $v;
			$this->modifiedColumns[] = RenewalPeer::RENEWAL_YEAR;
		}

		return $this;
	} // setRenewalYear()

	/**
	 * Set the value of [letter_count] column.
	 * 
	 * @param      int $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setLetterCount($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->letter_count !== $v) {
			$this->letter_count = $v;
			$this->modifiedColumns[] = RenewalPeer::LETTER_COUNT;
		}

		return $this;
	} // setLetterCount()

	/**
	 * Set the value of [invoice_total] column.
	 * 
	 * @param      int $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setInvoiceTotal($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->invoice_total !== $v) {
			$this->invoice_total = $v;
			$this->modifiedColumns[] = RenewalPeer::INVOICE_TOTAL;
		}

		return $this;
	} // setInvoiceTotal()

	/**
	 * Set the value of [product_price] column.
	 * 
	 * @param      int $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setProductPrice($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->product_price !== $v) {
			$this->product_price = $v;
			$this->modifiedColumns[] = RenewalPeer::PRODUCT_PRICE;
		}

		return $this;
	} // setProductPrice()

	/**
	 * Set the value of [printing_cost_total] column.
	 * 
	 * @param      int $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setPrintingCostTotal($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->printing_cost_total !== $v) {
			$this->printing_cost_total = $v;
			$this->modifiedColumns[] = RenewalPeer::PRINTING_COST_TOTAL;
		}

		return $this;
	} // setPrintingCostTotal()

	/**
	 * Set the value of [verified_postage_count] column.
	 * 
	 * @param      int $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setVerifiedPostageCount($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->verified_postage_count !== $v) {
			$this->verified_postage_count = $v;
			$this->modifiedColumns[] = RenewalPeer::VERIFIED_POSTAGE_COUNT;
		}

		return $this;
	} // setVerifiedPostageCount()

	/**
	 * Set the value of [verified_postage_cost] column.
	 * 
	 * @param      int $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setVerifiedPostageCost($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->verified_postage_cost !== $v) {
			$this->verified_postage_cost = $v;
			$this->modifiedColumns[] = RenewalPeer::VERIFIED_POSTAGE_COST;
		}

		return $this;
	} // setVerifiedPostageCost()

	/**
	 * Set the value of [unverified_postage_count] column.
	 * 
	 * @param      int $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setUnverifiedPostageCount($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->unverified_postage_count !== $v) {
			$this->unverified_postage_count = $v;
			$this->modifiedColumns[] = RenewalPeer::UNVERIFIED_POSTAGE_COUNT;
		}

		return $this;
	} // setUnverifiedPostageCount()

	/**
	 * Set the value of [unverified_postage_cost] column.
	 * 
	 * @param      int $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setUnverifiedPostageCost($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->unverified_postage_cost !== $v) {
			$this->unverified_postage_cost = $v;
			$this->modifiedColumns[] = RenewalPeer::UNVERIFIED_POSTAGE_COST;
		}

		return $this;
	} // setUnverifiedPostageCost()

	/**
	 * Set the value of [undeliverable_postage_count] column.
	 * 
	 * @param      int $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setUndeliverablePostageCount($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->undeliverable_postage_count !== $v) {
			$this->undeliverable_postage_count = $v;
			$this->modifiedColumns[] = RenewalPeer::UNDELIVERABLE_POSTAGE_COUNT;
		}

		return $this;
	} // setUndeliverablePostageCount()

	/**
	 * Set the value of [undeliverable_postage_cost] column.
	 * 
	 * @param      int $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setUndeliverablePostageCost($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->undeliverable_postage_cost !== $v) {
			$this->undeliverable_postage_cost = $v;
			$this->modifiedColumns[] = RenewalPeer::UNDELIVERABLE_POSTAGE_COST;
		}

		return $this;
	} // setUndeliverablePostageCost()

	/**
	 * Set the value of [international_postage_count] column.
	 * 
	 * @param      int $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setInternationalPostageCount($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->international_postage_count !== $v) {
			$this->international_postage_count = $v;
			$this->modifiedColumns[] = RenewalPeer::INTERNATIONAL_POSTAGE_COUNT;
		}

		return $this;
	} // setInternationalPostageCount()

	/**
	 * Set the value of [international_postage_cost] column.
	 * 
	 * @param      int $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setInternationalPostageCost($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->international_postage_cost !== $v) {
			$this->international_postage_cost = $v;
			$this->modifiedColumns[] = RenewalPeer::INTERNATIONAL_POSTAGE_COST;
		}

		return $this;
	} // setInternationalPostageCost()

	/**
	 * Set the value of [postage_cost_total] column.
	 * 
	 * @param      int $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setPostageCostTotal($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->postage_cost_total !== $v) {
			$this->postage_cost_total = $v;
			$this->modifiedColumns[] = RenewalPeer::POSTAGE_COST_TOTAL;
		}

		return $this;
	} // setPostageCostTotal()

	/**
	 * Set the value of [mailers_club_order_number] column.
	 * 
	 * @param      int $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setMailersClubOrderNumber($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->mailers_club_order_number !== $v) {
			$this->mailers_club_order_number = $v;
			$this->modifiedColumns[] = RenewalPeer::MAILERS_CLUB_ORDER_NUMBER;
		}

		return $this;
	} // setMailersClubOrderNumber()

	/**
	 * Sets the value of [mailers_club_order_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setMailersClubOrderDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->mailers_club_order_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->mailers_club_order_date !== null && $tmpDt = new DateTime($this->mailers_club_order_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->mailers_club_order_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = RenewalPeer::MAILERS_CLUB_ORDER_DATE;
			}
		} // if either are not null

		return $this;
	} // setMailersClubOrderDate()

	/**
	 * Sets the value of [mailers_club_completed_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setMailersClubCompletedDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->mailers_club_completed_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->mailers_club_completed_date !== null && $tmpDt = new DateTime($this->mailers_club_completed_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->mailers_club_completed_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = RenewalPeer::MAILERS_CLUB_COMPLETED_DATE;
			}
		} // if either are not null

		return $this;
	} // setMailersClubCompletedDate()

	/**
	 * Set the value of [mailers_club_mailing_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setMailersClubMailingName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mailers_club_mailing_name !== $v) {
			$this->mailers_club_mailing_name = $v;
			$this->modifiedColumns[] = RenewalPeer::MAILERS_CLUB_MAILING_NAME;
		}

		return $this;
	} // setMailersClubMailingName()

	/**
	 * Set the value of [processing_log_text] column.
	 * 
	 * @param      string $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setProcessingLogText($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->processing_log_text !== $v) {
			$this->processing_log_text = $v;
			$this->modifiedColumns[] = RenewalPeer::PROCESSING_LOG_TEXT;
		}

		return $this;
	} // setProcessingLogText()

	/**
	 * Set the value of [data_file_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setDataFileName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->data_file_name !== $v) {
			$this->data_file_name = $v;
			$this->modifiedColumns[] = RenewalPeer::DATA_FILE_NAME;
		}

		return $this;
	} // setDataFileName()

	/**
	 * Set the value of [data_file_size] column.
	 * 
	 * @param      int $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setDataFileSize($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->data_file_size !== $v) {
			$this->data_file_size = $v;
			$this->modifiedColumns[] = RenewalPeer::DATA_FILE_SIZE;
		}

		return $this;
	} // setDataFileSize()

	/**
	 * Set the value of [proof_url] column.
	 * 
	 * @param      string $v new value
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setProofUrl($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->proof_url !== $v) {
			$this->proof_url = $v;
			$this->modifiedColumns[] = RenewalPeer::PROOF_URL;
		}

		return $this;
	} // setProofUrl()

	/**
	 * Sets the value of [proof_approved_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Renewal The current object (for fluent API support)
	 */
	public function setProofApprovedDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->proof_approved_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->proof_approved_date !== null && $tmpDt = new DateTime($this->proof_approved_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->proof_approved_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = RenewalPeer::PROOF_APPROVED_DATE;
			}
		} // if either are not null

		return $this;
	} // setProofApprovedDate()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->renewal_date = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->renewal_desc = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->renewal_month = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->renewal_year = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->letter_count = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->invoice_total = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->product_price = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->printing_cost_total = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->verified_postage_count = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->verified_postage_cost = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->unverified_postage_count = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->unverified_postage_cost = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->undeliverable_postage_count = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->undeliverable_postage_cost = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->international_postage_count = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->international_postage_cost = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->postage_cost_total = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->mailers_club_order_number = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->mailers_club_order_date = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->mailers_club_completed_date = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->mailers_club_mailing_name = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->processing_log_text = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->data_file_name = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->data_file_size = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
			$this->proof_url = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->proof_approved_date = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 27; // 27 = RenewalPeer::NUM_COLUMNS - RenewalPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Renewal object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RenewalPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = RenewalPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRenewal:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RenewalPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			RenewalPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseRenewal:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRenewal:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RenewalPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseRenewal:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			RenewalPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = RenewalPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = RenewalPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += RenewalPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = RenewalPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RenewalPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getRenewalDate();
				break;
			case 2:
				return $this->getRenewalDesc();
				break;
			case 3:
				return $this->getRenewalMonth();
				break;
			case 4:
				return $this->getRenewalYear();
				break;
			case 5:
				return $this->getLetterCount();
				break;
			case 6:
				return $this->getInvoiceTotal();
				break;
			case 7:
				return $this->getProductPrice();
				break;
			case 8:
				return $this->getPrintingCostTotal();
				break;
			case 9:
				return $this->getVerifiedPostageCount();
				break;
			case 10:
				return $this->getVerifiedPostageCost();
				break;
			case 11:
				return $this->getUnverifiedPostageCount();
				break;
			case 12:
				return $this->getUnverifiedPostageCost();
				break;
			case 13:
				return $this->getUndeliverablePostageCount();
				break;
			case 14:
				return $this->getUndeliverablePostageCost();
				break;
			case 15:
				return $this->getInternationalPostageCount();
				break;
			case 16:
				return $this->getInternationalPostageCost();
				break;
			case 17:
				return $this->getPostageCostTotal();
				break;
			case 18:
				return $this->getMailersClubOrderNumber();
				break;
			case 19:
				return $this->getMailersClubOrderDate();
				break;
			case 20:
				return $this->getMailersClubCompletedDate();
				break;
			case 21:
				return $this->getMailersClubMailingName();
				break;
			case 22:
				return $this->getProcessingLogText();
				break;
			case 23:
				return $this->getDataFileName();
				break;
			case 24:
				return $this->getDataFileSize();
				break;
			case 25:
				return $this->getProofUrl();
				break;
			case 26:
				return $this->getProofApprovedDate();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = RenewalPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getRenewalDate(),
			$keys[2] => $this->getRenewalDesc(),
			$keys[3] => $this->getRenewalMonth(),
			$keys[4] => $this->getRenewalYear(),
			$keys[5] => $this->getLetterCount(),
			$keys[6] => $this->getInvoiceTotal(),
			$keys[7] => $this->getProductPrice(),
			$keys[8] => $this->getPrintingCostTotal(),
			$keys[9] => $this->getVerifiedPostageCount(),
			$keys[10] => $this->getVerifiedPostageCost(),
			$keys[11] => $this->getUnverifiedPostageCount(),
			$keys[12] => $this->getUnverifiedPostageCost(),
			$keys[13] => $this->getUndeliverablePostageCount(),
			$keys[14] => $this->getUndeliverablePostageCost(),
			$keys[15] => $this->getInternationalPostageCount(),
			$keys[16] => $this->getInternationalPostageCost(),
			$keys[17] => $this->getPostageCostTotal(),
			$keys[18] => $this->getMailersClubOrderNumber(),
			$keys[19] => $this->getMailersClubOrderDate(),
			$keys[20] => $this->getMailersClubCompletedDate(),
			$keys[21] => $this->getMailersClubMailingName(),
			$keys[22] => $this->getProcessingLogText(),
			$keys[23] => $this->getDataFileName(),
			$keys[24] => $this->getDataFileSize(),
			$keys[25] => $this->getProofUrl(),
			$keys[26] => $this->getProofApprovedDate(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RenewalPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setRenewalDate($value);
				break;
			case 2:
				$this->setRenewalDesc($value);
				break;
			case 3:
				$this->setRenewalMonth($value);
				break;
			case 4:
				$this->setRenewalYear($value);
				break;
			case 5:
				$this->setLetterCount($value);
				break;
			case 6:
				$this->setInvoiceTotal($value);
				break;
			case 7:
				$this->setProductPrice($value);
				break;
			case 8:
				$this->setPrintingCostTotal($value);
				break;
			case 9:
				$this->setVerifiedPostageCount($value);
				break;
			case 10:
				$this->setVerifiedPostageCost($value);
				break;
			case 11:
				$this->setUnverifiedPostageCount($value);
				break;
			case 12:
				$this->setUnverifiedPostageCost($value);
				break;
			case 13:
				$this->setUndeliverablePostageCount($value);
				break;
			case 14:
				$this->setUndeliverablePostageCost($value);
				break;
			case 15:
				$this->setInternationalPostageCount($value);
				break;
			case 16:
				$this->setInternationalPostageCost($value);
				break;
			case 17:
				$this->setPostageCostTotal($value);
				break;
			case 18:
				$this->setMailersClubOrderNumber($value);
				break;
			case 19:
				$this->setMailersClubOrderDate($value);
				break;
			case 20:
				$this->setMailersClubCompletedDate($value);
				break;
			case 21:
				$this->setMailersClubMailingName($value);
				break;
			case 22:
				$this->setProcessingLogText($value);
				break;
			case 23:
				$this->setDataFileName($value);
				break;
			case 24:
				$this->setDataFileSize($value);
				break;
			case 25:
				$this->setProofUrl($value);
				break;
			case 26:
				$this->setProofApprovedDate($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = RenewalPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setRenewalDate($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setRenewalDesc($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setRenewalMonth($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setRenewalYear($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setLetterCount($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setInvoiceTotal($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setProductPrice($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setPrintingCostTotal($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setVerifiedPostageCount($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setVerifiedPostageCost($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setUnverifiedPostageCount($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setUnverifiedPostageCost($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setUndeliverablePostageCount($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setUndeliverablePostageCost($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setInternationalPostageCount($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setInternationalPostageCost($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setPostageCostTotal($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setMailersClubOrderNumber($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setMailersClubOrderDate($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setMailersClubCompletedDate($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setMailersClubMailingName($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setProcessingLogText($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setDataFileName($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setDataFileSize($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setProofUrl($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setProofApprovedDate($arr[$keys[26]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(RenewalPeer::DATABASE_NAME);

		if ($this->isColumnModified(RenewalPeer::ID)) $criteria->add(RenewalPeer::ID, $this->id);
		if ($this->isColumnModified(RenewalPeer::RENEWAL_DATE)) $criteria->add(RenewalPeer::RENEWAL_DATE, $this->renewal_date);
		if ($this->isColumnModified(RenewalPeer::RENEWAL_DESC)) $criteria->add(RenewalPeer::RENEWAL_DESC, $this->renewal_desc);
		if ($this->isColumnModified(RenewalPeer::RENEWAL_MONTH)) $criteria->add(RenewalPeer::RENEWAL_MONTH, $this->renewal_month);
		if ($this->isColumnModified(RenewalPeer::RENEWAL_YEAR)) $criteria->add(RenewalPeer::RENEWAL_YEAR, $this->renewal_year);
		if ($this->isColumnModified(RenewalPeer::LETTER_COUNT)) $criteria->add(RenewalPeer::LETTER_COUNT, $this->letter_count);
		if ($this->isColumnModified(RenewalPeer::INVOICE_TOTAL)) $criteria->add(RenewalPeer::INVOICE_TOTAL, $this->invoice_total);
		if ($this->isColumnModified(RenewalPeer::PRODUCT_PRICE)) $criteria->add(RenewalPeer::PRODUCT_PRICE, $this->product_price);
		if ($this->isColumnModified(RenewalPeer::PRINTING_COST_TOTAL)) $criteria->add(RenewalPeer::PRINTING_COST_TOTAL, $this->printing_cost_total);
		if ($this->isColumnModified(RenewalPeer::VERIFIED_POSTAGE_COUNT)) $criteria->add(RenewalPeer::VERIFIED_POSTAGE_COUNT, $this->verified_postage_count);
		if ($this->isColumnModified(RenewalPeer::VERIFIED_POSTAGE_COST)) $criteria->add(RenewalPeer::VERIFIED_POSTAGE_COST, $this->verified_postage_cost);
		if ($this->isColumnModified(RenewalPeer::UNVERIFIED_POSTAGE_COUNT)) $criteria->add(RenewalPeer::UNVERIFIED_POSTAGE_COUNT, $this->unverified_postage_count);
		if ($this->isColumnModified(RenewalPeer::UNVERIFIED_POSTAGE_COST)) $criteria->add(RenewalPeer::UNVERIFIED_POSTAGE_COST, $this->unverified_postage_cost);
		if ($this->isColumnModified(RenewalPeer::UNDELIVERABLE_POSTAGE_COUNT)) $criteria->add(RenewalPeer::UNDELIVERABLE_POSTAGE_COUNT, $this->undeliverable_postage_count);
		if ($this->isColumnModified(RenewalPeer::UNDELIVERABLE_POSTAGE_COST)) $criteria->add(RenewalPeer::UNDELIVERABLE_POSTAGE_COST, $this->undeliverable_postage_cost);
		if ($this->isColumnModified(RenewalPeer::INTERNATIONAL_POSTAGE_COUNT)) $criteria->add(RenewalPeer::INTERNATIONAL_POSTAGE_COUNT, $this->international_postage_count);
		if ($this->isColumnModified(RenewalPeer::INTERNATIONAL_POSTAGE_COST)) $criteria->add(RenewalPeer::INTERNATIONAL_POSTAGE_COST, $this->international_postage_cost);
		if ($this->isColumnModified(RenewalPeer::POSTAGE_COST_TOTAL)) $criteria->add(RenewalPeer::POSTAGE_COST_TOTAL, $this->postage_cost_total);
		if ($this->isColumnModified(RenewalPeer::MAILERS_CLUB_ORDER_NUMBER)) $criteria->add(RenewalPeer::MAILERS_CLUB_ORDER_NUMBER, $this->mailers_club_order_number);
		if ($this->isColumnModified(RenewalPeer::MAILERS_CLUB_ORDER_DATE)) $criteria->add(RenewalPeer::MAILERS_CLUB_ORDER_DATE, $this->mailers_club_order_date);
		if ($this->isColumnModified(RenewalPeer::MAILERS_CLUB_COMPLETED_DATE)) $criteria->add(RenewalPeer::MAILERS_CLUB_COMPLETED_DATE, $this->mailers_club_completed_date);
		if ($this->isColumnModified(RenewalPeer::MAILERS_CLUB_MAILING_NAME)) $criteria->add(RenewalPeer::MAILERS_CLUB_MAILING_NAME, $this->mailers_club_mailing_name);
		if ($this->isColumnModified(RenewalPeer::PROCESSING_LOG_TEXT)) $criteria->add(RenewalPeer::PROCESSING_LOG_TEXT, $this->processing_log_text);
		if ($this->isColumnModified(RenewalPeer::DATA_FILE_NAME)) $criteria->add(RenewalPeer::DATA_FILE_NAME, $this->data_file_name);
		if ($this->isColumnModified(RenewalPeer::DATA_FILE_SIZE)) $criteria->add(RenewalPeer::DATA_FILE_SIZE, $this->data_file_size);
		if ($this->isColumnModified(RenewalPeer::PROOF_URL)) $criteria->add(RenewalPeer::PROOF_URL, $this->proof_url);
		if ($this->isColumnModified(RenewalPeer::PROOF_APPROVED_DATE)) $criteria->add(RenewalPeer::PROOF_APPROVED_DATE, $this->proof_approved_date);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(RenewalPeer::DATABASE_NAME);

		$criteria->add(RenewalPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Renewal (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setRenewalDate($this->renewal_date);

		$copyObj->setRenewalDesc($this->renewal_desc);

		$copyObj->setRenewalMonth($this->renewal_month);

		$copyObj->setRenewalYear($this->renewal_year);

		$copyObj->setLetterCount($this->letter_count);

		$copyObj->setInvoiceTotal($this->invoice_total);

		$copyObj->setProductPrice($this->product_price);

		$copyObj->setPrintingCostTotal($this->printing_cost_total);

		$copyObj->setVerifiedPostageCount($this->verified_postage_count);

		$copyObj->setVerifiedPostageCost($this->verified_postage_cost);

		$copyObj->setUnverifiedPostageCount($this->unverified_postage_count);

		$copyObj->setUnverifiedPostageCost($this->unverified_postage_cost);

		$copyObj->setUndeliverablePostageCount($this->undeliverable_postage_count);

		$copyObj->setUndeliverablePostageCost($this->undeliverable_postage_cost);

		$copyObj->setInternationalPostageCount($this->international_postage_count);

		$copyObj->setInternationalPostageCost($this->international_postage_cost);

		$copyObj->setPostageCostTotal($this->postage_cost_total);

		$copyObj->setMailersClubOrderNumber($this->mailers_club_order_number);

		$copyObj->setMailersClubOrderDate($this->mailers_club_order_date);

		$copyObj->setMailersClubCompletedDate($this->mailers_club_completed_date);

		$copyObj->setMailersClubMailingName($this->mailers_club_mailing_name);

		$copyObj->setProcessingLogText($this->processing_log_text);

		$copyObj->setDataFileName($this->data_file_name);

		$copyObj->setDataFileSize($this->data_file_size);

		$copyObj->setProofUrl($this->proof_url);

		$copyObj->setProofApprovedDate($this->proof_approved_date);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Renewal Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     RenewalPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new RenewalPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseRenewal:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseRenewal::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseRenewal
