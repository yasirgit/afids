<?php

/**
 * Base class that represents a row from the 'rp_camp_passengers' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue May 24 06:33:31 2011
 *
 * @package    lib.model.om
 */
abstract class BaseRpCampPassengers extends BaseObject  implements Persistent {


  const PEER = 'RpCampPassengersPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        RpCampPassengersPeer
	 */
	protected static $peer;

	/**
	 * The value for the passid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $passid;

	/**
	 * The value for the passname field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $passname;

	/**
	 * The value for the passlastname field.
	 * @var        string
	 */
	protected $passlastname;

	/**
	 * The value for the passfirstname field.
	 * @var        string
	 */
	protected $passfirstname;

	/**
	 * The value for the weight field.
	 * @var        int
	 */
	protected $weight;

	/**
	 * The value for the passdayphone field.
	 * @var        string
	 */
	protected $passdayphone;

	/**
	 * The value for the passevephone field.
	 * @var        string
	 */
	protected $passevephone;

	/**
	 * The value for the passmobilephone field.
	 * @var        string
	 */
	protected $passmobilephone;

	/**
	 * The value for the passpagerphone field.
	 * @var        string
	 */
	protected $passpagerphone;

	/**
	 * The value for the passotherphone field.
	 * @var        string
	 */
	protected $passotherphone;

	/**
	 * The value for the passfaxphone field.
	 * @var        string
	 */
	protected $passfaxphone;

	/**
	 * The value for the passdaycomment field.
	 * @var        string
	 */
	protected $passdaycomment;

	/**
	 * The value for the passevecomment field.
	 * @var        string
	 */
	protected $passevecomment;

	/**
	 * The value for the passmobilecomment field.
	 * @var        string
	 */
	protected $passmobilecomment;

	/**
	 * The value for the passpagercomment field.
	 * @var        string
	 */
	protected $passpagercomment;

	/**
	 * The value for the passothercomment field.
	 * @var        string
	 */
	protected $passothercomment;

	/**
	 * The value for the passfaxcomment field.
	 * @var        string
	 */
	protected $passfaxcomment;

	/**
	 * The value for the reqname field.
	 * Note: this column has a database default value of: ''
	 * @var        string
	 */
	protected $reqname;

	/**
	 * The value for the reqfirstname field.
	 * @var        string
	 */
	protected $reqfirstname;

	/**
	 * The value for the reqlastname field.
	 * @var        string
	 */
	protected $reqlastname;

	/**
	 * The value for the reqdayphone field.
	 * @var        string
	 */
	protected $reqdayphone;

	/**
	 * The value for the reqevephone field.
	 * @var        string
	 */
	protected $reqevephone;

	/**
	 * The value for the reqmobilephone field.
	 * @var        string
	 */
	protected $reqmobilephone;

	/**
	 * The value for the reqpagerphone field.
	 * @var        string
	 */
	protected $reqpagerphone;

	/**
	 * The value for the reqotherphone field.
	 * @var        string
	 */
	protected $reqotherphone;

	/**
	 * The value for the reqfaxphone field.
	 * @var        string
	 */
	protected $reqfaxphone;

	/**
	 * The value for the reqdaycomment field.
	 * @var        string
	 */
	protected $reqdaycomment;

	/**
	 * The value for the reqevecomment field.
	 * @var        string
	 */
	protected $reqevecomment;

	/**
	 * The value for the reqmobilecomment field.
	 * @var        string
	 */
	protected $reqmobilecomment;

	/**
	 * The value for the reqpagercomment field.
	 * @var        string
	 */
	protected $reqpagercomment;

	/**
	 * The value for the reqothercomment field.
	 * @var        string
	 */
	protected $reqothercomment;

	/**
	 * The value for the reqfaxcomment field.
	 * @var        string
	 */
	protected $reqfaxcomment;

	/**
	 * The value for the campname field.
	 * @var        string
	 */
	protected $campname;

	/**
	 * The value for the campphone field.
	 * @var        string
	 */
	protected $campphone;

	/**
	 * The value for the pilotname field.
	 * @var        string
	 */
	protected $pilotname;

	/**
	 * The value for the pilotfirstname field.
	 * @var        string
	 */
	protected $pilotfirstname;

	/**
	 * The value for the pilotlastname field.
	 * @var        string
	 */
	protected $pilotlastname;

	/**
	 * The value for the pilotmemberid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $pilotmemberid;

	/**
	 * The value for the pilotdayphone field.
	 * @var        string
	 */
	protected $pilotdayphone;

	/**
	 * The value for the pilotevephone field.
	 * @var        string
	 */
	protected $pilotevephone;

	/**
	 * The value for the pilotmobilephone field.
	 * @var        string
	 */
	protected $pilotmobilephone;

	/**
	 * The value for the pilototherphone field.
	 * @var        string
	 */
	protected $pilototherphone;

	/**
	 * The value for the pilotpagerphone field.
	 * @var        string
	 */
	protected $pilotpagerphone;

	/**
	 * The value for the pilotfaxphone field.
	 * @var        string
	 */
	protected $pilotfaxphone;

	/**
	 * The value for the homebase field.
	 * @var        string
	 */
	protected $homebase;

	/**
	 * The value for the pilotdaycomment field.
	 * @var        string
	 */
	protected $pilotdaycomment;

	/**
	 * The value for the pilotevecomment field.
	 * @var        string
	 */
	protected $pilotevecomment;

	/**
	 * The value for the pilotmobilecomment field.
	 * @var        string
	 */
	protected $pilotmobilecomment;

	/**
	 * The value for the pilotpagercomment field.
	 * @var        string
	 */
	protected $pilotpagercomment;

	/**
	 * The value for the pilotothercomment field.
	 * @var        string
	 */
	protected $pilotothercomment;

	/**
	 * The value for the pilotfaxcomment field.
	 * @var        string
	 */
	protected $pilotfaxcomment;

	/**
	 * The value for the pilotemail field.
	 * @var        string
	 */
	protected $pilotemail;

	/**
	 * The value for the ifr field.
	 * @var        int
	 */
	protected $ifr;

	/**
	 * The value for the toairportname field.
	 * @var        string
	 */
	protected $toairportname;

	/**
	 * The value for the toairportident field.
	 * @var        string
	 */
	protected $toairportident;

	/**
	 * The value for the fromairportname field.
	 * @var        string
	 */
	protected $fromairportname;

	/**
	 * The value for the fromairportident field.
	 * @var        string
	 */
	protected $fromairportident;

	/**
	 * The value for the missionid field.
	 * @var        int
	 */
	protected $missionid;

	/**
	 * The value for the missionselectdate field.
	 * @var        string
	 */
	protected $missionselectdate;

	/**
	 * The value for the missiondate field.
	 * @var        string
	 */
	protected $missiondate;

	/**
	 * The value for the medicalreleasereceived field.
	 * @var        string
	 */
	protected $medicalreleasereceived;

	/**
	 * The value for the waiverreceived field.
	 * @var        string
	 */
	protected $waiverreceived;

	/**
	 * The value for the private_c_note field.
	 * @var        string
	 */
	protected $private_c_note;

	/**
	 * The value for the cancelled field.
	 * @var        string
	 */
	protected $cancelled;

	/**
	 * The value for the n_number field.
	 * @var        string
	 */
	protected $n_number;

	/**
	 * The value for the make field.
	 * @var        string
	 */
	protected $make;

	/**
	 * The value for the model field.
	 * @var        string
	 */
	protected $model;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseRpCampPassengers object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->passid = 0;
		$this->passname = '';
		$this->reqname = '';
		$this->pilotmemberid = 0;
	}

	/**
	 * Get the [passid] column value.
	 * 
	 * @return     int
	 */
	public function getPassid()
	{
		return $this->passid;
	}

	/**
	 * Get the [passname] column value.
	 * 
	 * @return     string
	 */
	public function getPassname()
	{
		return $this->passname;
	}

	/**
	 * Get the [passlastname] column value.
	 * 
	 * @return     string
	 */
	public function getPasslastname()
	{
		return $this->passlastname;
	}

	/**
	 * Get the [passfirstname] column value.
	 * 
	 * @return     string
	 */
	public function getPassfirstname()
	{
		return $this->passfirstname;
	}

	/**
	 * Get the [weight] column value.
	 * 
	 * @return     int
	 */
	public function getWeight()
	{
		return $this->weight;
	}

	/**
	 * Get the [passdayphone] column value.
	 * 
	 * @return     string
	 */
	public function getPassdayphone()
	{
		return $this->passdayphone;
	}

	/**
	 * Get the [passevephone] column value.
	 * 
	 * @return     string
	 */
	public function getPassevephone()
	{
		return $this->passevephone;
	}

	/**
	 * Get the [passmobilephone] column value.
	 * 
	 * @return     string
	 */
	public function getPassmobilephone()
	{
		return $this->passmobilephone;
	}

	/**
	 * Get the [passpagerphone] column value.
	 * 
	 * @return     string
	 */
	public function getPasspagerphone()
	{
		return $this->passpagerphone;
	}

	/**
	 * Get the [passotherphone] column value.
	 * 
	 * @return     string
	 */
	public function getPassotherphone()
	{
		return $this->passotherphone;
	}

	/**
	 * Get the [passfaxphone] column value.
	 * 
	 * @return     string
	 */
	public function getPassfaxphone()
	{
		return $this->passfaxphone;
	}

	/**
	 * Get the [passdaycomment] column value.
	 * 
	 * @return     string
	 */
	public function getPassdaycomment()
	{
		return $this->passdaycomment;
	}

	/**
	 * Get the [passevecomment] column value.
	 * 
	 * @return     string
	 */
	public function getPassevecomment()
	{
		return $this->passevecomment;
	}

	/**
	 * Get the [passmobilecomment] column value.
	 * 
	 * @return     string
	 */
	public function getPassmobilecomment()
	{
		return $this->passmobilecomment;
	}

	/**
	 * Get the [passpagercomment] column value.
	 * 
	 * @return     string
	 */
	public function getPasspagercomment()
	{
		return $this->passpagercomment;
	}

	/**
	 * Get the [passothercomment] column value.
	 * 
	 * @return     string
	 */
	public function getPassothercomment()
	{
		return $this->passothercomment;
	}

	/**
	 * Get the [passfaxcomment] column value.
	 * 
	 * @return     string
	 */
	public function getPassfaxcomment()
	{
		return $this->passfaxcomment;
	}

	/**
	 * Get the [reqname] column value.
	 * 
	 * @return     string
	 */
	public function getReqname()
	{
		return $this->reqname;
	}

	/**
	 * Get the [reqfirstname] column value.
	 * 
	 * @return     string
	 */
	public function getReqfirstname()
	{
		return $this->reqfirstname;
	}

	/**
	 * Get the [reqlastname] column value.
	 * 
	 * @return     string
	 */
	public function getReqlastname()
	{
		return $this->reqlastname;
	}

	/**
	 * Get the [reqdayphone] column value.
	 * 
	 * @return     string
	 */
	public function getReqdayphone()
	{
		return $this->reqdayphone;
	}

	/**
	 * Get the [reqevephone] column value.
	 * 
	 * @return     string
	 */
	public function getReqevephone()
	{
		return $this->reqevephone;
	}

	/**
	 * Get the [reqmobilephone] column value.
	 * 
	 * @return     string
	 */
	public function getReqmobilephone()
	{
		return $this->reqmobilephone;
	}

	/**
	 * Get the [reqpagerphone] column value.
	 * 
	 * @return     string
	 */
	public function getReqpagerphone()
	{
		return $this->reqpagerphone;
	}

	/**
	 * Get the [reqotherphone] column value.
	 * 
	 * @return     string
	 */
	public function getReqotherphone()
	{
		return $this->reqotherphone;
	}

	/**
	 * Get the [reqfaxphone] column value.
	 * 
	 * @return     string
	 */
	public function getReqfaxphone()
	{
		return $this->reqfaxphone;
	}

	/**
	 * Get the [reqdaycomment] column value.
	 * 
	 * @return     string
	 */
	public function getReqdaycomment()
	{
		return $this->reqdaycomment;
	}

	/**
	 * Get the [reqevecomment] column value.
	 * 
	 * @return     string
	 */
	public function getReqevecomment()
	{
		return $this->reqevecomment;
	}

	/**
	 * Get the [reqmobilecomment] column value.
	 * 
	 * @return     string
	 */
	public function getReqmobilecomment()
	{
		return $this->reqmobilecomment;
	}

	/**
	 * Get the [reqpagercomment] column value.
	 * 
	 * @return     string
	 */
	public function getReqpagercomment()
	{
		return $this->reqpagercomment;
	}

	/**
	 * Get the [reqothercomment] column value.
	 * 
	 * @return     string
	 */
	public function getReqothercomment()
	{
		return $this->reqothercomment;
	}

	/**
	 * Get the [reqfaxcomment] column value.
	 * 
	 * @return     string
	 */
	public function getReqfaxcomment()
	{
		return $this->reqfaxcomment;
	}

	/**
	 * Get the [campname] column value.
	 * 
	 * @return     string
	 */
	public function getCampname()
	{
		return $this->campname;
	}

	/**
	 * Get the [campphone] column value.
	 * 
	 * @return     string
	 */
	public function getCampphone()
	{
		return $this->campphone;
	}

	/**
	 * Get the [pilotname] column value.
	 * 
	 * @return     string
	 */
	public function getPilotname()
	{
		return $this->pilotname;
	}

	/**
	 * Get the [pilotfirstname] column value.
	 * 
	 * @return     string
	 */
	public function getPilotfirstname()
	{
		return $this->pilotfirstname;
	}

	/**
	 * Get the [pilotlastname] column value.
	 * 
	 * @return     string
	 */
	public function getPilotlastname()
	{
		return $this->pilotlastname;
	}

	/**
	 * Get the [pilotmemberid] column value.
	 * 
	 * @return     int
	 */
	public function getPilotmemberid()
	{
		return $this->pilotmemberid;
	}

	/**
	 * Get the [pilotdayphone] column value.
	 * 
	 * @return     string
	 */
	public function getPilotdayphone()
	{
		return $this->pilotdayphone;
	}

	/**
	 * Get the [pilotevephone] column value.
	 * 
	 * @return     string
	 */
	public function getPilotevephone()
	{
		return $this->pilotevephone;
	}

	/**
	 * Get the [pilotmobilephone] column value.
	 * 
	 * @return     string
	 */
	public function getPilotmobilephone()
	{
		return $this->pilotmobilephone;
	}

	/**
	 * Get the [pilototherphone] column value.
	 * 
	 * @return     string
	 */
	public function getPilototherphone()
	{
		return $this->pilototherphone;
	}

	/**
	 * Get the [pilotpagerphone] column value.
	 * 
	 * @return     string
	 */
	public function getPilotpagerphone()
	{
		return $this->pilotpagerphone;
	}

	/**
	 * Get the [pilotfaxphone] column value.
	 * 
	 * @return     string
	 */
	public function getPilotfaxphone()
	{
		return $this->pilotfaxphone;
	}

	/**
	 * Get the [homebase] column value.
	 * 
	 * @return     string
	 */
	public function getHomebase()
	{
		return $this->homebase;
	}

	/**
	 * Get the [pilotdaycomment] column value.
	 * 
	 * @return     string
	 */
	public function getPilotdaycomment()
	{
		return $this->pilotdaycomment;
	}

	/**
	 * Get the [pilotevecomment] column value.
	 * 
	 * @return     string
	 */
	public function getPilotevecomment()
	{
		return $this->pilotevecomment;
	}

	/**
	 * Get the [pilotmobilecomment] column value.
	 * 
	 * @return     string
	 */
	public function getPilotmobilecomment()
	{
		return $this->pilotmobilecomment;
	}

	/**
	 * Get the [pilotpagercomment] column value.
	 * 
	 * @return     string
	 */
	public function getPilotpagercomment()
	{
		return $this->pilotpagercomment;
	}

	/**
	 * Get the [pilotothercomment] column value.
	 * 
	 * @return     string
	 */
	public function getPilotothercomment()
	{
		return $this->pilotothercomment;
	}

	/**
	 * Get the [pilotfaxcomment] column value.
	 * 
	 * @return     string
	 */
	public function getPilotfaxcomment()
	{
		return $this->pilotfaxcomment;
	}

	/**
	 * Get the [pilotemail] column value.
	 * 
	 * @return     string
	 */
	public function getPilotemail()
	{
		return $this->pilotemail;
	}

	/**
	 * Get the [ifr] column value.
	 * 
	 * @return     int
	 */
	public function getIfr()
	{
		return $this->ifr;
	}

	/**
	 * Get the [toairportname] column value.
	 * 
	 * @return     string
	 */
	public function getToairportname()
	{
		return $this->toairportname;
	}

	/**
	 * Get the [toairportident] column value.
	 * 
	 * @return     string
	 */
	public function getToairportident()
	{
		return $this->toairportident;
	}

	/**
	 * Get the [fromairportname] column value.
	 * 
	 * @return     string
	 */
	public function getFromairportname()
	{
		return $this->fromairportname;
	}

	/**
	 * Get the [fromairportident] column value.
	 * 
	 * @return     string
	 */
	public function getFromairportident()
	{
		return $this->fromairportident;
	}

	/**
	 * Get the [missionid] column value.
	 * 
	 * @return     int
	 */
	public function getMissionid()
	{
		return $this->missionid;
	}

	/**
	 * Get the [optionally formatted] temporal [missionselectdate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getMissionselectdate($format = 'Y-m-d H:i:s')
	{
		if ($this->missionselectdate === null) {
			return null;
		}


		if ($this->missionselectdate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->missionselectdate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->missionselectdate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [missiondate] column value.
	 * 
	 * @return     string
	 */
	public function getMissiondate()
	{
		return $this->missiondate;
	}

	/**
	 * Get the [medicalreleasereceived] column value.
	 * 
	 * @return     string
	 */
	public function getMedicalreleasereceived()
	{
		return $this->medicalreleasereceived;
	}

	/**
	 * Get the [waiverreceived] column value.
	 * 
	 * @return     string
	 */
	public function getWaiverreceived()
	{
		return $this->waiverreceived;
	}

	/**
	 * Get the [private_c_note] column value.
	 * 
	 * @return     string
	 */
	public function getPrivateCNote()
	{
		return $this->private_c_note;
	}

	/**
	 * Get the [cancelled] column value.
	 * 
	 * @return     string
	 */
	public function getCancelled()
	{
		return $this->cancelled;
	}

	/**
	 * Get the [n_number] column value.
	 * 
	 * @return     string
	 */
	public function getNNumber()
	{
		return $this->n_number;
	}

	/**
	 * Get the [make] column value.
	 * 
	 * @return     string
	 */
	public function getMake()
	{
		return $this->make;
	}

	/**
	 * Get the [model] column value.
	 * 
	 * @return     string
	 */
	public function getModel()
	{
		return $this->model;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Set the value of [passid] column.
	 * 
	 * @param      int $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPassid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->passid !== $v || $v === 0) {
			$this->passid = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PASSID;
		}

		return $this;
	} // setPassid()

	/**
	 * Set the value of [passname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPassname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passname !== $v || $v === '') {
			$this->passname = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PASSNAME;
		}

		return $this;
	} // setPassname()

	/**
	 * Set the value of [passlastname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPasslastname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passlastname !== $v) {
			$this->passlastname = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PASSLASTNAME;
		}

		return $this;
	} // setPasslastname()

	/**
	 * Set the value of [passfirstname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPassfirstname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passfirstname !== $v) {
			$this->passfirstname = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PASSFIRSTNAME;
		}

		return $this;
	} // setPassfirstname()

	/**
	 * Set the value of [weight] column.
	 * 
	 * @param      int $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setWeight($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->weight !== $v) {
			$this->weight = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::WEIGHT;
		}

		return $this;
	} // setWeight()

	/**
	 * Set the value of [passdayphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPassdayphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passdayphone !== $v) {
			$this->passdayphone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PASSDAYPHONE;
		}

		return $this;
	} // setPassdayphone()

	/**
	 * Set the value of [passevephone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPassevephone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passevephone !== $v) {
			$this->passevephone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PASSEVEPHONE;
		}

		return $this;
	} // setPassevephone()

	/**
	 * Set the value of [passmobilephone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPassmobilephone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passmobilephone !== $v) {
			$this->passmobilephone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PASSMOBILEPHONE;
		}

		return $this;
	} // setPassmobilephone()

	/**
	 * Set the value of [passpagerphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPasspagerphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passpagerphone !== $v) {
			$this->passpagerphone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PASSPAGERPHONE;
		}

		return $this;
	} // setPasspagerphone()

	/**
	 * Set the value of [passotherphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPassotherphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passotherphone !== $v) {
			$this->passotherphone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PASSOTHERPHONE;
		}

		return $this;
	} // setPassotherphone()

	/**
	 * Set the value of [passfaxphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPassfaxphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passfaxphone !== $v) {
			$this->passfaxphone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PASSFAXPHONE;
		}

		return $this;
	} // setPassfaxphone()

	/**
	 * Set the value of [passdaycomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPassdaycomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passdaycomment !== $v) {
			$this->passdaycomment = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PASSDAYCOMMENT;
		}

		return $this;
	} // setPassdaycomment()

	/**
	 * Set the value of [passevecomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPassevecomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passevecomment !== $v) {
			$this->passevecomment = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PASSEVECOMMENT;
		}

		return $this;
	} // setPassevecomment()

	/**
	 * Set the value of [passmobilecomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPassmobilecomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passmobilecomment !== $v) {
			$this->passmobilecomment = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PASSMOBILECOMMENT;
		}

		return $this;
	} // setPassmobilecomment()

	/**
	 * Set the value of [passpagercomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPasspagercomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passpagercomment !== $v) {
			$this->passpagercomment = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PASSPAGERCOMMENT;
		}

		return $this;
	} // setPasspagercomment()

	/**
	 * Set the value of [passothercomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPassothercomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passothercomment !== $v) {
			$this->passothercomment = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PASSOTHERCOMMENT;
		}

		return $this;
	} // setPassothercomment()

	/**
	 * Set the value of [passfaxcomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPassfaxcomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passfaxcomment !== $v) {
			$this->passfaxcomment = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PASSFAXCOMMENT;
		}

		return $this;
	} // setPassfaxcomment()

	/**
	 * Set the value of [reqname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setReqname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reqname !== $v || $v === '') {
			$this->reqname = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::REQNAME;
		}

		return $this;
	} // setReqname()

	/**
	 * Set the value of [reqfirstname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setReqfirstname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reqfirstname !== $v) {
			$this->reqfirstname = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::REQFIRSTNAME;
		}

		return $this;
	} // setReqfirstname()

	/**
	 * Set the value of [reqlastname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setReqlastname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reqlastname !== $v) {
			$this->reqlastname = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::REQLASTNAME;
		}

		return $this;
	} // setReqlastname()

	/**
	 * Set the value of [reqdayphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setReqdayphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reqdayphone !== $v) {
			$this->reqdayphone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::REQDAYPHONE;
		}

		return $this;
	} // setReqdayphone()

	/**
	 * Set the value of [reqevephone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setReqevephone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reqevephone !== $v) {
			$this->reqevephone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::REQEVEPHONE;
		}

		return $this;
	} // setReqevephone()

	/**
	 * Set the value of [reqmobilephone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setReqmobilephone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reqmobilephone !== $v) {
			$this->reqmobilephone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::REQMOBILEPHONE;
		}

		return $this;
	} // setReqmobilephone()

	/**
	 * Set the value of [reqpagerphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setReqpagerphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reqpagerphone !== $v) {
			$this->reqpagerphone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::REQPAGERPHONE;
		}

		return $this;
	} // setReqpagerphone()

	/**
	 * Set the value of [reqotherphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setReqotherphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reqotherphone !== $v) {
			$this->reqotherphone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::REQOTHERPHONE;
		}

		return $this;
	} // setReqotherphone()

	/**
	 * Set the value of [reqfaxphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setReqfaxphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reqfaxphone !== $v) {
			$this->reqfaxphone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::REQFAXPHONE;
		}

		return $this;
	} // setReqfaxphone()

	/**
	 * Set the value of [reqdaycomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setReqdaycomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reqdaycomment !== $v) {
			$this->reqdaycomment = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::REQDAYCOMMENT;
		}

		return $this;
	} // setReqdaycomment()

	/**
	 * Set the value of [reqevecomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setReqevecomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reqevecomment !== $v) {
			$this->reqevecomment = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::REQEVECOMMENT;
		}

		return $this;
	} // setReqevecomment()

	/**
	 * Set the value of [reqmobilecomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setReqmobilecomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reqmobilecomment !== $v) {
			$this->reqmobilecomment = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::REQMOBILECOMMENT;
		}

		return $this;
	} // setReqmobilecomment()

	/**
	 * Set the value of [reqpagercomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setReqpagercomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reqpagercomment !== $v) {
			$this->reqpagercomment = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::REQPAGERCOMMENT;
		}

		return $this;
	} // setReqpagercomment()

	/**
	 * Set the value of [reqothercomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setReqothercomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reqothercomment !== $v) {
			$this->reqothercomment = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::REQOTHERCOMMENT;
		}

		return $this;
	} // setReqothercomment()

	/**
	 * Set the value of [reqfaxcomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setReqfaxcomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->reqfaxcomment !== $v) {
			$this->reqfaxcomment = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::REQFAXCOMMENT;
		}

		return $this;
	} // setReqfaxcomment()

	/**
	 * Set the value of [campname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setCampname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campname !== $v) {
			$this->campname = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::CAMPNAME;
		}

		return $this;
	} // setCampname()

	/**
	 * Set the value of [campphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setCampphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->campphone !== $v) {
			$this->campphone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::CAMPPHONE;
		}

		return $this;
	} // setCampphone()

	/**
	 * Set the value of [pilotname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPilotname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilotname !== $v) {
			$this->pilotname = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PILOTNAME;
		}

		return $this;
	} // setPilotname()

	/**
	 * Set the value of [pilotfirstname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPilotfirstname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilotfirstname !== $v) {
			$this->pilotfirstname = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PILOTFIRSTNAME;
		}

		return $this;
	} // setPilotfirstname()

	/**
	 * Set the value of [pilotlastname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPilotlastname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilotlastname !== $v) {
			$this->pilotlastname = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PILOTLASTNAME;
		}

		return $this;
	} // setPilotlastname()

	/**
	 * Set the value of [pilotmemberid] column.
	 * 
	 * @param      int $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPilotmemberid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->pilotmemberid !== $v || $v === 0) {
			$this->pilotmemberid = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PILOTMEMBERID;
		}

		return $this;
	} // setPilotmemberid()

	/**
	 * Set the value of [pilotdayphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPilotdayphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilotdayphone !== $v) {
			$this->pilotdayphone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PILOTDAYPHONE;
		}

		return $this;
	} // setPilotdayphone()

	/**
	 * Set the value of [pilotevephone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPilotevephone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilotevephone !== $v) {
			$this->pilotevephone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PILOTEVEPHONE;
		}

		return $this;
	} // setPilotevephone()

	/**
	 * Set the value of [pilotmobilephone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPilotmobilephone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilotmobilephone !== $v) {
			$this->pilotmobilephone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PILOTMOBILEPHONE;
		}

		return $this;
	} // setPilotmobilephone()

	/**
	 * Set the value of [pilototherphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPilototherphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilototherphone !== $v) {
			$this->pilototherphone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PILOTOTHERPHONE;
		}

		return $this;
	} // setPilototherphone()

	/**
	 * Set the value of [pilotpagerphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPilotpagerphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilotpagerphone !== $v) {
			$this->pilotpagerphone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PILOTPAGERPHONE;
		}

		return $this;
	} // setPilotpagerphone()

	/**
	 * Set the value of [pilotfaxphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPilotfaxphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilotfaxphone !== $v) {
			$this->pilotfaxphone = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PILOTFAXPHONE;
		}

		return $this;
	} // setPilotfaxphone()

	/**
	 * Set the value of [homebase] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setHomebase($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->homebase !== $v) {
			$this->homebase = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::HOMEBASE;
		}

		return $this;
	} // setHomebase()

	/**
	 * Set the value of [pilotdaycomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPilotdaycomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilotdaycomment !== $v) {
			$this->pilotdaycomment = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PILOTDAYCOMMENT;
		}

		return $this;
	} // setPilotdaycomment()

	/**
	 * Set the value of [pilotevecomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPilotevecomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilotevecomment !== $v) {
			$this->pilotevecomment = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PILOTEVECOMMENT;
		}

		return $this;
	} // setPilotevecomment()

	/**
	 * Set the value of [pilotmobilecomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPilotmobilecomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilotmobilecomment !== $v) {
			$this->pilotmobilecomment = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PILOTMOBILECOMMENT;
		}

		return $this;
	} // setPilotmobilecomment()

	/**
	 * Set the value of [pilotpagercomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPilotpagercomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilotpagercomment !== $v) {
			$this->pilotpagercomment = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PILOTPAGERCOMMENT;
		}

		return $this;
	} // setPilotpagercomment()

	/**
	 * Set the value of [pilotothercomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPilotothercomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilotothercomment !== $v) {
			$this->pilotothercomment = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PILOTOTHERCOMMENT;
		}

		return $this;
	} // setPilotothercomment()

	/**
	 * Set the value of [pilotfaxcomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPilotfaxcomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilotfaxcomment !== $v) {
			$this->pilotfaxcomment = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PILOTFAXCOMMENT;
		}

		return $this;
	} // setPilotfaxcomment()

	/**
	 * Set the value of [pilotemail] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPilotemail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilotemail !== $v) {
			$this->pilotemail = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PILOTEMAIL;
		}

		return $this;
	} // setPilotemail()

	/**
	 * Set the value of [ifr] column.
	 * 
	 * @param      int $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setIfr($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ifr !== $v) {
			$this->ifr = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::IFR;
		}

		return $this;
	} // setIfr()

	/**
	 * Set the value of [toairportname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setToairportname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->toairportname !== $v) {
			$this->toairportname = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::TOAIRPORTNAME;
		}

		return $this;
	} // setToairportname()

	/**
	 * Set the value of [toairportident] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setToairportident($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->toairportident !== $v) {
			$this->toairportident = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::TOAIRPORTIDENT;
		}

		return $this;
	} // setToairportident()

	/**
	 * Set the value of [fromairportname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setFromairportname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fromairportname !== $v) {
			$this->fromairportname = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::FROMAIRPORTNAME;
		}

		return $this;
	} // setFromairportname()

	/**
	 * Set the value of [fromairportident] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setFromairportident($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fromairportident !== $v) {
			$this->fromairportident = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::FROMAIRPORTIDENT;
		}

		return $this;
	} // setFromairportident()

	/**
	 * Set the value of [missionid] column.
	 * 
	 * @param      int $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setMissionid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->missionid !== $v) {
			$this->missionid = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::MISSIONID;
		}

		return $this;
	} // setMissionid()

	/**
	 * Sets the value of [missionselectdate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setMissionselectdate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->missionselectdate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->missionselectdate !== null && $tmpDt = new DateTime($this->missionselectdate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->missionselectdate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = RpCampPassengersPeer::MISSIONSELECTDATE;
			}
		} // if either are not null

		return $this;
	} // setMissionselectdate()

	/**
	 * Set the value of [missiondate] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setMissiondate($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->missiondate !== $v) {
			$this->missiondate = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::MISSIONDATE;
		}

		return $this;
	} // setMissiondate()

	/**
	 * Set the value of [medicalreleasereceived] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setMedicalreleasereceived($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->medicalreleasereceived !== $v) {
			$this->medicalreleasereceived = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::MEDICALRELEASERECEIVED;
		}

		return $this;
	} // setMedicalreleasereceived()

	/**
	 * Set the value of [waiverreceived] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setWaiverreceived($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->waiverreceived !== $v) {
			$this->waiverreceived = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::WAIVERRECEIVED;
		}

		return $this;
	} // setWaiverreceived()

	/**
	 * Set the value of [private_c_note] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setPrivateCNote($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->private_c_note !== $v) {
			$this->private_c_note = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::PRIVATE_C_NOTE;
		}

		return $this;
	} // setPrivateCNote()

	/**
	 * Set the value of [cancelled] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setCancelled($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cancelled !== $v) {
			$this->cancelled = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::CANCELLED;
		}

		return $this;
	} // setCancelled()

	/**
	 * Set the value of [n_number] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setNNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->n_number !== $v) {
			$this->n_number = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::N_NUMBER;
		}

		return $this;
	} // setNNumber()

	/**
	 * Set the value of [make] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setMake($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->make !== $v) {
			$this->make = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::MAKE;
		}

		return $this;
	} // setMake()

	/**
	 * Set the value of [model] column.
	 * 
	 * @param      string $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setModel($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->model !== $v) {
			$this->model = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::MODEL;
		}

		return $this;
	} // setModel()

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     RpCampPassengers The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = RpCampPassengersPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(RpCampPassengersPeer::PASSID,RpCampPassengersPeer::PASSNAME,RpCampPassengersPeer::REQNAME,RpCampPassengersPeer::PILOTMEMBERID))) {
				return false;
			}

			if ($this->passid !== 0) {
				return false;
			}

			if ($this->passname !== '') {
				return false;
			}

			if ($this->reqname !== '') {
				return false;
			}

			if ($this->pilotmemberid !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->passid = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->passname = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->passlastname = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->passfirstname = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->weight = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->passdayphone = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->passevephone = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->passmobilephone = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->passpagerphone = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->passotherphone = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->passfaxphone = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->passdaycomment = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->passevecomment = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->passmobilecomment = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->passpagercomment = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->passothercomment = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->passfaxcomment = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->reqname = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->reqfirstname = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->reqlastname = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->reqdayphone = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->reqevephone = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->reqmobilephone = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->reqpagerphone = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->reqotherphone = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->reqfaxphone = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->reqdaycomment = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->reqevecomment = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->reqmobilecomment = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->reqpagercomment = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->reqothercomment = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->reqfaxcomment = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->campname = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->campphone = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->pilotname = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->pilotfirstname = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->pilotlastname = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->pilotmemberid = ($row[$startcol + 37] !== null) ? (int) $row[$startcol + 37] : null;
			$this->pilotdayphone = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->pilotevephone = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->pilotmobilephone = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->pilototherphone = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->pilotpagerphone = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
			$this->pilotfaxphone = ($row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
			$this->homebase = ($row[$startcol + 44] !== null) ? (string) $row[$startcol + 44] : null;
			$this->pilotdaycomment = ($row[$startcol + 45] !== null) ? (string) $row[$startcol + 45] : null;
			$this->pilotevecomment = ($row[$startcol + 46] !== null) ? (string) $row[$startcol + 46] : null;
			$this->pilotmobilecomment = ($row[$startcol + 47] !== null) ? (string) $row[$startcol + 47] : null;
			$this->pilotpagercomment = ($row[$startcol + 48] !== null) ? (string) $row[$startcol + 48] : null;
			$this->pilotothercomment = ($row[$startcol + 49] !== null) ? (string) $row[$startcol + 49] : null;
			$this->pilotfaxcomment = ($row[$startcol + 50] !== null) ? (string) $row[$startcol + 50] : null;
			$this->pilotemail = ($row[$startcol + 51] !== null) ? (string) $row[$startcol + 51] : null;
			$this->ifr = ($row[$startcol + 52] !== null) ? (int) $row[$startcol + 52] : null;
			$this->toairportname = ($row[$startcol + 53] !== null) ? (string) $row[$startcol + 53] : null;
			$this->toairportident = ($row[$startcol + 54] !== null) ? (string) $row[$startcol + 54] : null;
			$this->fromairportname = ($row[$startcol + 55] !== null) ? (string) $row[$startcol + 55] : null;
			$this->fromairportident = ($row[$startcol + 56] !== null) ? (string) $row[$startcol + 56] : null;
			$this->missionid = ($row[$startcol + 57] !== null) ? (int) $row[$startcol + 57] : null;
			$this->missionselectdate = ($row[$startcol + 58] !== null) ? (string) $row[$startcol + 58] : null;
			$this->missiondate = ($row[$startcol + 59] !== null) ? (string) $row[$startcol + 59] : null;
			$this->medicalreleasereceived = ($row[$startcol + 60] !== null) ? (string) $row[$startcol + 60] : null;
			$this->waiverreceived = ($row[$startcol + 61] !== null) ? (string) $row[$startcol + 61] : null;
			$this->private_c_note = ($row[$startcol + 62] !== null) ? (string) $row[$startcol + 62] : null;
			$this->cancelled = ($row[$startcol + 63] !== null) ? (string) $row[$startcol + 63] : null;
			$this->n_number = ($row[$startcol + 64] !== null) ? (string) $row[$startcol + 64] : null;
			$this->make = ($row[$startcol + 65] !== null) ? (string) $row[$startcol + 65] : null;
			$this->model = ($row[$startcol + 66] !== null) ? (string) $row[$startcol + 66] : null;
			$this->id = ($row[$startcol + 67] !== null) ? (int) $row[$startcol + 67] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 68; // 68 = RpCampPassengersPeer::NUM_COLUMNS - RpCampPassengersPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating RpCampPassengers object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RpCampPassengersPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = RpCampPassengersPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRpCampPassengers:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RpCampPassengersPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			RpCampPassengersPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseRpCampPassengers:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRpCampPassengers:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RpCampPassengersPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseRpCampPassengers:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			RpCampPassengersPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = RpCampPassengersPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = RpCampPassengersPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += RpCampPassengersPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = RpCampPassengersPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RpCampPassengersPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getPassid();
				break;
			case 1:
				return $this->getPassname();
				break;
			case 2:
				return $this->getPasslastname();
				break;
			case 3:
				return $this->getPassfirstname();
				break;
			case 4:
				return $this->getWeight();
				break;
			case 5:
				return $this->getPassdayphone();
				break;
			case 6:
				return $this->getPassevephone();
				break;
			case 7:
				return $this->getPassmobilephone();
				break;
			case 8:
				return $this->getPasspagerphone();
				break;
			case 9:
				return $this->getPassotherphone();
				break;
			case 10:
				return $this->getPassfaxphone();
				break;
			case 11:
				return $this->getPassdaycomment();
				break;
			case 12:
				return $this->getPassevecomment();
				break;
			case 13:
				return $this->getPassmobilecomment();
				break;
			case 14:
				return $this->getPasspagercomment();
				break;
			case 15:
				return $this->getPassothercomment();
				break;
			case 16:
				return $this->getPassfaxcomment();
				break;
			case 17:
				return $this->getReqname();
				break;
			case 18:
				return $this->getReqfirstname();
				break;
			case 19:
				return $this->getReqlastname();
				break;
			case 20:
				return $this->getReqdayphone();
				break;
			case 21:
				return $this->getReqevephone();
				break;
			case 22:
				return $this->getReqmobilephone();
				break;
			case 23:
				return $this->getReqpagerphone();
				break;
			case 24:
				return $this->getReqotherphone();
				break;
			case 25:
				return $this->getReqfaxphone();
				break;
			case 26:
				return $this->getReqdaycomment();
				break;
			case 27:
				return $this->getReqevecomment();
				break;
			case 28:
				return $this->getReqmobilecomment();
				break;
			case 29:
				return $this->getReqpagercomment();
				break;
			case 30:
				return $this->getReqothercomment();
				break;
			case 31:
				return $this->getReqfaxcomment();
				break;
			case 32:
				return $this->getCampname();
				break;
			case 33:
				return $this->getCampphone();
				break;
			case 34:
				return $this->getPilotname();
				break;
			case 35:
				return $this->getPilotfirstname();
				break;
			case 36:
				return $this->getPilotlastname();
				break;
			case 37:
				return $this->getPilotmemberid();
				break;
			case 38:
				return $this->getPilotdayphone();
				break;
			case 39:
				return $this->getPilotevephone();
				break;
			case 40:
				return $this->getPilotmobilephone();
				break;
			case 41:
				return $this->getPilototherphone();
				break;
			case 42:
				return $this->getPilotpagerphone();
				break;
			case 43:
				return $this->getPilotfaxphone();
				break;
			case 44:
				return $this->getHomebase();
				break;
			case 45:
				return $this->getPilotdaycomment();
				break;
			case 46:
				return $this->getPilotevecomment();
				break;
			case 47:
				return $this->getPilotmobilecomment();
				break;
			case 48:
				return $this->getPilotpagercomment();
				break;
			case 49:
				return $this->getPilotothercomment();
				break;
			case 50:
				return $this->getPilotfaxcomment();
				break;
			case 51:
				return $this->getPilotemail();
				break;
			case 52:
				return $this->getIfr();
				break;
			case 53:
				return $this->getToairportname();
				break;
			case 54:
				return $this->getToairportident();
				break;
			case 55:
				return $this->getFromairportname();
				break;
			case 56:
				return $this->getFromairportident();
				break;
			case 57:
				return $this->getMissionid();
				break;
			case 58:
				return $this->getMissionselectdate();
				break;
			case 59:
				return $this->getMissiondate();
				break;
			case 60:
				return $this->getMedicalreleasereceived();
				break;
			case 61:
				return $this->getWaiverreceived();
				break;
			case 62:
				return $this->getPrivateCNote();
				break;
			case 63:
				return $this->getCancelled();
				break;
			case 64:
				return $this->getNNumber();
				break;
			case 65:
				return $this->getMake();
				break;
			case 66:
				return $this->getModel();
				break;
			case 67:
				return $this->getId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = RpCampPassengersPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getPassid(),
			$keys[1] => $this->getPassname(),
			$keys[2] => $this->getPasslastname(),
			$keys[3] => $this->getPassfirstname(),
			$keys[4] => $this->getWeight(),
			$keys[5] => $this->getPassdayphone(),
			$keys[6] => $this->getPassevephone(),
			$keys[7] => $this->getPassmobilephone(),
			$keys[8] => $this->getPasspagerphone(),
			$keys[9] => $this->getPassotherphone(),
			$keys[10] => $this->getPassfaxphone(),
			$keys[11] => $this->getPassdaycomment(),
			$keys[12] => $this->getPassevecomment(),
			$keys[13] => $this->getPassmobilecomment(),
			$keys[14] => $this->getPasspagercomment(),
			$keys[15] => $this->getPassothercomment(),
			$keys[16] => $this->getPassfaxcomment(),
			$keys[17] => $this->getReqname(),
			$keys[18] => $this->getReqfirstname(),
			$keys[19] => $this->getReqlastname(),
			$keys[20] => $this->getReqdayphone(),
			$keys[21] => $this->getReqevephone(),
			$keys[22] => $this->getReqmobilephone(),
			$keys[23] => $this->getReqpagerphone(),
			$keys[24] => $this->getReqotherphone(),
			$keys[25] => $this->getReqfaxphone(),
			$keys[26] => $this->getReqdaycomment(),
			$keys[27] => $this->getReqevecomment(),
			$keys[28] => $this->getReqmobilecomment(),
			$keys[29] => $this->getReqpagercomment(),
			$keys[30] => $this->getReqothercomment(),
			$keys[31] => $this->getReqfaxcomment(),
			$keys[32] => $this->getCampname(),
			$keys[33] => $this->getCampphone(),
			$keys[34] => $this->getPilotname(),
			$keys[35] => $this->getPilotfirstname(),
			$keys[36] => $this->getPilotlastname(),
			$keys[37] => $this->getPilotmemberid(),
			$keys[38] => $this->getPilotdayphone(),
			$keys[39] => $this->getPilotevephone(),
			$keys[40] => $this->getPilotmobilephone(),
			$keys[41] => $this->getPilototherphone(),
			$keys[42] => $this->getPilotpagerphone(),
			$keys[43] => $this->getPilotfaxphone(),
			$keys[44] => $this->getHomebase(),
			$keys[45] => $this->getPilotdaycomment(),
			$keys[46] => $this->getPilotevecomment(),
			$keys[47] => $this->getPilotmobilecomment(),
			$keys[48] => $this->getPilotpagercomment(),
			$keys[49] => $this->getPilotothercomment(),
			$keys[50] => $this->getPilotfaxcomment(),
			$keys[51] => $this->getPilotemail(),
			$keys[52] => $this->getIfr(),
			$keys[53] => $this->getToairportname(),
			$keys[54] => $this->getToairportident(),
			$keys[55] => $this->getFromairportname(),
			$keys[56] => $this->getFromairportident(),
			$keys[57] => $this->getMissionid(),
			$keys[58] => $this->getMissionselectdate(),
			$keys[59] => $this->getMissiondate(),
			$keys[60] => $this->getMedicalreleasereceived(),
			$keys[61] => $this->getWaiverreceived(),
			$keys[62] => $this->getPrivateCNote(),
			$keys[63] => $this->getCancelled(),
			$keys[64] => $this->getNNumber(),
			$keys[65] => $this->getMake(),
			$keys[66] => $this->getModel(),
			$keys[67] => $this->getId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RpCampPassengersPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setPassid($value);
				break;
			case 1:
				$this->setPassname($value);
				break;
			case 2:
				$this->setPasslastname($value);
				break;
			case 3:
				$this->setPassfirstname($value);
				break;
			case 4:
				$this->setWeight($value);
				break;
			case 5:
				$this->setPassdayphone($value);
				break;
			case 6:
				$this->setPassevephone($value);
				break;
			case 7:
				$this->setPassmobilephone($value);
				break;
			case 8:
				$this->setPasspagerphone($value);
				break;
			case 9:
				$this->setPassotherphone($value);
				break;
			case 10:
				$this->setPassfaxphone($value);
				break;
			case 11:
				$this->setPassdaycomment($value);
				break;
			case 12:
				$this->setPassevecomment($value);
				break;
			case 13:
				$this->setPassmobilecomment($value);
				break;
			case 14:
				$this->setPasspagercomment($value);
				break;
			case 15:
				$this->setPassothercomment($value);
				break;
			case 16:
				$this->setPassfaxcomment($value);
				break;
			case 17:
				$this->setReqname($value);
				break;
			case 18:
				$this->setReqfirstname($value);
				break;
			case 19:
				$this->setReqlastname($value);
				break;
			case 20:
				$this->setReqdayphone($value);
				break;
			case 21:
				$this->setReqevephone($value);
				break;
			case 22:
				$this->setReqmobilephone($value);
				break;
			case 23:
				$this->setReqpagerphone($value);
				break;
			case 24:
				$this->setReqotherphone($value);
				break;
			case 25:
				$this->setReqfaxphone($value);
				break;
			case 26:
				$this->setReqdaycomment($value);
				break;
			case 27:
				$this->setReqevecomment($value);
				break;
			case 28:
				$this->setReqmobilecomment($value);
				break;
			case 29:
				$this->setReqpagercomment($value);
				break;
			case 30:
				$this->setReqothercomment($value);
				break;
			case 31:
				$this->setReqfaxcomment($value);
				break;
			case 32:
				$this->setCampname($value);
				break;
			case 33:
				$this->setCampphone($value);
				break;
			case 34:
				$this->setPilotname($value);
				break;
			case 35:
				$this->setPilotfirstname($value);
				break;
			case 36:
				$this->setPilotlastname($value);
				break;
			case 37:
				$this->setPilotmemberid($value);
				break;
			case 38:
				$this->setPilotdayphone($value);
				break;
			case 39:
				$this->setPilotevephone($value);
				break;
			case 40:
				$this->setPilotmobilephone($value);
				break;
			case 41:
				$this->setPilototherphone($value);
				break;
			case 42:
				$this->setPilotpagerphone($value);
				break;
			case 43:
				$this->setPilotfaxphone($value);
				break;
			case 44:
				$this->setHomebase($value);
				break;
			case 45:
				$this->setPilotdaycomment($value);
				break;
			case 46:
				$this->setPilotevecomment($value);
				break;
			case 47:
				$this->setPilotmobilecomment($value);
				break;
			case 48:
				$this->setPilotpagercomment($value);
				break;
			case 49:
				$this->setPilotothercomment($value);
				break;
			case 50:
				$this->setPilotfaxcomment($value);
				break;
			case 51:
				$this->setPilotemail($value);
				break;
			case 52:
				$this->setIfr($value);
				break;
			case 53:
				$this->setToairportname($value);
				break;
			case 54:
				$this->setToairportident($value);
				break;
			case 55:
				$this->setFromairportname($value);
				break;
			case 56:
				$this->setFromairportident($value);
				break;
			case 57:
				$this->setMissionid($value);
				break;
			case 58:
				$this->setMissionselectdate($value);
				break;
			case 59:
				$this->setMissiondate($value);
				break;
			case 60:
				$this->setMedicalreleasereceived($value);
				break;
			case 61:
				$this->setWaiverreceived($value);
				break;
			case 62:
				$this->setPrivateCNote($value);
				break;
			case 63:
				$this->setCancelled($value);
				break;
			case 64:
				$this->setNNumber($value);
				break;
			case 65:
				$this->setMake($value);
				break;
			case 66:
				$this->setModel($value);
				break;
			case 67:
				$this->setId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = RpCampPassengersPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setPassid($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setPassname($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setPasslastname($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setPassfirstname($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setWeight($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setPassdayphone($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setPassevephone($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setPassmobilephone($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setPasspagerphone($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPassotherphone($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPassfaxphone($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setPassdaycomment($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setPassevecomment($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setPassmobilecomment($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setPasspagercomment($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setPassothercomment($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setPassfaxcomment($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setReqname($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setReqfirstname($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setReqlastname($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setReqdayphone($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setReqevephone($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setReqmobilephone($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setReqpagerphone($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setReqotherphone($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setReqfaxphone($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setReqdaycomment($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setReqevecomment($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setReqmobilecomment($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setReqpagercomment($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setReqothercomment($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setReqfaxcomment($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setCampname($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setCampphone($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setPilotname($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setPilotfirstname($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setPilotlastname($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setPilotmemberid($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setPilotdayphone($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setPilotevephone($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setPilotmobilephone($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setPilototherphone($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setPilotpagerphone($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setPilotfaxphone($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setHomebase($arr[$keys[44]]);
		if (array_key_exists($keys[45], $arr)) $this->setPilotdaycomment($arr[$keys[45]]);
		if (array_key_exists($keys[46], $arr)) $this->setPilotevecomment($arr[$keys[46]]);
		if (array_key_exists($keys[47], $arr)) $this->setPilotmobilecomment($arr[$keys[47]]);
		if (array_key_exists($keys[48], $arr)) $this->setPilotpagercomment($arr[$keys[48]]);
		if (array_key_exists($keys[49], $arr)) $this->setPilotothercomment($arr[$keys[49]]);
		if (array_key_exists($keys[50], $arr)) $this->setPilotfaxcomment($arr[$keys[50]]);
		if (array_key_exists($keys[51], $arr)) $this->setPilotemail($arr[$keys[51]]);
		if (array_key_exists($keys[52], $arr)) $this->setIfr($arr[$keys[52]]);
		if (array_key_exists($keys[53], $arr)) $this->setToairportname($arr[$keys[53]]);
		if (array_key_exists($keys[54], $arr)) $this->setToairportident($arr[$keys[54]]);
		if (array_key_exists($keys[55], $arr)) $this->setFromairportname($arr[$keys[55]]);
		if (array_key_exists($keys[56], $arr)) $this->setFromairportident($arr[$keys[56]]);
		if (array_key_exists($keys[57], $arr)) $this->setMissionid($arr[$keys[57]]);
		if (array_key_exists($keys[58], $arr)) $this->setMissionselectdate($arr[$keys[58]]);
		if (array_key_exists($keys[59], $arr)) $this->setMissiondate($arr[$keys[59]]);
		if (array_key_exists($keys[60], $arr)) $this->setMedicalreleasereceived($arr[$keys[60]]);
		if (array_key_exists($keys[61], $arr)) $this->setWaiverreceived($arr[$keys[61]]);
		if (array_key_exists($keys[62], $arr)) $this->setPrivateCNote($arr[$keys[62]]);
		if (array_key_exists($keys[63], $arr)) $this->setCancelled($arr[$keys[63]]);
		if (array_key_exists($keys[64], $arr)) $this->setNNumber($arr[$keys[64]]);
		if (array_key_exists($keys[65], $arr)) $this->setMake($arr[$keys[65]]);
		if (array_key_exists($keys[66], $arr)) $this->setModel($arr[$keys[66]]);
		if (array_key_exists($keys[67], $arr)) $this->setId($arr[$keys[67]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(RpCampPassengersPeer::DATABASE_NAME);

		if ($this->isColumnModified(RpCampPassengersPeer::PASSID)) $criteria->add(RpCampPassengersPeer::PASSID, $this->passid);
		if ($this->isColumnModified(RpCampPassengersPeer::PASSNAME)) $criteria->add(RpCampPassengersPeer::PASSNAME, $this->passname);
		if ($this->isColumnModified(RpCampPassengersPeer::PASSLASTNAME)) $criteria->add(RpCampPassengersPeer::PASSLASTNAME, $this->passlastname);
		if ($this->isColumnModified(RpCampPassengersPeer::PASSFIRSTNAME)) $criteria->add(RpCampPassengersPeer::PASSFIRSTNAME, $this->passfirstname);
		if ($this->isColumnModified(RpCampPassengersPeer::WEIGHT)) $criteria->add(RpCampPassengersPeer::WEIGHT, $this->weight);
		if ($this->isColumnModified(RpCampPassengersPeer::PASSDAYPHONE)) $criteria->add(RpCampPassengersPeer::PASSDAYPHONE, $this->passdayphone);
		if ($this->isColumnModified(RpCampPassengersPeer::PASSEVEPHONE)) $criteria->add(RpCampPassengersPeer::PASSEVEPHONE, $this->passevephone);
		if ($this->isColumnModified(RpCampPassengersPeer::PASSMOBILEPHONE)) $criteria->add(RpCampPassengersPeer::PASSMOBILEPHONE, $this->passmobilephone);
		if ($this->isColumnModified(RpCampPassengersPeer::PASSPAGERPHONE)) $criteria->add(RpCampPassengersPeer::PASSPAGERPHONE, $this->passpagerphone);
		if ($this->isColumnModified(RpCampPassengersPeer::PASSOTHERPHONE)) $criteria->add(RpCampPassengersPeer::PASSOTHERPHONE, $this->passotherphone);
		if ($this->isColumnModified(RpCampPassengersPeer::PASSFAXPHONE)) $criteria->add(RpCampPassengersPeer::PASSFAXPHONE, $this->passfaxphone);
		if ($this->isColumnModified(RpCampPassengersPeer::PASSDAYCOMMENT)) $criteria->add(RpCampPassengersPeer::PASSDAYCOMMENT, $this->passdaycomment);
		if ($this->isColumnModified(RpCampPassengersPeer::PASSEVECOMMENT)) $criteria->add(RpCampPassengersPeer::PASSEVECOMMENT, $this->passevecomment);
		if ($this->isColumnModified(RpCampPassengersPeer::PASSMOBILECOMMENT)) $criteria->add(RpCampPassengersPeer::PASSMOBILECOMMENT, $this->passmobilecomment);
		if ($this->isColumnModified(RpCampPassengersPeer::PASSPAGERCOMMENT)) $criteria->add(RpCampPassengersPeer::PASSPAGERCOMMENT, $this->passpagercomment);
		if ($this->isColumnModified(RpCampPassengersPeer::PASSOTHERCOMMENT)) $criteria->add(RpCampPassengersPeer::PASSOTHERCOMMENT, $this->passothercomment);
		if ($this->isColumnModified(RpCampPassengersPeer::PASSFAXCOMMENT)) $criteria->add(RpCampPassengersPeer::PASSFAXCOMMENT, $this->passfaxcomment);
		if ($this->isColumnModified(RpCampPassengersPeer::REQNAME)) $criteria->add(RpCampPassengersPeer::REQNAME, $this->reqname);
		if ($this->isColumnModified(RpCampPassengersPeer::REQFIRSTNAME)) $criteria->add(RpCampPassengersPeer::REQFIRSTNAME, $this->reqfirstname);
		if ($this->isColumnModified(RpCampPassengersPeer::REQLASTNAME)) $criteria->add(RpCampPassengersPeer::REQLASTNAME, $this->reqlastname);
		if ($this->isColumnModified(RpCampPassengersPeer::REQDAYPHONE)) $criteria->add(RpCampPassengersPeer::REQDAYPHONE, $this->reqdayphone);
		if ($this->isColumnModified(RpCampPassengersPeer::REQEVEPHONE)) $criteria->add(RpCampPassengersPeer::REQEVEPHONE, $this->reqevephone);
		if ($this->isColumnModified(RpCampPassengersPeer::REQMOBILEPHONE)) $criteria->add(RpCampPassengersPeer::REQMOBILEPHONE, $this->reqmobilephone);
		if ($this->isColumnModified(RpCampPassengersPeer::REQPAGERPHONE)) $criteria->add(RpCampPassengersPeer::REQPAGERPHONE, $this->reqpagerphone);
		if ($this->isColumnModified(RpCampPassengersPeer::REQOTHERPHONE)) $criteria->add(RpCampPassengersPeer::REQOTHERPHONE, $this->reqotherphone);
		if ($this->isColumnModified(RpCampPassengersPeer::REQFAXPHONE)) $criteria->add(RpCampPassengersPeer::REQFAXPHONE, $this->reqfaxphone);
		if ($this->isColumnModified(RpCampPassengersPeer::REQDAYCOMMENT)) $criteria->add(RpCampPassengersPeer::REQDAYCOMMENT, $this->reqdaycomment);
		if ($this->isColumnModified(RpCampPassengersPeer::REQEVECOMMENT)) $criteria->add(RpCampPassengersPeer::REQEVECOMMENT, $this->reqevecomment);
		if ($this->isColumnModified(RpCampPassengersPeer::REQMOBILECOMMENT)) $criteria->add(RpCampPassengersPeer::REQMOBILECOMMENT, $this->reqmobilecomment);
		if ($this->isColumnModified(RpCampPassengersPeer::REQPAGERCOMMENT)) $criteria->add(RpCampPassengersPeer::REQPAGERCOMMENT, $this->reqpagercomment);
		if ($this->isColumnModified(RpCampPassengersPeer::REQOTHERCOMMENT)) $criteria->add(RpCampPassengersPeer::REQOTHERCOMMENT, $this->reqothercomment);
		if ($this->isColumnModified(RpCampPassengersPeer::REQFAXCOMMENT)) $criteria->add(RpCampPassengersPeer::REQFAXCOMMENT, $this->reqfaxcomment);
		if ($this->isColumnModified(RpCampPassengersPeer::CAMPNAME)) $criteria->add(RpCampPassengersPeer::CAMPNAME, $this->campname);
		if ($this->isColumnModified(RpCampPassengersPeer::CAMPPHONE)) $criteria->add(RpCampPassengersPeer::CAMPPHONE, $this->campphone);
		if ($this->isColumnModified(RpCampPassengersPeer::PILOTNAME)) $criteria->add(RpCampPassengersPeer::PILOTNAME, $this->pilotname);
		if ($this->isColumnModified(RpCampPassengersPeer::PILOTFIRSTNAME)) $criteria->add(RpCampPassengersPeer::PILOTFIRSTNAME, $this->pilotfirstname);
		if ($this->isColumnModified(RpCampPassengersPeer::PILOTLASTNAME)) $criteria->add(RpCampPassengersPeer::PILOTLASTNAME, $this->pilotlastname);
		if ($this->isColumnModified(RpCampPassengersPeer::PILOTMEMBERID)) $criteria->add(RpCampPassengersPeer::PILOTMEMBERID, $this->pilotmemberid);
		if ($this->isColumnModified(RpCampPassengersPeer::PILOTDAYPHONE)) $criteria->add(RpCampPassengersPeer::PILOTDAYPHONE, $this->pilotdayphone);
		if ($this->isColumnModified(RpCampPassengersPeer::PILOTEVEPHONE)) $criteria->add(RpCampPassengersPeer::PILOTEVEPHONE, $this->pilotevephone);
		if ($this->isColumnModified(RpCampPassengersPeer::PILOTMOBILEPHONE)) $criteria->add(RpCampPassengersPeer::PILOTMOBILEPHONE, $this->pilotmobilephone);
		if ($this->isColumnModified(RpCampPassengersPeer::PILOTOTHERPHONE)) $criteria->add(RpCampPassengersPeer::PILOTOTHERPHONE, $this->pilototherphone);
		if ($this->isColumnModified(RpCampPassengersPeer::PILOTPAGERPHONE)) $criteria->add(RpCampPassengersPeer::PILOTPAGERPHONE, $this->pilotpagerphone);
		if ($this->isColumnModified(RpCampPassengersPeer::PILOTFAXPHONE)) $criteria->add(RpCampPassengersPeer::PILOTFAXPHONE, $this->pilotfaxphone);
		if ($this->isColumnModified(RpCampPassengersPeer::HOMEBASE)) $criteria->add(RpCampPassengersPeer::HOMEBASE, $this->homebase);
		if ($this->isColumnModified(RpCampPassengersPeer::PILOTDAYCOMMENT)) $criteria->add(RpCampPassengersPeer::PILOTDAYCOMMENT, $this->pilotdaycomment);
		if ($this->isColumnModified(RpCampPassengersPeer::PILOTEVECOMMENT)) $criteria->add(RpCampPassengersPeer::PILOTEVECOMMENT, $this->pilotevecomment);
		if ($this->isColumnModified(RpCampPassengersPeer::PILOTMOBILECOMMENT)) $criteria->add(RpCampPassengersPeer::PILOTMOBILECOMMENT, $this->pilotmobilecomment);
		if ($this->isColumnModified(RpCampPassengersPeer::PILOTPAGERCOMMENT)) $criteria->add(RpCampPassengersPeer::PILOTPAGERCOMMENT, $this->pilotpagercomment);
		if ($this->isColumnModified(RpCampPassengersPeer::PILOTOTHERCOMMENT)) $criteria->add(RpCampPassengersPeer::PILOTOTHERCOMMENT, $this->pilotothercomment);
		if ($this->isColumnModified(RpCampPassengersPeer::PILOTFAXCOMMENT)) $criteria->add(RpCampPassengersPeer::PILOTFAXCOMMENT, $this->pilotfaxcomment);
		if ($this->isColumnModified(RpCampPassengersPeer::PILOTEMAIL)) $criteria->add(RpCampPassengersPeer::PILOTEMAIL, $this->pilotemail);
		if ($this->isColumnModified(RpCampPassengersPeer::IFR)) $criteria->add(RpCampPassengersPeer::IFR, $this->ifr);
		if ($this->isColumnModified(RpCampPassengersPeer::TOAIRPORTNAME)) $criteria->add(RpCampPassengersPeer::TOAIRPORTNAME, $this->toairportname);
		if ($this->isColumnModified(RpCampPassengersPeer::TOAIRPORTIDENT)) $criteria->add(RpCampPassengersPeer::TOAIRPORTIDENT, $this->toairportident);
		if ($this->isColumnModified(RpCampPassengersPeer::FROMAIRPORTNAME)) $criteria->add(RpCampPassengersPeer::FROMAIRPORTNAME, $this->fromairportname);
		if ($this->isColumnModified(RpCampPassengersPeer::FROMAIRPORTIDENT)) $criteria->add(RpCampPassengersPeer::FROMAIRPORTIDENT, $this->fromairportident);
		if ($this->isColumnModified(RpCampPassengersPeer::MISSIONID)) $criteria->add(RpCampPassengersPeer::MISSIONID, $this->missionid);
		if ($this->isColumnModified(RpCampPassengersPeer::MISSIONSELECTDATE)) $criteria->add(RpCampPassengersPeer::MISSIONSELECTDATE, $this->missionselectdate);
		if ($this->isColumnModified(RpCampPassengersPeer::MISSIONDATE)) $criteria->add(RpCampPassengersPeer::MISSIONDATE, $this->missiondate);
		if ($this->isColumnModified(RpCampPassengersPeer::MEDICALRELEASERECEIVED)) $criteria->add(RpCampPassengersPeer::MEDICALRELEASERECEIVED, $this->medicalreleasereceived);
		if ($this->isColumnModified(RpCampPassengersPeer::WAIVERRECEIVED)) $criteria->add(RpCampPassengersPeer::WAIVERRECEIVED, $this->waiverreceived);
		if ($this->isColumnModified(RpCampPassengersPeer::PRIVATE_C_NOTE)) $criteria->add(RpCampPassengersPeer::PRIVATE_C_NOTE, $this->private_c_note);
		if ($this->isColumnModified(RpCampPassengersPeer::CANCELLED)) $criteria->add(RpCampPassengersPeer::CANCELLED, $this->cancelled);
		if ($this->isColumnModified(RpCampPassengersPeer::N_NUMBER)) $criteria->add(RpCampPassengersPeer::N_NUMBER, $this->n_number);
		if ($this->isColumnModified(RpCampPassengersPeer::MAKE)) $criteria->add(RpCampPassengersPeer::MAKE, $this->make);
		if ($this->isColumnModified(RpCampPassengersPeer::MODEL)) $criteria->add(RpCampPassengersPeer::MODEL, $this->model);
		if ($this->isColumnModified(RpCampPassengersPeer::ID)) $criteria->add(RpCampPassengersPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(RpCampPassengersPeer::DATABASE_NAME);

		$criteria->add(RpCampPassengersPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of RpCampPassengers (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setPassid($this->passid);

		$copyObj->setPassname($this->passname);

		$copyObj->setPasslastname($this->passlastname);

		$copyObj->setPassfirstname($this->passfirstname);

		$copyObj->setWeight($this->weight);

		$copyObj->setPassdayphone($this->passdayphone);

		$copyObj->setPassevephone($this->passevephone);

		$copyObj->setPassmobilephone($this->passmobilephone);

		$copyObj->setPasspagerphone($this->passpagerphone);

		$copyObj->setPassotherphone($this->passotherphone);

		$copyObj->setPassfaxphone($this->passfaxphone);

		$copyObj->setPassdaycomment($this->passdaycomment);

		$copyObj->setPassevecomment($this->passevecomment);

		$copyObj->setPassmobilecomment($this->passmobilecomment);

		$copyObj->setPasspagercomment($this->passpagercomment);

		$copyObj->setPassothercomment($this->passothercomment);

		$copyObj->setPassfaxcomment($this->passfaxcomment);

		$copyObj->setReqname($this->reqname);

		$copyObj->setReqfirstname($this->reqfirstname);

		$copyObj->setReqlastname($this->reqlastname);

		$copyObj->setReqdayphone($this->reqdayphone);

		$copyObj->setReqevephone($this->reqevephone);

		$copyObj->setReqmobilephone($this->reqmobilephone);

		$copyObj->setReqpagerphone($this->reqpagerphone);

		$copyObj->setReqotherphone($this->reqotherphone);

		$copyObj->setReqfaxphone($this->reqfaxphone);

		$copyObj->setReqdaycomment($this->reqdaycomment);

		$copyObj->setReqevecomment($this->reqevecomment);

		$copyObj->setReqmobilecomment($this->reqmobilecomment);

		$copyObj->setReqpagercomment($this->reqpagercomment);

		$copyObj->setReqothercomment($this->reqothercomment);

		$copyObj->setReqfaxcomment($this->reqfaxcomment);

		$copyObj->setCampname($this->campname);

		$copyObj->setCampphone($this->campphone);

		$copyObj->setPilotname($this->pilotname);

		$copyObj->setPilotfirstname($this->pilotfirstname);

		$copyObj->setPilotlastname($this->pilotlastname);

		$copyObj->setPilotmemberid($this->pilotmemberid);

		$copyObj->setPilotdayphone($this->pilotdayphone);

		$copyObj->setPilotevephone($this->pilotevephone);

		$copyObj->setPilotmobilephone($this->pilotmobilephone);

		$copyObj->setPilototherphone($this->pilototherphone);

		$copyObj->setPilotpagerphone($this->pilotpagerphone);

		$copyObj->setPilotfaxphone($this->pilotfaxphone);

		$copyObj->setHomebase($this->homebase);

		$copyObj->setPilotdaycomment($this->pilotdaycomment);

		$copyObj->setPilotevecomment($this->pilotevecomment);

		$copyObj->setPilotmobilecomment($this->pilotmobilecomment);

		$copyObj->setPilotpagercomment($this->pilotpagercomment);

		$copyObj->setPilotothercomment($this->pilotothercomment);

		$copyObj->setPilotfaxcomment($this->pilotfaxcomment);

		$copyObj->setPilotemail($this->pilotemail);

		$copyObj->setIfr($this->ifr);

		$copyObj->setToairportname($this->toairportname);

		$copyObj->setToairportident($this->toairportident);

		$copyObj->setFromairportname($this->fromairportname);

		$copyObj->setFromairportident($this->fromairportident);

		$copyObj->setMissionid($this->missionid);

		$copyObj->setMissionselectdate($this->missionselectdate);

		$copyObj->setMissiondate($this->missiondate);

		$copyObj->setMedicalreleasereceived($this->medicalreleasereceived);

		$copyObj->setWaiverreceived($this->waiverreceived);

		$copyObj->setPrivateCNote($this->private_c_note);

		$copyObj->setCancelled($this->cancelled);

		$copyObj->setNNumber($this->n_number);

		$copyObj->setMake($this->make);

		$copyObj->setModel($this->model);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     RpCampPassengers Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     RpCampPassengersPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new RpCampPassengersPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseRpCampPassengers:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseRpCampPassengers::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseRpCampPassengers
