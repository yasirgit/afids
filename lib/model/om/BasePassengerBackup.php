<?php

/**
 * Base class that represents a row from the 'passenger_backup' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue May 24 06:33:29 2011
 *
 * @package    lib.model.om
 */
abstract class BasePassengerBackup extends BaseObject  implements Persistent {


  const PEER = 'PassengerBackupPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PassengerBackupPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the person_id field.
	 * @var        int
	 */
	protected $person_id;

	/**
	 * The value for the passenger_type_id field.
	 * @var        int
	 */
	protected $passenger_type_id;

	/**
	 * The value for the parent field.
	 * @var        string
	 */
	protected $parent;

	/**
	 * The value for the date_of_birth field.
	 * @var        string
	 */
	protected $date_of_birth;

	/**
	 * The value for the illness field.
	 * @var        string
	 */
	protected $illness;

	/**
	 * The value for the financial field.
	 * @var        string
	 */
	protected $financial;

	/**
	 * The value for the weight field.
	 * @var        int
	 */
	protected $weight;

	/**
	 * The value for the public_considerations field.
	 * @var        string
	 */
	protected $public_considerations;

	/**
	 * The value for the private_considerations field.
	 * @var        string
	 */
	protected $private_considerations;

	/**
	 * The value for the releasing_physician field.
	 * @var        string
	 */
	protected $releasing_physician;

	/**
	 * The value for the releasing_phone field.
	 * @var        string
	 */
	protected $releasing_phone;

	/**
	 * The value for the lodging_name field.
	 * @var        string
	 */
	protected $lodging_name;

	/**
	 * The value for the lodging_phone field.
	 * @var        string
	 */
	protected $lodging_phone;

	/**
	 * The value for the lodging_phone_comment field.
	 * @var        string
	 */
	protected $lodging_phone_comment;

	/**
	 * The value for the facility_name field.
	 * @var        string
	 */
	protected $facility_name;

	/**
	 * The value for the facility_phone field.
	 * @var        string
	 */
	protected $facility_phone;

	/**
	 * The value for the facility_phone_comment field.
	 * @var        string
	 */
	protected $facility_phone_comment;

	/**
	 * The value for the requester_id field.
	 * @var        int
	 */
	protected $requester_id;

	/**
	 * The value for the medical_release_requested field.
	 * @var        string
	 */
	protected $medical_release_requested;

	/**
	 * The value for the medical_release_received field.
	 * @var        string
	 */
	protected $medical_release_received;

	/**
	 * The value for the passenger_illness_category_id field.
	 * @var        int
	 */
	protected $passenger_illness_category_id;

	/**
	 * The value for the releasing_fax1 field.
	 * @var        int
	 */
	protected $releasing_fax1;

	/**
	 * The value for the releasing_fax1_comment field.
	 * @var        string
	 */
	protected $releasing_fax1_comment;

	/**
	 * The value for the releasing_email field.
	 * @var        string
	 */
	protected $releasing_email;

	/**
	 * The value for the treating_physician field.
	 * @var        string
	 */
	protected $treating_physician;

	/**
	 * The value for the treating_phone field.
	 * @var        int
	 */
	protected $treating_phone;

	/**
	 * The value for the treating_fax1 field.
	 * @var        string
	 */
	protected $treating_fax1;

	/**
	 * The value for the treating_fax1_comment field.
	 * @var        string
	 */
	protected $treating_fax1_comment;

	/**
	 * The value for the treating_email field.
	 * @var        string
	 */
	protected $treating_email;

	/**
	 * The value for the language_spoken field.
	 * @var        string
	 */
	protected $language_spoken;

	/**
	 * The value for the best_contact_method field.
	 * @var        string
	 */
	protected $best_contact_method;

	/**
	 * The value for the emergency_contact_name field.
	 * @var        string
	 */
	protected $emergency_contact_name;

	/**
	 * The value for the emergency_contact_primary_phone field.
	 * @var        string
	 */
	protected $emergency_contact_primary_phone;

	/**
	 * The value for the emergency_contact_secondary_phone field.
	 * @var        string
	 */
	protected $emergency_contact_secondary_phone;

	/**
	 * The value for the emergency_contact_primary_comment field.
	 * @var        string
	 */
	protected $emergency_contact_primary_comment;

	/**
	 * The value for the emergency_contact_secondary_comment field.
	 * @var        string
	 */
	protected $emergency_contact_secondary_comment;

	/**
	 * The value for the travel_history_notes field.
	 * @var        string
	 */
	protected $travel_history_notes;

	/**
	 * The value for the need_medical_release field.
	 * @var        int
	 */
	protected $need_medical_release;

	/**
	 * The value for the ground_transportation_comment field.
	 * @var        string
	 */
	protected $ground_transportation_comment;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BasePassengerBackup object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [person_id] column value.
	 * 
	 * @return     int
	 */
	public function getPersonId()
	{
		return $this->person_id;
	}

	/**
	 * Get the [passenger_type_id] column value.
	 * 
	 * @return     int
	 */
	public function getPassengerTypeId()
	{
		return $this->passenger_type_id;
	}

	/**
	 * Get the [parent] column value.
	 * 
	 * @return     string
	 */
	public function getParent()
	{
		return $this->parent;
	}

	/**
	 * Get the [optionally formatted] temporal [date_of_birth] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDateOfBirth($format = 'Y-m-d H:i:s')
	{
		if ($this->date_of_birth === null) {
			return null;
		}


		if ($this->date_of_birth === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->date_of_birth);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->date_of_birth, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [illness] column value.
	 * 
	 * @return     string
	 */
	public function getIllness()
	{
		return $this->illness;
	}

	/**
	 * Get the [financial] column value.
	 * 
	 * @return     string
	 */
	public function getFinancial()
	{
		return $this->financial;
	}

	/**
	 * Get the [weight] column value.
	 * 
	 * @return     int
	 */
	public function getWeight()
	{
		return $this->weight;
	}

	/**
	 * Get the [public_considerations] column value.
	 * 
	 * @return     string
	 */
	public function getPublicConsiderations()
	{
		return $this->public_considerations;
	}

	/**
	 * Get the [private_considerations] column value.
	 * 
	 * @return     string
	 */
	public function getPrivateConsiderations()
	{
		return $this->private_considerations;
	}

	/**
	 * Get the [releasing_physician] column value.
	 * 
	 * @return     string
	 */
	public function getReleasingPhysician()
	{
		return $this->releasing_physician;
	}

	/**
	 * Get the [releasing_phone] column value.
	 * 
	 * @return     string
	 */
	public function getReleasingPhone()
	{
		return $this->releasing_phone;
	}

	/**
	 * Get the [lodging_name] column value.
	 * 
	 * @return     string
	 */
	public function getLodgingName()
	{
		return $this->lodging_name;
	}

	/**
	 * Get the [lodging_phone] column value.
	 * 
	 * @return     string
	 */
	public function getLodgingPhone()
	{
		return $this->lodging_phone;
	}

	/**
	 * Get the [lodging_phone_comment] column value.
	 * 
	 * @return     string
	 */
	public function getLodgingPhoneComment()
	{
		return $this->lodging_phone_comment;
	}

	/**
	 * Get the [facility_name] column value.
	 * 
	 * @return     string
	 */
	public function getFacilityName()
	{
		return $this->facility_name;
	}

	/**
	 * Get the [facility_phone] column value.
	 * 
	 * @return     string
	 */
	public function getFacilityPhone()
	{
		return $this->facility_phone;
	}

	/**
	 * Get the [facility_phone_comment] column value.
	 * 
	 * @return     string
	 */
	public function getFacilityPhoneComment()
	{
		return $this->facility_phone_comment;
	}

	/**
	 * Get the [requester_id] column value.
	 * 
	 * @return     int
	 */
	public function getRequesterId()
	{
		return $this->requester_id;
	}

	/**
	 * Get the [optionally formatted] temporal [medical_release_requested] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getMedicalReleaseRequested($format = 'Y-m-d H:i:s')
	{
		if ($this->medical_release_requested === null) {
			return null;
		}


		if ($this->medical_release_requested === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->medical_release_requested);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->medical_release_requested, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [medical_release_received] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getMedicalReleaseReceived($format = 'Y-m-d H:i:s')
	{
		if ($this->medical_release_received === null) {
			return null;
		}


		if ($this->medical_release_received === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->medical_release_received);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->medical_release_received, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [passenger_illness_category_id] column value.
	 * 
	 * @return     int
	 */
	public function getPassengerIllnessCategoryId()
	{
		return $this->passenger_illness_category_id;
	}

	/**
	 * Get the [releasing_fax1] column value.
	 * 
	 * @return     int
	 */
	public function getReleasingFax1()
	{
		return $this->releasing_fax1;
	}

	/**
	 * Get the [releasing_fax1_comment] column value.
	 * 
	 * @return     string
	 */
	public function getReleasingFax1Comment()
	{
		return $this->releasing_fax1_comment;
	}

	/**
	 * Get the [releasing_email] column value.
	 * 
	 * @return     string
	 */
	public function getReleasingEmail()
	{
		return $this->releasing_email;
	}

	/**
	 * Get the [treating_physician] column value.
	 * 
	 * @return     string
	 */
	public function getTreatingPhysician()
	{
		return $this->treating_physician;
	}

	/**
	 * Get the [treating_phone] column value.
	 * 
	 * @return     int
	 */
	public function getTreatingPhone()
	{
		return $this->treating_phone;
	}

	/**
	 * Get the [treating_fax1] column value.
	 * 
	 * @return     string
	 */
	public function getTreatingFax1()
	{
		return $this->treating_fax1;
	}

	/**
	 * Get the [treating_fax1_comment] column value.
	 * 
	 * @return     string
	 */
	public function getTreatingFax1Comment()
	{
		return $this->treating_fax1_comment;
	}

	/**
	 * Get the [treating_email] column value.
	 * 
	 * @return     string
	 */
	public function getTreatingEmail()
	{
		return $this->treating_email;
	}

	/**
	 * Get the [language_spoken] column value.
	 * 
	 * @return     string
	 */
	public function getLanguageSpoken()
	{
		return $this->language_spoken;
	}

	/**
	 * Get the [best_contact_method] column value.
	 * 
	 * @return     string
	 */
	public function getBestContactMethod()
	{
		return $this->best_contact_method;
	}

	/**
	 * Get the [emergency_contact_name] column value.
	 * 
	 * @return     string
	 */
	public function getEmergencyContactName()
	{
		return $this->emergency_contact_name;
	}

	/**
	 * Get the [emergency_contact_primary_phone] column value.
	 * 
	 * @return     string
	 */
	public function getEmergencyContactPrimaryPhone()
	{
		return $this->emergency_contact_primary_phone;
	}

	/**
	 * Get the [emergency_contact_secondary_phone] column value.
	 * 
	 * @return     string
	 */
	public function getEmergencyContactSecondaryPhone()
	{
		return $this->emergency_contact_secondary_phone;
	}

	/**
	 * Get the [emergency_contact_primary_comment] column value.
	 * 
	 * @return     string
	 */
	public function getEmergencyContactPrimaryComment()
	{
		return $this->emergency_contact_primary_comment;
	}

	/**
	 * Get the [emergency_contact_secondary_comment] column value.
	 * 
	 * @return     string
	 */
	public function getEmergencyContactSecondaryComment()
	{
		return $this->emergency_contact_secondary_comment;
	}

	/**
	 * Get the [travel_history_notes] column value.
	 * 
	 * @return     string
	 */
	public function getTravelHistoryNotes()
	{
		return $this->travel_history_notes;
	}

	/**
	 * Get the [need_medical_release] column value.
	 * 
	 * @return     int
	 */
	public function getNeedMedicalRelease()
	{
		return $this->need_medical_release;
	}

	/**
	 * Get the [ground_transportation_comment] column value.
	 * 
	 * @return     string
	 */
	public function getGroundTransportationComment()
	{
		return $this->ground_transportation_comment;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [person_id] column.
	 * 
	 * @param      int $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setPersonId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->person_id !== $v) {
			$this->person_id = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::PERSON_ID;
		}

		return $this;
	} // setPersonId()

	/**
	 * Set the value of [passenger_type_id] column.
	 * 
	 * @param      int $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setPassengerTypeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->passenger_type_id !== $v) {
			$this->passenger_type_id = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::PASSENGER_TYPE_ID;
		}

		return $this;
	} // setPassengerTypeId()

	/**
	 * Set the value of [parent] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setParent($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->parent !== $v) {
			$this->parent = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::PARENT;
		}

		return $this;
	} // setParent()

	/**
	 * Sets the value of [date_of_birth] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setDateOfBirth($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->date_of_birth !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->date_of_birth !== null && $tmpDt = new DateTime($this->date_of_birth)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->date_of_birth = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PassengerBackupPeer::DATE_OF_BIRTH;
			}
		} // if either are not null

		return $this;
	} // setDateOfBirth()

	/**
	 * Set the value of [illness] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setIllness($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->illness !== $v) {
			$this->illness = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::ILLNESS;
		}

		return $this;
	} // setIllness()

	/**
	 * Set the value of [financial] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setFinancial($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->financial !== $v) {
			$this->financial = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::FINANCIAL;
		}

		return $this;
	} // setFinancial()

	/**
	 * Set the value of [weight] column.
	 * 
	 * @param      int $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setWeight($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->weight !== $v) {
			$this->weight = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::WEIGHT;
		}

		return $this;
	} // setWeight()

	/**
	 * Set the value of [public_considerations] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setPublicConsiderations($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->public_considerations !== $v) {
			$this->public_considerations = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::PUBLIC_CONSIDERATIONS;
		}

		return $this;
	} // setPublicConsiderations()

	/**
	 * Set the value of [private_considerations] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setPrivateConsiderations($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->private_considerations !== $v) {
			$this->private_considerations = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::PRIVATE_CONSIDERATIONS;
		}

		return $this;
	} // setPrivateConsiderations()

	/**
	 * Set the value of [releasing_physician] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setReleasingPhysician($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->releasing_physician !== $v) {
			$this->releasing_physician = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::RELEASING_PHYSICIAN;
		}

		return $this;
	} // setReleasingPhysician()

	/**
	 * Set the value of [releasing_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setReleasingPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->releasing_phone !== $v) {
			$this->releasing_phone = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::RELEASING_PHONE;
		}

		return $this;
	} // setReleasingPhone()

	/**
	 * Set the value of [lodging_name] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setLodgingName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lodging_name !== $v) {
			$this->lodging_name = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::LODGING_NAME;
		}

		return $this;
	} // setLodgingName()

	/**
	 * Set the value of [lodging_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setLodgingPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lodging_phone !== $v) {
			$this->lodging_phone = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::LODGING_PHONE;
		}

		return $this;
	} // setLodgingPhone()

	/**
	 * Set the value of [lodging_phone_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setLodgingPhoneComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lodging_phone_comment !== $v) {
			$this->lodging_phone_comment = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::LODGING_PHONE_COMMENT;
		}

		return $this;
	} // setLodgingPhoneComment()

	/**
	 * Set the value of [facility_name] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setFacilityName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->facility_name !== $v) {
			$this->facility_name = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::FACILITY_NAME;
		}

		return $this;
	} // setFacilityName()

	/**
	 * Set the value of [facility_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setFacilityPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->facility_phone !== $v) {
			$this->facility_phone = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::FACILITY_PHONE;
		}

		return $this;
	} // setFacilityPhone()

	/**
	 * Set the value of [facility_phone_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setFacilityPhoneComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->facility_phone_comment !== $v) {
			$this->facility_phone_comment = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::FACILITY_PHONE_COMMENT;
		}

		return $this;
	} // setFacilityPhoneComment()

	/**
	 * Set the value of [requester_id] column.
	 * 
	 * @param      int $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setRequesterId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->requester_id !== $v) {
			$this->requester_id = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::REQUESTER_ID;
		}

		return $this;
	} // setRequesterId()

	/**
	 * Sets the value of [medical_release_requested] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setMedicalReleaseRequested($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->medical_release_requested !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->medical_release_requested !== null && $tmpDt = new DateTime($this->medical_release_requested)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->medical_release_requested = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PassengerBackupPeer::MEDICAL_RELEASE_REQUESTED;
			}
		} // if either are not null

		return $this;
	} // setMedicalReleaseRequested()

	/**
	 * Sets the value of [medical_release_received] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setMedicalReleaseReceived($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->medical_release_received !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->medical_release_received !== null && $tmpDt = new DateTime($this->medical_release_received)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->medical_release_received = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PassengerBackupPeer::MEDICAL_RELEASE_RECEIVED;
			}
		} // if either are not null

		return $this;
	} // setMedicalReleaseReceived()

	/**
	 * Set the value of [passenger_illness_category_id] column.
	 * 
	 * @param      int $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setPassengerIllnessCategoryId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->passenger_illness_category_id !== $v) {
			$this->passenger_illness_category_id = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::PASSENGER_ILLNESS_CATEGORY_ID;
		}

		return $this;
	} // setPassengerIllnessCategoryId()

	/**
	 * Set the value of [releasing_fax1] column.
	 * 
	 * @param      int $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setReleasingFax1($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->releasing_fax1 !== $v) {
			$this->releasing_fax1 = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::RELEASING_FAX1;
		}

		return $this;
	} // setReleasingFax1()

	/**
	 * Set the value of [releasing_fax1_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setReleasingFax1Comment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->releasing_fax1_comment !== $v) {
			$this->releasing_fax1_comment = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::RELEASING_FAX1_COMMENT;
		}

		return $this;
	} // setReleasingFax1Comment()

	/**
	 * Set the value of [releasing_email] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setReleasingEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->releasing_email !== $v) {
			$this->releasing_email = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::RELEASING_EMAIL;
		}

		return $this;
	} // setReleasingEmail()

	/**
	 * Set the value of [treating_physician] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setTreatingPhysician($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->treating_physician !== $v) {
			$this->treating_physician = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::TREATING_PHYSICIAN;
		}

		return $this;
	} // setTreatingPhysician()

	/**
	 * Set the value of [treating_phone] column.
	 * 
	 * @param      int $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setTreatingPhone($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->treating_phone !== $v) {
			$this->treating_phone = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::TREATING_PHONE;
		}

		return $this;
	} // setTreatingPhone()

	/**
	 * Set the value of [treating_fax1] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setTreatingFax1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->treating_fax1 !== $v) {
			$this->treating_fax1 = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::TREATING_FAX1;
		}

		return $this;
	} // setTreatingFax1()

	/**
	 * Set the value of [treating_fax1_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setTreatingFax1Comment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->treating_fax1_comment !== $v) {
			$this->treating_fax1_comment = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::TREATING_FAX1_COMMENT;
		}

		return $this;
	} // setTreatingFax1Comment()

	/**
	 * Set the value of [treating_email] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setTreatingEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->treating_email !== $v) {
			$this->treating_email = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::TREATING_EMAIL;
		}

		return $this;
	} // setTreatingEmail()

	/**
	 * Set the value of [language_spoken] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setLanguageSpoken($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->language_spoken !== $v) {
			$this->language_spoken = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::LANGUAGE_SPOKEN;
		}

		return $this;
	} // setLanguageSpoken()

	/**
	 * Set the value of [best_contact_method] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setBestContactMethod($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->best_contact_method !== $v) {
			$this->best_contact_method = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::BEST_CONTACT_METHOD;
		}

		return $this;
	} // setBestContactMethod()

	/**
	 * Set the value of [emergency_contact_name] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setEmergencyContactName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emergency_contact_name !== $v) {
			$this->emergency_contact_name = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::EMERGENCY_CONTACT_NAME;
		}

		return $this;
	} // setEmergencyContactName()

	/**
	 * Set the value of [emergency_contact_primary_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setEmergencyContactPrimaryPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emergency_contact_primary_phone !== $v) {
			$this->emergency_contact_primary_phone = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::EMERGENCY_CONTACT_PRIMARY_PHONE;
		}

		return $this;
	} // setEmergencyContactPrimaryPhone()

	/**
	 * Set the value of [emergency_contact_secondary_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setEmergencyContactSecondaryPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emergency_contact_secondary_phone !== $v) {
			$this->emergency_contact_secondary_phone = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::EMERGENCY_CONTACT_SECONDARY_PHONE;
		}

		return $this;
	} // setEmergencyContactSecondaryPhone()

	/**
	 * Set the value of [emergency_contact_primary_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setEmergencyContactPrimaryComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emergency_contact_primary_comment !== $v) {
			$this->emergency_contact_primary_comment = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::EMERGENCY_CONTACT_PRIMARY_COMMENT;
		}

		return $this;
	} // setEmergencyContactPrimaryComment()

	/**
	 * Set the value of [emergency_contact_secondary_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setEmergencyContactSecondaryComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emergency_contact_secondary_comment !== $v) {
			$this->emergency_contact_secondary_comment = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::EMERGENCY_CONTACT_SECONDARY_COMMENT;
		}

		return $this;
	} // setEmergencyContactSecondaryComment()

	/**
	 * Set the value of [travel_history_notes] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setTravelHistoryNotes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->travel_history_notes !== $v) {
			$this->travel_history_notes = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::TRAVEL_HISTORY_NOTES;
		}

		return $this;
	} // setTravelHistoryNotes()

	/**
	 * Set the value of [need_medical_release] column.
	 * 
	 * @param      int $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setNeedMedicalRelease($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->need_medical_release !== $v) {
			$this->need_medical_release = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::NEED_MEDICAL_RELEASE;
		}

		return $this;
	} // setNeedMedicalRelease()

	/**
	 * Set the value of [ground_transportation_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     PassengerBackup The current object (for fluent API support)
	 */
	public function setGroundTransportationComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ground_transportation_comment !== $v) {
			$this->ground_transportation_comment = $v;
			$this->modifiedColumns[] = PassengerBackupPeer::GROUND_TRANSPORTATION_COMMENT;
		}

		return $this;
	} // setGroundTransportationComment()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->person_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->passenger_type_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->parent = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->date_of_birth = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->illness = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->financial = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->weight = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->public_considerations = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->private_considerations = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->releasing_physician = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->releasing_phone = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->lodging_name = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->lodging_phone = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->lodging_phone_comment = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->facility_name = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->facility_phone = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->facility_phone_comment = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->requester_id = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->medical_release_requested = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->medical_release_received = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->passenger_illness_category_id = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->releasing_fax1 = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->releasing_fax1_comment = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->releasing_email = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->treating_physician = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->treating_phone = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->treating_fax1 = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->treating_fax1_comment = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->treating_email = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->language_spoken = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->best_contact_method = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->emergency_contact_name = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->emergency_contact_primary_phone = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->emergency_contact_secondary_phone = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->emergency_contact_primary_comment = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->emergency_contact_secondary_comment = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->travel_history_notes = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->need_medical_release = ($row[$startcol + 38] !== null) ? (int) $row[$startcol + 38] : null;
			$this->ground_transportation_comment = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 40; // 40 = PassengerBackupPeer::NUM_COLUMNS - PassengerBackupPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating PassengerBackup object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PassengerBackupPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PassengerBackupPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasePassengerBackup:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PassengerBackupPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			PassengerBackupPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BasePassengerBackup:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasePassengerBackup:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PassengerBackupPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BasePassengerBackup:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			PassengerBackupPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PassengerBackupPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PassengerBackupPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PassengerBackupPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = PassengerBackupPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PassengerBackupPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getPersonId();
				break;
			case 2:
				return $this->getPassengerTypeId();
				break;
			case 3:
				return $this->getParent();
				break;
			case 4:
				return $this->getDateOfBirth();
				break;
			case 5:
				return $this->getIllness();
				break;
			case 6:
				return $this->getFinancial();
				break;
			case 7:
				return $this->getWeight();
				break;
			case 8:
				return $this->getPublicConsiderations();
				break;
			case 9:
				return $this->getPrivateConsiderations();
				break;
			case 10:
				return $this->getReleasingPhysician();
				break;
			case 11:
				return $this->getReleasingPhone();
				break;
			case 12:
				return $this->getLodgingName();
				break;
			case 13:
				return $this->getLodgingPhone();
				break;
			case 14:
				return $this->getLodgingPhoneComment();
				break;
			case 15:
				return $this->getFacilityName();
				break;
			case 16:
				return $this->getFacilityPhone();
				break;
			case 17:
				return $this->getFacilityPhoneComment();
				break;
			case 18:
				return $this->getRequesterId();
				break;
			case 19:
				return $this->getMedicalReleaseRequested();
				break;
			case 20:
				return $this->getMedicalReleaseReceived();
				break;
			case 21:
				return $this->getPassengerIllnessCategoryId();
				break;
			case 22:
				return $this->getReleasingFax1();
				break;
			case 23:
				return $this->getReleasingFax1Comment();
				break;
			case 24:
				return $this->getReleasingEmail();
				break;
			case 25:
				return $this->getTreatingPhysician();
				break;
			case 26:
				return $this->getTreatingPhone();
				break;
			case 27:
				return $this->getTreatingFax1();
				break;
			case 28:
				return $this->getTreatingFax1Comment();
				break;
			case 29:
				return $this->getTreatingEmail();
				break;
			case 30:
				return $this->getLanguageSpoken();
				break;
			case 31:
				return $this->getBestContactMethod();
				break;
			case 32:
				return $this->getEmergencyContactName();
				break;
			case 33:
				return $this->getEmergencyContactPrimaryPhone();
				break;
			case 34:
				return $this->getEmergencyContactSecondaryPhone();
				break;
			case 35:
				return $this->getEmergencyContactPrimaryComment();
				break;
			case 36:
				return $this->getEmergencyContactSecondaryComment();
				break;
			case 37:
				return $this->getTravelHistoryNotes();
				break;
			case 38:
				return $this->getNeedMedicalRelease();
				break;
			case 39:
				return $this->getGroundTransportationComment();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PassengerBackupPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getPersonId(),
			$keys[2] => $this->getPassengerTypeId(),
			$keys[3] => $this->getParent(),
			$keys[4] => $this->getDateOfBirth(),
			$keys[5] => $this->getIllness(),
			$keys[6] => $this->getFinancial(),
			$keys[7] => $this->getWeight(),
			$keys[8] => $this->getPublicConsiderations(),
			$keys[9] => $this->getPrivateConsiderations(),
			$keys[10] => $this->getReleasingPhysician(),
			$keys[11] => $this->getReleasingPhone(),
			$keys[12] => $this->getLodgingName(),
			$keys[13] => $this->getLodgingPhone(),
			$keys[14] => $this->getLodgingPhoneComment(),
			$keys[15] => $this->getFacilityName(),
			$keys[16] => $this->getFacilityPhone(),
			$keys[17] => $this->getFacilityPhoneComment(),
			$keys[18] => $this->getRequesterId(),
			$keys[19] => $this->getMedicalReleaseRequested(),
			$keys[20] => $this->getMedicalReleaseReceived(),
			$keys[21] => $this->getPassengerIllnessCategoryId(),
			$keys[22] => $this->getReleasingFax1(),
			$keys[23] => $this->getReleasingFax1Comment(),
			$keys[24] => $this->getReleasingEmail(),
			$keys[25] => $this->getTreatingPhysician(),
			$keys[26] => $this->getTreatingPhone(),
			$keys[27] => $this->getTreatingFax1(),
			$keys[28] => $this->getTreatingFax1Comment(),
			$keys[29] => $this->getTreatingEmail(),
			$keys[30] => $this->getLanguageSpoken(),
			$keys[31] => $this->getBestContactMethod(),
			$keys[32] => $this->getEmergencyContactName(),
			$keys[33] => $this->getEmergencyContactPrimaryPhone(),
			$keys[34] => $this->getEmergencyContactSecondaryPhone(),
			$keys[35] => $this->getEmergencyContactPrimaryComment(),
			$keys[36] => $this->getEmergencyContactSecondaryComment(),
			$keys[37] => $this->getTravelHistoryNotes(),
			$keys[38] => $this->getNeedMedicalRelease(),
			$keys[39] => $this->getGroundTransportationComment(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PassengerBackupPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setPersonId($value);
				break;
			case 2:
				$this->setPassengerTypeId($value);
				break;
			case 3:
				$this->setParent($value);
				break;
			case 4:
				$this->setDateOfBirth($value);
				break;
			case 5:
				$this->setIllness($value);
				break;
			case 6:
				$this->setFinancial($value);
				break;
			case 7:
				$this->setWeight($value);
				break;
			case 8:
				$this->setPublicConsiderations($value);
				break;
			case 9:
				$this->setPrivateConsiderations($value);
				break;
			case 10:
				$this->setReleasingPhysician($value);
				break;
			case 11:
				$this->setReleasingPhone($value);
				break;
			case 12:
				$this->setLodgingName($value);
				break;
			case 13:
				$this->setLodgingPhone($value);
				break;
			case 14:
				$this->setLodgingPhoneComment($value);
				break;
			case 15:
				$this->setFacilityName($value);
				break;
			case 16:
				$this->setFacilityPhone($value);
				break;
			case 17:
				$this->setFacilityPhoneComment($value);
				break;
			case 18:
				$this->setRequesterId($value);
				break;
			case 19:
				$this->setMedicalReleaseRequested($value);
				break;
			case 20:
				$this->setMedicalReleaseReceived($value);
				break;
			case 21:
				$this->setPassengerIllnessCategoryId($value);
				break;
			case 22:
				$this->setReleasingFax1($value);
				break;
			case 23:
				$this->setReleasingFax1Comment($value);
				break;
			case 24:
				$this->setReleasingEmail($value);
				break;
			case 25:
				$this->setTreatingPhysician($value);
				break;
			case 26:
				$this->setTreatingPhone($value);
				break;
			case 27:
				$this->setTreatingFax1($value);
				break;
			case 28:
				$this->setTreatingFax1Comment($value);
				break;
			case 29:
				$this->setTreatingEmail($value);
				break;
			case 30:
				$this->setLanguageSpoken($value);
				break;
			case 31:
				$this->setBestContactMethod($value);
				break;
			case 32:
				$this->setEmergencyContactName($value);
				break;
			case 33:
				$this->setEmergencyContactPrimaryPhone($value);
				break;
			case 34:
				$this->setEmergencyContactSecondaryPhone($value);
				break;
			case 35:
				$this->setEmergencyContactPrimaryComment($value);
				break;
			case 36:
				$this->setEmergencyContactSecondaryComment($value);
				break;
			case 37:
				$this->setTravelHistoryNotes($value);
				break;
			case 38:
				$this->setNeedMedicalRelease($value);
				break;
			case 39:
				$this->setGroundTransportationComment($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PassengerBackupPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setPersonId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setPassengerTypeId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setParent($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setDateOfBirth($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setIllness($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setFinancial($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setWeight($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setPublicConsiderations($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPrivateConsiderations($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setReleasingPhysician($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setReleasingPhone($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setLodgingName($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setLodgingPhone($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setLodgingPhoneComment($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setFacilityName($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setFacilityPhone($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setFacilityPhoneComment($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setRequesterId($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setMedicalReleaseRequested($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setMedicalReleaseReceived($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setPassengerIllnessCategoryId($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setReleasingFax1($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setReleasingFax1Comment($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setReleasingEmail($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setTreatingPhysician($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setTreatingPhone($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setTreatingFax1($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setTreatingFax1Comment($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setTreatingEmail($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setLanguageSpoken($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setBestContactMethod($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setEmergencyContactName($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setEmergencyContactPrimaryPhone($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setEmergencyContactSecondaryPhone($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setEmergencyContactPrimaryComment($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setEmergencyContactSecondaryComment($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setTravelHistoryNotes($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setNeedMedicalRelease($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setGroundTransportationComment($arr[$keys[39]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PassengerBackupPeer::DATABASE_NAME);

		if ($this->isColumnModified(PassengerBackupPeer::ID)) $criteria->add(PassengerBackupPeer::ID, $this->id);
		if ($this->isColumnModified(PassengerBackupPeer::PERSON_ID)) $criteria->add(PassengerBackupPeer::PERSON_ID, $this->person_id);
		if ($this->isColumnModified(PassengerBackupPeer::PASSENGER_TYPE_ID)) $criteria->add(PassengerBackupPeer::PASSENGER_TYPE_ID, $this->passenger_type_id);
		if ($this->isColumnModified(PassengerBackupPeer::PARENT)) $criteria->add(PassengerBackupPeer::PARENT, $this->parent);
		if ($this->isColumnModified(PassengerBackupPeer::DATE_OF_BIRTH)) $criteria->add(PassengerBackupPeer::DATE_OF_BIRTH, $this->date_of_birth);
		if ($this->isColumnModified(PassengerBackupPeer::ILLNESS)) $criteria->add(PassengerBackupPeer::ILLNESS, $this->illness);
		if ($this->isColumnModified(PassengerBackupPeer::FINANCIAL)) $criteria->add(PassengerBackupPeer::FINANCIAL, $this->financial);
		if ($this->isColumnModified(PassengerBackupPeer::WEIGHT)) $criteria->add(PassengerBackupPeer::WEIGHT, $this->weight);
		if ($this->isColumnModified(PassengerBackupPeer::PUBLIC_CONSIDERATIONS)) $criteria->add(PassengerBackupPeer::PUBLIC_CONSIDERATIONS, $this->public_considerations);
		if ($this->isColumnModified(PassengerBackupPeer::PRIVATE_CONSIDERATIONS)) $criteria->add(PassengerBackupPeer::PRIVATE_CONSIDERATIONS, $this->private_considerations);
		if ($this->isColumnModified(PassengerBackupPeer::RELEASING_PHYSICIAN)) $criteria->add(PassengerBackupPeer::RELEASING_PHYSICIAN, $this->releasing_physician);
		if ($this->isColumnModified(PassengerBackupPeer::RELEASING_PHONE)) $criteria->add(PassengerBackupPeer::RELEASING_PHONE, $this->releasing_phone);
		if ($this->isColumnModified(PassengerBackupPeer::LODGING_NAME)) $criteria->add(PassengerBackupPeer::LODGING_NAME, $this->lodging_name);
		if ($this->isColumnModified(PassengerBackupPeer::LODGING_PHONE)) $criteria->add(PassengerBackupPeer::LODGING_PHONE, $this->lodging_phone);
		if ($this->isColumnModified(PassengerBackupPeer::LODGING_PHONE_COMMENT)) $criteria->add(PassengerBackupPeer::LODGING_PHONE_COMMENT, $this->lodging_phone_comment);
		if ($this->isColumnModified(PassengerBackupPeer::FACILITY_NAME)) $criteria->add(PassengerBackupPeer::FACILITY_NAME, $this->facility_name);
		if ($this->isColumnModified(PassengerBackupPeer::FACILITY_PHONE)) $criteria->add(PassengerBackupPeer::FACILITY_PHONE, $this->facility_phone);
		if ($this->isColumnModified(PassengerBackupPeer::FACILITY_PHONE_COMMENT)) $criteria->add(PassengerBackupPeer::FACILITY_PHONE_COMMENT, $this->facility_phone_comment);
		if ($this->isColumnModified(PassengerBackupPeer::REQUESTER_ID)) $criteria->add(PassengerBackupPeer::REQUESTER_ID, $this->requester_id);
		if ($this->isColumnModified(PassengerBackupPeer::MEDICAL_RELEASE_REQUESTED)) $criteria->add(PassengerBackupPeer::MEDICAL_RELEASE_REQUESTED, $this->medical_release_requested);
		if ($this->isColumnModified(PassengerBackupPeer::MEDICAL_RELEASE_RECEIVED)) $criteria->add(PassengerBackupPeer::MEDICAL_RELEASE_RECEIVED, $this->medical_release_received);
		if ($this->isColumnModified(PassengerBackupPeer::PASSENGER_ILLNESS_CATEGORY_ID)) $criteria->add(PassengerBackupPeer::PASSENGER_ILLNESS_CATEGORY_ID, $this->passenger_illness_category_id);
		if ($this->isColumnModified(PassengerBackupPeer::RELEASING_FAX1)) $criteria->add(PassengerBackupPeer::RELEASING_FAX1, $this->releasing_fax1);
		if ($this->isColumnModified(PassengerBackupPeer::RELEASING_FAX1_COMMENT)) $criteria->add(PassengerBackupPeer::RELEASING_FAX1_COMMENT, $this->releasing_fax1_comment);
		if ($this->isColumnModified(PassengerBackupPeer::RELEASING_EMAIL)) $criteria->add(PassengerBackupPeer::RELEASING_EMAIL, $this->releasing_email);
		if ($this->isColumnModified(PassengerBackupPeer::TREATING_PHYSICIAN)) $criteria->add(PassengerBackupPeer::TREATING_PHYSICIAN, $this->treating_physician);
		if ($this->isColumnModified(PassengerBackupPeer::TREATING_PHONE)) $criteria->add(PassengerBackupPeer::TREATING_PHONE, $this->treating_phone);
		if ($this->isColumnModified(PassengerBackupPeer::TREATING_FAX1)) $criteria->add(PassengerBackupPeer::TREATING_FAX1, $this->treating_fax1);
		if ($this->isColumnModified(PassengerBackupPeer::TREATING_FAX1_COMMENT)) $criteria->add(PassengerBackupPeer::TREATING_FAX1_COMMENT, $this->treating_fax1_comment);
		if ($this->isColumnModified(PassengerBackupPeer::TREATING_EMAIL)) $criteria->add(PassengerBackupPeer::TREATING_EMAIL, $this->treating_email);
		if ($this->isColumnModified(PassengerBackupPeer::LANGUAGE_SPOKEN)) $criteria->add(PassengerBackupPeer::LANGUAGE_SPOKEN, $this->language_spoken);
		if ($this->isColumnModified(PassengerBackupPeer::BEST_CONTACT_METHOD)) $criteria->add(PassengerBackupPeer::BEST_CONTACT_METHOD, $this->best_contact_method);
		if ($this->isColumnModified(PassengerBackupPeer::EMERGENCY_CONTACT_NAME)) $criteria->add(PassengerBackupPeer::EMERGENCY_CONTACT_NAME, $this->emergency_contact_name);
		if ($this->isColumnModified(PassengerBackupPeer::EMERGENCY_CONTACT_PRIMARY_PHONE)) $criteria->add(PassengerBackupPeer::EMERGENCY_CONTACT_PRIMARY_PHONE, $this->emergency_contact_primary_phone);
		if ($this->isColumnModified(PassengerBackupPeer::EMERGENCY_CONTACT_SECONDARY_PHONE)) $criteria->add(PassengerBackupPeer::EMERGENCY_CONTACT_SECONDARY_PHONE, $this->emergency_contact_secondary_phone);
		if ($this->isColumnModified(PassengerBackupPeer::EMERGENCY_CONTACT_PRIMARY_COMMENT)) $criteria->add(PassengerBackupPeer::EMERGENCY_CONTACT_PRIMARY_COMMENT, $this->emergency_contact_primary_comment);
		if ($this->isColumnModified(PassengerBackupPeer::EMERGENCY_CONTACT_SECONDARY_COMMENT)) $criteria->add(PassengerBackupPeer::EMERGENCY_CONTACT_SECONDARY_COMMENT, $this->emergency_contact_secondary_comment);
		if ($this->isColumnModified(PassengerBackupPeer::TRAVEL_HISTORY_NOTES)) $criteria->add(PassengerBackupPeer::TRAVEL_HISTORY_NOTES, $this->travel_history_notes);
		if ($this->isColumnModified(PassengerBackupPeer::NEED_MEDICAL_RELEASE)) $criteria->add(PassengerBackupPeer::NEED_MEDICAL_RELEASE, $this->need_medical_release);
		if ($this->isColumnModified(PassengerBackupPeer::GROUND_TRANSPORTATION_COMMENT)) $criteria->add(PassengerBackupPeer::GROUND_TRANSPORTATION_COMMENT, $this->ground_transportation_comment);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PassengerBackupPeer::DATABASE_NAME);

		$criteria->add(PassengerBackupPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of PassengerBackup (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setPersonId($this->person_id);

		$copyObj->setPassengerTypeId($this->passenger_type_id);

		$copyObj->setParent($this->parent);

		$copyObj->setDateOfBirth($this->date_of_birth);

		$copyObj->setIllness($this->illness);

		$copyObj->setFinancial($this->financial);

		$copyObj->setWeight($this->weight);

		$copyObj->setPublicConsiderations($this->public_considerations);

		$copyObj->setPrivateConsiderations($this->private_considerations);

		$copyObj->setReleasingPhysician($this->releasing_physician);

		$copyObj->setReleasingPhone($this->releasing_phone);

		$copyObj->setLodgingName($this->lodging_name);

		$copyObj->setLodgingPhone($this->lodging_phone);

		$copyObj->setLodgingPhoneComment($this->lodging_phone_comment);

		$copyObj->setFacilityName($this->facility_name);

		$copyObj->setFacilityPhone($this->facility_phone);

		$copyObj->setFacilityPhoneComment($this->facility_phone_comment);

		$copyObj->setRequesterId($this->requester_id);

		$copyObj->setMedicalReleaseRequested($this->medical_release_requested);

		$copyObj->setMedicalReleaseReceived($this->medical_release_received);

		$copyObj->setPassengerIllnessCategoryId($this->passenger_illness_category_id);

		$copyObj->setReleasingFax1($this->releasing_fax1);

		$copyObj->setReleasingFax1Comment($this->releasing_fax1_comment);

		$copyObj->setReleasingEmail($this->releasing_email);

		$copyObj->setTreatingPhysician($this->treating_physician);

		$copyObj->setTreatingPhone($this->treating_phone);

		$copyObj->setTreatingFax1($this->treating_fax1);

		$copyObj->setTreatingFax1Comment($this->treating_fax1_comment);

		$copyObj->setTreatingEmail($this->treating_email);

		$copyObj->setLanguageSpoken($this->language_spoken);

		$copyObj->setBestContactMethod($this->best_contact_method);

		$copyObj->setEmergencyContactName($this->emergency_contact_name);

		$copyObj->setEmergencyContactPrimaryPhone($this->emergency_contact_primary_phone);

		$copyObj->setEmergencyContactSecondaryPhone($this->emergency_contact_secondary_phone);

		$copyObj->setEmergencyContactPrimaryComment($this->emergency_contact_primary_comment);

		$copyObj->setEmergencyContactSecondaryComment($this->emergency_contact_secondary_comment);

		$copyObj->setTravelHistoryNotes($this->travel_history_notes);

		$copyObj->setNeedMedicalRelease($this->need_medical_release);

		$copyObj->setGroundTransportationComment($this->ground_transportation_comment);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     PassengerBackup Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PassengerBackupPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PassengerBackupPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BasePassengerBackup:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BasePassengerBackup::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BasePassengerBackup
