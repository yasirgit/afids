<?php

/**
 * Base class that represents a row from the 'agency' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 01/05/11 08:19:38
 *
 * @package    lib.model.om
 */
abstract class BaseAgency extends BaseObject  implements Persistent {


  const PEER = 'AgencyPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        AgencyPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the address1 field.
	 * @var        string
	 */
	protected $address1;

	/**
	 * The value for the address2 field.
	 * @var        string
	 */
	protected $address2;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the county field.
	 * @var        string
	 */
	protected $county;

	/**
	 * The value for the state field.
	 * @var        string
	 */
	protected $state;

	/**
	 * The value for the country field.
	 * @var        string
	 */
	protected $country;

	/**
	 * The value for the zipcode field.
	 * @var        string
	 */
	protected $zipcode;

	/**
	 * The value for the phone field.
	 * @var        string
	 */
	protected $phone;

	/**
	 * The value for the comment field.
	 * @var        string
	 */
	protected $comment;

	/**
	 * The value for the fax_phone field.
	 * @var        string
	 */
	protected $fax_phone;

	/**
	 * The value for the fax_comment field.
	 * @var        string
	 */
	protected $fax_comment;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * @var        array Camp[] Collection to store aggregation of Camp objects.
	 */
	protected $collCamps;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCamps.
	 */
	private $lastCampCriteria = null;

	/**
	 * @var        array Mission[] Collection to store aggregation of Mission objects.
	 */
	protected $collMissionsRelatedByAgencyId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMissionsRelatedByAgencyId.
	 */
	private $lastMissionRelatedByAgencyIdCriteria = null;

	/**
	 * @var        array Mission[] Collection to store aggregation of Mission objects.
	 */
	protected $collMissionsRelatedByOtherAgencyId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMissionsRelatedByOtherAgencyId.
	 */
	private $lastMissionRelatedByOtherAgencyIdCriteria = null;

	/**
	 * @var        array Requester[] Collection to store aggregation of Requester objects.
	 */
	protected $collRequesters;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRequesters.
	 */
	private $lastRequesterCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseAgency object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [address1] column value.
	 * 
	 * @return     string
	 */
	public function getAddress1()
	{
		return $this->address1;
	}

	/**
	 * Get the [address2] column value.
	 * 
	 * @return     string
	 */
	public function getAddress2()
	{
		return $this->address2;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [county] column value.
	 * 
	 * @return     string
	 */
	public function getCounty()
	{
		return $this->county;
	}

	/**
	 * Get the [state] column value.
	 * 
	 * @return     string
	 */
	public function getState()
	{
		return $this->state;
	}

	/**
	 * Get the [country] column value.
	 * 
	 * @return     string
	 */
	public function getCountry()
	{
		return $this->country;
	}

	/**
	 * Get the [zipcode] column value.
	 * 
	 * @return     string
	 */
	public function getZipcode()
	{
		return $this->zipcode;
	}

	/**
	 * Get the [phone] column value.
	 * 
	 * @return     string
	 */
	public function getPhone()
	{
		return $this->phone;
	}

	/**
	 * Get the [comment] column value.
	 * 
	 * @return     string
	 */
	public function getComment()
	{
		return $this->comment;
	}

	/**
	 * Get the [fax_phone] column value.
	 * 
	 * @return     string
	 */
	public function getFaxPhone()
	{
		return $this->fax_phone;
	}

	/**
	 * Get the [fax_comment] column value.
	 * 
	 * @return     string
	 */
	public function getFaxComment()
	{
		return $this->fax_comment;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Agency The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = AgencyPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     Agency The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = AgencyPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [address1] column.
	 * 
	 * @param      string $v new value
	 * @return     Agency The current object (for fluent API support)
	 */
	public function setAddress1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address1 !== $v) {
			$this->address1 = $v;
			$this->modifiedColumns[] = AgencyPeer::ADDRESS1;
		}

		return $this;
	} // setAddress1()

	/**
	 * Set the value of [address2] column.
	 * 
	 * @param      string $v new value
	 * @return     Agency The current object (for fluent API support)
	 */
	public function setAddress2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address2 !== $v) {
			$this->address2 = $v;
			$this->modifiedColumns[] = AgencyPeer::ADDRESS2;
		}

		return $this;
	} // setAddress2()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     Agency The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = AgencyPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [county] column.
	 * 
	 * @param      string $v new value
	 * @return     Agency The current object (for fluent API support)
	 */
	public function setCounty($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->county !== $v) {
			$this->county = $v;
			$this->modifiedColumns[] = AgencyPeer::COUNTY;
		}

		return $this;
	} // setCounty()

	/**
	 * Set the value of [state] column.
	 * 
	 * @param      string $v new value
	 * @return     Agency The current object (for fluent API support)
	 */
	public function setState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->state !== $v) {
			$this->state = $v;
			$this->modifiedColumns[] = AgencyPeer::STATE;
		}

		return $this;
	} // setState()

	/**
	 * Set the value of [country] column.
	 * 
	 * @param      string $v new value
	 * @return     Agency The current object (for fluent API support)
	 */
	public function setCountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->country !== $v) {
			$this->country = $v;
			$this->modifiedColumns[] = AgencyPeer::COUNTRY;
		}

		return $this;
	} // setCountry()

	/**
	 * Set the value of [zipcode] column.
	 * 
	 * @param      string $v new value
	 * @return     Agency The current object (for fluent API support)
	 */
	public function setZipcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->zipcode !== $v) {
			$this->zipcode = $v;
			$this->modifiedColumns[] = AgencyPeer::ZIPCODE;
		}

		return $this;
	} // setZipcode()

	/**
	 * Set the value of [phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Agency The current object (for fluent API support)
	 */
	public function setPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->phone !== $v) {
			$this->phone = $v;
			$this->modifiedColumns[] = AgencyPeer::PHONE;
		}

		return $this;
	} // setPhone()

	/**
	 * Set the value of [comment] column.
	 * 
	 * @param      string $v new value
	 * @return     Agency The current object (for fluent API support)
	 */
	public function setComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comment !== $v) {
			$this->comment = $v;
			$this->modifiedColumns[] = AgencyPeer::COMMENT;
		}

		return $this;
	} // setComment()

	/**
	 * Set the value of [fax_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Agency The current object (for fluent API support)
	 */
	public function setFaxPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax_phone !== $v) {
			$this->fax_phone = $v;
			$this->modifiedColumns[] = AgencyPeer::FAX_PHONE;
		}

		return $this;
	} // setFaxPhone()

	/**
	 * Set the value of [fax_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     Agency The current object (for fluent API support)
	 */
	public function setFaxComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax_comment !== $v) {
			$this->fax_comment = $v;
			$this->modifiedColumns[] = AgencyPeer::FAX_COMMENT;
		}

		return $this;
	} // setFaxComment()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Agency The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = AgencyPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->address1 = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->address2 = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->city = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->county = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->state = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->country = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->zipcode = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->phone = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->comment = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->fax_phone = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->fax_comment = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->email = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 14; // 14 = AgencyPeer::NUM_COLUMNS - AgencyPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Agency object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AgencyPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = AgencyPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collCamps = null;
			$this->lastCampCriteria = null;

			$this->collMissionsRelatedByAgencyId = null;
			$this->lastMissionRelatedByAgencyIdCriteria = null;

			$this->collMissionsRelatedByOtherAgencyId = null;
			$this->lastMissionRelatedByOtherAgencyIdCriteria = null;

			$this->collRequesters = null;
			$this->lastRequesterCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseAgency:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AgencyPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			AgencyPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseAgency:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseAgency:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AgencyPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseAgency:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			AgencyPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = AgencyPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = AgencyPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += AgencyPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collCamps !== null) {
				foreach ($this->collCamps as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMissionsRelatedByAgencyId !== null) {
				foreach ($this->collMissionsRelatedByAgencyId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMissionsRelatedByOtherAgencyId !== null) {
				foreach ($this->collMissionsRelatedByOtherAgencyId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collRequesters !== null) {
				foreach ($this->collRequesters as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = AgencyPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collCamps !== null) {
					foreach ($this->collCamps as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMissionsRelatedByAgencyId !== null) {
					foreach ($this->collMissionsRelatedByAgencyId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMissionsRelatedByOtherAgencyId !== null) {
					foreach ($this->collMissionsRelatedByOtherAgencyId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collRequesters !== null) {
					foreach ($this->collRequesters as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AgencyPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getName();
				break;
			case 2:
				return $this->getAddress1();
				break;
			case 3:
				return $this->getAddress2();
				break;
			case 4:
				return $this->getCity();
				break;
			case 5:
				return $this->getCounty();
				break;
			case 6:
				return $this->getState();
				break;
			case 7:
				return $this->getCountry();
				break;
			case 8:
				return $this->getZipcode();
				break;
			case 9:
				return $this->getPhone();
				break;
			case 10:
				return $this->getComment();
				break;
			case 11:
				return $this->getFaxPhone();
				break;
			case 12:
				return $this->getFaxComment();
				break;
			case 13:
				return $this->getEmail();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = AgencyPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getName(),
			$keys[2] => $this->getAddress1(),
			$keys[3] => $this->getAddress2(),
			$keys[4] => $this->getCity(),
			$keys[5] => $this->getCounty(),
			$keys[6] => $this->getState(),
			$keys[7] => $this->getCountry(),
			$keys[8] => $this->getZipcode(),
			$keys[9] => $this->getPhone(),
			$keys[10] => $this->getComment(),
			$keys[11] => $this->getFaxPhone(),
			$keys[12] => $this->getFaxComment(),
			$keys[13] => $this->getEmail(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AgencyPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setName($value);
				break;
			case 2:
				$this->setAddress1($value);
				break;
			case 3:
				$this->setAddress2($value);
				break;
			case 4:
				$this->setCity($value);
				break;
			case 5:
				$this->setCounty($value);
				break;
			case 6:
				$this->setState($value);
				break;
			case 7:
				$this->setCountry($value);
				break;
			case 8:
				$this->setZipcode($value);
				break;
			case 9:
				$this->setPhone($value);
				break;
			case 10:
				$this->setComment($value);
				break;
			case 11:
				$this->setFaxPhone($value);
				break;
			case 12:
				$this->setFaxComment($value);
				break;
			case 13:
				$this->setEmail($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = AgencyPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setName($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setAddress1($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setAddress2($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCity($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setCounty($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setState($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCountry($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setZipcode($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPhone($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setComment($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setFaxPhone($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setFaxComment($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setEmail($arr[$keys[13]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(AgencyPeer::DATABASE_NAME);

		if ($this->isColumnModified(AgencyPeer::ID)) $criteria->add(AgencyPeer::ID, $this->id);
		if ($this->isColumnModified(AgencyPeer::NAME)) $criteria->add(AgencyPeer::NAME, $this->name);
		if ($this->isColumnModified(AgencyPeer::ADDRESS1)) $criteria->add(AgencyPeer::ADDRESS1, $this->address1);
		if ($this->isColumnModified(AgencyPeer::ADDRESS2)) $criteria->add(AgencyPeer::ADDRESS2, $this->address2);
		if ($this->isColumnModified(AgencyPeer::CITY)) $criteria->add(AgencyPeer::CITY, $this->city);
		if ($this->isColumnModified(AgencyPeer::COUNTY)) $criteria->add(AgencyPeer::COUNTY, $this->county);
		if ($this->isColumnModified(AgencyPeer::STATE)) $criteria->add(AgencyPeer::STATE, $this->state);
		if ($this->isColumnModified(AgencyPeer::COUNTRY)) $criteria->add(AgencyPeer::COUNTRY, $this->country);
		if ($this->isColumnModified(AgencyPeer::ZIPCODE)) $criteria->add(AgencyPeer::ZIPCODE, $this->zipcode);
		if ($this->isColumnModified(AgencyPeer::PHONE)) $criteria->add(AgencyPeer::PHONE, $this->phone);
		if ($this->isColumnModified(AgencyPeer::COMMENT)) $criteria->add(AgencyPeer::COMMENT, $this->comment);
		if ($this->isColumnModified(AgencyPeer::FAX_PHONE)) $criteria->add(AgencyPeer::FAX_PHONE, $this->fax_phone);
		if ($this->isColumnModified(AgencyPeer::FAX_COMMENT)) $criteria->add(AgencyPeer::FAX_COMMENT, $this->fax_comment);
		if ($this->isColumnModified(AgencyPeer::EMAIL)) $criteria->add(AgencyPeer::EMAIL, $this->email);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(AgencyPeer::DATABASE_NAME);

		$criteria->add(AgencyPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Agency (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setName($this->name);

		$copyObj->setAddress1($this->address1);

		$copyObj->setAddress2($this->address2);

		$copyObj->setCity($this->city);

		$copyObj->setCounty($this->county);

		$copyObj->setState($this->state);

		$copyObj->setCountry($this->country);

		$copyObj->setZipcode($this->zipcode);

		$copyObj->setPhone($this->phone);

		$copyObj->setComment($this->comment);

		$copyObj->setFaxPhone($this->fax_phone);

		$copyObj->setFaxComment($this->fax_comment);

		$copyObj->setEmail($this->email);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getCamps() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCamp($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMissionsRelatedByAgencyId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMissionRelatedByAgencyId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMissionsRelatedByOtherAgencyId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMissionRelatedByOtherAgencyId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getRequesters() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRequester($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Agency Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     AgencyPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new AgencyPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collCamps collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCamps()
	 */
	public function clearCamps()
	{
		$this->collCamps = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCamps collection (array).
	 *
	 * By default this just sets the collCamps collection to an empty array (like clearcollCamps());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCamps()
	{
		$this->collCamps = array();
	}

	/**
	 * Gets an array of Camp objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Agency has previously been saved, it will retrieve
	 * related Camps from storage. If this Agency is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Camp[]
	 * @throws     PropelException
	 */
	public function getCamps($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCamps === null) {
			if ($this->isNew()) {
			   $this->collCamps = array();
			} else {

				$criteria->add(CampPeer::AGENCY_ID, $this->id);

				CampPeer::addSelectColumns($criteria);
				$this->collCamps = CampPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CampPeer::AGENCY_ID, $this->id);

				CampPeer::addSelectColumns($criteria);
				if (!isset($this->lastCampCriteria) || !$this->lastCampCriteria->equals($criteria)) {
					$this->collCamps = CampPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCampCriteria = $criteria;
		return $this->collCamps;
	}

	/**
	 * Returns the number of related Camp objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Camp objects.
	 * @throws     PropelException
	 */
	public function countCamps(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCamps === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CampPeer::AGENCY_ID, $this->id);

				$count = CampPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CampPeer::AGENCY_ID, $this->id);

				if (!isset($this->lastCampCriteria) || !$this->lastCampCriteria->equals($criteria)) {
					$count = CampPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCamps);
				}
			} else {
				$count = count($this->collCamps);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Camp object to this object
	 * through the Camp foreign key attribute.
	 *
	 * @param      Camp $l Camp
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCamp(Camp $l)
	{
		if ($this->collCamps === null) {
			$this->initCamps();
		}
		if (!in_array($l, $this->collCamps, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCamps, $l);
			$l->setAgency($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related Camps from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getCampsJoinAirport($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCamps === null) {
			if ($this->isNew()) {
				$this->collCamps = array();
			} else {

				$criteria->add(CampPeer::AGENCY_ID, $this->id);

				$this->collCamps = CampPeer::doSelectJoinAirport($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CampPeer::AGENCY_ID, $this->id);

			if (!isset($this->lastCampCriteria) || !$this->lastCampCriteria->equals($criteria)) {
				$this->collCamps = CampPeer::doSelectJoinAirport($criteria, $con, $join_behavior);
			}
		}
		$this->lastCampCriteria = $criteria;

		return $this->collCamps;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related Camps from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getCampsJoinFbo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCamps === null) {
			if ($this->isNew()) {
				$this->collCamps = array();
			} else {

				$criteria->add(CampPeer::AGENCY_ID, $this->id);

				$this->collCamps = CampPeer::doSelectJoinFbo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CampPeer::AGENCY_ID, $this->id);

			if (!isset($this->lastCampCriteria) || !$this->lastCampCriteria->equals($criteria)) {
				$this->collCamps = CampPeer::doSelectJoinFbo($criteria, $con, $join_behavior);
			}
		}
		$this->lastCampCriteria = $criteria;

		return $this->collCamps;
	}

	/**
	 * Clears out the collMissionsRelatedByAgencyId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMissionsRelatedByAgencyId()
	 */
	public function clearMissionsRelatedByAgencyId()
	{
		$this->collMissionsRelatedByAgencyId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMissionsRelatedByAgencyId collection (array).
	 *
	 * By default this just sets the collMissionsRelatedByAgencyId collection to an empty array (like clearcollMissionsRelatedByAgencyId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMissionsRelatedByAgencyId()
	{
		$this->collMissionsRelatedByAgencyId = array();
	}

	/**
	 * Gets an array of Mission objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Agency has previously been saved, it will retrieve
	 * related MissionsRelatedByAgencyId from storage. If this Agency is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Mission[]
	 * @throws     PropelException
	 */
	public function getMissionsRelatedByAgencyId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionsRelatedByAgencyId === null) {
			if ($this->isNew()) {
			   $this->collMissionsRelatedByAgencyId = array();
			} else {

				$criteria->add(MissionPeer::AGENCY_ID, $this->id);

				MissionPeer::addSelectColumns($criteria);
				$this->collMissionsRelatedByAgencyId = MissionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MissionPeer::AGENCY_ID, $this->id);

				MissionPeer::addSelectColumns($criteria);
				if (!isset($this->lastMissionRelatedByAgencyIdCriteria) || !$this->lastMissionRelatedByAgencyIdCriteria->equals($criteria)) {
					$this->collMissionsRelatedByAgencyId = MissionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMissionRelatedByAgencyIdCriteria = $criteria;
		return $this->collMissionsRelatedByAgencyId;
	}

	/**
	 * Returns the number of related Mission objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Mission objects.
	 * @throws     PropelException
	 */
	public function countMissionsRelatedByAgencyId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMissionsRelatedByAgencyId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MissionPeer::AGENCY_ID, $this->id);

				$count = MissionPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MissionPeer::AGENCY_ID, $this->id);

				if (!isset($this->lastMissionRelatedByAgencyIdCriteria) || !$this->lastMissionRelatedByAgencyIdCriteria->equals($criteria)) {
					$count = MissionPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMissionsRelatedByAgencyId);
				}
			} else {
				$count = count($this->collMissionsRelatedByAgencyId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Mission object to this object
	 * through the Mission foreign key attribute.
	 *
	 * @param      Mission $l Mission
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMissionRelatedByAgencyId(Mission $l)
	{
		if ($this->collMissionsRelatedByAgencyId === null) {
			$this->initMissionsRelatedByAgencyId();
		}
		if (!in_array($l, $this->collMissionsRelatedByAgencyId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMissionsRelatedByAgencyId, $l);
			$l->setAgencyRelatedByAgencyId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related MissionsRelatedByAgencyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getMissionsRelatedByAgencyIdJoinMissionRequest($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionsRelatedByAgencyId === null) {
			if ($this->isNew()) {
				$this->collMissionsRelatedByAgencyId = array();
			} else {

				$criteria->add(MissionPeer::AGENCY_ID, $this->id);

				$this->collMissionsRelatedByAgencyId = MissionPeer::doSelectJoinMissionRequest($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionPeer::AGENCY_ID, $this->id);

			if (!isset($this->lastMissionRelatedByAgencyIdCriteria) || !$this->lastMissionRelatedByAgencyIdCriteria->equals($criteria)) {
				$this->collMissionsRelatedByAgencyId = MissionPeer::doSelectJoinMissionRequest($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionRelatedByAgencyIdCriteria = $criteria;

		return $this->collMissionsRelatedByAgencyId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related MissionsRelatedByAgencyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getMissionsRelatedByAgencyIdJoinItinerary($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionsRelatedByAgencyId === null) {
			if ($this->isNew()) {
				$this->collMissionsRelatedByAgencyId = array();
			} else {

				$criteria->add(MissionPeer::AGENCY_ID, $this->id);

				$this->collMissionsRelatedByAgencyId = MissionPeer::doSelectJoinItinerary($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionPeer::AGENCY_ID, $this->id);

			if (!isset($this->lastMissionRelatedByAgencyIdCriteria) || !$this->lastMissionRelatedByAgencyIdCriteria->equals($criteria)) {
				$this->collMissionsRelatedByAgencyId = MissionPeer::doSelectJoinItinerary($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionRelatedByAgencyIdCriteria = $criteria;

		return $this->collMissionsRelatedByAgencyId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related MissionsRelatedByAgencyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getMissionsRelatedByAgencyIdJoinMissionType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionsRelatedByAgencyId === null) {
			if ($this->isNew()) {
				$this->collMissionsRelatedByAgencyId = array();
			} else {

				$criteria->add(MissionPeer::AGENCY_ID, $this->id);

				$this->collMissionsRelatedByAgencyId = MissionPeer::doSelectJoinMissionType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionPeer::AGENCY_ID, $this->id);

			if (!isset($this->lastMissionRelatedByAgencyIdCriteria) || !$this->lastMissionRelatedByAgencyIdCriteria->equals($criteria)) {
				$this->collMissionsRelatedByAgencyId = MissionPeer::doSelectJoinMissionType($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionRelatedByAgencyIdCriteria = $criteria;

		return $this->collMissionsRelatedByAgencyId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related MissionsRelatedByAgencyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getMissionsRelatedByAgencyIdJoinPassenger($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionsRelatedByAgencyId === null) {
			if ($this->isNew()) {
				$this->collMissionsRelatedByAgencyId = array();
			} else {

				$criteria->add(MissionPeer::AGENCY_ID, $this->id);

				$this->collMissionsRelatedByAgencyId = MissionPeer::doSelectJoinPassenger($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionPeer::AGENCY_ID, $this->id);

			if (!isset($this->lastMissionRelatedByAgencyIdCriteria) || !$this->lastMissionRelatedByAgencyIdCriteria->equals($criteria)) {
				$this->collMissionsRelatedByAgencyId = MissionPeer::doSelectJoinPassenger($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionRelatedByAgencyIdCriteria = $criteria;

		return $this->collMissionsRelatedByAgencyId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related MissionsRelatedByAgencyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getMissionsRelatedByAgencyIdJoinRequesterRelatedByRequesterId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionsRelatedByAgencyId === null) {
			if ($this->isNew()) {
				$this->collMissionsRelatedByAgencyId = array();
			} else {

				$criteria->add(MissionPeer::AGENCY_ID, $this->id);

				$this->collMissionsRelatedByAgencyId = MissionPeer::doSelectJoinRequesterRelatedByRequesterId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionPeer::AGENCY_ID, $this->id);

			if (!isset($this->lastMissionRelatedByAgencyIdCriteria) || !$this->lastMissionRelatedByAgencyIdCriteria->equals($criteria)) {
				$this->collMissionsRelatedByAgencyId = MissionPeer::doSelectJoinRequesterRelatedByRequesterId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionRelatedByAgencyIdCriteria = $criteria;

		return $this->collMissionsRelatedByAgencyId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related MissionsRelatedByAgencyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getMissionsRelatedByAgencyIdJoinRequesterRelatedByOtherRequesterId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionsRelatedByAgencyId === null) {
			if ($this->isNew()) {
				$this->collMissionsRelatedByAgencyId = array();
			} else {

				$criteria->add(MissionPeer::AGENCY_ID, $this->id);

				$this->collMissionsRelatedByAgencyId = MissionPeer::doSelectJoinRequesterRelatedByOtherRequesterId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionPeer::AGENCY_ID, $this->id);

			if (!isset($this->lastMissionRelatedByAgencyIdCriteria) || !$this->lastMissionRelatedByAgencyIdCriteria->equals($criteria)) {
				$this->collMissionsRelatedByAgencyId = MissionPeer::doSelectJoinRequesterRelatedByOtherRequesterId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionRelatedByAgencyIdCriteria = $criteria;

		return $this->collMissionsRelatedByAgencyId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related MissionsRelatedByAgencyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getMissionsRelatedByAgencyIdJoinCamp($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionsRelatedByAgencyId === null) {
			if ($this->isNew()) {
				$this->collMissionsRelatedByAgencyId = array();
			} else {

				$criteria->add(MissionPeer::AGENCY_ID, $this->id);

				$this->collMissionsRelatedByAgencyId = MissionPeer::doSelectJoinCamp($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionPeer::AGENCY_ID, $this->id);

			if (!isset($this->lastMissionRelatedByAgencyIdCriteria) || !$this->lastMissionRelatedByAgencyIdCriteria->equals($criteria)) {
				$this->collMissionsRelatedByAgencyId = MissionPeer::doSelectJoinCamp($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionRelatedByAgencyIdCriteria = $criteria;

		return $this->collMissionsRelatedByAgencyId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related MissionsRelatedByAgencyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getMissionsRelatedByAgencyIdJoinCoordinator($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionsRelatedByAgencyId === null) {
			if ($this->isNew()) {
				$this->collMissionsRelatedByAgencyId = array();
			} else {

				$criteria->add(MissionPeer::AGENCY_ID, $this->id);

				$this->collMissionsRelatedByAgencyId = MissionPeer::doSelectJoinCoordinator($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionPeer::AGENCY_ID, $this->id);

			if (!isset($this->lastMissionRelatedByAgencyIdCriteria) || !$this->lastMissionRelatedByAgencyIdCriteria->equals($criteria)) {
				$this->collMissionsRelatedByAgencyId = MissionPeer::doSelectJoinCoordinator($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionRelatedByAgencyIdCriteria = $criteria;

		return $this->collMissionsRelatedByAgencyId;
	}

	/**
	 * Clears out the collMissionsRelatedByOtherAgencyId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMissionsRelatedByOtherAgencyId()
	 */
	public function clearMissionsRelatedByOtherAgencyId()
	{
		$this->collMissionsRelatedByOtherAgencyId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMissionsRelatedByOtherAgencyId collection (array).
	 *
	 * By default this just sets the collMissionsRelatedByOtherAgencyId collection to an empty array (like clearcollMissionsRelatedByOtherAgencyId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMissionsRelatedByOtherAgencyId()
	{
		$this->collMissionsRelatedByOtherAgencyId = array();
	}

	/**
	 * Gets an array of Mission objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Agency has previously been saved, it will retrieve
	 * related MissionsRelatedByOtherAgencyId from storage. If this Agency is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Mission[]
	 * @throws     PropelException
	 */
	public function getMissionsRelatedByOtherAgencyId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionsRelatedByOtherAgencyId === null) {
			if ($this->isNew()) {
			   $this->collMissionsRelatedByOtherAgencyId = array();
			} else {

				$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

				MissionPeer::addSelectColumns($criteria);
				$this->collMissionsRelatedByOtherAgencyId = MissionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

				MissionPeer::addSelectColumns($criteria);
				if (!isset($this->lastMissionRelatedByOtherAgencyIdCriteria) || !$this->lastMissionRelatedByOtherAgencyIdCriteria->equals($criteria)) {
					$this->collMissionsRelatedByOtherAgencyId = MissionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMissionRelatedByOtherAgencyIdCriteria = $criteria;
		return $this->collMissionsRelatedByOtherAgencyId;
	}

	/**
	 * Returns the number of related Mission objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Mission objects.
	 * @throws     PropelException
	 */
	public function countMissionsRelatedByOtherAgencyId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMissionsRelatedByOtherAgencyId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

				$count = MissionPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

				if (!isset($this->lastMissionRelatedByOtherAgencyIdCriteria) || !$this->lastMissionRelatedByOtherAgencyIdCriteria->equals($criteria)) {
					$count = MissionPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMissionsRelatedByOtherAgencyId);
				}
			} else {
				$count = count($this->collMissionsRelatedByOtherAgencyId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Mission object to this object
	 * through the Mission foreign key attribute.
	 *
	 * @param      Mission $l Mission
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMissionRelatedByOtherAgencyId(Mission $l)
	{
		if ($this->collMissionsRelatedByOtherAgencyId === null) {
			$this->initMissionsRelatedByOtherAgencyId();
		}
		if (!in_array($l, $this->collMissionsRelatedByOtherAgencyId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMissionsRelatedByOtherAgencyId, $l);
			$l->setAgencyRelatedByOtherAgencyId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related MissionsRelatedByOtherAgencyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getMissionsRelatedByOtherAgencyIdJoinMissionRequest($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionsRelatedByOtherAgencyId === null) {
			if ($this->isNew()) {
				$this->collMissionsRelatedByOtherAgencyId = array();
			} else {

				$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

				$this->collMissionsRelatedByOtherAgencyId = MissionPeer::doSelectJoinMissionRequest($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

			if (!isset($this->lastMissionRelatedByOtherAgencyIdCriteria) || !$this->lastMissionRelatedByOtherAgencyIdCriteria->equals($criteria)) {
				$this->collMissionsRelatedByOtherAgencyId = MissionPeer::doSelectJoinMissionRequest($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionRelatedByOtherAgencyIdCriteria = $criteria;

		return $this->collMissionsRelatedByOtherAgencyId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related MissionsRelatedByOtherAgencyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getMissionsRelatedByOtherAgencyIdJoinItinerary($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionsRelatedByOtherAgencyId === null) {
			if ($this->isNew()) {
				$this->collMissionsRelatedByOtherAgencyId = array();
			} else {

				$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

				$this->collMissionsRelatedByOtherAgencyId = MissionPeer::doSelectJoinItinerary($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

			if (!isset($this->lastMissionRelatedByOtherAgencyIdCriteria) || !$this->lastMissionRelatedByOtherAgencyIdCriteria->equals($criteria)) {
				$this->collMissionsRelatedByOtherAgencyId = MissionPeer::doSelectJoinItinerary($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionRelatedByOtherAgencyIdCriteria = $criteria;

		return $this->collMissionsRelatedByOtherAgencyId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related MissionsRelatedByOtherAgencyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getMissionsRelatedByOtherAgencyIdJoinMissionType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionsRelatedByOtherAgencyId === null) {
			if ($this->isNew()) {
				$this->collMissionsRelatedByOtherAgencyId = array();
			} else {

				$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

				$this->collMissionsRelatedByOtherAgencyId = MissionPeer::doSelectJoinMissionType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

			if (!isset($this->lastMissionRelatedByOtherAgencyIdCriteria) || !$this->lastMissionRelatedByOtherAgencyIdCriteria->equals($criteria)) {
				$this->collMissionsRelatedByOtherAgencyId = MissionPeer::doSelectJoinMissionType($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionRelatedByOtherAgencyIdCriteria = $criteria;

		return $this->collMissionsRelatedByOtherAgencyId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related MissionsRelatedByOtherAgencyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getMissionsRelatedByOtherAgencyIdJoinPassenger($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionsRelatedByOtherAgencyId === null) {
			if ($this->isNew()) {
				$this->collMissionsRelatedByOtherAgencyId = array();
			} else {

				$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

				$this->collMissionsRelatedByOtherAgencyId = MissionPeer::doSelectJoinPassenger($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

			if (!isset($this->lastMissionRelatedByOtherAgencyIdCriteria) || !$this->lastMissionRelatedByOtherAgencyIdCriteria->equals($criteria)) {
				$this->collMissionsRelatedByOtherAgencyId = MissionPeer::doSelectJoinPassenger($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionRelatedByOtherAgencyIdCriteria = $criteria;

		return $this->collMissionsRelatedByOtherAgencyId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related MissionsRelatedByOtherAgencyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getMissionsRelatedByOtherAgencyIdJoinRequesterRelatedByRequesterId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionsRelatedByOtherAgencyId === null) {
			if ($this->isNew()) {
				$this->collMissionsRelatedByOtherAgencyId = array();
			} else {

				$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

				$this->collMissionsRelatedByOtherAgencyId = MissionPeer::doSelectJoinRequesterRelatedByRequesterId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

			if (!isset($this->lastMissionRelatedByOtherAgencyIdCriteria) || !$this->lastMissionRelatedByOtherAgencyIdCriteria->equals($criteria)) {
				$this->collMissionsRelatedByOtherAgencyId = MissionPeer::doSelectJoinRequesterRelatedByRequesterId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionRelatedByOtherAgencyIdCriteria = $criteria;

		return $this->collMissionsRelatedByOtherAgencyId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related MissionsRelatedByOtherAgencyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getMissionsRelatedByOtherAgencyIdJoinRequesterRelatedByOtherRequesterId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionsRelatedByOtherAgencyId === null) {
			if ($this->isNew()) {
				$this->collMissionsRelatedByOtherAgencyId = array();
			} else {

				$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

				$this->collMissionsRelatedByOtherAgencyId = MissionPeer::doSelectJoinRequesterRelatedByOtherRequesterId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

			if (!isset($this->lastMissionRelatedByOtherAgencyIdCriteria) || !$this->lastMissionRelatedByOtherAgencyIdCriteria->equals($criteria)) {
				$this->collMissionsRelatedByOtherAgencyId = MissionPeer::doSelectJoinRequesterRelatedByOtherRequesterId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionRelatedByOtherAgencyIdCriteria = $criteria;

		return $this->collMissionsRelatedByOtherAgencyId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related MissionsRelatedByOtherAgencyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getMissionsRelatedByOtherAgencyIdJoinCamp($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionsRelatedByOtherAgencyId === null) {
			if ($this->isNew()) {
				$this->collMissionsRelatedByOtherAgencyId = array();
			} else {

				$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

				$this->collMissionsRelatedByOtherAgencyId = MissionPeer::doSelectJoinCamp($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

			if (!isset($this->lastMissionRelatedByOtherAgencyIdCriteria) || !$this->lastMissionRelatedByOtherAgencyIdCriteria->equals($criteria)) {
				$this->collMissionsRelatedByOtherAgencyId = MissionPeer::doSelectJoinCamp($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionRelatedByOtherAgencyIdCriteria = $criteria;

		return $this->collMissionsRelatedByOtherAgencyId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related MissionsRelatedByOtherAgencyId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getMissionsRelatedByOtherAgencyIdJoinCoordinator($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionsRelatedByOtherAgencyId === null) {
			if ($this->isNew()) {
				$this->collMissionsRelatedByOtherAgencyId = array();
			} else {

				$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

				$this->collMissionsRelatedByOtherAgencyId = MissionPeer::doSelectJoinCoordinator($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->id);

			if (!isset($this->lastMissionRelatedByOtherAgencyIdCriteria) || !$this->lastMissionRelatedByOtherAgencyIdCriteria->equals($criteria)) {
				$this->collMissionsRelatedByOtherAgencyId = MissionPeer::doSelectJoinCoordinator($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionRelatedByOtherAgencyIdCriteria = $criteria;

		return $this->collMissionsRelatedByOtherAgencyId;
	}

	/**
	 * Clears out the collRequesters collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRequesters()
	 */
	public function clearRequesters()
	{
		$this->collRequesters = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRequesters collection (array).
	 *
	 * By default this just sets the collRequesters collection to an empty array (like clearcollRequesters());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRequesters()
	{
		$this->collRequesters = array();
	}

	/**
	 * Gets an array of Requester objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Agency has previously been saved, it will retrieve
	 * related Requesters from storage. If this Agency is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Requester[]
	 * @throws     PropelException
	 */
	public function getRequesters($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRequesters === null) {
			if ($this->isNew()) {
			   $this->collRequesters = array();
			} else {

				$criteria->add(RequesterPeer::AGENCY_ID, $this->id);

				RequesterPeer::addSelectColumns($criteria);
				$this->collRequesters = RequesterPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RequesterPeer::AGENCY_ID, $this->id);

				RequesterPeer::addSelectColumns($criteria);
				if (!isset($this->lastRequesterCriteria) || !$this->lastRequesterCriteria->equals($criteria)) {
					$this->collRequesters = RequesterPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRequesterCriteria = $criteria;
		return $this->collRequesters;
	}

	/**
	 * Returns the number of related Requester objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Requester objects.
	 * @throws     PropelException
	 */
	public function countRequesters(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRequesters === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RequesterPeer::AGENCY_ID, $this->id);

				$count = RequesterPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RequesterPeer::AGENCY_ID, $this->id);

				if (!isset($this->lastRequesterCriteria) || !$this->lastRequesterCriteria->equals($criteria)) {
					$count = RequesterPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRequesters);
				}
			} else {
				$count = count($this->collRequesters);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Requester object to this object
	 * through the Requester foreign key attribute.
	 *
	 * @param      Requester $l Requester
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRequester(Requester $l)
	{
		if ($this->collRequesters === null) {
			$this->initRequesters();
		}
		if (!in_array($l, $this->collRequesters, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRequesters, $l);
			$l->setAgency($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Agency is new, it will return
	 * an empty collection; or if this Agency has previously
	 * been saved, it will retrieve related Requesters from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Agency.
	 */
	public function getRequestersJoinPerson($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgencyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRequesters === null) {
			if ($this->isNew()) {
				$this->collRequesters = array();
			} else {

				$criteria->add(RequesterPeer::AGENCY_ID, $this->id);

				$this->collRequesters = RequesterPeer::doSelectJoinPerson($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RequesterPeer::AGENCY_ID, $this->id);

			if (!isset($this->lastRequesterCriteria) || !$this->lastRequesterCriteria->equals($criteria)) {
				$this->collRequesters = RequesterPeer::doSelectJoinPerson($criteria, $con, $join_behavior);
			}
		}
		$this->lastRequesterCriteria = $criteria;

		return $this->collRequesters;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collCamps) {
				foreach ((array) $this->collCamps as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMissionsRelatedByAgencyId) {
				foreach ((array) $this->collMissionsRelatedByAgencyId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMissionsRelatedByOtherAgencyId) {
				foreach ((array) $this->collMissionsRelatedByOtherAgencyId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collRequesters) {
				foreach ((array) $this->collRequesters as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collCamps = null;
		$this->collMissionsRelatedByAgencyId = null;
		$this->collMissionsRelatedByOtherAgencyId = null;
		$this->collRequesters = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseAgency:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseAgency::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseAgency
