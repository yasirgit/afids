<?php

/**
 * Base class that represents a row from the 'mission' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Wed Mar 30 02:30:09 2011
 *
 * @package    lib.model.om
 */
abstract class BaseMission extends BaseObject  implements Persistent {


  const PEER = 'MissionPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        MissionPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the external_id field.
	 * @var        int
	 */
	protected $external_id;

	/**
	 * The value for the request_id field.
	 * @var        int
	 */
	protected $request_id;

	/**
	 * The value for the itinerary_id field.
	 * @var        int
	 */
	protected $itinerary_id;

	/**
	 * The value for the mission_type_id field.
	 * @var        int
	 */
	protected $mission_type_id;

	/**
	 * The value for the mission_date field.
	 * @var        string
	 */
	protected $mission_date;

	/**
	 * The value for the date_requested field.
	 * @var        string
	 */
	protected $date_requested;

	/**
	 * The value for the passenger_id field.
	 * @var        int
	 */
	protected $passenger_id;

	/**
	 * The value for the requester_id field.
	 * @var        int
	 */
	protected $requester_id;

	/**
	 * The value for the agency_id field.
	 * @var        int
	 */
	protected $agency_id;

	/**
	 * The value for the other_requester_id field.
	 * @var        int
	 */
	protected $other_requester_id;

	/**
	 * The value for the other_agency_id field.
	 * @var        int
	 */
	protected $other_agency_id;

	/**
	 * The value for the camp_id field.
	 * @var        int
	 */
	protected $camp_id;

	/**
	 * The value for the coordinator_id field.
	 * @var        int
	 */
	protected $coordinator_id;

	/**
	 * The value for the appt_date field.
	 * @var        string
	 */
	protected $appt_date;

	/**
	 * The value for the flight_time field.
	 * @var        string
	 */
	protected $flight_time;

	/**
	 * The value for the treatment field.
	 * @var        string
	 */
	protected $treatment;

	/**
	 * The value for the comment field.
	 * @var        string
	 */
	protected $comment;

	/**
	 * The value for the appointment field.
	 * @var        string
	 */
	protected $appointment;

	/**
	 * The value for the mission_specific_comments field.
	 * @var        string
	 */
	protected $mission_specific_comments;

	/**
	 * The value for the start field.
	 * @var        int
	 */
	protected $start;

	/**
	 * The value for the apoint_time field.
	 * @var        string
	 */
	protected $apoint_time;

	/**
	 * The value for the mission_count field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $mission_count;

	/**
	 * The value for the b_weight field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $b_weight;

	/**
	 * The value for the b_type field.
	 * @var        string
	 */
	protected $b_type;

	/**
	 * The value for the b_desc field.
	 * @var        string
	 */
	protected $b_desc;

	/**
	 * The value for the cancel_mission field.
	 * @var        int
	 */
	protected $cancel_mission;

	/**
	 * @var        MissionRequest
	 */
	protected $aMissionRequest;

	/**
	 * @var        Itinerary
	 */
	protected $aItinerary;

	/**
	 * @var        MissionType
	 */
	protected $aMissionType;

	/**
	 * @var        Passenger
	 */
	protected $aPassenger;

	/**
	 * @var        Requester
	 */
	protected $aRequesterRelatedByRequesterId;

	/**
	 * @var        Agency
	 */
	protected $aAgencyRelatedByAgencyId;

	/**
	 * @var        Requester
	 */
	protected $aRequesterRelatedByOtherRequesterId;

	/**
	 * @var        Agency
	 */
	protected $aAgencyRelatedByOtherAgencyId;

	/**
	 * @var        Camp
	 */
	protected $aCamp;

	/**
	 * @var        Coordinator
	 */
	protected $aCoordinator;

	/**
	 * @var        array MissionCompanion[] Collection to store aggregation of MissionCompanion objects.
	 */
	protected $collMissionCompanions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMissionCompanions.
	 */
	private $lastMissionCompanionCriteria = null;

	/**
	 * @var        array MissionLeg[] Collection to store aggregation of MissionLeg objects.
	 */
	protected $collMissionLegs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMissionLegs.
	 */
	private $lastMissionLegCriteria = null;

	/**
	 * @var        array MissionPhoto[] Collection to store aggregation of MissionPhoto objects.
	 */
	protected $collMissionPhotos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMissionPhotos.
	 */
	private $lastMissionPhotoCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseMission object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->mission_count = 0;
		$this->b_weight = 0;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [external_id] column value.
	 * 
	 * @return     int
	 */
	public function getExternalId()
	{
		return $this->external_id;
	}

	/**
	 * Get the [request_id] column value.
	 * 
	 * @return     int
	 */
	public function getRequestId()
	{
		return $this->request_id;
	}

	/**
	 * Get the [itinerary_id] column value.
	 * 
	 * @return     int
	 */
	public function getItineraryId()
	{
		return $this->itinerary_id;
	}

	/**
	 * Get the [mission_type_id] column value.
	 * 
	 * @return     int
	 */
	public function getMissionTypeId()
	{
		return $this->mission_type_id;
	}

	/**
	 * Get the [optionally formatted] temporal [mission_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getMissionDate($format = 'Y-m-d H:i:s')
	{
		if ($this->mission_date === null) {
			return null;
		}


		if ($this->mission_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->mission_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->mission_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [date_requested] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDateRequested($format = 'Y-m-d H:i:s')
	{
		if ($this->date_requested === null) {
			return null;
		}


		if ($this->date_requested === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->date_requested);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->date_requested, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [passenger_id] column value.
	 * 
	 * @return     int
	 */
	public function getPassengerId()
	{
		return $this->passenger_id;
	}

	/**
	 * Get the [requester_id] column value.
	 * 
	 * @return     int
	 */
	public function getRequesterId()
	{
		return $this->requester_id;
	}

	/**
	 * Get the [agency_id] column value.
	 * 
	 * @return     int
	 */
	public function getAgencyId()
	{
		return $this->agency_id;
	}

	/**
	 * Get the [other_requester_id] column value.
	 * 
	 * @return     int
	 */
	public function getOtherRequesterId()
	{
		return $this->other_requester_id;
	}

	/**
	 * Get the [other_agency_id] column value.
	 * 
	 * @return     int
	 */
	public function getOtherAgencyId()
	{
		return $this->other_agency_id;
	}

	/**
	 * Get the [camp_id] column value.
	 * 
	 * @return     int
	 */
	public function getCampId()
	{
		return $this->camp_id;
	}

	/**
	 * Get the [coordinator_id] column value.
	 * 
	 * @return     int
	 */
	public function getCoordinatorId()
	{
		return $this->coordinator_id;
	}

	/**
	 * Get the [optionally formatted] temporal [appt_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getApptDate($format = 'Y-m-d H:i:s')
	{
		if ($this->appt_date === null) {
			return null;
		}


		if ($this->appt_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->appt_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->appt_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [flight_time] column value.
	 * 
	 * @return     string
	 */
	public function getFlightTime()
	{
		return $this->flight_time;
	}

	/**
	 * Get the [treatment] column value.
	 * 
	 * @return     string
	 */
	public function getTreatment()
	{
		return $this->treatment;
	}

	/**
	 * Get the [comment] column value.
	 * 
	 * @return     string
	 */
	public function getComment()
	{
		return $this->comment;
	}

	/**
	 * Get the [appointment] column value.
	 * 
	 * @return     string
	 */
	public function getAppointment()
	{
		return $this->appointment;
	}

	/**
	 * Get the [mission_specific_comments] column value.
	 * 
	 * @return     string
	 */
	public function getMissionSpecificComments()
	{
		return $this->mission_specific_comments;
	}

	/**
	 * Get the [start] column value.
	 * 
	 * @return     int
	 */
	public function getStart()
	{
		return $this->start;
	}

	/**
	 * Get the [apoint_time] column value.
	 * 
	 * @return     string
	 */
	public function getApointTime()
	{
		return $this->apoint_time;
	}

	/**
	 * Get the [mission_count] column value.
	 * 
	 * @return     int
	 */
	public function getMissionCount()
	{
		return $this->mission_count;
	}

	/**
	 * Get the [b_weight] column value.
	 * 
	 * @return     int
	 */
	public function getBWeight()
	{
		return $this->b_weight;
	}

	/**
	 * Get the [b_type] column value.
	 * 
	 * @return     string
	 */
	public function getBType()
	{
		return $this->b_type;
	}

	/**
	 * Get the [b_desc] column value.
	 * 
	 * @return     string
	 */
	public function getBDesc()
	{
		return $this->b_desc;
	}

	/**
	 * Get the [cancel_mission] column value.
	 * 
	 * @return     int
	 */
	public function getCancelMission()
	{
		return $this->cancel_mission;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = MissionPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [external_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setExternalId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->external_id !== $v) {
			$this->external_id = $v;
			$this->modifiedColumns[] = MissionPeer::EXTERNAL_ID;
		}

		return $this;
	} // setExternalId()

	/**
	 * Set the value of [request_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setRequestId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->request_id !== $v) {
			$this->request_id = $v;
			$this->modifiedColumns[] = MissionPeer::REQUEST_ID;
		}

		if ($this->aMissionRequest !== null && $this->aMissionRequest->getId() !== $v) {
			$this->aMissionRequest = null;
		}

		return $this;
	} // setRequestId()

	/**
	 * Set the value of [itinerary_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setItineraryId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->itinerary_id !== $v) {
			$this->itinerary_id = $v;
			$this->modifiedColumns[] = MissionPeer::ITINERARY_ID;
		}

		if ($this->aItinerary !== null && $this->aItinerary->getId() !== $v) {
			$this->aItinerary = null;
		}

		return $this;
	} // setItineraryId()

	/**
	 * Set the value of [mission_type_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setMissionTypeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->mission_type_id !== $v) {
			$this->mission_type_id = $v;
			$this->modifiedColumns[] = MissionPeer::MISSION_TYPE_ID;
		}

		if ($this->aMissionType !== null && $this->aMissionType->getId() !== $v) {
			$this->aMissionType = null;
		}

		return $this;
	} // setMissionTypeId()

	/**
	 * Sets the value of [mission_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setMissionDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->mission_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->mission_date !== null && $tmpDt = new DateTime($this->mission_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->mission_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = MissionPeer::MISSION_DATE;
			}
		} // if either are not null

		return $this;
	} // setMissionDate()

	/**
	 * Sets the value of [date_requested] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setDateRequested($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->date_requested !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->date_requested !== null && $tmpDt = new DateTime($this->date_requested)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->date_requested = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = MissionPeer::DATE_REQUESTED;
			}
		} // if either are not null

		return $this;
	} // setDateRequested()

	/**
	 * Set the value of [passenger_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setPassengerId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->passenger_id !== $v) {
			$this->passenger_id = $v;
			$this->modifiedColumns[] = MissionPeer::PASSENGER_ID;
		}

		if ($this->aPassenger !== null && $this->aPassenger->getId() !== $v) {
			$this->aPassenger = null;
		}

		return $this;
	} // setPassengerId()

	/**
	 * Set the value of [requester_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setRequesterId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->requester_id !== $v) {
			$this->requester_id = $v;
			$this->modifiedColumns[] = MissionPeer::REQUESTER_ID;
		}

		if ($this->aRequesterRelatedByRequesterId !== null && $this->aRequesterRelatedByRequesterId->getId() !== $v) {
			$this->aRequesterRelatedByRequesterId = null;
		}

		return $this;
	} // setRequesterId()

	/**
	 * Set the value of [agency_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setAgencyId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->agency_id !== $v) {
			$this->agency_id = $v;
			$this->modifiedColumns[] = MissionPeer::AGENCY_ID;
		}

		if ($this->aAgencyRelatedByAgencyId !== null && $this->aAgencyRelatedByAgencyId->getId() !== $v) {
			$this->aAgencyRelatedByAgencyId = null;
		}

		return $this;
	} // setAgencyId()

	/**
	 * Set the value of [other_requester_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setOtherRequesterId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->other_requester_id !== $v) {
			$this->other_requester_id = $v;
			$this->modifiedColumns[] = MissionPeer::OTHER_REQUESTER_ID;
		}

		if ($this->aRequesterRelatedByOtherRequesterId !== null && $this->aRequesterRelatedByOtherRequesterId->getId() !== $v) {
			$this->aRequesterRelatedByOtherRequesterId = null;
		}

		return $this;
	} // setOtherRequesterId()

	/**
	 * Set the value of [other_agency_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setOtherAgencyId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->other_agency_id !== $v) {
			$this->other_agency_id = $v;
			$this->modifiedColumns[] = MissionPeer::OTHER_AGENCY_ID;
		}

		if ($this->aAgencyRelatedByOtherAgencyId !== null && $this->aAgencyRelatedByOtherAgencyId->getId() !== $v) {
			$this->aAgencyRelatedByOtherAgencyId = null;
		}

		return $this;
	} // setOtherAgencyId()

	/**
	 * Set the value of [camp_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setCampId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->camp_id !== $v) {
			$this->camp_id = $v;
			$this->modifiedColumns[] = MissionPeer::CAMP_ID;
		}

		if ($this->aCamp !== null && $this->aCamp->getId() !== $v) {
			$this->aCamp = null;
		}

		return $this;
	} // setCampId()

	/**
	 * Set the value of [coordinator_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setCoordinatorId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->coordinator_id !== $v) {
			$this->coordinator_id = $v;
			$this->modifiedColumns[] = MissionPeer::COORDINATOR_ID;
		}

		if ($this->aCoordinator !== null && $this->aCoordinator->getId() !== $v) {
			$this->aCoordinator = null;
		}

		return $this;
	} // setCoordinatorId()

	/**
	 * Sets the value of [appt_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setApptDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->appt_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->appt_date !== null && $tmpDt = new DateTime($this->appt_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->appt_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = MissionPeer::APPT_DATE;
			}
		} // if either are not null

		return $this;
	} // setApptDate()

	/**
	 * Set the value of [flight_time] column.
	 * 
	 * @param      string $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setFlightTime($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->flight_time !== $v) {
			$this->flight_time = $v;
			$this->modifiedColumns[] = MissionPeer::FLIGHT_TIME;
		}

		return $this;
	} // setFlightTime()

	/**
	 * Set the value of [treatment] column.
	 * 
	 * @param      string $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setTreatment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->treatment !== $v) {
			$this->treatment = $v;
			$this->modifiedColumns[] = MissionPeer::TREATMENT;
		}

		return $this;
	} // setTreatment()

	/**
	 * Set the value of [comment] column.
	 * 
	 * @param      string $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comment !== $v) {
			$this->comment = $v;
			$this->modifiedColumns[] = MissionPeer::COMMENT;
		}

		return $this;
	} // setComment()

	/**
	 * Set the value of [appointment] column.
	 * 
	 * @param      string $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setAppointment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->appointment !== $v) {
			$this->appointment = $v;
			$this->modifiedColumns[] = MissionPeer::APPOINTMENT;
		}

		return $this;
	} // setAppointment()

	/**
	 * Set the value of [mission_specific_comments] column.
	 * 
	 * @param      string $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setMissionSpecificComments($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mission_specific_comments !== $v) {
			$this->mission_specific_comments = $v;
			$this->modifiedColumns[] = MissionPeer::MISSION_SPECIFIC_COMMENTS;
		}

		return $this;
	} // setMissionSpecificComments()

	/**
	 * Set the value of [start] column.
	 * 
	 * @param      int $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setStart($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->start !== $v) {
			$this->start = $v;
			$this->modifiedColumns[] = MissionPeer::START;
		}

		return $this;
	} // setStart()

	/**
	 * Set the value of [apoint_time] column.
	 * 
	 * @param      string $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setApointTime($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->apoint_time !== $v) {
			$this->apoint_time = $v;
			$this->modifiedColumns[] = MissionPeer::APOINT_TIME;
		}

		return $this;
	} // setApointTime()

	/**
	 * Set the value of [mission_count] column.
	 * 
	 * @param      int $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setMissionCount($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->mission_count !== $v || $v === 0) {
			$this->mission_count = $v;
			$this->modifiedColumns[] = MissionPeer::MISSION_COUNT;
		}

		return $this;
	} // setMissionCount()

	/**
	 * Set the value of [b_weight] column.
	 * 
	 * @param      int $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setBWeight($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->b_weight !== $v || $v === 0) {
			$this->b_weight = $v;
			$this->modifiedColumns[] = MissionPeer::B_WEIGHT;
		}

		return $this;
	} // setBWeight()

	/**
	 * Set the value of [b_type] column.
	 * 
	 * @param      string $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setBType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->b_type !== $v) {
			$this->b_type = $v;
			$this->modifiedColumns[] = MissionPeer::B_TYPE;
		}

		return $this;
	} // setBType()

	/**
	 * Set the value of [b_desc] column.
	 * 
	 * @param      string $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setBDesc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->b_desc !== $v) {
			$this->b_desc = $v;
			$this->modifiedColumns[] = MissionPeer::B_DESC;
		}

		return $this;
	} // setBDesc()

	/**
	 * Set the value of [cancel_mission] column.
	 * 
	 * @param      int $v new value
	 * @return     Mission The current object (for fluent API support)
	 */
	public function setCancelMission($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cancel_mission !== $v) {
			$this->cancel_mission = $v;
			$this->modifiedColumns[] = MissionPeer::CANCEL_MISSION;
		}

		return $this;
	} // setCancelMission()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(MissionPeer::MISSION_COUNT,MissionPeer::B_WEIGHT))) {
				return false;
			}

			if ($this->mission_count !== 0) {
				return false;
			}

			if ($this->b_weight !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->external_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->request_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->itinerary_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->mission_type_id = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->mission_date = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->date_requested = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->passenger_id = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->requester_id = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->agency_id = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->other_requester_id = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->other_agency_id = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->camp_id = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->coordinator_id = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->appt_date = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->flight_time = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->treatment = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->comment = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->appointment = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->mission_specific_comments = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->start = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->apoint_time = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->mission_count = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->b_weight = ($row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
			$this->b_type = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->b_desc = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->cancel_mission = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 27; // 27 = MissionPeer::NUM_COLUMNS - MissionPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Mission object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aMissionRequest !== null && $this->request_id !== $this->aMissionRequest->getId()) {
			$this->aMissionRequest = null;
		}
		if ($this->aItinerary !== null && $this->itinerary_id !== $this->aItinerary->getId()) {
			$this->aItinerary = null;
		}
		if ($this->aMissionType !== null && $this->mission_type_id !== $this->aMissionType->getId()) {
			$this->aMissionType = null;
		}
		if ($this->aPassenger !== null && $this->passenger_id !== $this->aPassenger->getId()) {
			$this->aPassenger = null;
		}
		if ($this->aRequesterRelatedByRequesterId !== null && $this->requester_id !== $this->aRequesterRelatedByRequesterId->getId()) {
			$this->aRequesterRelatedByRequesterId = null;
		}
		if ($this->aAgencyRelatedByAgencyId !== null && $this->agency_id !== $this->aAgencyRelatedByAgencyId->getId()) {
			$this->aAgencyRelatedByAgencyId = null;
		}
		if ($this->aRequesterRelatedByOtherRequesterId !== null && $this->other_requester_id !== $this->aRequesterRelatedByOtherRequesterId->getId()) {
			$this->aRequesterRelatedByOtherRequesterId = null;
		}
		if ($this->aAgencyRelatedByOtherAgencyId !== null && $this->other_agency_id !== $this->aAgencyRelatedByOtherAgencyId->getId()) {
			$this->aAgencyRelatedByOtherAgencyId = null;
		}
		if ($this->aCamp !== null && $this->camp_id !== $this->aCamp->getId()) {
			$this->aCamp = null;
		}
		if ($this->aCoordinator !== null && $this->coordinator_id !== $this->aCoordinator->getId()) {
			$this->aCoordinator = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MissionPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = MissionPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aMissionRequest = null;
			$this->aItinerary = null;
			$this->aMissionType = null;
			$this->aPassenger = null;
			$this->aRequesterRelatedByRequesterId = null;
			$this->aAgencyRelatedByAgencyId = null;
			$this->aRequesterRelatedByOtherRequesterId = null;
			$this->aAgencyRelatedByOtherAgencyId = null;
			$this->aCamp = null;
			$this->aCoordinator = null;
			$this->collMissionCompanions = null;
			$this->lastMissionCompanionCriteria = null;

			$this->collMissionLegs = null;
			$this->lastMissionLegCriteria = null;

			$this->collMissionPhotos = null;
			$this->lastMissionPhotoCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMission:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MissionPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			MissionPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseMission:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMission:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MissionPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseMission:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			MissionPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aMissionRequest !== null) {
				if ($this->aMissionRequest->isModified() || $this->aMissionRequest->isNew()) {
					$affectedRows += $this->aMissionRequest->save($con);
				}
				$this->setMissionRequest($this->aMissionRequest);
			}

			if ($this->aItinerary !== null) {
				if ($this->aItinerary->isModified() || $this->aItinerary->isNew()) {
					$affectedRows += $this->aItinerary->save($con);
				}
				$this->setItinerary($this->aItinerary);
			}

			if ($this->aMissionType !== null) {
				if ($this->aMissionType->isModified() || $this->aMissionType->isNew()) {
					$affectedRows += $this->aMissionType->save($con);
				}
				$this->setMissionType($this->aMissionType);
			}

			if ($this->aPassenger !== null) {
				if ($this->aPassenger->isModified() || $this->aPassenger->isNew()) {
					$affectedRows += $this->aPassenger->save($con);
				}
				$this->setPassenger($this->aPassenger);
			}

			if ($this->aRequesterRelatedByRequesterId !== null) {
				if ($this->aRequesterRelatedByRequesterId->isModified() || $this->aRequesterRelatedByRequesterId->isNew()) {
					$affectedRows += $this->aRequesterRelatedByRequesterId->save($con);
				}
				$this->setRequesterRelatedByRequesterId($this->aRequesterRelatedByRequesterId);
			}

			if ($this->aAgencyRelatedByAgencyId !== null) {
				if ($this->aAgencyRelatedByAgencyId->isModified() || $this->aAgencyRelatedByAgencyId->isNew()) {
					$affectedRows += $this->aAgencyRelatedByAgencyId->save($con);
				}
				$this->setAgencyRelatedByAgencyId($this->aAgencyRelatedByAgencyId);
			}

			if ($this->aRequesterRelatedByOtherRequesterId !== null) {
				if ($this->aRequesterRelatedByOtherRequesterId->isModified() || $this->aRequesterRelatedByOtherRequesterId->isNew()) {
					$affectedRows += $this->aRequesterRelatedByOtherRequesterId->save($con);
				}
				$this->setRequesterRelatedByOtherRequesterId($this->aRequesterRelatedByOtherRequesterId);
			}

			if ($this->aAgencyRelatedByOtherAgencyId !== null) {
				if ($this->aAgencyRelatedByOtherAgencyId->isModified() || $this->aAgencyRelatedByOtherAgencyId->isNew()) {
					$affectedRows += $this->aAgencyRelatedByOtherAgencyId->save($con);
				}
				$this->setAgencyRelatedByOtherAgencyId($this->aAgencyRelatedByOtherAgencyId);
			}

			if ($this->aCamp !== null) {
				if ($this->aCamp->isModified() || $this->aCamp->isNew()) {
					$affectedRows += $this->aCamp->save($con);
				}
				$this->setCamp($this->aCamp);
			}

			if ($this->aCoordinator !== null) {
				if ($this->aCoordinator->isModified() || $this->aCoordinator->isNew()) {
					$affectedRows += $this->aCoordinator->save($con);
				}
				$this->setCoordinator($this->aCoordinator);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = MissionPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = MissionPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += MissionPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collMissionCompanions !== null) {
				foreach ($this->collMissionCompanions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMissionLegs !== null) {
				foreach ($this->collMissionLegs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMissionPhotos !== null) {
				foreach ($this->collMissionPhotos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aMissionRequest !== null) {
				if (!$this->aMissionRequest->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMissionRequest->getValidationFailures());
				}
			}

			if ($this->aItinerary !== null) {
				if (!$this->aItinerary->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aItinerary->getValidationFailures());
				}
			}

			if ($this->aMissionType !== null) {
				if (!$this->aMissionType->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMissionType->getValidationFailures());
				}
			}

			if ($this->aPassenger !== null) {
				if (!$this->aPassenger->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPassenger->getValidationFailures());
				}
			}

			if ($this->aRequesterRelatedByRequesterId !== null) {
				if (!$this->aRequesterRelatedByRequesterId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aRequesterRelatedByRequesterId->getValidationFailures());
				}
			}

			if ($this->aAgencyRelatedByAgencyId !== null) {
				if (!$this->aAgencyRelatedByAgencyId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAgencyRelatedByAgencyId->getValidationFailures());
				}
			}

			if ($this->aRequesterRelatedByOtherRequesterId !== null) {
				if (!$this->aRequesterRelatedByOtherRequesterId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aRequesterRelatedByOtherRequesterId->getValidationFailures());
				}
			}

			if ($this->aAgencyRelatedByOtherAgencyId !== null) {
				if (!$this->aAgencyRelatedByOtherAgencyId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAgencyRelatedByOtherAgencyId->getValidationFailures());
				}
			}

			if ($this->aCamp !== null) {
				if (!$this->aCamp->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCamp->getValidationFailures());
				}
			}

			if ($this->aCoordinator !== null) {
				if (!$this->aCoordinator->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCoordinator->getValidationFailures());
				}
			}


			if (($retval = MissionPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collMissionCompanions !== null) {
					foreach ($this->collMissionCompanions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMissionLegs !== null) {
					foreach ($this->collMissionLegs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMissionPhotos !== null) {
					foreach ($this->collMissionPhotos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MissionPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getExternalId();
				break;
			case 2:
				return $this->getRequestId();
				break;
			case 3:
				return $this->getItineraryId();
				break;
			case 4:
				return $this->getMissionTypeId();
				break;
			case 5:
				return $this->getMissionDate();
				break;
			case 6:
				return $this->getDateRequested();
				break;
			case 7:
				return $this->getPassengerId();
				break;
			case 8:
				return $this->getRequesterId();
				break;
			case 9:
				return $this->getAgencyId();
				break;
			case 10:
				return $this->getOtherRequesterId();
				break;
			case 11:
				return $this->getOtherAgencyId();
				break;
			case 12:
				return $this->getCampId();
				break;
			case 13:
				return $this->getCoordinatorId();
				break;
			case 14:
				return $this->getApptDate();
				break;
			case 15:
				return $this->getFlightTime();
				break;
			case 16:
				return $this->getTreatment();
				break;
			case 17:
				return $this->getComment();
				break;
			case 18:
				return $this->getAppointment();
				break;
			case 19:
				return $this->getMissionSpecificComments();
				break;
			case 20:
				return $this->getStart();
				break;
			case 21:
				return $this->getApointTime();
				break;
			case 22:
				return $this->getMissionCount();
				break;
			case 23:
				return $this->getBWeight();
				break;
			case 24:
				return $this->getBType();
				break;
			case 25:
				return $this->getBDesc();
				break;
			case 26:
				return $this->getCancelMission();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = MissionPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getExternalId(),
			$keys[2] => $this->getRequestId(),
			$keys[3] => $this->getItineraryId(),
			$keys[4] => $this->getMissionTypeId(),
			$keys[5] => $this->getMissionDate(),
			$keys[6] => $this->getDateRequested(),
			$keys[7] => $this->getPassengerId(),
			$keys[8] => $this->getRequesterId(),
			$keys[9] => $this->getAgencyId(),
			$keys[10] => $this->getOtherRequesterId(),
			$keys[11] => $this->getOtherAgencyId(),
			$keys[12] => $this->getCampId(),
			$keys[13] => $this->getCoordinatorId(),
			$keys[14] => $this->getApptDate(),
			$keys[15] => $this->getFlightTime(),
			$keys[16] => $this->getTreatment(),
			$keys[17] => $this->getComment(),
			$keys[18] => $this->getAppointment(),
			$keys[19] => $this->getMissionSpecificComments(),
			$keys[20] => $this->getStart(),
			$keys[21] => $this->getApointTime(),
			$keys[22] => $this->getMissionCount(),
			$keys[23] => $this->getBWeight(),
			$keys[24] => $this->getBType(),
			$keys[25] => $this->getBDesc(),
			$keys[26] => $this->getCancelMission(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MissionPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setExternalId($value);
				break;
			case 2:
				$this->setRequestId($value);
				break;
			case 3:
				$this->setItineraryId($value);
				break;
			case 4:
				$this->setMissionTypeId($value);
				break;
			case 5:
				$this->setMissionDate($value);
				break;
			case 6:
				$this->setDateRequested($value);
				break;
			case 7:
				$this->setPassengerId($value);
				break;
			case 8:
				$this->setRequesterId($value);
				break;
			case 9:
				$this->setAgencyId($value);
				break;
			case 10:
				$this->setOtherRequesterId($value);
				break;
			case 11:
				$this->setOtherAgencyId($value);
				break;
			case 12:
				$this->setCampId($value);
				break;
			case 13:
				$this->setCoordinatorId($value);
				break;
			case 14:
				$this->setApptDate($value);
				break;
			case 15:
				$this->setFlightTime($value);
				break;
			case 16:
				$this->setTreatment($value);
				break;
			case 17:
				$this->setComment($value);
				break;
			case 18:
				$this->setAppointment($value);
				break;
			case 19:
				$this->setMissionSpecificComments($value);
				break;
			case 20:
				$this->setStart($value);
				break;
			case 21:
				$this->setApointTime($value);
				break;
			case 22:
				$this->setMissionCount($value);
				break;
			case 23:
				$this->setBWeight($value);
				break;
			case 24:
				$this->setBType($value);
				break;
			case 25:
				$this->setBDesc($value);
				break;
			case 26:
				$this->setCancelMission($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = MissionPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setExternalId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setRequestId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setItineraryId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setMissionTypeId($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setMissionDate($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setDateRequested($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setPassengerId($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setRequesterId($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setAgencyId($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setOtherRequesterId($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setOtherAgencyId($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setCampId($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCoordinatorId($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setApptDate($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setFlightTime($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setTreatment($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setComment($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setAppointment($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setMissionSpecificComments($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setStart($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setApointTime($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setMissionCount($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setBWeight($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setBType($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setBDesc($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setCancelMission($arr[$keys[26]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(MissionPeer::DATABASE_NAME);

		if ($this->isColumnModified(MissionPeer::ID)) $criteria->add(MissionPeer::ID, $this->id);
		if ($this->isColumnModified(MissionPeer::EXTERNAL_ID)) $criteria->add(MissionPeer::EXTERNAL_ID, $this->external_id);
		if ($this->isColumnModified(MissionPeer::REQUEST_ID)) $criteria->add(MissionPeer::REQUEST_ID, $this->request_id);
		if ($this->isColumnModified(MissionPeer::ITINERARY_ID)) $criteria->add(MissionPeer::ITINERARY_ID, $this->itinerary_id);
		if ($this->isColumnModified(MissionPeer::MISSION_TYPE_ID)) $criteria->add(MissionPeer::MISSION_TYPE_ID, $this->mission_type_id);
		if ($this->isColumnModified(MissionPeer::MISSION_DATE)) $criteria->add(MissionPeer::MISSION_DATE, $this->mission_date);
		if ($this->isColumnModified(MissionPeer::DATE_REQUESTED)) $criteria->add(MissionPeer::DATE_REQUESTED, $this->date_requested);
		if ($this->isColumnModified(MissionPeer::PASSENGER_ID)) $criteria->add(MissionPeer::PASSENGER_ID, $this->passenger_id);
		if ($this->isColumnModified(MissionPeer::REQUESTER_ID)) $criteria->add(MissionPeer::REQUESTER_ID, $this->requester_id);
		if ($this->isColumnModified(MissionPeer::AGENCY_ID)) $criteria->add(MissionPeer::AGENCY_ID, $this->agency_id);
		if ($this->isColumnModified(MissionPeer::OTHER_REQUESTER_ID)) $criteria->add(MissionPeer::OTHER_REQUESTER_ID, $this->other_requester_id);
		if ($this->isColumnModified(MissionPeer::OTHER_AGENCY_ID)) $criteria->add(MissionPeer::OTHER_AGENCY_ID, $this->other_agency_id);
		if ($this->isColumnModified(MissionPeer::CAMP_ID)) $criteria->add(MissionPeer::CAMP_ID, $this->camp_id);
		if ($this->isColumnModified(MissionPeer::COORDINATOR_ID)) $criteria->add(MissionPeer::COORDINATOR_ID, $this->coordinator_id);
		if ($this->isColumnModified(MissionPeer::APPT_DATE)) $criteria->add(MissionPeer::APPT_DATE, $this->appt_date);
		if ($this->isColumnModified(MissionPeer::FLIGHT_TIME)) $criteria->add(MissionPeer::FLIGHT_TIME, $this->flight_time);
		if ($this->isColumnModified(MissionPeer::TREATMENT)) $criteria->add(MissionPeer::TREATMENT, $this->treatment);
		if ($this->isColumnModified(MissionPeer::COMMENT)) $criteria->add(MissionPeer::COMMENT, $this->comment);
		if ($this->isColumnModified(MissionPeer::APPOINTMENT)) $criteria->add(MissionPeer::APPOINTMENT, $this->appointment);
		if ($this->isColumnModified(MissionPeer::MISSION_SPECIFIC_COMMENTS)) $criteria->add(MissionPeer::MISSION_SPECIFIC_COMMENTS, $this->mission_specific_comments);
		if ($this->isColumnModified(MissionPeer::START)) $criteria->add(MissionPeer::START, $this->start);
		if ($this->isColumnModified(MissionPeer::APOINT_TIME)) $criteria->add(MissionPeer::APOINT_TIME, $this->apoint_time);
		if ($this->isColumnModified(MissionPeer::MISSION_COUNT)) $criteria->add(MissionPeer::MISSION_COUNT, $this->mission_count);
		if ($this->isColumnModified(MissionPeer::B_WEIGHT)) $criteria->add(MissionPeer::B_WEIGHT, $this->b_weight);
		if ($this->isColumnModified(MissionPeer::B_TYPE)) $criteria->add(MissionPeer::B_TYPE, $this->b_type);
		if ($this->isColumnModified(MissionPeer::B_DESC)) $criteria->add(MissionPeer::B_DESC, $this->b_desc);
		if ($this->isColumnModified(MissionPeer::CANCEL_MISSION)) $criteria->add(MissionPeer::CANCEL_MISSION, $this->cancel_mission);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(MissionPeer::DATABASE_NAME);

		$criteria->add(MissionPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Mission (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setExternalId($this->external_id);

		$copyObj->setRequestId($this->request_id);

		$copyObj->setItineraryId($this->itinerary_id);

		$copyObj->setMissionTypeId($this->mission_type_id);

		$copyObj->setMissionDate($this->mission_date);

		$copyObj->setDateRequested($this->date_requested);

		$copyObj->setPassengerId($this->passenger_id);

		$copyObj->setRequesterId($this->requester_id);

		$copyObj->setAgencyId($this->agency_id);

		$copyObj->setOtherRequesterId($this->other_requester_id);

		$copyObj->setOtherAgencyId($this->other_agency_id);

		$copyObj->setCampId($this->camp_id);

		$copyObj->setCoordinatorId($this->coordinator_id);

		$copyObj->setApptDate($this->appt_date);

		$copyObj->setFlightTime($this->flight_time);

		$copyObj->setTreatment($this->treatment);

		$copyObj->setComment($this->comment);

		$copyObj->setAppointment($this->appointment);

		$copyObj->setMissionSpecificComments($this->mission_specific_comments);

		$copyObj->setStart($this->start);

		$copyObj->setApointTime($this->apoint_time);

		$copyObj->setMissionCount($this->mission_count);

		$copyObj->setBWeight($this->b_weight);

		$copyObj->setBType($this->b_type);

		$copyObj->setBDesc($this->b_desc);

		$copyObj->setCancelMission($this->cancel_mission);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getMissionCompanions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMissionCompanion($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMissionLegs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMissionLeg($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMissionPhotos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMissionPhoto($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Mission Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     MissionPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new MissionPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a MissionRequest object.
	 *
	 * @param      MissionRequest $v
	 * @return     Mission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMissionRequest(MissionRequest $v = null)
	{
		if ($v === null) {
			$this->setRequestId(NULL);
		} else {
			$this->setRequestId($v->getId());
		}

		$this->aMissionRequest = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the MissionRequest object, it will not be re-added.
		if ($v !== null) {
			$v->addMission($this);
		}

		return $this;
	}


	/**
	 * Get the associated MissionRequest object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     MissionRequest The associated MissionRequest object.
	 * @throws     PropelException
	 */
	public function getMissionRequest(PropelPDO $con = null)
	{
		if ($this->aMissionRequest === null && ($this->request_id !== null)) {
			$c = new Criteria(MissionRequestPeer::DATABASE_NAME);
			$c->add(MissionRequestPeer::ID, $this->request_id);
			$this->aMissionRequest = MissionRequestPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMissionRequest->addMissions($this);
			 */
		}
		return $this->aMissionRequest;
	}

	/**
	 * Declares an association between this object and a Itinerary object.
	 *
	 * @param      Itinerary $v
	 * @return     Mission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setItinerary(Itinerary $v = null)
	{
		if ($v === null) {
			$this->setItineraryId(NULL);
		} else {
			$this->setItineraryId($v->getId());
		}

		$this->aItinerary = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Itinerary object, it will not be re-added.
		if ($v !== null) {
			$v->addMission($this);
		}

		return $this;
	}


	/**
	 * Get the associated Itinerary object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Itinerary The associated Itinerary object.
	 * @throws     PropelException
	 */
	public function getItinerary(PropelPDO $con = null)
	{
		if ($this->aItinerary === null && ($this->itinerary_id !== null)) {
			$c = new Criteria(ItineraryPeer::DATABASE_NAME);
			$c->add(ItineraryPeer::ID, $this->itinerary_id);
			$this->aItinerary = ItineraryPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aItinerary->addMissions($this);
			 */
		}
		return $this->aItinerary;
	}

	/**
	 * Declares an association between this object and a MissionType object.
	 *
	 * @param      MissionType $v
	 * @return     Mission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMissionType(MissionType $v = null)
	{
		if ($v === null) {
			$this->setMissionTypeId(NULL);
		} else {
			$this->setMissionTypeId($v->getId());
		}

		$this->aMissionType = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the MissionType object, it will not be re-added.
		if ($v !== null) {
			$v->addMission($this);
		}

		return $this;
	}


	/**
	 * Get the associated MissionType object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     MissionType The associated MissionType object.
	 * @throws     PropelException
	 */
	public function getMissionType(PropelPDO $con = null)
	{
		if ($this->aMissionType === null && ($this->mission_type_id !== null)) {
			$c = new Criteria(MissionTypePeer::DATABASE_NAME);
			$c->add(MissionTypePeer::ID, $this->mission_type_id);
			$this->aMissionType = MissionTypePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMissionType->addMissions($this);
			 */
		}
		return $this->aMissionType;
	}

	/**
	 * Declares an association between this object and a Passenger object.
	 *
	 * @param      Passenger $v
	 * @return     Mission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPassenger(Passenger $v = null)
	{
		if ($v === null) {
			$this->setPassengerId(NULL);
		} else {
			$this->setPassengerId($v->getId());
		}

		$this->aPassenger = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Passenger object, it will not be re-added.
		if ($v !== null) {
			$v->addMission($this);
		}

		return $this;
	}


	/**
	 * Get the associated Passenger object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Passenger The associated Passenger object.
	 * @throws     PropelException
	 */
	public function getPassenger(PropelPDO $con = null)
	{
		if ($this->aPassenger === null && ($this->passenger_id !== null)) {
			$c = new Criteria(PassengerPeer::DATABASE_NAME);
			$c->add(PassengerPeer::ID, $this->passenger_id);
			$this->aPassenger = PassengerPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPassenger->addMissions($this);
			 */
		}
		return $this->aPassenger;
	}

	/**
	 * Declares an association between this object and a Requester object.
	 *
	 * @param      Requester $v
	 * @return     Mission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setRequesterRelatedByRequesterId(Requester $v = null)
	{
		if ($v === null) {
			$this->setRequesterId(NULL);
		} else {
			$this->setRequesterId($v->getId());
		}

		$this->aRequesterRelatedByRequesterId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Requester object, it will not be re-added.
		if ($v !== null) {
			$v->addMissionRelatedByRequesterId($this);
		}

		return $this;
	}


	/**
	 * Get the associated Requester object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Requester The associated Requester object.
	 * @throws     PropelException
	 */
	public function getRequesterRelatedByRequesterId(PropelPDO $con = null)
	{
		if ($this->aRequesterRelatedByRequesterId === null && ($this->requester_id !== null)) {
			$c = new Criteria(RequesterPeer::DATABASE_NAME);
			$c->add(RequesterPeer::ID, $this->requester_id);
			$this->aRequesterRelatedByRequesterId = RequesterPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aRequesterRelatedByRequesterId->addMissionsRelatedByRequesterId($this);
			 */
		}
		return $this->aRequesterRelatedByRequesterId;
	}

	/**
	 * Declares an association between this object and a Agency object.
	 *
	 * @param      Agency $v
	 * @return     Mission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAgencyRelatedByAgencyId(Agency $v = null)
	{
		if ($v === null) {
			$this->setAgencyId(NULL);
		} else {
			$this->setAgencyId($v->getId());
		}

		$this->aAgencyRelatedByAgencyId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Agency object, it will not be re-added.
		if ($v !== null) {
			$v->addMissionRelatedByAgencyId($this);
		}

		return $this;
	}


	/**
	 * Get the associated Agency object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Agency The associated Agency object.
	 * @throws     PropelException
	 */
	public function getAgencyRelatedByAgencyId(PropelPDO $con = null)
	{
		if ($this->aAgencyRelatedByAgencyId === null && ($this->agency_id !== null)) {
			$c = new Criteria(AgencyPeer::DATABASE_NAME);
			$c->add(AgencyPeer::ID, $this->agency_id);
			$this->aAgencyRelatedByAgencyId = AgencyPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAgencyRelatedByAgencyId->addMissionsRelatedByAgencyId($this);
			 */
		}
		return $this->aAgencyRelatedByAgencyId;
	}

	/**
	 * Declares an association between this object and a Requester object.
	 *
	 * @param      Requester $v
	 * @return     Mission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setRequesterRelatedByOtherRequesterId(Requester $v = null)
	{
		if ($v === null) {
			$this->setOtherRequesterId(NULL);
		} else {
			$this->setOtherRequesterId($v->getId());
		}

		$this->aRequesterRelatedByOtherRequesterId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Requester object, it will not be re-added.
		if ($v !== null) {
			$v->addMissionRelatedByOtherRequesterId($this);
		}

		return $this;
	}


	/**
	 * Get the associated Requester object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Requester The associated Requester object.
	 * @throws     PropelException
	 */
	public function getRequesterRelatedByOtherRequesterId(PropelPDO $con = null)
	{
		if ($this->aRequesterRelatedByOtherRequesterId === null && ($this->other_requester_id !== null)) {
			$c = new Criteria(RequesterPeer::DATABASE_NAME);
			$c->add(RequesterPeer::ID, $this->other_requester_id);
			$this->aRequesterRelatedByOtherRequesterId = RequesterPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aRequesterRelatedByOtherRequesterId->addMissionsRelatedByOtherRequesterId($this);
			 */
		}
		return $this->aRequesterRelatedByOtherRequesterId;
	}

	/**
	 * Declares an association between this object and a Agency object.
	 *
	 * @param      Agency $v
	 * @return     Mission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAgencyRelatedByOtherAgencyId(Agency $v = null)
	{
		if ($v === null) {
			$this->setOtherAgencyId(NULL);
		} else {
			$this->setOtherAgencyId($v->getId());
		}

		$this->aAgencyRelatedByOtherAgencyId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Agency object, it will not be re-added.
		if ($v !== null) {
			$v->addMissionRelatedByOtherAgencyId($this);
		}

		return $this;
	}


	/**
	 * Get the associated Agency object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Agency The associated Agency object.
	 * @throws     PropelException
	 */
	public function getAgencyRelatedByOtherAgencyId(PropelPDO $con = null)
	{
		if ($this->aAgencyRelatedByOtherAgencyId === null && ($this->other_agency_id !== null)) {
			$c = new Criteria(AgencyPeer::DATABASE_NAME);
			$c->add(AgencyPeer::ID, $this->other_agency_id);
			$this->aAgencyRelatedByOtherAgencyId = AgencyPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAgencyRelatedByOtherAgencyId->addMissionsRelatedByOtherAgencyId($this);
			 */
		}
		return $this->aAgencyRelatedByOtherAgencyId;
	}

	/**
	 * Declares an association between this object and a Camp object.
	 *
	 * @param      Camp $v
	 * @return     Mission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCamp(Camp $v = null)
	{
		if ($v === null) {
			$this->setCampId(NULL);
		} else {
			$this->setCampId($v->getId());
		}

		$this->aCamp = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Camp object, it will not be re-added.
		if ($v !== null) {
			$v->addMission($this);
		}

		return $this;
	}


	/**
	 * Get the associated Camp object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Camp The associated Camp object.
	 * @throws     PropelException
	 */
	public function getCamp(PropelPDO $con = null)
	{
		if ($this->aCamp === null && ($this->camp_id !== null)) {
			$c = new Criteria(CampPeer::DATABASE_NAME);
			$c->add(CampPeer::ID, $this->camp_id);
			$this->aCamp = CampPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCamp->addMissions($this);
			 */
		}
		return $this->aCamp;
	}

	/**
	 * Declares an association between this object and a Coordinator object.
	 *
	 * @param      Coordinator $v
	 * @return     Mission The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCoordinator(Coordinator $v = null)
	{
		if ($v === null) {
			$this->setCoordinatorId(NULL);
		} else {
			$this->setCoordinatorId($v->getId());
		}

		$this->aCoordinator = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Coordinator object, it will not be re-added.
		if ($v !== null) {
			$v->addMission($this);
		}

		return $this;
	}


	/**
	 * Get the associated Coordinator object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Coordinator The associated Coordinator object.
	 * @throws     PropelException
	 */
	public function getCoordinator(PropelPDO $con = null)
	{
		if ($this->aCoordinator === null && ($this->coordinator_id !== null)) {
			$c = new Criteria(CoordinatorPeer::DATABASE_NAME);
			$c->add(CoordinatorPeer::ID, $this->coordinator_id);
			$this->aCoordinator = CoordinatorPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCoordinator->addMissions($this);
			 */
		}
		return $this->aCoordinator;
	}

	/**
	 * Clears out the collMissionCompanions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMissionCompanions()
	 */
	public function clearMissionCompanions()
	{
		$this->collMissionCompanions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMissionCompanions collection (array).
	 *
	 * By default this just sets the collMissionCompanions collection to an empty array (like clearcollMissionCompanions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMissionCompanions()
	{
		$this->collMissionCompanions = array();
	}

	/**
	 * Gets an array of MissionCompanion objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Mission has previously been saved, it will retrieve
	 * related MissionCompanions from storage. If this Mission is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MissionCompanion[]
	 * @throws     PropelException
	 */
	public function getMissionCompanions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionCompanions === null) {
			if ($this->isNew()) {
			   $this->collMissionCompanions = array();
			} else {

				$criteria->add(MissionCompanionPeer::MISSION_ID, $this->id);

				MissionCompanionPeer::addSelectColumns($criteria);
				$this->collMissionCompanions = MissionCompanionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MissionCompanionPeer::MISSION_ID, $this->id);

				MissionCompanionPeer::addSelectColumns($criteria);
				if (!isset($this->lastMissionCompanionCriteria) || !$this->lastMissionCompanionCriteria->equals($criteria)) {
					$this->collMissionCompanions = MissionCompanionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMissionCompanionCriteria = $criteria;
		return $this->collMissionCompanions;
	}

	/**
	 * Returns the number of related MissionCompanion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MissionCompanion objects.
	 * @throws     PropelException
	 */
	public function countMissionCompanions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMissionCompanions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MissionCompanionPeer::MISSION_ID, $this->id);

				$count = MissionCompanionPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MissionCompanionPeer::MISSION_ID, $this->id);

				if (!isset($this->lastMissionCompanionCriteria) || !$this->lastMissionCompanionCriteria->equals($criteria)) {
					$count = MissionCompanionPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMissionCompanions);
				}
			} else {
				$count = count($this->collMissionCompanions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MissionCompanion object to this object
	 * through the MissionCompanion foreign key attribute.
	 *
	 * @param      MissionCompanion $l MissionCompanion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMissionCompanion(MissionCompanion $l)
	{
		if ($this->collMissionCompanions === null) {
			$this->initMissionCompanions();
		}
		if (!in_array($l, $this->collMissionCompanions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMissionCompanions, $l);
			$l->setMission($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mission is new, it will return
	 * an empty collection; or if this Mission has previously
	 * been saved, it will retrieve related MissionCompanions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mission.
	 */
	public function getMissionCompanionsJoinCompanion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionCompanions === null) {
			if ($this->isNew()) {
				$this->collMissionCompanions = array();
			} else {

				$criteria->add(MissionCompanionPeer::MISSION_ID, $this->id);

				$this->collMissionCompanions = MissionCompanionPeer::doSelectJoinCompanion($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionCompanionPeer::MISSION_ID, $this->id);

			if (!isset($this->lastMissionCompanionCriteria) || !$this->lastMissionCompanionCriteria->equals($criteria)) {
				$this->collMissionCompanions = MissionCompanionPeer::doSelectJoinCompanion($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionCompanionCriteria = $criteria;

		return $this->collMissionCompanions;
	}

	/**
	 * Clears out the collMissionLegs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMissionLegs()
	 */
	public function clearMissionLegs()
	{
		$this->collMissionLegs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMissionLegs collection (array).
	 *
	 * By default this just sets the collMissionLegs collection to an empty array (like clearcollMissionLegs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMissionLegs()
	{
		$this->collMissionLegs = array();
	}

	/**
	 * Gets an array of MissionLeg objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Mission has previously been saved, it will retrieve
	 * related MissionLegs from storage. If this Mission is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MissionLeg[]
	 * @throws     PropelException
	 */
	public function getMissionLegs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
			   $this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

				MissionLegPeer::addSelectColumns($criteria);
				$this->collMissionLegs = MissionLegPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

				MissionLegPeer::addSelectColumns($criteria);
				if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
					$this->collMissionLegs = MissionLegPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMissionLegCriteria = $criteria;
		return $this->collMissionLegs;
	}

	/**
	 * Returns the number of related MissionLeg objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MissionLeg objects.
	 * @throws     PropelException
	 */
	public function countMissionLegs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

				$count = MissionLegPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

				if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
					$count = MissionLegPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMissionLegs);
				}
			} else {
				$count = count($this->collMissionLegs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MissionLeg object to this object
	 * through the MissionLeg foreign key attribute.
	 *
	 * @param      MissionLeg $l MissionLeg
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMissionLeg(MissionLeg $l)
	{
		if ($this->collMissionLegs === null) {
			$this->initMissionLegs();
		}
		if (!in_array($l, $this->collMissionLegs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMissionLegs, $l);
			$l->setMission($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mission is new, it will return
	 * an empty collection; or if this Mission has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mission.
	 */
	public function getMissionLegsJoinAirportRelatedByFromAirportId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinAirportRelatedByFromAirportId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinAirportRelatedByFromAirportId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mission is new, it will return
	 * an empty collection; or if this Mission has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mission.
	 */
	public function getMissionLegsJoinAirportRelatedByToAirportId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinAirportRelatedByToAirportId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinAirportRelatedByToAirportId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mission is new, it will return
	 * an empty collection; or if this Mission has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mission.
	 */
	public function getMissionLegsJoinCoordinator($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinCoordinator($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinCoordinator($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mission is new, it will return
	 * an empty collection; or if this Mission has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mission.
	 */
	public function getMissionLegsJoinPilotRelatedByPilotId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinPilotRelatedByPilotId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinPilotRelatedByPilotId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mission is new, it will return
	 * an empty collection; or if this Mission has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mission.
	 */
	public function getMissionLegsJoinMemberRelatedByCopilotId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinMemberRelatedByCopilotId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinMemberRelatedByCopilotId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mission is new, it will return
	 * an empty collection; or if this Mission has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mission.
	 */
	public function getMissionLegsJoinMemberRelatedByMissAssisId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinMemberRelatedByMissAssisId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinMemberRelatedByMissAssisId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mission is new, it will return
	 * an empty collection; or if this Mission has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mission.
	 */
	public function getMissionLegsJoinPilotRelatedByBackupPilotId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinPilotRelatedByBackupPilotId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinPilotRelatedByBackupPilotId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mission is new, it will return
	 * an empty collection; or if this Mission has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mission.
	 */
	public function getMissionLegsJoinMemberRelatedByBackupCopilotId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinMemberRelatedByBackupCopilotId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinMemberRelatedByBackupCopilotId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mission is new, it will return
	 * an empty collection; or if this Mission has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mission.
	 */
	public function getMissionLegsJoinMemberRelatedByBackupMissAssisId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinMemberRelatedByBackupMissAssisId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinMemberRelatedByBackupMissAssisId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mission is new, it will return
	 * an empty collection; or if this Mission has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mission.
	 */
	public function getMissionLegsJoinMissionReport($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinMissionReport($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinMissionReport($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mission is new, it will return
	 * an empty collection; or if this Mission has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mission.
	 */
	public function getMissionLegsJoinPilotAircraft($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinPilotAircraft($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinPilotAircraft($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mission is new, it will return
	 * an empty collection; or if this Mission has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mission.
	 */
	public function getMissionLegsJoinFbo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinFbo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::MISSION_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinFbo($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}

	/**
	 * Clears out the collMissionPhotos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMissionPhotos()
	 */
	public function clearMissionPhotos()
	{
		$this->collMissionPhotos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMissionPhotos collection (array).
	 *
	 * By default this just sets the collMissionPhotos collection to an empty array (like clearcollMissionPhotos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMissionPhotos()
	{
		$this->collMissionPhotos = array();
	}

	/**
	 * Gets an array of MissionPhoto objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Mission has previously been saved, it will retrieve
	 * related MissionPhotos from storage. If this Mission is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MissionPhoto[]
	 * @throws     PropelException
	 */
	public function getMissionPhotos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionPhotos === null) {
			if ($this->isNew()) {
			   $this->collMissionPhotos = array();
			} else {

				$criteria->add(MissionPhotoPeer::MISSION_ID, $this->id);

				MissionPhotoPeer::addSelectColumns($criteria);
				$this->collMissionPhotos = MissionPhotoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MissionPhotoPeer::MISSION_ID, $this->id);

				MissionPhotoPeer::addSelectColumns($criteria);
				if (!isset($this->lastMissionPhotoCriteria) || !$this->lastMissionPhotoCriteria->equals($criteria)) {
					$this->collMissionPhotos = MissionPhotoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMissionPhotoCriteria = $criteria;
		return $this->collMissionPhotos;
	}

	/**
	 * Returns the number of related MissionPhoto objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MissionPhoto objects.
	 * @throws     PropelException
	 */
	public function countMissionPhotos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMissionPhotos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MissionPhotoPeer::MISSION_ID, $this->id);

				$count = MissionPhotoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MissionPhotoPeer::MISSION_ID, $this->id);

				if (!isset($this->lastMissionPhotoCriteria) || !$this->lastMissionPhotoCriteria->equals($criteria)) {
					$count = MissionPhotoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMissionPhotos);
				}
			} else {
				$count = count($this->collMissionPhotos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MissionPhoto object to this object
	 * through the MissionPhoto foreign key attribute.
	 *
	 * @param      MissionPhoto $l MissionPhoto
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMissionPhoto(MissionPhoto $l)
	{
		if ($this->collMissionPhotos === null) {
			$this->initMissionPhotos();
		}
		if (!in_array($l, $this->collMissionPhotos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMissionPhotos, $l);
			$l->setMission($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Mission is new, it will return
	 * an empty collection; or if this Mission has previously
	 * been saved, it will retrieve related MissionPhotos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Mission.
	 */
	public function getMissionPhotosJoinMissionLeg($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionPhotos === null) {
			if ($this->isNew()) {
				$this->collMissionPhotos = array();
			} else {

				$criteria->add(MissionPhotoPeer::MISSION_ID, $this->id);

				$this->collMissionPhotos = MissionPhotoPeer::doSelectJoinMissionLeg($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionPhotoPeer::MISSION_ID, $this->id);

			if (!isset($this->lastMissionPhotoCriteria) || !$this->lastMissionPhotoCriteria->equals($criteria)) {
				$this->collMissionPhotos = MissionPhotoPeer::doSelectJoinMissionLeg($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionPhotoCriteria = $criteria;

		return $this->collMissionPhotos;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collMissionCompanions) {
				foreach ((array) $this->collMissionCompanions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMissionLegs) {
				foreach ((array) $this->collMissionLegs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMissionPhotos) {
				foreach ((array) $this->collMissionPhotos as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collMissionCompanions = null;
		$this->collMissionLegs = null;
		$this->collMissionPhotos = null;
			$this->aMissionRequest = null;
			$this->aItinerary = null;
			$this->aMissionType = null;
			$this->aPassenger = null;
			$this->aRequesterRelatedByRequesterId = null;
			$this->aAgencyRelatedByAgencyId = null;
			$this->aRequesterRelatedByOtherRequesterId = null;
			$this->aAgencyRelatedByOtherAgencyId = null;
			$this->aCamp = null;
			$this->aCoordinator = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseMission:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseMission::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseMission
