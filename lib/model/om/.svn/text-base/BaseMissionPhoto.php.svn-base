<?php
/**
 * Base class that represents a row from the 'mission_photo' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Thu Apr 21 02:59:26 2011
 *
 * @package    lib.model.om
 */
abstract class BaseMissionPhoto extends BaseObject  implements Persistent {


  const PEER = 'MissionPhotoPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        MissionPhotoPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the first_name field.
	 * @var        string
	 */
	protected $first_name;

	/**
	 * The value for the last_name field.
	 * @var        string
	 */
	protected $last_name;

	/**
	 * The value for the submission_date field.
	 * @var        string
	 */
	protected $submission_date;

	/**
	 * The value for the mission_date field.
	 * @var        string
	 */
	protected $mission_date;

	/**
	 * The value for the passenger_name field.
	 * @var        string
	 */
	protected $passenger_name;

	/**
	 * The value for the pilot_name field.
	 * @var        string
	 */
	protected $pilot_name;

	/**
	 * The value for the origin field.
	 * @var        string
	 */
	protected $origin;

	/**
	 * The value for the destination field.
	 * @var        string
	 */
	protected $destination;

	/**
	 * The value for the caption field.
	 * @var        string
	 */
	protected $caption;

	/**
	 * The value for the comment field.
	 * @var        string
	 */
	protected $comment;

	/**
	 * The value for the photo_filename field.
	 * @var        string
	 */
	protected $photo_filename;

	/**
	 * The value for the mission_id field.
	 * @var        int
	 */
	protected $mission_id;

	/**
	 * The value for the review_date field.
	 * @var        string
	 */
	protected $review_date;

	/**
	 * The value for the review_by field.
	 * @var        int
	 */
	protected $review_by;

	/**
	 * The value for the approved field.
	 * @var        int
	 */
	protected $approved;

	/**
	 * The value for the filesize field.
	 * @var        int
	 */
	protected $filesize;

	/**
	 * The value for the height field.
	 * @var        int
	 */
	protected $height;

	/**
	 * The value for the width field.
	 * @var        int
	 */
	protected $width;

	/**
	 * The value for the file_format field.
	 * @var        int
	 */
	protected $file_format;

	/**
	 * The value for the photo_quality field.
	 * @var        int
	 */
	protected $photo_quality;

	/**
	 * The value for the event_id field.
	 * @var        int
	 */
	protected $event_id;

	/**
	 * The value for the leg_id field.
	 * @var        int
	 */
	protected $leg_id;

	/**
	 * The value for the category field.
	 * @var        string
	 */
	protected $category;

	/**
	 * The value for the photo_use field.
	 * @var        string
	 */
	protected $photo_use;

	/**
	 * @var        Mission
	 */
	protected $aMission;

	/**
	 * @var        MissionLeg
	 */
	protected $aMissionLeg;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseMissionPhoto object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [first_name] column value.
	 * 
	 * @return     string
	 */
	public function getFirstName()
	{
		return $this->first_name;
	}

	/**
	 * Get the [last_name] column value.
	 * 
	 * @return     string
	 */
	public function getLastName()
	{
		return $this->last_name;
	}

	/**
	 * Get the [optionally formatted] temporal [submission_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getSubmissionDate($format = 'Y-m-d H:i:s')
	{
		if ($this->submission_date === null) {
			return null;
		}


		if ($this->submission_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->submission_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->submission_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [mission_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getMissionDate($format = 'Y-m-d H:i:s')
	{
		if ($this->mission_date === null) {
			return null;
		}


		if ($this->mission_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->mission_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->mission_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [passenger_name] column value.
	 * 
	 * @return     string
	 */
	public function getPassengerName()
	{
		return $this->passenger_name;
	}

	/**
	 * Get the [pilot_name] column value.
	 * 
	 * @return     string
	 */
	public function getPilotName()
	{
		return $this->pilot_name;
	}

	/**
	 * Get the [origin] column value.
	 * 
	 * @return     string
	 */
	public function getOrigin()
	{
		return $this->origin;
	}

	/**
	 * Get the [destination] column value.
	 * 
	 * @return     string
	 */
	public function getDestination()
	{
		return $this->destination;
	}

	/**
	 * Get the [caption] column value.
	 * 
	 * @return     string
	 */
	public function getCaption()
	{
		return $this->caption;
	}

	/**
	 * Get the [comment] column value.
	 * 
	 * @return     string
	 */
	public function getComment()
	{
		return $this->comment;
	}

	/**
	 * Get the [photo_filename] column value.
	 * 
	 * @return     string
	 */
	public function getPhotoFilename()
	{
		return $this->photo_filename;
	}

	/**
	 * Get the [mission_id] column value.
	 * 
	 * @return     int
	 */
	public function getMissionId()
	{
		return $this->mission_id;
	}

	/**
	 * Get the [optionally formatted] temporal [review_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getReviewDate($format = 'Y-m-d H:i:s')
	{
		if ($this->review_date === null) {
			return null;
		}


		if ($this->review_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->review_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->review_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [review_by] column value.
	 * 
	 * @return     int
	 */
	public function getReviewBy()
	{
		return $this->review_by;
	}

	/**
	 * Get the [approved] column value.
	 * 
	 * @return     int
	 */
	public function getApproved()
	{
		return $this->approved;
	}

	/**
	 * Get the [filesize] column value.
	 * 
	 * @return     int
	 */
	public function getFilesize()
	{
		return $this->filesize;
	}

	/**
	 * Get the [height] column value.
	 * 
	 * @return     int
	 */
	public function getHeight()
	{
		return $this->height;
	}

	/**
	 * Get the [width] column value.
	 * 
	 * @return     int
	 */
	public function getWidth()
	{
		return $this->width;
	}

	/**
	 * Get the [file_format] column value.
	 * 
	 * @return     int
	 */
	public function getFileFormat()
	{
		return $this->file_format;
	}

	/**
	 * Get the [photo_quality] column value.
	 * 
	 * @return     int
	 */
	public function getPhotoQuality()
	{
		return $this->photo_quality;
	}

	/**
	 * Get the [event_id] column value.
	 * 
	 * @return     int
	 */
	public function getEventId()
	{
		return $this->event_id;
	}

	/**
	 * Get the [leg_id] column value.
	 * 
	 * @return     int
	 */
	public function getLegId()
	{
		return $this->leg_id;
	}

	/**
	 * Get the [category] column value.
	 * 
	 * @return     string
	 */
	public function getCategory()
	{
		return $this->category;
	}

	/**
	 * Get the [photo_use] column value.
	 * 
	 * @return     string
	 */
	public function getPhotoUse()
	{
		return $this->photo_use;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [first_name] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setFirstName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->first_name !== $v) {
			$this->first_name = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::FIRST_NAME;
		}

		return $this;
	} // setFirstName()

	/**
	 * Set the value of [last_name] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setLastName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->last_name !== $v) {
			$this->last_name = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::LAST_NAME;
		}

		return $this;
	} // setLastName()

	/**
	 * Sets the value of [submission_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setSubmissionDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->submission_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->submission_date !== null && $tmpDt = new DateTime($this->submission_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->submission_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = MissionPhotoPeer::SUBMISSION_DATE;
			}
		} // if either are not null

		return $this;
	} // setSubmissionDate()

	/**
	 * Sets the value of [mission_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setMissionDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->mission_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->mission_date !== null && $tmpDt = new DateTime($this->mission_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->mission_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = MissionPhotoPeer::MISSION_DATE;
			}
		} // if either are not null

		return $this;
	} // setMissionDate()

	/**
	 * Set the value of [passenger_name] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setPassengerName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->passenger_name !== $v) {
			$this->passenger_name = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::PASSENGER_NAME;
		}

		return $this;
	} // setPassengerName()

	/**
	 * Set the value of [pilot_name] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setPilotName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilot_name !== $v) {
			$this->pilot_name = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::PILOT_NAME;
		}

		return $this;
	} // setPilotName()

	/**
	 * Set the value of [origin] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setOrigin($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->origin !== $v) {
			$this->origin = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::ORIGIN;
		}

		return $this;
	} // setOrigin()

	/**
	 * Set the value of [destination] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setDestination($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->destination !== $v) {
			$this->destination = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::DESTINATION;
		}

		return $this;
	} // setDestination()

	/**
	 * Set the value of [caption] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setCaption($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->caption !== $v) {
			$this->caption = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::CAPTION;
		}

		return $this;
	} // setCaption()

	/**
	 * Set the value of [comment] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comment !== $v) {
			$this->comment = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::COMMENT;
		}

		return $this;
	} // setComment()

	/**
	 * Set the value of [photo_filename] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setPhotoFilename($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->photo_filename !== $v) {
			$this->photo_filename = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::PHOTO_FILENAME;
		}

		return $this;
	} // setPhotoFilename()

	/**
	 * Set the value of [mission_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setMissionId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->mission_id !== $v) {
			$this->mission_id = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::MISSION_ID;
		}

		if ($this->aMission !== null && $this->aMission->getId() !== $v) {
			$this->aMission = null;
		}

		return $this;
	} // setMissionId()

	/**
	 * Sets the value of [review_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setReviewDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->review_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->review_date !== null && $tmpDt = new DateTime($this->review_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->review_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = MissionPhotoPeer::REVIEW_DATE;
			}
		} // if either are not null

		return $this;
	} // setReviewDate()

	/**
	 * Set the value of [review_by] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setReviewBy($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->review_by !== $v) {
			$this->review_by = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::REVIEW_BY;
		}

		return $this;
	} // setReviewBy()

	/**
	 * Set the value of [approved] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setApproved($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->approved !== $v) {
			$this->approved = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::APPROVED;
		}

		return $this;
	} // setApproved()

	/**
	 * Set the value of [filesize] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setFilesize($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->filesize !== $v) {
			$this->filesize = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::FILESIZE;
		}

		return $this;
	} // setFilesize()

	/**
	 * Set the value of [height] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setHeight($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->height !== $v) {
			$this->height = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::HEIGHT;
		}

		return $this;
	} // setHeight()

	/**
	 * Set the value of [width] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setWidth($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->width !== $v) {
			$this->width = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::WIDTH;
		}

		return $this;
	} // setWidth()

	/**
	 * Set the value of [file_format] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setFileFormat($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->file_format !== $v) {
			$this->file_format = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::FILE_FORMAT;
		}

		return $this;
	} // setFileFormat()

	/**
	 * Set the value of [photo_quality] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setPhotoQuality($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->photo_quality !== $v) {
			$this->photo_quality = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::PHOTO_QUALITY;
		}

		return $this;
	} // setPhotoQuality()

	/**
	 * Set the value of [event_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setEventId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->event_id !== $v) {
			$this->event_id = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::EVENT_ID;
		}

		return $this;
	} // setEventId()

	/**
	 * Set the value of [leg_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setLegId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->leg_id !== $v) {
			$this->leg_id = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::LEG_ID;
		}

		if ($this->aMissionLeg !== null && $this->aMissionLeg->getId() !== $v) {
			$this->aMissionLeg = null;
		}

		return $this;
	} // setLegId()

	/**
	 * Set the value of [category] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setCategory($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->category !== $v) {
			$this->category = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::CATEGORY;
		}

		return $this;
	} // setCategory()

	/**
	 * Set the value of [photo_use] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionPhoto The current object (for fluent API support)
	 */
	public function setPhotoUse($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->photo_use !== $v) {
			$this->photo_use = $v;
			$this->modifiedColumns[] = MissionPhotoPeer::PHOTO_USE;
		}

		return $this;
	} // setPhotoUse()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->first_name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->last_name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->submission_date = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->mission_date = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->passenger_name = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->pilot_name = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->origin = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->destination = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->caption = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->comment = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->photo_filename = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->mission_id = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->review_date = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->review_by = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->approved = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->filesize = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->height = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->width = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->file_format = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->photo_quality = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->event_id = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->leg_id = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->category = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->photo_use = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 25; // 25 = MissionPhotoPeer::NUM_COLUMNS - MissionPhotoPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating MissionPhoto object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aMission !== null && $this->mission_id !== $this->aMission->getId()) {
			$this->aMission = null;
		}
		if ($this->aMissionLeg !== null && $this->leg_id !== $this->aMissionLeg->getId()) {
			$this->aMissionLeg = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MissionPhotoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = MissionPhotoPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aMission = null;
			$this->aMissionLeg = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMissionPhoto:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MissionPhotoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			MissionPhotoPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseMissionPhoto:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMissionPhoto:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MissionPhotoPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseMissionPhoto:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			MissionPhotoPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aMission !== null) {
				if ($this->aMission->isModified() || $this->aMission->isNew()) {
					$affectedRows += $this->aMission->save($con);
				}
				$this->setMission($this->aMission);
			}

			if ($this->aMissionLeg !== null) {
				if ($this->aMissionLeg->isModified() || $this->aMissionLeg->isNew()) {
					$affectedRows += $this->aMissionLeg->save($con);
				}
				$this->setMissionLeg($this->aMissionLeg);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = MissionPhotoPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = MissionPhotoPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += MissionPhotoPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aMission !== null) {
				if (!$this->aMission->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMission->getValidationFailures());
				}
			}

			if ($this->aMissionLeg !== null) {
				if (!$this->aMissionLeg->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMissionLeg->getValidationFailures());
				}
			}


			if (($retval = MissionPhotoPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MissionPhotoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getFirstName();
				break;
			case 2:
				return $this->getLastName();
				break;
			case 3:
				return $this->getSubmissionDate();
				break;
			case 4:
				return $this->getMissionDate();
				break;
			case 5:
				return $this->getPassengerName();
				break;
			case 6:
				return $this->getPilotName();
				break;
			case 7:
				return $this->getOrigin();
				break;
			case 8:
				return $this->getDestination();
				break;
			case 9:
				return $this->getCaption();
				break;
			case 10:
				return $this->getComment();
				break;
			case 11:
				return $this->getPhotoFilename();
				break;
			case 12:
				return $this->getMissionId();
				break;
			case 13:
				return $this->getReviewDate();
				break;
			case 14:
				return $this->getReviewBy();
				break;
			case 15:
				return $this->getApproved();
				break;
			case 16:
				return $this->getFilesize();
				break;
			case 17:
				return $this->getHeight();
				break;
			case 18:
				return $this->getWidth();
				break;
			case 19:
				return $this->getFileFormat();
				break;
			case 20:
				return $this->getPhotoQuality();
				break;
			case 21:
				return $this->getEventId();
				break;
			case 22:
				return $this->getLegId();
				break;
			case 23:
				return $this->getCategory();
				break;
			case 24:
				return $this->getPhotoUse();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = MissionPhotoPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getFirstName(),
			$keys[2] => $this->getLastName(),
			$keys[3] => $this->getSubmissionDate(),
			$keys[4] => $this->getMissionDate(),
			$keys[5] => $this->getPassengerName(),
			$keys[6] => $this->getPilotName(),
			$keys[7] => $this->getOrigin(),
			$keys[8] => $this->getDestination(),
			$keys[9] => $this->getCaption(),
			$keys[10] => $this->getComment(),
			$keys[11] => $this->getPhotoFilename(),
			$keys[12] => $this->getMissionId(),
			$keys[13] => $this->getReviewDate(),
			$keys[14] => $this->getReviewBy(),
			$keys[15] => $this->getApproved(),
			$keys[16] => $this->getFilesize(),
			$keys[17] => $this->getHeight(),
			$keys[18] => $this->getWidth(),
			$keys[19] => $this->getFileFormat(),
			$keys[20] => $this->getPhotoQuality(),
			$keys[21] => $this->getEventId(),
			$keys[22] => $this->getLegId(),
			$keys[23] => $this->getCategory(),
			$keys[24] => $this->getPhotoUse(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MissionPhotoPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setFirstName($value);
				break;
			case 2:
				$this->setLastName($value);
				break;
			case 3:
				$this->setSubmissionDate($value);
				break;
			case 4:
				$this->setMissionDate($value);
				break;
			case 5:
				$this->setPassengerName($value);
				break;
			case 6:
				$this->setPilotName($value);
				break;
			case 7:
				$this->setOrigin($value);
				break;
			case 8:
				$this->setDestination($value);
				break;
			case 9:
				$this->setCaption($value);
				break;
			case 10:
				$this->setComment($value);
				break;
			case 11:
				$this->setPhotoFilename($value);
				break;
			case 12:
				$this->setMissionId($value);
				break;
			case 13:
				$this->setReviewDate($value);
				break;
			case 14:
				$this->setReviewBy($value);
				break;
			case 15:
				$this->setApproved($value);
				break;
			case 16:
				$this->setFilesize($value);
				break;
			case 17:
				$this->setHeight($value);
				break;
			case 18:
				$this->setWidth($value);
				break;
			case 19:
				$this->setFileFormat($value);
				break;
			case 20:
				$this->setPhotoQuality($value);
				break;
			case 21:
				$this->setEventId($value);
				break;
			case 22:
				$this->setLegId($value);
				break;
			case 23:
				$this->setCategory($value);
				break;
			case 24:
				$this->setPhotoUse($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = MissionPhotoPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setFirstName($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setLastName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setSubmissionDate($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setMissionDate($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setPassengerName($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setPilotName($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setOrigin($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setDestination($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCaption($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setComment($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setPhotoFilename($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setMissionId($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setReviewDate($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setReviewBy($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setApproved($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setFilesize($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setHeight($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setWidth($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setFileFormat($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setPhotoQuality($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setEventId($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setLegId($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setCategory($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setPhotoUse($arr[$keys[24]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(MissionPhotoPeer::DATABASE_NAME);

		if ($this->isColumnModified(MissionPhotoPeer::ID)) $criteria->add(MissionPhotoPeer::ID, $this->id);
		if ($this->isColumnModified(MissionPhotoPeer::FIRST_NAME)) $criteria->add(MissionPhotoPeer::FIRST_NAME, $this->first_name);
		if ($this->isColumnModified(MissionPhotoPeer::LAST_NAME)) $criteria->add(MissionPhotoPeer::LAST_NAME, $this->last_name);
		if ($this->isColumnModified(MissionPhotoPeer::SUBMISSION_DATE)) $criteria->add(MissionPhotoPeer::SUBMISSION_DATE, $this->submission_date);
		if ($this->isColumnModified(MissionPhotoPeer::MISSION_DATE)) $criteria->add(MissionPhotoPeer::MISSION_DATE, $this->mission_date);
		if ($this->isColumnModified(MissionPhotoPeer::PASSENGER_NAME)) $criteria->add(MissionPhotoPeer::PASSENGER_NAME, $this->passenger_name);
		if ($this->isColumnModified(MissionPhotoPeer::PILOT_NAME)) $criteria->add(MissionPhotoPeer::PILOT_NAME, $this->pilot_name);
		if ($this->isColumnModified(MissionPhotoPeer::ORIGIN)) $criteria->add(MissionPhotoPeer::ORIGIN, $this->origin);
		if ($this->isColumnModified(MissionPhotoPeer::DESTINATION)) $criteria->add(MissionPhotoPeer::DESTINATION, $this->destination);
		if ($this->isColumnModified(MissionPhotoPeer::CAPTION)) $criteria->add(MissionPhotoPeer::CAPTION, $this->caption);
		if ($this->isColumnModified(MissionPhotoPeer::COMMENT)) $criteria->add(MissionPhotoPeer::COMMENT, $this->comment);
		if ($this->isColumnModified(MissionPhotoPeer::PHOTO_FILENAME)) $criteria->add(MissionPhotoPeer::PHOTO_FILENAME, $this->photo_filename);
		if ($this->isColumnModified(MissionPhotoPeer::MISSION_ID)) $criteria->add(MissionPhotoPeer::MISSION_ID, $this->mission_id);
		if ($this->isColumnModified(MissionPhotoPeer::REVIEW_DATE)) $criteria->add(MissionPhotoPeer::REVIEW_DATE, $this->review_date);
		if ($this->isColumnModified(MissionPhotoPeer::REVIEW_BY)) $criteria->add(MissionPhotoPeer::REVIEW_BY, $this->review_by);
		if ($this->isColumnModified(MissionPhotoPeer::APPROVED)) $criteria->add(MissionPhotoPeer::APPROVED, $this->approved);
		if ($this->isColumnModified(MissionPhotoPeer::FILESIZE)) $criteria->add(MissionPhotoPeer::FILESIZE, $this->filesize);
		if ($this->isColumnModified(MissionPhotoPeer::HEIGHT)) $criteria->add(MissionPhotoPeer::HEIGHT, $this->height);
		if ($this->isColumnModified(MissionPhotoPeer::WIDTH)) $criteria->add(MissionPhotoPeer::WIDTH, $this->width);
		if ($this->isColumnModified(MissionPhotoPeer::FILE_FORMAT)) $criteria->add(MissionPhotoPeer::FILE_FORMAT, $this->file_format);
		if ($this->isColumnModified(MissionPhotoPeer::PHOTO_QUALITY)) $criteria->add(MissionPhotoPeer::PHOTO_QUALITY, $this->photo_quality);
		if ($this->isColumnModified(MissionPhotoPeer::EVENT_ID)) $criteria->add(MissionPhotoPeer::EVENT_ID, $this->event_id);
		if ($this->isColumnModified(MissionPhotoPeer::LEG_ID)) $criteria->add(MissionPhotoPeer::LEG_ID, $this->leg_id);
		if ($this->isColumnModified(MissionPhotoPeer::CATEGORY)) $criteria->add(MissionPhotoPeer::CATEGORY, $this->category);
		if ($this->isColumnModified(MissionPhotoPeer::PHOTO_USE)) $criteria->add(MissionPhotoPeer::PHOTO_USE, $this->photo_use);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(MissionPhotoPeer::DATABASE_NAME);

		$criteria->add(MissionPhotoPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of MissionPhoto (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setFirstName($this->first_name);

		$copyObj->setLastName($this->last_name);

		$copyObj->setSubmissionDate($this->submission_date);

		$copyObj->setMissionDate($this->mission_date);

		$copyObj->setPassengerName($this->passenger_name);

		$copyObj->setPilotName($this->pilot_name);

		$copyObj->setOrigin($this->origin);

		$copyObj->setDestination($this->destination);

		$copyObj->setCaption($this->caption);

		$copyObj->setComment($this->comment);

		$copyObj->setPhotoFilename($this->photo_filename);

		$copyObj->setMissionId($this->mission_id);

		$copyObj->setReviewDate($this->review_date);

		$copyObj->setReviewBy($this->review_by);

		$copyObj->setApproved($this->approved);

		$copyObj->setFilesize($this->filesize);

		$copyObj->setHeight($this->height);

		$copyObj->setWidth($this->width);

		$copyObj->setFileFormat($this->file_format);

		$copyObj->setPhotoQuality($this->photo_quality);

		$copyObj->setEventId($this->event_id);

		$copyObj->setLegId($this->leg_id);

		$copyObj->setCategory($this->category);

		$copyObj->setPhotoUse($this->photo_use);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     MissionPhoto Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     MissionPhotoPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new MissionPhotoPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Mission object.
	 *
	 * @param      Mission $v
	 * @return     MissionPhoto The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMission(Mission $v = null)
	{
		if ($v === null) {
			$this->setMissionId(NULL);
		} else {
			$this->setMissionId($v->getId());
		}

		$this->aMission = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Mission object, it will not be re-added.
		if ($v !== null) {
			$v->addMissionPhoto($this);
		}

		return $this;
	}


	/**
	 * Get the associated Mission object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Mission The associated Mission object.
	 * @throws     PropelException
	 */
	public function getMission(PropelPDO $con = null)
	{
		if ($this->aMission === null && ($this->mission_id !== null)) {
			$c = new Criteria(MissionPeer::DATABASE_NAME);
			$c->add(MissionPeer::ID, $this->mission_id);
			$this->aMission = MissionPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMission->addMissionPhotos($this);
			 */
		}
		return $this->aMission;
	}

	/**
	 * Declares an association between this object and a MissionLeg object.
	 *
	 * @param      MissionLeg $v
	 * @return     MissionPhoto The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMissionLeg(MissionLeg $v = null)
	{
		if ($v === null) {
			$this->setLegId(NULL);
		} else {
			$this->setLegId($v->getId());
		}

		$this->aMissionLeg = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the MissionLeg object, it will not be re-added.
		if ($v !== null) {
			$v->addMissionPhoto($this);
		}

		return $this;
	}


	/**
	 * Get the associated MissionLeg object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     MissionLeg The associated MissionLeg object.
	 * @throws     PropelException
	 */
	public function getMissionLeg(PropelPDO $con = null)
	{
		if ($this->aMissionLeg === null && ($this->leg_id !== null)) {
			$c = new Criteria(MissionLegPeer::DATABASE_NAME);
			$c->add(MissionLegPeer::ID, $this->leg_id);
			$this->aMissionLeg = MissionLegPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMissionLeg->addMissionPhotos($this);
			 */
		}
		return $this->aMissionLeg;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aMission = null;
			$this->aMissionLeg = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseMissionPhoto:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseMissionPhoto::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseMissionPhoto
