<?php

/**
 * Base class that represents a row from the 'person' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 01/05/11 08:19:49
 *
 * @package    lib.model.om
 */
abstract class BasePerson extends BaseObject  implements Persistent {


  const PEER = 'PersonPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PersonPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the title field.
	 * @var        string
	 */
	protected $title;

	/**
	 * The value for the first_name field.
	 * @var        string
	 */
	protected $first_name;

	/**
	 * The value for the last_name field.
	 * @var        string
	 */
	protected $last_name;

	/**
	 * The value for the address1 field.
	 * @var        string
	 */
	protected $address1;

	/**
	 * The value for the address2 field.
	 * @var        string
	 */
	protected $address2;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the county field.
	 * @var        string
	 */
	protected $county;

	/**
	 * The value for the state field.
	 * @var        string
	 */
	protected $state;

	/**
	 * The value for the country field.
	 * @var        string
	 */
	protected $country;

	/**
	 * The value for the zipcode field.
	 * @var        string
	 */
	protected $zipcode;

	/**
	 * The value for the day_phone field.
	 * @var        string
	 */
	protected $day_phone;

	/**
	 * The value for the day_comment field.
	 * @var        string
	 */
	protected $day_comment;

	/**
	 * The value for the evening_phone field.
	 * @var        string
	 */
	protected $evening_phone;

	/**
	 * The value for the evening_comment field.
	 * @var        string
	 */
	protected $evening_comment;

	/**
	 * The value for the mobile_phone field.
	 * @var        string
	 */
	protected $mobile_phone;

	/**
	 * The value for the mobile_comment field.
	 * @var        string
	 */
	protected $mobile_comment;

	/**
	 * The value for the pager_phone field.
	 * @var        string
	 */
	protected $pager_phone;

	/**
	 * The value for the pager_comment field.
	 * @var        string
	 */
	protected $pager_comment;

	/**
	 * The value for the other_phone field.
	 * @var        string
	 */
	protected $other_phone;

	/**
	 * The value for the other_comment field.
	 * @var        string
	 */
	protected $other_comment;

	/**
	 * The value for the fax_phone1 field.
	 * @var        string
	 */
	protected $fax_phone1;

	/**
	 * The value for the fax_comment1 field.
	 * @var        string
	 */
	protected $fax_comment1;

	/**
	 * The value for the auto_fax field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $auto_fax;

	/**
	 * The value for the fax_phone2 field.
	 * @var        string
	 */
	protected $fax_phone2;

	/**
	 * The value for the fax_comment2 field.
	 * @var        string
	 */
	protected $fax_comment2;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the email_text_only field.
	 * @var        int
	 */
	protected $email_text_only;

	/**
	 * The value for the email_blocked field.
	 * @var        int
	 */
	protected $email_blocked;

	/**
	 * The value for the username field.
	 * @var        string
	 */
	protected $username;

	/**
	 * The value for the password field.
	 * @var        string
	 */
	protected $password;

	/**
	 * The value for the comment field.
	 * @var        string
	 */
	protected $comment;

	/**
	 * The value for the wf_policy_agreed field.
	 * @var        int
	 */
	protected $wf_policy_agreed;

	/**
	 * The value for the wf_policy_agreed_date field.
	 * @var        string
	 */
	protected $wf_policy_agreed_date;

	/**
	 * The value for the pager_email field.
	 * @var        string
	 */
	protected $pager_email;

	/**
	 * The value for the block_mailings field.
	 * @var        int
	 */
	protected $block_mailings;

	/**
	 * The value for the newsletter field.
	 * @var        int
	 */
	protected $newsletter;

	/**
	 * The value for the gender field.
	 * @var        string
	 */
	protected $gender;

	/**
	 * The value for the deceased field.
	 * @var        int
	 */
	protected $deceased;

	/**
	 * The value for the deceased_comment field.
	 * @var        string
	 */
	protected $deceased_comment;

	/**
	 * The value for the secondary_email field.
	 * @var        string
	 */
	protected $secondary_email;

	/**
	 * The value for the deceased_date field.
	 * @var        string
	 */
	protected $deceased_date;

	/**
	 * The value for the middle_name field.
	 * @var        string
	 */
	protected $middle_name;

	/**
	 * The value for the suffix field.
	 * @var        string
	 */
	protected $suffix;

	/**
	 * The value for the nickname field.
	 * @var        string
	 */
	protected $nickname;

	/**
	 * The value for the veteran field.
	 * @var        int
	 */
	protected $veteran;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * @var        array Afstaff[] Collection to store aggregation of Afstaff objects.
	 */
	protected $collAfstaffs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAfstaffs.
	 */
	private $lastAfstaffCriteria = null;

	/**
	 * @var        array BoardMember[] Collection to store aggregation of BoardMember objects.
	 */
	protected $collBoardMembers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collBoardMembers.
	 */
	private $lastBoardMemberCriteria = null;

	/**
	 * @var        array Companion[] Collection to store aggregation of Companion objects.
	 */
	protected $collCompanions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCompanions.
	 */
	private $lastCompanionCriteria = null;

	/**
	 * @var        array Contact[] Collection to store aggregation of Contact objects.
	 */
	protected $collContacts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collContacts.
	 */
	private $lastContactCriteria = null;

	/**
	 * @var        array Donor[] Collection to store aggregation of Donor objects.
	 */
	protected $collDonors;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDonors.
	 */
	private $lastDonorCriteria = null;

	/**
	 * @var        array EmailListPerson[] Collection to store aggregation of EmailListPerson objects.
	 */
	protected $collEmailListPersons;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmailListPersons.
	 */
	private $lastEmailListPersonCriteria = null;

	/**
	 * @var        array EmailQueue[] Collection to store aggregation of EmailQueue objects.
	 */
	protected $collEmailQueues;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmailQueues.
	 */
	private $lastEmailQueueCriteria = null;

	/**
	 * @var        array EmailTemplate[] Collection to store aggregation of EmailTemplate objects.
	 */
	protected $collEmailTemplates;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmailTemplates.
	 */
	private $lastEmailTemplateCriteria = null;

	/**
	 * @var        array Member[] Collection to store aggregation of Member objects.
	 */
	protected $collMembers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMembers.
	 */
	private $lastMemberCriteria = null;

	/**
	 * @var        array Passenger[] Collection to store aggregation of Passenger objects.
	 */
	protected $collPassengers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPassengers.
	 */
	private $lastPassengerCriteria = null;

	/**
	 * @var        array PasswordRequest[] Collection to store aggregation of PasswordRequest objects.
	 */
	protected $collPasswordRequests;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPasswordRequests.
	 */
	private $lastPasswordRequestCriteria = null;

	/**
	 * @var        array PersonRole[] Collection to store aggregation of PersonRole objects.
	 */
	protected $collPersonRoles;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPersonRoles.
	 */
	private $lastPersonRoleCriteria = null;

	/**
	 * @var        PersonalNote one-to-one related PersonalNote object
	 */
	protected $singlePersonalNote;

	/**
	 * @var        array Requester[] Collection to store aggregation of Requester objects.
	 */
	protected $collRequesters;

	/**
	 * @var        Criteria The criteria used to select the current contents of collRequesters.
	 */
	private $lastRequesterCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BasePerson object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->auto_fax = 0;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [title] column value.
	 * 
	 * @return     string
	 */
	public function getTitle()
	{
		return $this->title;
	}

	/**
	 * Get the [first_name] column value.
	 * 
	 * @return     string
	 */
	public function getFirstName()
	{
		return $this->first_name;
	}

	/**
	 * Get the [last_name] column value.
	 * 
	 * @return     string
	 */
	public function getLastName()
	{
		return $this->last_name;
	}

	/**
	 * Get the [address1] column value.
	 * 
	 * @return     string
	 */
	public function getAddress1()
	{
		return $this->address1;
	}

	/**
	 * Get the [address2] column value.
	 * 
	 * @return     string
	 */
	public function getAddress2()
	{
		return $this->address2;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [county] column value.
	 * 
	 * @return     string
	 */
	public function getCounty()
	{
		return $this->county;
	}

	/**
	 * Get the [state] column value.
	 * 
	 * @return     string
	 */
	public function getState()
	{
		return $this->state;
	}

	/**
	 * Get the [country] column value.
	 * 
	 * @return     string
	 */
	public function getCountry()
	{
		return $this->country;
	}

	/**
	 * Get the [zipcode] column value.
	 * 
	 * @return     string
	 */
	public function getZipcode()
	{
		return $this->zipcode;
	}

	/**
	 * Get the [day_phone] column value.
	 * 
	 * @return     string
	 */
	public function getDayPhone()
	{
		return $this->day_phone;
	}

	/**
	 * Get the [day_comment] column value.
	 * 
	 * @return     string
	 */
	public function getDayComment()
	{
		return $this->day_comment;
	}

	/**
	 * Get the [evening_phone] column value.
	 * 
	 * @return     string
	 */
	public function getEveningPhone()
	{
		return $this->evening_phone;
	}

	/**
	 * Get the [evening_comment] column value.
	 * 
	 * @return     string
	 */
	public function getEveningComment()
	{
		return $this->evening_comment;
	}

	/**
	 * Get the [mobile_phone] column value.
	 * 
	 * @return     string
	 */
	public function getMobilePhone()
	{
		return $this->mobile_phone;
	}

	/**
	 * Get the [mobile_comment] column value.
	 * 
	 * @return     string
	 */
	public function getMobileComment()
	{
		return $this->mobile_comment;
	}

	/**
	 * Get the [pager_phone] column value.
	 * 
	 * @return     string
	 */
	public function getPagerPhone()
	{
		return $this->pager_phone;
	}

	/**
	 * Get the [pager_comment] column value.
	 * 
	 * @return     string
	 */
	public function getPagerComment()
	{
		return $this->pager_comment;
	}

	/**
	 * Get the [other_phone] column value.
	 * 
	 * @return     string
	 */
	public function getOtherPhone()
	{
		return $this->other_phone;
	}

	/**
	 * Get the [other_comment] column value.
	 * 
	 * @return     string
	 */
	public function getOtherComment()
	{
		return $this->other_comment;
	}

	/**
	 * Get the [fax_phone1] column value.
	 * 
	 * @return     string
	 */
	public function getFaxPhone1()
	{
		return $this->fax_phone1;
	}

	/**
	 * Get the [fax_comment1] column value.
	 * 
	 * @return     string
	 */
	public function getFaxComment1()
	{
		return $this->fax_comment1;
	}

	/**
	 * Get the [auto_fax] column value.
	 * 
	 * @return     int
	 */
	public function getAutoFax()
	{
		return $this->auto_fax;
	}

	/**
	 * Get the [fax_phone2] column value.
	 * 
	 * @return     string
	 */
	public function getFaxPhone2()
	{
		return $this->fax_phone2;
	}

	/**
	 * Get the [fax_comment2] column value.
	 * 
	 * @return     string
	 */
	public function getFaxComment2()
	{
		return $this->fax_comment2;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [email_text_only] column value.
	 * 
	 * @return     int
	 */
	public function getEmailTextOnly()
	{
		return $this->email_text_only;
	}

	/**
	 * Get the [email_blocked] column value.
	 * 
	 * @return     int
	 */
	public function getEmailBlocked()
	{
		return $this->email_blocked;
	}

	/**
	 * Get the [username] column value.
	 * 
	 * @return     string
	 */
	public function getUsername()
	{
		return $this->username;
	}

	/**
	 * Get the [password] column value.
	 * 
	 * @return     string
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * Get the [comment] column value.
	 * 
	 * @return     string
	 */
	public function getComment()
	{
		return $this->comment;
	}

	/**
	 * Get the [wf_policy_agreed] column value.
	 * 
	 * @return     int
	 */
	public function getWfPolicyAgreed()
	{
		return $this->wf_policy_agreed;
	}

	/**
	 * Get the [optionally formatted] temporal [wf_policy_agreed_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getWfPolicyAgreedDate($format = 'Y-m-d')
	{
		if ($this->wf_policy_agreed_date === null) {
			return null;
		}


		if ($this->wf_policy_agreed_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->wf_policy_agreed_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->wf_policy_agreed_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [pager_email] column value.
	 * 
	 * @return     string
	 */
	public function getPagerEmail()
	{
		return $this->pager_email;
	}

	/**
	 * Get the [block_mailings] column value.
	 * 
	 * @return     int
	 */
	public function getBlockMailings()
	{
		return $this->block_mailings;
	}

	/**
	 * Get the [newsletter] column value.
	 * 
	 * @return     int
	 */
	public function getNewsletter()
	{
		return $this->newsletter;
	}

	/**
	 * Get the [gender] column value.
	 * 
	 * @return     string
	 */
	public function getGender()
	{
		return $this->gender;
	}

	/**
	 * Get the [deceased] column value.
	 * 
	 * @return     int
	 */
	public function getDeceased()
	{
		return $this->deceased;
	}

	/**
	 * Get the [deceased_comment] column value.
	 * 
	 * @return     string
	 */
	public function getDeceasedComment()
	{
		return $this->deceased_comment;
	}

	/**
	 * Get the [secondary_email] column value.
	 * 
	 * @return     string
	 */
	public function getSecondaryEmail()
	{
		return $this->secondary_email;
	}

	/**
	 * Get the [optionally formatted] temporal [deceased_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDeceasedDate($format = 'Y-m-d')
	{
		if ($this->deceased_date === null) {
			return null;
		}


		if ($this->deceased_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->deceased_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->deceased_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [middle_name] column value.
	 * 
	 * @return     string
	 */
	public function getMiddleName()
	{
		return $this->middle_name;
	}

	/**
	 * Get the [suffix] column value.
	 * 
	 * @return     string
	 */
	public function getSuffix()
	{
		return $this->suffix;
	}

	/**
	 * Get the [nickname] column value.
	 * 
	 * @return     string
	 */
	public function getNickname()
	{
		return $this->nickname;
	}

	/**
	 * Get the [veteran] column value.
	 * 
	 * @return     int
	 */
	public function getVeteran()
	{
		return $this->veteran;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = PersonPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [title] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->title !== $v) {
			$this->title = $v;
			$this->modifiedColumns[] = PersonPeer::TITLE;
		}

		return $this;
	} // setTitle()

	/**
	 * Set the value of [first_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setFirstName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->first_name !== $v) {
			$this->first_name = $v;
			$this->modifiedColumns[] = PersonPeer::FIRST_NAME;
		}

		return $this;
	} // setFirstName()

	/**
	 * Set the value of [last_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setLastName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->last_name !== $v) {
			$this->last_name = $v;
			$this->modifiedColumns[] = PersonPeer::LAST_NAME;
		}

		return $this;
	} // setLastName()

	/**
	 * Set the value of [address1] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setAddress1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address1 !== $v) {
			$this->address1 = $v;
			$this->modifiedColumns[] = PersonPeer::ADDRESS1;
		}

		return $this;
	} // setAddress1()

	/**
	 * Set the value of [address2] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setAddress2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address2 !== $v) {
			$this->address2 = $v;
			$this->modifiedColumns[] = PersonPeer::ADDRESS2;
		}

		return $this;
	} // setAddress2()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = PersonPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [county] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setCounty($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->county !== $v) {
			$this->county = $v;
			$this->modifiedColumns[] = PersonPeer::COUNTY;
		}

		return $this;
	} // setCounty()

	/**
	 * Set the value of [state] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->state !== $v) {
			$this->state = $v;
			$this->modifiedColumns[] = PersonPeer::STATE;
		}

		return $this;
	} // setState()

	/**
	 * Set the value of [country] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setCountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->country !== $v) {
			$this->country = $v;
			$this->modifiedColumns[] = PersonPeer::COUNTRY;
		}

		return $this;
	} // setCountry()

	/**
	 * Set the value of [zipcode] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setZipcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->zipcode !== $v) {
			$this->zipcode = $v;
			$this->modifiedColumns[] = PersonPeer::ZIPCODE;
		}

		return $this;
	} // setZipcode()

	/**
	 * Set the value of [day_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setDayPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->day_phone !== $v) {
			$this->day_phone = $v;
			$this->modifiedColumns[] = PersonPeer::DAY_PHONE;
		}

		return $this;
	} // setDayPhone()

	/**
	 * Set the value of [day_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setDayComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->day_comment !== $v) {
			$this->day_comment = $v;
			$this->modifiedColumns[] = PersonPeer::DAY_COMMENT;
		}

		return $this;
	} // setDayComment()

	/**
	 * Set the value of [evening_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setEveningPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->evening_phone !== $v) {
			$this->evening_phone = $v;
			$this->modifiedColumns[] = PersonPeer::EVENING_PHONE;
		}

		return $this;
	} // setEveningPhone()

	/**
	 * Set the value of [evening_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setEveningComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->evening_comment !== $v) {
			$this->evening_comment = $v;
			$this->modifiedColumns[] = PersonPeer::EVENING_COMMENT;
		}

		return $this;
	} // setEveningComment()

	/**
	 * Set the value of [mobile_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setMobilePhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mobile_phone !== $v) {
			$this->mobile_phone = $v;
			$this->modifiedColumns[] = PersonPeer::MOBILE_PHONE;
		}

		return $this;
	} // setMobilePhone()

	/**
	 * Set the value of [mobile_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setMobileComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mobile_comment !== $v) {
			$this->mobile_comment = $v;
			$this->modifiedColumns[] = PersonPeer::MOBILE_COMMENT;
		}

		return $this;
	} // setMobileComment()

	/**
	 * Set the value of [pager_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setPagerPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pager_phone !== $v) {
			$this->pager_phone = $v;
			$this->modifiedColumns[] = PersonPeer::PAGER_PHONE;
		}

		return $this;
	} // setPagerPhone()

	/**
	 * Set the value of [pager_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setPagerComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pager_comment !== $v) {
			$this->pager_comment = $v;
			$this->modifiedColumns[] = PersonPeer::PAGER_COMMENT;
		}

		return $this;
	} // setPagerComment()

	/**
	 * Set the value of [other_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setOtherPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other_phone !== $v) {
			$this->other_phone = $v;
			$this->modifiedColumns[] = PersonPeer::OTHER_PHONE;
		}

		return $this;
	} // setOtherPhone()

	/**
	 * Set the value of [other_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setOtherComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other_comment !== $v) {
			$this->other_comment = $v;
			$this->modifiedColumns[] = PersonPeer::OTHER_COMMENT;
		}

		return $this;
	} // setOtherComment()

	/**
	 * Set the value of [fax_phone1] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setFaxPhone1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax_phone1 !== $v) {
			$this->fax_phone1 = $v;
			$this->modifiedColumns[] = PersonPeer::FAX_PHONE1;
		}

		return $this;
	} // setFaxPhone1()

	/**
	 * Set the value of [fax_comment1] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setFaxComment1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax_comment1 !== $v) {
			$this->fax_comment1 = $v;
			$this->modifiedColumns[] = PersonPeer::FAX_COMMENT1;
		}

		return $this;
	} // setFaxComment1()

	/**
	 * Set the value of [auto_fax] column.
	 * 
	 * @param      int $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setAutoFax($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->auto_fax !== $v || $v === 0) {
			$this->auto_fax = $v;
			$this->modifiedColumns[] = PersonPeer::AUTO_FAX;
		}

		return $this;
	} // setAutoFax()

	/**
	 * Set the value of [fax_phone2] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setFaxPhone2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax_phone2 !== $v) {
			$this->fax_phone2 = $v;
			$this->modifiedColumns[] = PersonPeer::FAX_PHONE2;
		}

		return $this;
	} // setFaxPhone2()

	/**
	 * Set the value of [fax_comment2] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setFaxComment2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax_comment2 !== $v) {
			$this->fax_comment2 = $v;
			$this->modifiedColumns[] = PersonPeer::FAX_COMMENT2;
		}

		return $this;
	} // setFaxComment2()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = PersonPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [email_text_only] column.
	 * 
	 * @param      int $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setEmailTextOnly($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->email_text_only !== $v) {
			$this->email_text_only = $v;
			$this->modifiedColumns[] = PersonPeer::EMAIL_TEXT_ONLY;
		}

		return $this;
	} // setEmailTextOnly()

	/**
	 * Set the value of [email_blocked] column.
	 * 
	 * @param      int $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setEmailBlocked($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->email_blocked !== $v) {
			$this->email_blocked = $v;
			$this->modifiedColumns[] = PersonPeer::EMAIL_BLOCKED;
		}

		return $this;
	} // setEmailBlocked()

	/**
	 * Set the value of [username] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setUsername($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->username !== $v) {
			$this->username = $v;
			$this->modifiedColumns[] = PersonPeer::USERNAME;
		}

		return $this;
	} // setUsername()

	/**
	 * Set the value of [password] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password !== $v) {
			$this->password = $v;
			$this->modifiedColumns[] = PersonPeer::PASSWORD;
		}

		return $this;
	} // setPassword()

	/**
	 * Set the value of [comment] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comment !== $v) {
			$this->comment = $v;
			$this->modifiedColumns[] = PersonPeer::COMMENT;
		}

		return $this;
	} // setComment()

	/**
	 * Set the value of [wf_policy_agreed] column.
	 * 
	 * @param      int $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setWfPolicyAgreed($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->wf_policy_agreed !== $v) {
			$this->wf_policy_agreed = $v;
			$this->modifiedColumns[] = PersonPeer::WF_POLICY_AGREED;
		}

		return $this;
	} // setWfPolicyAgreed()

	/**
	 * Sets the value of [wf_policy_agreed_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Person The current object (for fluent API support)
	 */
	public function setWfPolicyAgreedDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->wf_policy_agreed_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->wf_policy_agreed_date !== null && $tmpDt = new DateTime($this->wf_policy_agreed_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->wf_policy_agreed_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = PersonPeer::WF_POLICY_AGREED_DATE;
			}
		} // if either are not null

		return $this;
	} // setWfPolicyAgreedDate()

	/**
	 * Set the value of [pager_email] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setPagerEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pager_email !== $v) {
			$this->pager_email = $v;
			$this->modifiedColumns[] = PersonPeer::PAGER_EMAIL;
		}

		return $this;
	} // setPagerEmail()

	/**
	 * Set the value of [block_mailings] column.
	 * 
	 * @param      int $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setBlockMailings($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->block_mailings !== $v) {
			$this->block_mailings = $v;
			$this->modifiedColumns[] = PersonPeer::BLOCK_MAILINGS;
		}

		return $this;
	} // setBlockMailings()

	/**
	 * Set the value of [newsletter] column.
	 * 
	 * @param      int $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setNewsletter($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->newsletter !== $v) {
			$this->newsletter = $v;
			$this->modifiedColumns[] = PersonPeer::NEWSLETTER;
		}

		return $this;
	} // setNewsletter()

	/**
	 * Set the value of [gender] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setGender($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->gender !== $v) {
			$this->gender = $v;
			$this->modifiedColumns[] = PersonPeer::GENDER;
		}

		return $this;
	} // setGender()

	/**
	 * Set the value of [deceased] column.
	 * 
	 * @param      int $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setDeceased($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->deceased !== $v) {
			$this->deceased = $v;
			$this->modifiedColumns[] = PersonPeer::DECEASED;
		}

		return $this;
	} // setDeceased()

	/**
	 * Set the value of [deceased_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setDeceasedComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->deceased_comment !== $v) {
			$this->deceased_comment = $v;
			$this->modifiedColumns[] = PersonPeer::DECEASED_COMMENT;
		}

		return $this;
	} // setDeceasedComment()

	/**
	 * Set the value of [secondary_email] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setSecondaryEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->secondary_email !== $v) {
			$this->secondary_email = $v;
			$this->modifiedColumns[] = PersonPeer::SECONDARY_EMAIL;
		}

		return $this;
	} // setSecondaryEmail()

	/**
	 * Sets the value of [deceased_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Person The current object (for fluent API support)
	 */
	public function setDeceasedDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->deceased_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->deceased_date !== null && $tmpDt = new DateTime($this->deceased_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->deceased_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = PersonPeer::DECEASED_DATE;
			}
		} // if either are not null

		return $this;
	} // setDeceasedDate()

	/**
	 * Set the value of [middle_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setMiddleName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->middle_name !== $v) {
			$this->middle_name = $v;
			$this->modifiedColumns[] = PersonPeer::MIDDLE_NAME;
		}

		return $this;
	} // setMiddleName()

	/**
	 * Set the value of [suffix] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setSuffix($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->suffix !== $v) {
			$this->suffix = $v;
			$this->modifiedColumns[] = PersonPeer::SUFFIX;
		}

		return $this;
	} // setSuffix()

	/**
	 * Set the value of [nickname] column.
	 * 
	 * @param      string $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setNickname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nickname !== $v) {
			$this->nickname = $v;
			$this->modifiedColumns[] = PersonPeer::NICKNAME;
		}

		return $this;
	} // setNickname()

	/**
	 * Set the value of [veteran] column.
	 * 
	 * @param      int $v new value
	 * @return     Person The current object (for fluent API support)
	 */
	public function setVeteran($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->veteran !== $v) {
			$this->veteran = $v;
			$this->modifiedColumns[] = PersonPeer::VETERAN;
		}

		return $this;
	} // setVeteran()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Person The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PersonPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(PersonPeer::AUTO_FAX))) {
				return false;
			}

			if ($this->auto_fax !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->title = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->first_name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->last_name = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->address1 = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->address2 = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->city = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->county = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->state = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->country = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->zipcode = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->day_phone = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->day_comment = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->evening_phone = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->evening_comment = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->mobile_phone = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->mobile_comment = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->pager_phone = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->pager_comment = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->other_phone = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->other_comment = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->fax_phone1 = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->fax_comment1 = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->auto_fax = ($row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
			$this->fax_phone2 = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->fax_comment2 = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->email = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->email_text_only = ($row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->email_blocked = ($row[$startcol + 28] !== null) ? (int) $row[$startcol + 28] : null;
			$this->username = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->password = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->comment = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->wf_policy_agreed = ($row[$startcol + 32] !== null) ? (int) $row[$startcol + 32] : null;
			$this->wf_policy_agreed_date = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->pager_email = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->block_mailings = ($row[$startcol + 35] !== null) ? (int) $row[$startcol + 35] : null;
			$this->newsletter = ($row[$startcol + 36] !== null) ? (int) $row[$startcol + 36] : null;
			$this->gender = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->deceased = ($row[$startcol + 38] !== null) ? (int) $row[$startcol + 38] : null;
			$this->deceased_comment = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->secondary_email = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->deceased_date = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->middle_name = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
			$this->suffix = ($row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
			$this->nickname = ($row[$startcol + 44] !== null) ? (string) $row[$startcol + 44] : null;
			$this->veteran = ($row[$startcol + 45] !== null) ? (int) $row[$startcol + 45] : null;
			$this->created_at = ($row[$startcol + 46] !== null) ? (string) $row[$startcol + 46] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 47; // 47 = PersonPeer::NUM_COLUMNS - PersonPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Person object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PersonPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PersonPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collAfstaffs = null;
			$this->lastAfstaffCriteria = null;

			$this->collBoardMembers = null;
			$this->lastBoardMemberCriteria = null;

			$this->collCompanions = null;
			$this->lastCompanionCriteria = null;

			$this->collContacts = null;
			$this->lastContactCriteria = null;

			$this->collDonors = null;
			$this->lastDonorCriteria = null;

			$this->collEmailListPersons = null;
			$this->lastEmailListPersonCriteria = null;

			$this->collEmailQueues = null;
			$this->lastEmailQueueCriteria = null;

			$this->collEmailTemplates = null;
			$this->lastEmailTemplateCriteria = null;

			$this->collMembers = null;
			$this->lastMemberCriteria = null;

			$this->collPassengers = null;
			$this->lastPassengerCriteria = null;

			$this->collPasswordRequests = null;
			$this->lastPasswordRequestCriteria = null;

			$this->collPersonRoles = null;
			$this->lastPersonRoleCriteria = null;

			$this->singlePersonalNote = null;

			$this->collRequesters = null;
			$this->lastRequesterCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasePerson:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PersonPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			PersonPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BasePerson:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasePerson:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(PersonPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PersonPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BasePerson:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			PersonPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PersonPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PersonPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PersonPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collAfstaffs !== null) {
				foreach ($this->collAfstaffs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collBoardMembers !== null) {
				foreach ($this->collBoardMembers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCompanions !== null) {
				foreach ($this->collCompanions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collContacts !== null) {
				foreach ($this->collContacts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDonors !== null) {
				foreach ($this->collDonors as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmailListPersons !== null) {
				foreach ($this->collEmailListPersons as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmailQueues !== null) {
				foreach ($this->collEmailQueues as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmailTemplates !== null) {
				foreach ($this->collEmailTemplates as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMembers !== null) {
				foreach ($this->collMembers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPassengers !== null) {
				foreach ($this->collPassengers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPasswordRequests !== null) {
				foreach ($this->collPasswordRequests as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPersonRoles !== null) {
				foreach ($this->collPersonRoles as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->singlePersonalNote !== null) {
				if (!$this->singlePersonalNote->isDeleted()) {
						$affectedRows += $this->singlePersonalNote->save($con);
				}
			}

			if ($this->collRequesters !== null) {
				foreach ($this->collRequesters as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = PersonPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collAfstaffs !== null) {
					foreach ($this->collAfstaffs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collBoardMembers !== null) {
					foreach ($this->collBoardMembers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCompanions !== null) {
					foreach ($this->collCompanions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collContacts !== null) {
					foreach ($this->collContacts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDonors !== null) {
					foreach ($this->collDonors as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmailListPersons !== null) {
					foreach ($this->collEmailListPersons as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmailQueues !== null) {
					foreach ($this->collEmailQueues as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmailTemplates !== null) {
					foreach ($this->collEmailTemplates as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMembers !== null) {
					foreach ($this->collMembers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPassengers !== null) {
					foreach ($this->collPassengers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPasswordRequests !== null) {
					foreach ($this->collPasswordRequests as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPersonRoles !== null) {
					foreach ($this->collPersonRoles as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->singlePersonalNote !== null) {
					if (!$this->singlePersonalNote->validate($columns)) {
						$failureMap = array_merge($failureMap, $this->singlePersonalNote->getValidationFailures());
					}
				}

				if ($this->collRequesters !== null) {
					foreach ($this->collRequesters as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PersonPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getTitle();
				break;
			case 2:
				return $this->getFirstName();
				break;
			case 3:
				return $this->getLastName();
				break;
			case 4:
				return $this->getAddress1();
				break;
			case 5:
				return $this->getAddress2();
				break;
			case 6:
				return $this->getCity();
				break;
			case 7:
				return $this->getCounty();
				break;
			case 8:
				return $this->getState();
				break;
			case 9:
				return $this->getCountry();
				break;
			case 10:
				return $this->getZipcode();
				break;
			case 11:
				return $this->getDayPhone();
				break;
			case 12:
				return $this->getDayComment();
				break;
			case 13:
				return $this->getEveningPhone();
				break;
			case 14:
				return $this->getEveningComment();
				break;
			case 15:
				return $this->getMobilePhone();
				break;
			case 16:
				return $this->getMobileComment();
				break;
			case 17:
				return $this->getPagerPhone();
				break;
			case 18:
				return $this->getPagerComment();
				break;
			case 19:
				return $this->getOtherPhone();
				break;
			case 20:
				return $this->getOtherComment();
				break;
			case 21:
				return $this->getFaxPhone1();
				break;
			case 22:
				return $this->getFaxComment1();
				break;
			case 23:
				return $this->getAutoFax();
				break;
			case 24:
				return $this->getFaxPhone2();
				break;
			case 25:
				return $this->getFaxComment2();
				break;
			case 26:
				return $this->getEmail();
				break;
			case 27:
				return $this->getEmailTextOnly();
				break;
			case 28:
				return $this->getEmailBlocked();
				break;
			case 29:
				return $this->getUsername();
				break;
			case 30:
				return $this->getPassword();
				break;
			case 31:
				return $this->getComment();
				break;
			case 32:
				return $this->getWfPolicyAgreed();
				break;
			case 33:
				return $this->getWfPolicyAgreedDate();
				break;
			case 34:
				return $this->getPagerEmail();
				break;
			case 35:
				return $this->getBlockMailings();
				break;
			case 36:
				return $this->getNewsletter();
				break;
			case 37:
				return $this->getGender();
				break;
			case 38:
				return $this->getDeceased();
				break;
			case 39:
				return $this->getDeceasedComment();
				break;
			case 40:
				return $this->getSecondaryEmail();
				break;
			case 41:
				return $this->getDeceasedDate();
				break;
			case 42:
				return $this->getMiddleName();
				break;
			case 43:
				return $this->getSuffix();
				break;
			case 44:
				return $this->getNickname();
				break;
			case 45:
				return $this->getVeteran();
				break;
			case 46:
				return $this->getCreatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PersonPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getTitle(),
			$keys[2] => $this->getFirstName(),
			$keys[3] => $this->getLastName(),
			$keys[4] => $this->getAddress1(),
			$keys[5] => $this->getAddress2(),
			$keys[6] => $this->getCity(),
			$keys[7] => $this->getCounty(),
			$keys[8] => $this->getState(),
			$keys[9] => $this->getCountry(),
			$keys[10] => $this->getZipcode(),
			$keys[11] => $this->getDayPhone(),
			$keys[12] => $this->getDayComment(),
			$keys[13] => $this->getEveningPhone(),
			$keys[14] => $this->getEveningComment(),
			$keys[15] => $this->getMobilePhone(),
			$keys[16] => $this->getMobileComment(),
			$keys[17] => $this->getPagerPhone(),
			$keys[18] => $this->getPagerComment(),
			$keys[19] => $this->getOtherPhone(),
			$keys[20] => $this->getOtherComment(),
			$keys[21] => $this->getFaxPhone1(),
			$keys[22] => $this->getFaxComment1(),
			$keys[23] => $this->getAutoFax(),
			$keys[24] => $this->getFaxPhone2(),
			$keys[25] => $this->getFaxComment2(),
			$keys[26] => $this->getEmail(),
			$keys[27] => $this->getEmailTextOnly(),
			$keys[28] => $this->getEmailBlocked(),
			$keys[29] => $this->getUsername(),
			$keys[30] => $this->getPassword(),
			$keys[31] => $this->getComment(),
			$keys[32] => $this->getWfPolicyAgreed(),
			$keys[33] => $this->getWfPolicyAgreedDate(),
			$keys[34] => $this->getPagerEmail(),
			$keys[35] => $this->getBlockMailings(),
			$keys[36] => $this->getNewsletter(),
			$keys[37] => $this->getGender(),
			$keys[38] => $this->getDeceased(),
			$keys[39] => $this->getDeceasedComment(),
			$keys[40] => $this->getSecondaryEmail(),
			$keys[41] => $this->getDeceasedDate(),
			$keys[42] => $this->getMiddleName(),
			$keys[43] => $this->getSuffix(),
			$keys[44] => $this->getNickname(),
			$keys[45] => $this->getVeteran(),
			$keys[46] => $this->getCreatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PersonPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setTitle($value);
				break;
			case 2:
				$this->setFirstName($value);
				break;
			case 3:
				$this->setLastName($value);
				break;
			case 4:
				$this->setAddress1($value);
				break;
			case 5:
				$this->setAddress2($value);
				break;
			case 6:
				$this->setCity($value);
				break;
			case 7:
				$this->setCounty($value);
				break;
			case 8:
				$this->setState($value);
				break;
			case 9:
				$this->setCountry($value);
				break;
			case 10:
				$this->setZipcode($value);
				break;
			case 11:
				$this->setDayPhone($value);
				break;
			case 12:
				$this->setDayComment($value);
				break;
			case 13:
				$this->setEveningPhone($value);
				break;
			case 14:
				$this->setEveningComment($value);
				break;
			case 15:
				$this->setMobilePhone($value);
				break;
			case 16:
				$this->setMobileComment($value);
				break;
			case 17:
				$this->setPagerPhone($value);
				break;
			case 18:
				$this->setPagerComment($value);
				break;
			case 19:
				$this->setOtherPhone($value);
				break;
			case 20:
				$this->setOtherComment($value);
				break;
			case 21:
				$this->setFaxPhone1($value);
				break;
			case 22:
				$this->setFaxComment1($value);
				break;
			case 23:
				$this->setAutoFax($value);
				break;
			case 24:
				$this->setFaxPhone2($value);
				break;
			case 25:
				$this->setFaxComment2($value);
				break;
			case 26:
				$this->setEmail($value);
				break;
			case 27:
				$this->setEmailTextOnly($value);
				break;
			case 28:
				$this->setEmailBlocked($value);
				break;
			case 29:
				$this->setUsername($value);
				break;
			case 30:
				$this->setPassword($value);
				break;
			case 31:
				$this->setComment($value);
				break;
			case 32:
				$this->setWfPolicyAgreed($value);
				break;
			case 33:
				$this->setWfPolicyAgreedDate($value);
				break;
			case 34:
				$this->setPagerEmail($value);
				break;
			case 35:
				$this->setBlockMailings($value);
				break;
			case 36:
				$this->setNewsletter($value);
				break;
			case 37:
				$this->setGender($value);
				break;
			case 38:
				$this->setDeceased($value);
				break;
			case 39:
				$this->setDeceasedComment($value);
				break;
			case 40:
				$this->setSecondaryEmail($value);
				break;
			case 41:
				$this->setDeceasedDate($value);
				break;
			case 42:
				$this->setMiddleName($value);
				break;
			case 43:
				$this->setSuffix($value);
				break;
			case 44:
				$this->setNickname($value);
				break;
			case 45:
				$this->setVeteran($value);
				break;
			case 46:
				$this->setCreatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PersonPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setTitle($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setFirstName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setLastName($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setAddress1($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAddress2($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCity($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCounty($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setState($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCountry($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setZipcode($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setDayPhone($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setDayComment($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setEveningPhone($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setEveningComment($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setMobilePhone($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setMobileComment($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setPagerPhone($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setPagerComment($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setOtherPhone($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setOtherComment($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setFaxPhone1($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setFaxComment1($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setAutoFax($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setFaxPhone2($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setFaxComment2($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setEmail($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setEmailTextOnly($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setEmailBlocked($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setUsername($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setPassword($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setComment($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setWfPolicyAgreed($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setWfPolicyAgreedDate($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setPagerEmail($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setBlockMailings($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setNewsletter($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setGender($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setDeceased($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setDeceasedComment($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setSecondaryEmail($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setDeceasedDate($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setMiddleName($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setSuffix($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setNickname($arr[$keys[44]]);
		if (array_key_exists($keys[45], $arr)) $this->setVeteran($arr[$keys[45]]);
		if (array_key_exists($keys[46], $arr)) $this->setCreatedAt($arr[$keys[46]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PersonPeer::DATABASE_NAME);

		if ($this->isColumnModified(PersonPeer::ID)) $criteria->add(PersonPeer::ID, $this->id);
		if ($this->isColumnModified(PersonPeer::TITLE)) $criteria->add(PersonPeer::TITLE, $this->title);
		if ($this->isColumnModified(PersonPeer::FIRST_NAME)) $criteria->add(PersonPeer::FIRST_NAME, $this->first_name);
		if ($this->isColumnModified(PersonPeer::LAST_NAME)) $criteria->add(PersonPeer::LAST_NAME, $this->last_name);
		if ($this->isColumnModified(PersonPeer::ADDRESS1)) $criteria->add(PersonPeer::ADDRESS1, $this->address1);
		if ($this->isColumnModified(PersonPeer::ADDRESS2)) $criteria->add(PersonPeer::ADDRESS2, $this->address2);
		if ($this->isColumnModified(PersonPeer::CITY)) $criteria->add(PersonPeer::CITY, $this->city);
		if ($this->isColumnModified(PersonPeer::COUNTY)) $criteria->add(PersonPeer::COUNTY, $this->county);
		if ($this->isColumnModified(PersonPeer::STATE)) $criteria->add(PersonPeer::STATE, $this->state);
		if ($this->isColumnModified(PersonPeer::COUNTRY)) $criteria->add(PersonPeer::COUNTRY, $this->country);
		if ($this->isColumnModified(PersonPeer::ZIPCODE)) $criteria->add(PersonPeer::ZIPCODE, $this->zipcode);
		if ($this->isColumnModified(PersonPeer::DAY_PHONE)) $criteria->add(PersonPeer::DAY_PHONE, $this->day_phone);
		if ($this->isColumnModified(PersonPeer::DAY_COMMENT)) $criteria->add(PersonPeer::DAY_COMMENT, $this->day_comment);
		if ($this->isColumnModified(PersonPeer::EVENING_PHONE)) $criteria->add(PersonPeer::EVENING_PHONE, $this->evening_phone);
		if ($this->isColumnModified(PersonPeer::EVENING_COMMENT)) $criteria->add(PersonPeer::EVENING_COMMENT, $this->evening_comment);
		if ($this->isColumnModified(PersonPeer::MOBILE_PHONE)) $criteria->add(PersonPeer::MOBILE_PHONE, $this->mobile_phone);
		if ($this->isColumnModified(PersonPeer::MOBILE_COMMENT)) $criteria->add(PersonPeer::MOBILE_COMMENT, $this->mobile_comment);
		if ($this->isColumnModified(PersonPeer::PAGER_PHONE)) $criteria->add(PersonPeer::PAGER_PHONE, $this->pager_phone);
		if ($this->isColumnModified(PersonPeer::PAGER_COMMENT)) $criteria->add(PersonPeer::PAGER_COMMENT, $this->pager_comment);
		if ($this->isColumnModified(PersonPeer::OTHER_PHONE)) $criteria->add(PersonPeer::OTHER_PHONE, $this->other_phone);
		if ($this->isColumnModified(PersonPeer::OTHER_COMMENT)) $criteria->add(PersonPeer::OTHER_COMMENT, $this->other_comment);
		if ($this->isColumnModified(PersonPeer::FAX_PHONE1)) $criteria->add(PersonPeer::FAX_PHONE1, $this->fax_phone1);
		if ($this->isColumnModified(PersonPeer::FAX_COMMENT1)) $criteria->add(PersonPeer::FAX_COMMENT1, $this->fax_comment1);
		if ($this->isColumnModified(PersonPeer::AUTO_FAX)) $criteria->add(PersonPeer::AUTO_FAX, $this->auto_fax);
		if ($this->isColumnModified(PersonPeer::FAX_PHONE2)) $criteria->add(PersonPeer::FAX_PHONE2, $this->fax_phone2);
		if ($this->isColumnModified(PersonPeer::FAX_COMMENT2)) $criteria->add(PersonPeer::FAX_COMMENT2, $this->fax_comment2);
		if ($this->isColumnModified(PersonPeer::EMAIL)) $criteria->add(PersonPeer::EMAIL, $this->email);
		if ($this->isColumnModified(PersonPeer::EMAIL_TEXT_ONLY)) $criteria->add(PersonPeer::EMAIL_TEXT_ONLY, $this->email_text_only);
		if ($this->isColumnModified(PersonPeer::EMAIL_BLOCKED)) $criteria->add(PersonPeer::EMAIL_BLOCKED, $this->email_blocked);
		if ($this->isColumnModified(PersonPeer::USERNAME)) $criteria->add(PersonPeer::USERNAME, $this->username);
		if ($this->isColumnModified(PersonPeer::PASSWORD)) $criteria->add(PersonPeer::PASSWORD, $this->password);
		if ($this->isColumnModified(PersonPeer::COMMENT)) $criteria->add(PersonPeer::COMMENT, $this->comment);
		if ($this->isColumnModified(PersonPeer::WF_POLICY_AGREED)) $criteria->add(PersonPeer::WF_POLICY_AGREED, $this->wf_policy_agreed);
		if ($this->isColumnModified(PersonPeer::WF_POLICY_AGREED_DATE)) $criteria->add(PersonPeer::WF_POLICY_AGREED_DATE, $this->wf_policy_agreed_date);
		if ($this->isColumnModified(PersonPeer::PAGER_EMAIL)) $criteria->add(PersonPeer::PAGER_EMAIL, $this->pager_email);
		if ($this->isColumnModified(PersonPeer::BLOCK_MAILINGS)) $criteria->add(PersonPeer::BLOCK_MAILINGS, $this->block_mailings);
		if ($this->isColumnModified(PersonPeer::NEWSLETTER)) $criteria->add(PersonPeer::NEWSLETTER, $this->newsletter);
		if ($this->isColumnModified(PersonPeer::GENDER)) $criteria->add(PersonPeer::GENDER, $this->gender);
		if ($this->isColumnModified(PersonPeer::DECEASED)) $criteria->add(PersonPeer::DECEASED, $this->deceased);
		if ($this->isColumnModified(PersonPeer::DECEASED_COMMENT)) $criteria->add(PersonPeer::DECEASED_COMMENT, $this->deceased_comment);
		if ($this->isColumnModified(PersonPeer::SECONDARY_EMAIL)) $criteria->add(PersonPeer::SECONDARY_EMAIL, $this->secondary_email);
		if ($this->isColumnModified(PersonPeer::DECEASED_DATE)) $criteria->add(PersonPeer::DECEASED_DATE, $this->deceased_date);
		if ($this->isColumnModified(PersonPeer::MIDDLE_NAME)) $criteria->add(PersonPeer::MIDDLE_NAME, $this->middle_name);
		if ($this->isColumnModified(PersonPeer::SUFFIX)) $criteria->add(PersonPeer::SUFFIX, $this->suffix);
		if ($this->isColumnModified(PersonPeer::NICKNAME)) $criteria->add(PersonPeer::NICKNAME, $this->nickname);
		if ($this->isColumnModified(PersonPeer::VETERAN)) $criteria->add(PersonPeer::VETERAN, $this->veteran);
		if ($this->isColumnModified(PersonPeer::CREATED_AT)) $criteria->add(PersonPeer::CREATED_AT, $this->created_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PersonPeer::DATABASE_NAME);

		$criteria->add(PersonPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Person (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setTitle($this->title);

		$copyObj->setFirstName($this->first_name);

		$copyObj->setLastName($this->last_name);

		$copyObj->setAddress1($this->address1);

		$copyObj->setAddress2($this->address2);

		$copyObj->setCity($this->city);

		$copyObj->setCounty($this->county);

		$copyObj->setState($this->state);

		$copyObj->setCountry($this->country);

		$copyObj->setZipcode($this->zipcode);

		$copyObj->setDayPhone($this->day_phone);

		$copyObj->setDayComment($this->day_comment);

		$copyObj->setEveningPhone($this->evening_phone);

		$copyObj->setEveningComment($this->evening_comment);

		$copyObj->setMobilePhone($this->mobile_phone);

		$copyObj->setMobileComment($this->mobile_comment);

		$copyObj->setPagerPhone($this->pager_phone);

		$copyObj->setPagerComment($this->pager_comment);

		$copyObj->setOtherPhone($this->other_phone);

		$copyObj->setOtherComment($this->other_comment);

		$copyObj->setFaxPhone1($this->fax_phone1);

		$copyObj->setFaxComment1($this->fax_comment1);

		$copyObj->setAutoFax($this->auto_fax);

		$copyObj->setFaxPhone2($this->fax_phone2);

		$copyObj->setFaxComment2($this->fax_comment2);

		$copyObj->setEmail($this->email);

		$copyObj->setEmailTextOnly($this->email_text_only);

		$copyObj->setEmailBlocked($this->email_blocked);

		$copyObj->setUsername($this->username);

		$copyObj->setPassword($this->password);

		$copyObj->setComment($this->comment);

		$copyObj->setWfPolicyAgreed($this->wf_policy_agreed);

		$copyObj->setWfPolicyAgreedDate($this->wf_policy_agreed_date);

		$copyObj->setPagerEmail($this->pager_email);

		$copyObj->setBlockMailings($this->block_mailings);

		$copyObj->setNewsletter($this->newsletter);

		$copyObj->setGender($this->gender);

		$copyObj->setDeceased($this->deceased);

		$copyObj->setDeceasedComment($this->deceased_comment);

		$copyObj->setSecondaryEmail($this->secondary_email);

		$copyObj->setDeceasedDate($this->deceased_date);

		$copyObj->setMiddleName($this->middle_name);

		$copyObj->setSuffix($this->suffix);

		$copyObj->setNickname($this->nickname);

		$copyObj->setVeteran($this->veteran);

		$copyObj->setCreatedAt($this->created_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getAfstaffs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAfstaff($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getBoardMembers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addBoardMember($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCompanions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCompanion($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getContacts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addContact($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDonors() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDonor($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmailListPersons() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmailListPerson($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmailQueues() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmailQueue($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmailTemplates() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmailTemplate($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMembers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMember($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPassengers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPassenger($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPasswordRequests() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPasswordRequest($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPersonRoles() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPersonRole($relObj->copy($deepCopy));
				}
			}

			$relObj = $this->getPersonalNote();
			if ($relObj) {
				$copyObj->setPersonalNote($relObj->copy($deepCopy));
			}

			foreach ($this->getRequesters() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addRequester($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Person Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PersonPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PersonPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collAfstaffs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAfstaffs()
	 */
	public function clearAfstaffs()
	{
		$this->collAfstaffs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAfstaffs collection (array).
	 *
	 * By default this just sets the collAfstaffs collection to an empty array (like clearcollAfstaffs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAfstaffs()
	{
		$this->collAfstaffs = array();
	}

	/**
	 * Gets an array of Afstaff objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related Afstaffs from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Afstaff[]
	 * @throws     PropelException
	 */
	public function getAfstaffs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAfstaffs === null) {
			if ($this->isNew()) {
			   $this->collAfstaffs = array();
			} else {

				$criteria->add(AfstaffPeer::PERSON_ID, $this->id);

				AfstaffPeer::addSelectColumns($criteria);
				$this->collAfstaffs = AfstaffPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AfstaffPeer::PERSON_ID, $this->id);

				AfstaffPeer::addSelectColumns($criteria);
				if (!isset($this->lastAfstaffCriteria) || !$this->lastAfstaffCriteria->equals($criteria)) {
					$this->collAfstaffs = AfstaffPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAfstaffCriteria = $criteria;
		return $this->collAfstaffs;
	}

	/**
	 * Returns the number of related Afstaff objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Afstaff objects.
	 * @throws     PropelException
	 */
	public function countAfstaffs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAfstaffs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AfstaffPeer::PERSON_ID, $this->id);

				$count = AfstaffPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AfstaffPeer::PERSON_ID, $this->id);

				if (!isset($this->lastAfstaffCriteria) || !$this->lastAfstaffCriteria->equals($criteria)) {
					$count = AfstaffPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAfstaffs);
				}
			} else {
				$count = count($this->collAfstaffs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Afstaff object to this object
	 * through the Afstaff foreign key attribute.
	 *
	 * @param      Afstaff $l Afstaff
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAfstaff(Afstaff $l)
	{
		if ($this->collAfstaffs === null) {
			$this->initAfstaffs();
		}
		if (!in_array($l, $this->collAfstaffs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAfstaffs, $l);
			$l->setPerson($this);
		}
	}

	/**
	 * Clears out the collBoardMembers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addBoardMembers()
	 */
	public function clearBoardMembers()
	{
		$this->collBoardMembers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collBoardMembers collection (array).
	 *
	 * By default this just sets the collBoardMembers collection to an empty array (like clearcollBoardMembers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initBoardMembers()
	{
		$this->collBoardMembers = array();
	}

	/**
	 * Gets an array of BoardMember objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related BoardMembers from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array BoardMember[]
	 * @throws     PropelException
	 */
	public function getBoardMembers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBoardMembers === null) {
			if ($this->isNew()) {
			   $this->collBoardMembers = array();
			} else {

				$criteria->add(BoardMemberPeer::PERSON_ID, $this->id);

				BoardMemberPeer::addSelectColumns($criteria);
				$this->collBoardMembers = BoardMemberPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(BoardMemberPeer::PERSON_ID, $this->id);

				BoardMemberPeer::addSelectColumns($criteria);
				if (!isset($this->lastBoardMemberCriteria) || !$this->lastBoardMemberCriteria->equals($criteria)) {
					$this->collBoardMembers = BoardMemberPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastBoardMemberCriteria = $criteria;
		return $this->collBoardMembers;
	}

	/**
	 * Returns the number of related BoardMember objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related BoardMember objects.
	 * @throws     PropelException
	 */
	public function countBoardMembers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collBoardMembers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(BoardMemberPeer::PERSON_ID, $this->id);

				$count = BoardMemberPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(BoardMemberPeer::PERSON_ID, $this->id);

				if (!isset($this->lastBoardMemberCriteria) || !$this->lastBoardMemberCriteria->equals($criteria)) {
					$count = BoardMemberPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collBoardMembers);
				}
			} else {
				$count = count($this->collBoardMembers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a BoardMember object to this object
	 * through the BoardMember foreign key attribute.
	 *
	 * @param      BoardMember $l BoardMember
	 * @return     void
	 * @throws     PropelException
	 */
	public function addBoardMember(BoardMember $l)
	{
		if ($this->collBoardMembers === null) {
			$this->initBoardMembers();
		}
		if (!in_array($l, $this->collBoardMembers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collBoardMembers, $l);
			$l->setPerson($this);
		}
	}

	/**
	 * Clears out the collCompanions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCompanions()
	 */
	public function clearCompanions()
	{
		$this->collCompanions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCompanions collection (array).
	 *
	 * By default this just sets the collCompanions collection to an empty array (like clearcollCompanions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCompanions()
	{
		$this->collCompanions = array();
	}

	/**
	 * Gets an array of Companion objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related Companions from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Companion[]
	 * @throws     PropelException
	 */
	public function getCompanions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanions === null) {
			if ($this->isNew()) {
			   $this->collCompanions = array();
			} else {

				$criteria->add(CompanionPeer::PERSON_ID, $this->id);

				CompanionPeer::addSelectColumns($criteria);
				$this->collCompanions = CompanionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CompanionPeer::PERSON_ID, $this->id);

				CompanionPeer::addSelectColumns($criteria);
				if (!isset($this->lastCompanionCriteria) || !$this->lastCompanionCriteria->equals($criteria)) {
					$this->collCompanions = CompanionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCompanionCriteria = $criteria;
		return $this->collCompanions;
	}

	/**
	 * Returns the number of related Companion objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Companion objects.
	 * @throws     PropelException
	 */
	public function countCompanions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCompanions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CompanionPeer::PERSON_ID, $this->id);

				$count = CompanionPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CompanionPeer::PERSON_ID, $this->id);

				if (!isset($this->lastCompanionCriteria) || !$this->lastCompanionCriteria->equals($criteria)) {
					$count = CompanionPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCompanions);
				}
			} else {
				$count = count($this->collCompanions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Companion object to this object
	 * through the Companion foreign key attribute.
	 *
	 * @param      Companion $l Companion
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCompanion(Companion $l)
	{
		if ($this->collCompanions === null) {
			$this->initCompanions();
		}
		if (!in_array($l, $this->collCompanions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCompanions, $l);
			$l->setPerson($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Companions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getCompanionsJoinPassenger($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanions === null) {
			if ($this->isNew()) {
				$this->collCompanions = array();
			} else {

				$criteria->add(CompanionPeer::PERSON_ID, $this->id);

				$this->collCompanions = CompanionPeer::doSelectJoinPassenger($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanionPeer::PERSON_ID, $this->id);

			if (!isset($this->lastCompanionCriteria) || !$this->lastCompanionCriteria->equals($criteria)) {
				$this->collCompanions = CompanionPeer::doSelectJoinPassenger($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanionCriteria = $criteria;

		return $this->collCompanions;
	}

	/**
	 * Clears out the collContacts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addContacts()
	 */
	public function clearContacts()
	{
		$this->collContacts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collContacts collection (array).
	 *
	 * By default this just sets the collContacts collection to an empty array (like clearcollContacts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initContacts()
	{
		$this->collContacts = array();
	}

	/**
	 * Gets an array of Contact objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related Contacts from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Contact[]
	 * @throws     PropelException
	 */
	public function getContacts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collContacts === null) {
			if ($this->isNew()) {
			   $this->collContacts = array();
			} else {

				$criteria->add(ContactPeer::PERSON_ID, $this->id);

				ContactPeer::addSelectColumns($criteria);
				$this->collContacts = ContactPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ContactPeer::PERSON_ID, $this->id);

				ContactPeer::addSelectColumns($criteria);
				if (!isset($this->lastContactCriteria) || !$this->lastContactCriteria->equals($criteria)) {
					$this->collContacts = ContactPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastContactCriteria = $criteria;
		return $this->collContacts;
	}

	/**
	 * Returns the number of related Contact objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Contact objects.
	 * @throws     PropelException
	 */
	public function countContacts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collContacts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ContactPeer::PERSON_ID, $this->id);

				$count = ContactPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ContactPeer::PERSON_ID, $this->id);

				if (!isset($this->lastContactCriteria) || !$this->lastContactCriteria->equals($criteria)) {
					$count = ContactPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collContacts);
				}
			} else {
				$count = count($this->collContacts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Contact object to this object
	 * through the Contact foreign key attribute.
	 *
	 * @param      Contact $l Contact
	 * @return     void
	 * @throws     PropelException
	 */
	public function addContact(Contact $l)
	{
		if ($this->collContacts === null) {
			$this->initContacts();
		}
		if (!in_array($l, $this->collContacts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collContacts, $l);
			$l->setPerson($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Contacts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getContactsJoinRefSource($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collContacts === null) {
			if ($this->isNew()) {
				$this->collContacts = array();
			} else {

				$criteria->add(ContactPeer::PERSON_ID, $this->id);

				$this->collContacts = ContactPeer::doSelectJoinRefSource($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ContactPeer::PERSON_ID, $this->id);

			if (!isset($this->lastContactCriteria) || !$this->lastContactCriteria->equals($criteria)) {
				$this->collContacts = ContactPeer::doSelectJoinRefSource($criteria, $con, $join_behavior);
			}
		}
		$this->lastContactCriteria = $criteria;

		return $this->collContacts;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Contacts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getContactsJoinContactType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collContacts === null) {
			if ($this->isNew()) {
				$this->collContacts = array();
			} else {

				$criteria->add(ContactPeer::PERSON_ID, $this->id);

				$this->collContacts = ContactPeer::doSelectJoinContactType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ContactPeer::PERSON_ID, $this->id);

			if (!isset($this->lastContactCriteria) || !$this->lastContactCriteria->equals($criteria)) {
				$this->collContacts = ContactPeer::doSelectJoinContactType($criteria, $con, $join_behavior);
			}
		}
		$this->lastContactCriteria = $criteria;

		return $this->collContacts;
	}

	/**
	 * Clears out the collDonors collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDonors()
	 */
	public function clearDonors()
	{
		$this->collDonors = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDonors collection (array).
	 *
	 * By default this just sets the collDonors collection to an empty array (like clearcollDonors());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDonors()
	{
		$this->collDonors = array();
	}

	/**
	 * Gets an array of Donor objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related Donors from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Donor[]
	 * @throws     PropelException
	 */
	public function getDonors($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDonors === null) {
			if ($this->isNew()) {
			   $this->collDonors = array();
			} else {

				$criteria->add(DonorPeer::PERSON_ID, $this->id);

				DonorPeer::addSelectColumns($criteria);
				$this->collDonors = DonorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DonorPeer::PERSON_ID, $this->id);

				DonorPeer::addSelectColumns($criteria);
				if (!isset($this->lastDonorCriteria) || !$this->lastDonorCriteria->equals($criteria)) {
					$this->collDonors = DonorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDonorCriteria = $criteria;
		return $this->collDonors;
	}

	/**
	 * Returns the number of related Donor objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Donor objects.
	 * @throws     PropelException
	 */
	public function countDonors(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDonors === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DonorPeer::PERSON_ID, $this->id);

				$count = DonorPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DonorPeer::PERSON_ID, $this->id);

				if (!isset($this->lastDonorCriteria) || !$this->lastDonorCriteria->equals($criteria)) {
					$count = DonorPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collDonors);
				}
			} else {
				$count = count($this->collDonors);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Donor object to this object
	 * through the Donor foreign key attribute.
	 *
	 * @param      Donor $l Donor
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDonor(Donor $l)
	{
		if ($this->collDonors === null) {
			$this->initDonors();
		}
		if (!in_array($l, $this->collDonors, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDonors, $l);
			$l->setPerson($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Donors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getDonorsJoinAffiliation($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDonors === null) {
			if ($this->isNew()) {
				$this->collDonors = array();
			} else {

				$criteria->add(DonorPeer::PERSON_ID, $this->id);

				$this->collDonors = DonorPeer::doSelectJoinAffiliation($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DonorPeer::PERSON_ID, $this->id);

			if (!isset($this->lastDonorCriteria) || !$this->lastDonorCriteria->equals($criteria)) {
				$this->collDonors = DonorPeer::doSelectJoinAffiliation($criteria, $con, $join_behavior);
			}
		}
		$this->lastDonorCriteria = $criteria;

		return $this->collDonors;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Donors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getDonorsJoinCompany($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDonors === null) {
			if ($this->isNew()) {
				$this->collDonors = array();
			} else {

				$criteria->add(DonorPeer::PERSON_ID, $this->id);

				$this->collDonors = DonorPeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DonorPeer::PERSON_ID, $this->id);

			if (!isset($this->lastDonorCriteria) || !$this->lastDonorCriteria->equals($criteria)) {
				$this->collDonors = DonorPeer::doSelectJoinCompany($criteria, $con, $join_behavior);
			}
		}
		$this->lastDonorCriteria = $criteria;

		return $this->collDonors;
	}

	/**
	 * Clears out the collEmailListPersons collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmailListPersons()
	 */
	public function clearEmailListPersons()
	{
		$this->collEmailListPersons = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmailListPersons collection (array).
	 *
	 * By default this just sets the collEmailListPersons collection to an empty array (like clearcollEmailListPersons());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmailListPersons()
	{
		$this->collEmailListPersons = array();
	}

	/**
	 * Gets an array of EmailListPerson objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related EmailListPersons from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EmailListPerson[]
	 * @throws     PropelException
	 */
	public function getEmailListPersons($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmailListPersons === null) {
			if ($this->isNew()) {
			   $this->collEmailListPersons = array();
			} else {

				$criteria->add(EmailListPersonPeer::PERSON_ID, $this->id);

				EmailListPersonPeer::addSelectColumns($criteria);
				$this->collEmailListPersons = EmailListPersonPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmailListPersonPeer::PERSON_ID, $this->id);

				EmailListPersonPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmailListPersonCriteria) || !$this->lastEmailListPersonCriteria->equals($criteria)) {
					$this->collEmailListPersons = EmailListPersonPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmailListPersonCriteria = $criteria;
		return $this->collEmailListPersons;
	}

	/**
	 * Returns the number of related EmailListPerson objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EmailListPerson objects.
	 * @throws     PropelException
	 */
	public function countEmailListPersons(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmailListPersons === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmailListPersonPeer::PERSON_ID, $this->id);

				$count = EmailListPersonPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmailListPersonPeer::PERSON_ID, $this->id);

				if (!isset($this->lastEmailListPersonCriteria) || !$this->lastEmailListPersonCriteria->equals($criteria)) {
					$count = EmailListPersonPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEmailListPersons);
				}
			} else {
				$count = count($this->collEmailListPersons);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EmailListPerson object to this object
	 * through the EmailListPerson foreign key attribute.
	 *
	 * @param      EmailListPerson $l EmailListPerson
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmailListPerson(EmailListPerson $l)
	{
		if ($this->collEmailListPersons === null) {
			$this->initEmailListPersons();
		}
		if (!in_array($l, $this->collEmailListPersons, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmailListPersons, $l);
			$l->setPerson($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related EmailListPersons from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getEmailListPersonsJoinEmailList($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmailListPersons === null) {
			if ($this->isNew()) {
				$this->collEmailListPersons = array();
			} else {

				$criteria->add(EmailListPersonPeer::PERSON_ID, $this->id);

				$this->collEmailListPersons = EmailListPersonPeer::doSelectJoinEmailList($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmailListPersonPeer::PERSON_ID, $this->id);

			if (!isset($this->lastEmailListPersonCriteria) || !$this->lastEmailListPersonCriteria->equals($criteria)) {
				$this->collEmailListPersons = EmailListPersonPeer::doSelectJoinEmailList($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmailListPersonCriteria = $criteria;

		return $this->collEmailListPersons;
	}

	/**
	 * Clears out the collEmailQueues collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmailQueues()
	 */
	public function clearEmailQueues()
	{
		$this->collEmailQueues = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmailQueues collection (array).
	 *
	 * By default this just sets the collEmailQueues collection to an empty array (like clearcollEmailQueues());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmailQueues()
	{
		$this->collEmailQueues = array();
	}

	/**
	 * Gets an array of EmailQueue objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related EmailQueues from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EmailQueue[]
	 * @throws     PropelException
	 */
	public function getEmailQueues($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmailQueues === null) {
			if ($this->isNew()) {
			   $this->collEmailQueues = array();
			} else {

				$criteria->add(EmailQueuePeer::PERSON_ID, $this->id);

				EmailQueuePeer::addSelectColumns($criteria);
				$this->collEmailQueues = EmailQueuePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmailQueuePeer::PERSON_ID, $this->id);

				EmailQueuePeer::addSelectColumns($criteria);
				if (!isset($this->lastEmailQueueCriteria) || !$this->lastEmailQueueCriteria->equals($criteria)) {
					$this->collEmailQueues = EmailQueuePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmailQueueCriteria = $criteria;
		return $this->collEmailQueues;
	}

	/**
	 * Returns the number of related EmailQueue objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EmailQueue objects.
	 * @throws     PropelException
	 */
	public function countEmailQueues(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmailQueues === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmailQueuePeer::PERSON_ID, $this->id);

				$count = EmailQueuePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmailQueuePeer::PERSON_ID, $this->id);

				if (!isset($this->lastEmailQueueCriteria) || !$this->lastEmailQueueCriteria->equals($criteria)) {
					$count = EmailQueuePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEmailQueues);
				}
			} else {
				$count = count($this->collEmailQueues);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EmailQueue object to this object
	 * through the EmailQueue foreign key attribute.
	 *
	 * @param      EmailQueue $l EmailQueue
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmailQueue(EmailQueue $l)
	{
		if ($this->collEmailQueues === null) {
			$this->initEmailQueues();
		}
		if (!in_array($l, $this->collEmailQueues, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmailQueues, $l);
			$l->setPerson($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related EmailQueues from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getEmailQueuesJoinEmailLetter($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmailQueues === null) {
			if ($this->isNew()) {
				$this->collEmailQueues = array();
			} else {

				$criteria->add(EmailQueuePeer::PERSON_ID, $this->id);

				$this->collEmailQueues = EmailQueuePeer::doSelectJoinEmailLetter($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmailQueuePeer::PERSON_ID, $this->id);

			if (!isset($this->lastEmailQueueCriteria) || !$this->lastEmailQueueCriteria->equals($criteria)) {
				$this->collEmailQueues = EmailQueuePeer::doSelectJoinEmailLetter($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmailQueueCriteria = $criteria;

		return $this->collEmailQueues;
	}

	/**
	 * Clears out the collEmailTemplates collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmailTemplates()
	 */
	public function clearEmailTemplates()
	{
		$this->collEmailTemplates = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmailTemplates collection (array).
	 *
	 * By default this just sets the collEmailTemplates collection to an empty array (like clearcollEmailTemplates());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmailTemplates()
	{
		$this->collEmailTemplates = array();
	}

	/**
	 * Gets an array of EmailTemplate objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related EmailTemplates from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EmailTemplate[]
	 * @throws     PropelException
	 */
	public function getEmailTemplates($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmailTemplates === null) {
			if ($this->isNew()) {
			   $this->collEmailTemplates = array();
			} else {

				$criteria->add(EmailTemplatePeer::PERSON_ID, $this->id);

				EmailTemplatePeer::addSelectColumns($criteria);
				$this->collEmailTemplates = EmailTemplatePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmailTemplatePeer::PERSON_ID, $this->id);

				EmailTemplatePeer::addSelectColumns($criteria);
				if (!isset($this->lastEmailTemplateCriteria) || !$this->lastEmailTemplateCriteria->equals($criteria)) {
					$this->collEmailTemplates = EmailTemplatePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmailTemplateCriteria = $criteria;
		return $this->collEmailTemplates;
	}

	/**
	 * Returns the number of related EmailTemplate objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EmailTemplate objects.
	 * @throws     PropelException
	 */
	public function countEmailTemplates(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmailTemplates === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmailTemplatePeer::PERSON_ID, $this->id);

				$count = EmailTemplatePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmailTemplatePeer::PERSON_ID, $this->id);

				if (!isset($this->lastEmailTemplateCriteria) || !$this->lastEmailTemplateCriteria->equals($criteria)) {
					$count = EmailTemplatePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEmailTemplates);
				}
			} else {
				$count = count($this->collEmailTemplates);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EmailTemplate object to this object
	 * through the EmailTemplate foreign key attribute.
	 *
	 * @param      EmailTemplate $l EmailTemplate
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmailTemplate(EmailTemplate $l)
	{
		if ($this->collEmailTemplates === null) {
			$this->initEmailTemplates();
		}
		if (!in_array($l, $this->collEmailTemplates, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmailTemplates, $l);
			$l->setPerson($this);
		}
	}

	/**
	 * Clears out the collMembers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMembers()
	 */
	public function clearMembers()
	{
		$this->collMembers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMembers collection (array).
	 *
	 * By default this just sets the collMembers collection to an empty array (like clearcollMembers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMembers()
	{
		$this->collMembers = array();
	}

	/**
	 * Gets an array of Member objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related Members from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Member[]
	 * @throws     PropelException
	 */
	public function getMembers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMembers === null) {
			if ($this->isNew()) {
			   $this->collMembers = array();
			} else {

				$criteria->add(MemberPeer::PERSON_ID, $this->id);

				MemberPeer::addSelectColumns($criteria);
				$this->collMembers = MemberPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MemberPeer::PERSON_ID, $this->id);

				MemberPeer::addSelectColumns($criteria);
				if (!isset($this->lastMemberCriteria) || !$this->lastMemberCriteria->equals($criteria)) {
					$this->collMembers = MemberPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMemberCriteria = $criteria;
		return $this->collMembers;
	}

	/**
	 * Returns the number of related Member objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Member objects.
	 * @throws     PropelException
	 */
	public function countMembers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMembers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MemberPeer::PERSON_ID, $this->id);

				$count = MemberPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MemberPeer::PERSON_ID, $this->id);

				if (!isset($this->lastMemberCriteria) || !$this->lastMemberCriteria->equals($criteria)) {
					$count = MemberPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMembers);
				}
			} else {
				$count = count($this->collMembers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Member object to this object
	 * through the Member foreign key attribute.
	 *
	 * @param      Member $l Member
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMember(Member $l)
	{
		if ($this->collMembers === null) {
			$this->initMembers();
		}
		if (!in_array($l, $this->collMembers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMembers, $l);
			$l->setPerson($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Members from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getMembersJoinWingRelatedByWingId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMembers === null) {
			if ($this->isNew()) {
				$this->collMembers = array();
			} else {

				$criteria->add(MemberPeer::PERSON_ID, $this->id);

				$this->collMembers = MemberPeer::doSelectJoinWingRelatedByWingId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MemberPeer::PERSON_ID, $this->id);

			if (!isset($this->lastMemberCriteria) || !$this->lastMemberCriteria->equals($criteria)) {
				$this->collMembers = MemberPeer::doSelectJoinWingRelatedByWingId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMemberCriteria = $criteria;

		return $this->collMembers;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Members from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getMembersJoinMemberClass($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMembers === null) {
			if ($this->isNew()) {
				$this->collMembers = array();
			} else {

				$criteria->add(MemberPeer::PERSON_ID, $this->id);

				$this->collMembers = MemberPeer::doSelectJoinMemberClass($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MemberPeer::PERSON_ID, $this->id);

			if (!isset($this->lastMemberCriteria) || !$this->lastMemberCriteria->equals($criteria)) {
				$this->collMembers = MemberPeer::doSelectJoinMemberClass($criteria, $con, $join_behavior);
			}
		}
		$this->lastMemberCriteria = $criteria;

		return $this->collMembers;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Members from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getMembersJoinMemberRelatedByMasterMemberId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMembers === null) {
			if ($this->isNew()) {
				$this->collMembers = array();
			} else {

				$criteria->add(MemberPeer::PERSON_ID, $this->id);

				$this->collMembers = MemberPeer::doSelectJoinMemberRelatedByMasterMemberId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MemberPeer::PERSON_ID, $this->id);

			if (!isset($this->lastMemberCriteria) || !$this->lastMemberCriteria->equals($criteria)) {
				$this->collMembers = MemberPeer::doSelectJoinMemberRelatedByMasterMemberId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMemberCriteria = $criteria;

		return $this->collMembers;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Members from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getMembersJoinWingRelatedBySecondaryWingId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMembers === null) {
			if ($this->isNew()) {
				$this->collMembers = array();
			} else {

				$criteria->add(MemberPeer::PERSON_ID, $this->id);

				$this->collMembers = MemberPeer::doSelectJoinWingRelatedBySecondaryWingId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MemberPeer::PERSON_ID, $this->id);

			if (!isset($this->lastMemberCriteria) || !$this->lastMemberCriteria->equals($criteria)) {
				$this->collMembers = MemberPeer::doSelectJoinWingRelatedBySecondaryWingId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMemberCriteria = $criteria;

		return $this->collMembers;
	}

	/**
	 * Clears out the collPassengers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPassengers()
	 */
	public function clearPassengers()
	{
		$this->collPassengers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPassengers collection (array).
	 *
	 * By default this just sets the collPassengers collection to an empty array (like clearcollPassengers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPassengers()
	{
		$this->collPassengers = array();
	}

	/**
	 * Gets an array of Passenger objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related Passengers from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Passenger[]
	 * @throws     PropelException
	 */
	public function getPassengers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPassengers === null) {
			if ($this->isNew()) {
			   $this->collPassengers = array();
			} else {

				$criteria->add(PassengerPeer::PERSON_ID, $this->id);

				PassengerPeer::addSelectColumns($criteria);
				$this->collPassengers = PassengerPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PassengerPeer::PERSON_ID, $this->id);

				PassengerPeer::addSelectColumns($criteria);
				if (!isset($this->lastPassengerCriteria) || !$this->lastPassengerCriteria->equals($criteria)) {
					$this->collPassengers = PassengerPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPassengerCriteria = $criteria;
		return $this->collPassengers;
	}

	/**
	 * Returns the number of related Passenger objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Passenger objects.
	 * @throws     PropelException
	 */
	public function countPassengers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPassengers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PassengerPeer::PERSON_ID, $this->id);

				$count = PassengerPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PassengerPeer::PERSON_ID, $this->id);

				if (!isset($this->lastPassengerCriteria) || !$this->lastPassengerCriteria->equals($criteria)) {
					$count = PassengerPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPassengers);
				}
			} else {
				$count = count($this->collPassengers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Passenger object to this object
	 * through the Passenger foreign key attribute.
	 *
	 * @param      Passenger $l Passenger
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPassenger(Passenger $l)
	{
		if ($this->collPassengers === null) {
			$this->initPassengers();
		}
		if (!in_array($l, $this->collPassengers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPassengers, $l);
			$l->setPerson($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Passengers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getPassengersJoinPassengerType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPassengers === null) {
			if ($this->isNew()) {
				$this->collPassengers = array();
			} else {

				$criteria->add(PassengerPeer::PERSON_ID, $this->id);

				$this->collPassengers = PassengerPeer::doSelectJoinPassengerType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PassengerPeer::PERSON_ID, $this->id);

			if (!isset($this->lastPassengerCriteria) || !$this->lastPassengerCriteria->equals($criteria)) {
				$this->collPassengers = PassengerPeer::doSelectJoinPassengerType($criteria, $con, $join_behavior);
			}
		}
		$this->lastPassengerCriteria = $criteria;

		return $this->collPassengers;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Passengers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getPassengersJoinRequester($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPassengers === null) {
			if ($this->isNew()) {
				$this->collPassengers = array();
			} else {

				$criteria->add(PassengerPeer::PERSON_ID, $this->id);

				$this->collPassengers = PassengerPeer::doSelectJoinRequester($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PassengerPeer::PERSON_ID, $this->id);

			if (!isset($this->lastPassengerCriteria) || !$this->lastPassengerCriteria->equals($criteria)) {
				$this->collPassengers = PassengerPeer::doSelectJoinRequester($criteria, $con, $join_behavior);
			}
		}
		$this->lastPassengerCriteria = $criteria;

		return $this->collPassengers;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Passengers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getPassengersJoinPassengerIllnessCategory($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPassengers === null) {
			if ($this->isNew()) {
				$this->collPassengers = array();
			} else {

				$criteria->add(PassengerPeer::PERSON_ID, $this->id);

				$this->collPassengers = PassengerPeer::doSelectJoinPassengerIllnessCategory($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PassengerPeer::PERSON_ID, $this->id);

			if (!isset($this->lastPassengerCriteria) || !$this->lastPassengerCriteria->equals($criteria)) {
				$this->collPassengers = PassengerPeer::doSelectJoinPassengerIllnessCategory($criteria, $con, $join_behavior);
			}
		}
		$this->lastPassengerCriteria = $criteria;

		return $this->collPassengers;
	}

	/**
	 * Clears out the collPasswordRequests collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPasswordRequests()
	 */
	public function clearPasswordRequests()
	{
		$this->collPasswordRequests = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPasswordRequests collection (array).
	 *
	 * By default this just sets the collPasswordRequests collection to an empty array (like clearcollPasswordRequests());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPasswordRequests()
	{
		$this->collPasswordRequests = array();
	}

	/**
	 * Gets an array of PasswordRequest objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related PasswordRequests from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PasswordRequest[]
	 * @throws     PropelException
	 */
	public function getPasswordRequests($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPasswordRequests === null) {
			if ($this->isNew()) {
			   $this->collPasswordRequests = array();
			} else {

				$criteria->add(PasswordRequestPeer::PERSON_ID, $this->id);

				PasswordRequestPeer::addSelectColumns($criteria);
				$this->collPasswordRequests = PasswordRequestPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PasswordRequestPeer::PERSON_ID, $this->id);

				PasswordRequestPeer::addSelectColumns($criteria);
				if (!isset($this->lastPasswordRequestCriteria) || !$this->lastPasswordRequestCriteria->equals($criteria)) {
					$this->collPasswordRequests = PasswordRequestPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPasswordRequestCriteria = $criteria;
		return $this->collPasswordRequests;
	}

	/**
	 * Returns the number of related PasswordRequest objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PasswordRequest objects.
	 * @throws     PropelException
	 */
	public function countPasswordRequests(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPasswordRequests === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PasswordRequestPeer::PERSON_ID, $this->id);

				$count = PasswordRequestPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PasswordRequestPeer::PERSON_ID, $this->id);

				if (!isset($this->lastPasswordRequestCriteria) || !$this->lastPasswordRequestCriteria->equals($criteria)) {
					$count = PasswordRequestPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPasswordRequests);
				}
			} else {
				$count = count($this->collPasswordRequests);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PasswordRequest object to this object
	 * through the PasswordRequest foreign key attribute.
	 *
	 * @param      PasswordRequest $l PasswordRequest
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPasswordRequest(PasswordRequest $l)
	{
		if ($this->collPasswordRequests === null) {
			$this->initPasswordRequests();
		}
		if (!in_array($l, $this->collPasswordRequests, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPasswordRequests, $l);
			$l->setPerson($this);
		}
	}

	/**
	 * Clears out the collPersonRoles collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPersonRoles()
	 */
	public function clearPersonRoles()
	{
		$this->collPersonRoles = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPersonRoles collection (array).
	 *
	 * By default this just sets the collPersonRoles collection to an empty array (like clearcollPersonRoles());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPersonRoles()
	{
		$this->collPersonRoles = array();
	}

	/**
	 * Gets an array of PersonRole objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related PersonRoles from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PersonRole[]
	 * @throws     PropelException
	 */
	public function getPersonRoles($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonRoles === null) {
			if ($this->isNew()) {
			   $this->collPersonRoles = array();
			} else {

				$criteria->add(PersonRolePeer::PERSON_ID, $this->id);

				PersonRolePeer::addSelectColumns($criteria);
				$this->collPersonRoles = PersonRolePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PersonRolePeer::PERSON_ID, $this->id);

				PersonRolePeer::addSelectColumns($criteria);
				if (!isset($this->lastPersonRoleCriteria) || !$this->lastPersonRoleCriteria->equals($criteria)) {
					$this->collPersonRoles = PersonRolePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPersonRoleCriteria = $criteria;
		return $this->collPersonRoles;
	}

	/**
	 * Returns the number of related PersonRole objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PersonRole objects.
	 * @throws     PropelException
	 */
	public function countPersonRoles(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPersonRoles === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PersonRolePeer::PERSON_ID, $this->id);

				$count = PersonRolePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PersonRolePeer::PERSON_ID, $this->id);

				if (!isset($this->lastPersonRoleCriteria) || !$this->lastPersonRoleCriteria->equals($criteria)) {
					$count = PersonRolePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPersonRoles);
				}
			} else {
				$count = count($this->collPersonRoles);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PersonRole object to this object
	 * through the PersonRole foreign key attribute.
	 *
	 * @param      PersonRole $l PersonRole
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPersonRole(PersonRole $l)
	{
		if ($this->collPersonRoles === null) {
			$this->initPersonRoles();
		}
		if (!in_array($l, $this->collPersonRoles, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPersonRoles, $l);
			$l->setPerson($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related PersonRoles from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getPersonRolesJoinRole($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonRoles === null) {
			if ($this->isNew()) {
				$this->collPersonRoles = array();
			} else {

				$criteria->add(PersonRolePeer::PERSON_ID, $this->id);

				$this->collPersonRoles = PersonRolePeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PersonRolePeer::PERSON_ID, $this->id);

			if (!isset($this->lastPersonRoleCriteria) || !$this->lastPersonRoleCriteria->equals($criteria)) {
				$this->collPersonRoles = PersonRolePeer::doSelectJoinRole($criteria, $con, $join_behavior);
			}
		}
		$this->lastPersonRoleCriteria = $criteria;

		return $this->collPersonRoles;
	}

	/**
	 * Gets a single PersonalNote object, which is related to this object by a one-to-one relationship.
	 *
	 * @param      PropelPDO $con
	 * @return     PersonalNote
	 * @throws     PropelException
	 */
	public function getPersonalNote(PropelPDO $con = null)
	{

		if ($this->singlePersonalNote === null && !$this->isNew()) {
			$this->singlePersonalNote = PersonalNotePeer::retrieveByPK($this->id, $con);
		}

		return $this->singlePersonalNote;
	}

	/**
	 * Sets a single PersonalNote object as related to this object by a one-to-one relationship.
	 *
	 * @param      PersonalNote $l PersonalNote
	 * @return     Person The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPersonalNote(PersonalNote $v)
	{
		$this->singlePersonalNote = $v;

		// Make sure that that the passed-in PersonalNote isn't already associated with this object
		if ($v->getPerson() === null) {
			$v->setPerson($this);
		}

		return $this;
	}

	/**
	 * Clears out the collRequesters collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addRequesters()
	 */
	public function clearRequesters()
	{
		$this->collRequesters = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collRequesters collection (array).
	 *
	 * By default this just sets the collRequesters collection to an empty array (like clearcollRequesters());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initRequesters()
	{
		$this->collRequesters = array();
	}

	/**
	 * Gets an array of Requester objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Person has previously been saved, it will retrieve
	 * related Requesters from storage. If this Person is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Requester[]
	 * @throws     PropelException
	 */
	public function getRequesters($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRequesters === null) {
			if ($this->isNew()) {
			   $this->collRequesters = array();
			} else {

				$criteria->add(RequesterPeer::PERSON_ID, $this->id);

				RequesterPeer::addSelectColumns($criteria);
				$this->collRequesters = RequesterPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(RequesterPeer::PERSON_ID, $this->id);

				RequesterPeer::addSelectColumns($criteria);
				if (!isset($this->lastRequesterCriteria) || !$this->lastRequesterCriteria->equals($criteria)) {
					$this->collRequesters = RequesterPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastRequesterCriteria = $criteria;
		return $this->collRequesters;
	}

	/**
	 * Returns the number of related Requester objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Requester objects.
	 * @throws     PropelException
	 */
	public function countRequesters(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collRequesters === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(RequesterPeer::PERSON_ID, $this->id);

				$count = RequesterPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(RequesterPeer::PERSON_ID, $this->id);

				if (!isset($this->lastRequesterCriteria) || !$this->lastRequesterCriteria->equals($criteria)) {
					$count = RequesterPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collRequesters);
				}
			} else {
				$count = count($this->collRequesters);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Requester object to this object
	 * through the Requester foreign key attribute.
	 *
	 * @param      Requester $l Requester
	 * @return     void
	 * @throws     PropelException
	 */
	public function addRequester(Requester $l)
	{
		if ($this->collRequesters === null) {
			$this->initRequesters();
		}
		if (!in_array($l, $this->collRequesters, true)) { // only add it if the **same** object is not already associated
			array_push($this->collRequesters, $l);
			$l->setPerson($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Person is new, it will return
	 * an empty collection; or if this Person has previously
	 * been saved, it will retrieve related Requesters from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Person.
	 */
	public function getRequestersJoinAgency($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PersonPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collRequesters === null) {
			if ($this->isNew()) {
				$this->collRequesters = array();
			} else {

				$criteria->add(RequesterPeer::PERSON_ID, $this->id);

				$this->collRequesters = RequesterPeer::doSelectJoinAgency($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(RequesterPeer::PERSON_ID, $this->id);

			if (!isset($this->lastRequesterCriteria) || !$this->lastRequesterCriteria->equals($criteria)) {
				$this->collRequesters = RequesterPeer::doSelectJoinAgency($criteria, $con, $join_behavior);
			}
		}
		$this->lastRequesterCriteria = $criteria;

		return $this->collRequesters;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collAfstaffs) {
				foreach ((array) $this->collAfstaffs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collBoardMembers) {
				foreach ((array) $this->collBoardMembers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCompanions) {
				foreach ((array) $this->collCompanions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collContacts) {
				foreach ((array) $this->collContacts as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDonors) {
				foreach ((array) $this->collDonors as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmailListPersons) {
				foreach ((array) $this->collEmailListPersons as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmailQueues) {
				foreach ((array) $this->collEmailQueues as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmailTemplates) {
				foreach ((array) $this->collEmailTemplates as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMembers) {
				foreach ((array) $this->collMembers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPassengers) {
				foreach ((array) $this->collPassengers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPasswordRequests) {
				foreach ((array) $this->collPasswordRequests as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPersonRoles) {
				foreach ((array) $this->collPersonRoles as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->singlePersonalNote) {
				$this->singlePersonalNote->clearAllReferences($deep);
			}
			if ($this->collRequesters) {
				foreach ((array) $this->collRequesters as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collAfstaffs = null;
		$this->collBoardMembers = null;
		$this->collCompanions = null;
		$this->collContacts = null;
		$this->collDonors = null;
		$this->collEmailListPersons = null;
		$this->collEmailQueues = null;
		$this->collEmailTemplates = null;
		$this->collMembers = null;
		$this->collPassengers = null;
		$this->collPasswordRequests = null;
		$this->collPersonRoles = null;
		$this->singlePersonalNote = null;
		$this->collRequesters = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BasePerson:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BasePerson::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BasePerson
