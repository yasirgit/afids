<?php

/**
 * Base class that represents a row from the 'vpo_request' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 01/05/11 08:19:52
 *
 * @package    lib.model.om
 */
abstract class BaseVpoRequest extends BaseObject  implements Persistent {


  const PEER = 'VpoRequestPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        VpoRequestPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the hazardous_cargo_flag field.
	 * @var        int
	 */
	protected $hazardous_cargo_flag;

	/**
	 * The value for the request_date field.
	 * @var        string
	 */
	protected $request_date;

	/**
	 * The value for the request_reason_desc field.
	 * @var        string
	 */
	protected $request_reason_desc;

	/**
	 * The value for the agency_name field.
	 * @var        string
	 */
	protected $agency_name;

	/**
	 * The value for the req_first_name field.
	 * @var        string
	 */
	protected $req_first_name;

	/**
	 * The value for the req_last_name field.
	 * @var        string
	 */
	protected $req_last_name;

	/**
	 * The value for the agency_division field.
	 * @var        string
	 */
	protected $agency_division;

	/**
	 * The value for the req_address1 field.
	 * @var        string
	 */
	protected $req_address1;

	/**
	 * The value for the req_address2 field.
	 * @var        string
	 */
	protected $req_address2;

	/**
	 * The value for the req_city field.
	 * @var        string
	 */
	protected $req_city;

	/**
	 * The value for the req_state field.
	 * @var        string
	 */
	protected $req_state;

	/**
	 * The value for the req_country field.
	 * @var        string
	 */
	protected $req_country;

	/**
	 * The value for the req_zipcode field.
	 * @var        string
	 */
	protected $req_zipcode;

	/**
	 * The value for the req_office_phone field.
	 * @var        string
	 */
	protected $req_office_phone;

	/**
	 * The value for the req_office_comment field.
	 * @var        string
	 */
	protected $req_office_comment;

	/**
	 * The value for the req_mobile_phone field.
	 * @var        string
	 */
	protected $req_mobile_phone;

	/**
	 * The value for the req_mobile_comment field.
	 * @var        string
	 */
	protected $req_mobile_comment;

	/**
	 * The value for the req_fax_phone field.
	 * @var        string
	 */
	protected $req_fax_phone;

	/**
	 * The value for the req_fax_comment field.
	 * @var        string
	 */
	protected $req_fax_comment;

	/**
	 * The value for the req_pager_phone field.
	 * @var        string
	 */
	protected $req_pager_phone;

	/**
	 * The value for the req_pager_comment field.
	 * @var        string
	 */
	protected $req_pager_comment;

	/**
	 * The value for the req_other_phone1 field.
	 * @var        string
	 */
	protected $req_other_phone1;

	/**
	 * The value for the req_other_comment1 field.
	 * @var        string
	 */
	protected $req_other_comment1;

	/**
	 * The value for the req_other_phone2 field.
	 * @var        string
	 */
	protected $req_other_phone2;

	/**
	 * The value for the req_other_comment2 field.
	 * @var        string
	 */
	protected $req_other_comment2;

	/**
	 * The value for the req_other_phone3 field.
	 * @var        int
	 */
	protected $req_other_phone3;

	/**
	 * The value for the req_other_comment3 field.
	 * @var        string
	 */
	protected $req_other_comment3;

	/**
	 * The value for the req_email field.
	 * @var        string
	 */
	protected $req_email;

	/**
	 * The value for the req_alt_email field.
	 * @var        string
	 */
	protected $req_alt_email;

	/**
	 * The value for the contact_notes field.
	 * @var        string
	 */
	protected $contact_notes;

	/**
	 * The value for the origin_city field.
	 * @var        string
	 */
	protected $origin_city;

	/**
	 * The value for the origin_state field.
	 * @var        string
	 */
	protected $origin_state;

	/**
	 * The value for the dest_city field.
	 * @var        string
	 */
	protected $dest_city;

	/**
	 * The value for the dest_state field.
	 * @var        string
	 */
	protected $dest_state;

	/**
	 * The value for the preferred_date field.
	 * @var        string
	 */
	protected $preferred_date;

	/**
	 * The value for the alternative_date field.
	 * @var        string
	 */
	protected $alternative_date;

	/**
	 * The value for the transport_type field.
	 * @var        string
	 */
	protected $transport_type;

	/**
	 * The value for the request_posted_date field.
	 * @var        string
	 */
	protected $request_posted_date;

	/**
	 * The value for the request_posted_to_afa_org_id field.
	 * @var        int
	 */
	protected $request_posted_to_afa_org_id;

	/**
	 * The value for the reques_processed_date field.
	 * @var        string
	 */
	protected $reques_processed_date;

	/**
	 * The value for the request_disposition field.
	 * @var        string
	 */
	protected $request_disposition;

	/**
	 * The value for the caller_name field.
	 * @var        string
	 */
	protected $caller_name;

	/**
	 * The value for the caller_phone field.
	 * @var        string
	 */
	protected $caller_phone;

	/**
	 * The value for the request_post_results field.
	 * @var        string
	 */
	protected $request_post_results;

	/**
	 * The value for the requester_vpo_user_id field.
	 * @var        string
	 */
	protected $requester_vpo_user_id;

	/**
	 * The value for the source field.
	 * @var        string
	 */
	protected $source;

	/**
	 * The value for the soap_post_from_afa_org_id field.
	 * @var        string
	 */
	protected $soap_post_from_afa_org_id;

	/**
	 * The value for the soap_post_request_id field.
	 * @var        int
	 */
	protected $soap_post_request_id;

	/**
	 * The value for the request_processed_by field.
	 * @var        int
	 */
	protected $request_processed_by;

	/**
	 * @var        array VpoRequestAnimal[] Collection to store aggregation of VpoRequestAnimal objects.
	 */
	protected $collVpoRequestAnimals;

	/**
	 * @var        Criteria The criteria used to select the current contents of collVpoRequestAnimals.
	 */
	private $lastVpoRequestAnimalCriteria = null;

	/**
	 * @var        array VpoRequestCargo[] Collection to store aggregation of VpoRequestCargo objects.
	 */
	protected $collVpoRequestCargos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collVpoRequestCargos.
	 */
	private $lastVpoRequestCargoCriteria = null;

	/**
	 * @var        array VpoRequestPassenger[] Collection to store aggregation of VpoRequestPassenger objects.
	 */
	protected $collVpoRequestPassengers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collVpoRequestPassengers.
	 */
	private $lastVpoRequestPassengerCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseVpoRequest object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [hazardous_cargo_flag] column value.
	 * 
	 * @return     int
	 */
	public function getHazardousCargoFlag()
	{
		return $this->hazardous_cargo_flag;
	}

	/**
	 * Get the [optionally formatted] temporal [request_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRequestDate($format = 'Y-m-d')
	{
		if ($this->request_date === null) {
			return null;
		}


		if ($this->request_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->request_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->request_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [request_reason_desc] column value.
	 * 
	 * @return     string
	 */
	public function getRequestReasonDesc()
	{
		return $this->request_reason_desc;
	}

	/**
	 * Get the [agency_name] column value.
	 * 
	 * @return     string
	 */
	public function getAgencyName()
	{
		return $this->agency_name;
	}

	/**
	 * Get the [req_first_name] column value.
	 * 
	 * @return     string
	 */
	public function getReqFirstName()
	{
		return $this->req_first_name;
	}

	/**
	 * Get the [req_last_name] column value.
	 * 
	 * @return     string
	 */
	public function getReqLastName()
	{
		return $this->req_last_name;
	}

	/**
	 * Get the [agency_division] column value.
	 * 
	 * @return     string
	 */
	public function getAgencyDivision()
	{
		return $this->agency_division;
	}

	/**
	 * Get the [req_address1] column value.
	 * 
	 * @return     string
	 */
	public function getReqAddress1()
	{
		return $this->req_address1;
	}

	/**
	 * Get the [req_address2] column value.
	 * 
	 * @return     string
	 */
	public function getReqAddress2()
	{
		return $this->req_address2;
	}

	/**
	 * Get the [req_city] column value.
	 * 
	 * @return     string
	 */
	public function getReqCity()
	{
		return $this->req_city;
	}

	/**
	 * Get the [req_state] column value.
	 * 
	 * @return     string
	 */
	public function getReqState()
	{
		return $this->req_state;
	}

	/**
	 * Get the [req_country] column value.
	 * 
	 * @return     string
	 */
	public function getReqCountry()
	{
		return $this->req_country;
	}

	/**
	 * Get the [req_zipcode] column value.
	 * 
	 * @return     string
	 */
	public function getReqZipcode()
	{
		return $this->req_zipcode;
	}

	/**
	 * Get the [req_office_phone] column value.
	 * 
	 * @return     string
	 */
	public function getReqOfficePhone()
	{
		return $this->req_office_phone;
	}

	/**
	 * Get the [req_office_comment] column value.
	 * 
	 * @return     string
	 */
	public function getReqOfficeComment()
	{
		return $this->req_office_comment;
	}

	/**
	 * Get the [req_mobile_phone] column value.
	 * 
	 * @return     string
	 */
	public function getReqMobilePhone()
	{
		return $this->req_mobile_phone;
	}

	/**
	 * Get the [req_mobile_comment] column value.
	 * 
	 * @return     string
	 */
	public function getReqMobileComment()
	{
		return $this->req_mobile_comment;
	}

	/**
	 * Get the [req_fax_phone] column value.
	 * 
	 * @return     string
	 */
	public function getReqFaxPhone()
	{
		return $this->req_fax_phone;
	}

	/**
	 * Get the [req_fax_comment] column value.
	 * 
	 * @return     string
	 */
	public function getReqFaxComment()
	{
		return $this->req_fax_comment;
	}

	/**
	 * Get the [req_pager_phone] column value.
	 * 
	 * @return     string
	 */
	public function getReqPagerPhone()
	{
		return $this->req_pager_phone;
	}

	/**
	 * Get the [req_pager_comment] column value.
	 * 
	 * @return     string
	 */
	public function getReqPagerComment()
	{
		return $this->req_pager_comment;
	}

	/**
	 * Get the [req_other_phone1] column value.
	 * 
	 * @return     string
	 */
	public function getReqOtherPhone1()
	{
		return $this->req_other_phone1;
	}

	/**
	 * Get the [req_other_comment1] column value.
	 * 
	 * @return     string
	 */
	public function getReqOtherComment1()
	{
		return $this->req_other_comment1;
	}

	/**
	 * Get the [req_other_phone2] column value.
	 * 
	 * @return     string
	 */
	public function getReqOtherPhone2()
	{
		return $this->req_other_phone2;
	}

	/**
	 * Get the [req_other_comment2] column value.
	 * 
	 * @return     string
	 */
	public function getReqOtherComment2()
	{
		return $this->req_other_comment2;
	}

	/**
	 * Get the [req_other_phone3] column value.
	 * 
	 * @return     int
	 */
	public function getReqOtherPhone3()
	{
		return $this->req_other_phone3;
	}

	/**
	 * Get the [req_other_comment3] column value.
	 * 
	 * @return     string
	 */
	public function getReqOtherComment3()
	{
		return $this->req_other_comment3;
	}

	/**
	 * Get the [req_email] column value.
	 * 
	 * @return     string
	 */
	public function getReqEmail()
	{
		return $this->req_email;
	}

	/**
	 * Get the [req_alt_email] column value.
	 * 
	 * @return     string
	 */
	public function getReqAltEmail()
	{
		return $this->req_alt_email;
	}

	/**
	 * Get the [contact_notes] column value.
	 * 
	 * @return     string
	 */
	public function getContactNotes()
	{
		return $this->contact_notes;
	}

	/**
	 * Get the [origin_city] column value.
	 * 
	 * @return     string
	 */
	public function getOriginCity()
	{
		return $this->origin_city;
	}

	/**
	 * Get the [origin_state] column value.
	 * 
	 * @return     string
	 */
	public function getOriginState()
	{
		return $this->origin_state;
	}

	/**
	 * Get the [dest_city] column value.
	 * 
	 * @return     string
	 */
	public function getDestCity()
	{
		return $this->dest_city;
	}

	/**
	 * Get the [dest_state] column value.
	 * 
	 * @return     string
	 */
	public function getDestState()
	{
		return $this->dest_state;
	}

	/**
	 * Get the [optionally formatted] temporal [preferred_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getPreferredDate($format = 'Y-m-d')
	{
		if ($this->preferred_date === null) {
			return null;
		}


		if ($this->preferred_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->preferred_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->preferred_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [alternative_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getAlternativeDate($format = 'Y-m-d')
	{
		if ($this->alternative_date === null) {
			return null;
		}


		if ($this->alternative_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->alternative_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->alternative_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [transport_type] column value.
	 * 
	 * @return     string
	 */
	public function getTransportType()
	{
		return $this->transport_type;
	}

	/**
	 * Get the [optionally formatted] temporal [request_posted_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRequestPostedDate($format = 'Y-m-d')
	{
		if ($this->request_posted_date === null) {
			return null;
		}


		if ($this->request_posted_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->request_posted_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->request_posted_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [request_posted_to_afa_org_id] column value.
	 * 
	 * @return     int
	 */
	public function getRequestPostedToAfaOrgId()
	{
		return $this->request_posted_to_afa_org_id;
	}

	/**
	 * Get the [optionally formatted] temporal [reques_processed_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRequesProcessedDate($format = 'Y-m-d')
	{
		if ($this->reques_processed_date === null) {
			return null;
		}


		if ($this->reques_processed_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->reques_processed_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->reques_processed_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [request_disposition] column value.
	 * 
	 * @return     string
	 */
	public function getRequestDisposition()
	{
		return $this->request_disposition;
	}

	/**
	 * Get the [caller_name] column value.
	 * 
	 * @return     string
	 */
	public function getCallerName()
	{
		return $this->caller_name;
	}

	/**
	 * Get the [caller_phone] column value.
	 * 
	 * @return     string
	 */
	public function getCallerPhone()
	{
		return $this->caller_phone;
	}

	/**
	 * Get the [request_post_results] column value.
	 * 
	 * @return     string
	 */
	public function getRequestPostResults()
	{
		return $this->request_post_results;
	}

	/**
	 * Get the [requester_vpo_user_id] column value.
	 * 
	 * @return     string
	 */
	public function getRequesterVpoUserId()
	{
		return $this->requester_vpo_user_id;
	}

	/**
	 * Get the [source] column value.
	 * 
	 * @return     string
	 */
	public function getSource()
	{
		return $this->source;
	}

	/**
	 * Get the [soap_post_from_afa_org_id] column value.
	 * 
	 * @return     string
	 */
	public function getSoapPostFromAfaOrgId()
	{
		return $this->soap_post_from_afa_org_id;
	}

	/**
	 * Get the [soap_post_request_id] column value.
	 * 
	 * @return     int
	 */
	public function getSoapPostRequestId()
	{
		return $this->soap_post_request_id;
	}

	/**
	 * Get the [request_processed_by] column value.
	 * 
	 * @return     int
	 */
	public function getRequestProcessedBy()
	{
		return $this->request_processed_by;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = VpoRequestPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [hazardous_cargo_flag] column.
	 * 
	 * @param      int $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setHazardousCargoFlag($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->hazardous_cargo_flag !== $v) {
			$this->hazardous_cargo_flag = $v;
			$this->modifiedColumns[] = VpoRequestPeer::HAZARDOUS_CARGO_FLAG;
		}

		return $this;
	} // setHazardousCargoFlag()

	/**
	 * Sets the value of [request_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setRequestDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->request_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->request_date !== null && $tmpDt = new DateTime($this->request_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->request_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = VpoRequestPeer::REQUEST_DATE;
			}
		} // if either are not null

		return $this;
	} // setRequestDate()

	/**
	 * Set the value of [request_reason_desc] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setRequestReasonDesc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->request_reason_desc !== $v) {
			$this->request_reason_desc = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQUEST_REASON_DESC;
		}

		return $this;
	} // setRequestReasonDesc()

	/**
	 * Set the value of [agency_name] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setAgencyName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->agency_name !== $v) {
			$this->agency_name = $v;
			$this->modifiedColumns[] = VpoRequestPeer::AGENCY_NAME;
		}

		return $this;
	} // setAgencyName()

	/**
	 * Set the value of [req_first_name] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqFirstName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_first_name !== $v) {
			$this->req_first_name = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_FIRST_NAME;
		}

		return $this;
	} // setReqFirstName()

	/**
	 * Set the value of [req_last_name] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqLastName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_last_name !== $v) {
			$this->req_last_name = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_LAST_NAME;
		}

		return $this;
	} // setReqLastName()

	/**
	 * Set the value of [agency_division] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setAgencyDivision($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->agency_division !== $v) {
			$this->agency_division = $v;
			$this->modifiedColumns[] = VpoRequestPeer::AGENCY_DIVISION;
		}

		return $this;
	} // setAgencyDivision()

	/**
	 * Set the value of [req_address1] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqAddress1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_address1 !== $v) {
			$this->req_address1 = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_ADDRESS1;
		}

		return $this;
	} // setReqAddress1()

	/**
	 * Set the value of [req_address2] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqAddress2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_address2 !== $v) {
			$this->req_address2 = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_ADDRESS2;
		}

		return $this;
	} // setReqAddress2()

	/**
	 * Set the value of [req_city] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_city !== $v) {
			$this->req_city = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_CITY;
		}

		return $this;
	} // setReqCity()

	/**
	 * Set the value of [req_state] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_state !== $v) {
			$this->req_state = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_STATE;
		}

		return $this;
	} // setReqState()

	/**
	 * Set the value of [req_country] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqCountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_country !== $v) {
			$this->req_country = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_COUNTRY;
		}

		return $this;
	} // setReqCountry()

	/**
	 * Set the value of [req_zipcode] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqZipcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_zipcode !== $v) {
			$this->req_zipcode = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_ZIPCODE;
		}

		return $this;
	} // setReqZipcode()

	/**
	 * Set the value of [req_office_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqOfficePhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_office_phone !== $v) {
			$this->req_office_phone = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_OFFICE_PHONE;
		}

		return $this;
	} // setReqOfficePhone()

	/**
	 * Set the value of [req_office_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqOfficeComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_office_comment !== $v) {
			$this->req_office_comment = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_OFFICE_COMMENT;
		}

		return $this;
	} // setReqOfficeComment()

	/**
	 * Set the value of [req_mobile_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqMobilePhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_mobile_phone !== $v) {
			$this->req_mobile_phone = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_MOBILE_PHONE;
		}

		return $this;
	} // setReqMobilePhone()

	/**
	 * Set the value of [req_mobile_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqMobileComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_mobile_comment !== $v) {
			$this->req_mobile_comment = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_MOBILE_COMMENT;
		}

		return $this;
	} // setReqMobileComment()

	/**
	 * Set the value of [req_fax_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqFaxPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_fax_phone !== $v) {
			$this->req_fax_phone = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_FAX_PHONE;
		}

		return $this;
	} // setReqFaxPhone()

	/**
	 * Set the value of [req_fax_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqFaxComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_fax_comment !== $v) {
			$this->req_fax_comment = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_FAX_COMMENT;
		}

		return $this;
	} // setReqFaxComment()

	/**
	 * Set the value of [req_pager_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqPagerPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_pager_phone !== $v) {
			$this->req_pager_phone = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_PAGER_PHONE;
		}

		return $this;
	} // setReqPagerPhone()

	/**
	 * Set the value of [req_pager_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqPagerComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_pager_comment !== $v) {
			$this->req_pager_comment = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_PAGER_COMMENT;
		}

		return $this;
	} // setReqPagerComment()

	/**
	 * Set the value of [req_other_phone1] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqOtherPhone1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_other_phone1 !== $v) {
			$this->req_other_phone1 = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_OTHER_PHONE1;
		}

		return $this;
	} // setReqOtherPhone1()

	/**
	 * Set the value of [req_other_comment1] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqOtherComment1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_other_comment1 !== $v) {
			$this->req_other_comment1 = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_OTHER_COMMENT1;
		}

		return $this;
	} // setReqOtherComment1()

	/**
	 * Set the value of [req_other_phone2] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqOtherPhone2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_other_phone2 !== $v) {
			$this->req_other_phone2 = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_OTHER_PHONE2;
		}

		return $this;
	} // setReqOtherPhone2()

	/**
	 * Set the value of [req_other_comment2] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqOtherComment2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_other_comment2 !== $v) {
			$this->req_other_comment2 = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_OTHER_COMMENT2;
		}

		return $this;
	} // setReqOtherComment2()

	/**
	 * Set the value of [req_other_phone3] column.
	 * 
	 * @param      int $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqOtherPhone3($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->req_other_phone3 !== $v) {
			$this->req_other_phone3 = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_OTHER_PHONE3;
		}

		return $this;
	} // setReqOtherPhone3()

	/**
	 * Set the value of [req_other_comment3] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqOtherComment3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_other_comment3 !== $v) {
			$this->req_other_comment3 = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_OTHER_COMMENT3;
		}

		return $this;
	} // setReqOtherComment3()

	/**
	 * Set the value of [req_email] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_email !== $v) {
			$this->req_email = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_EMAIL;
		}

		return $this;
	} // setReqEmail()

	/**
	 * Set the value of [req_alt_email] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setReqAltEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->req_alt_email !== $v) {
			$this->req_alt_email = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQ_ALT_EMAIL;
		}

		return $this;
	} // setReqAltEmail()

	/**
	 * Set the value of [contact_notes] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setContactNotes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contact_notes !== $v) {
			$this->contact_notes = $v;
			$this->modifiedColumns[] = VpoRequestPeer::CONTACT_NOTES;
		}

		return $this;
	} // setContactNotes()

	/**
	 * Set the value of [origin_city] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setOriginCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->origin_city !== $v) {
			$this->origin_city = $v;
			$this->modifiedColumns[] = VpoRequestPeer::ORIGIN_CITY;
		}

		return $this;
	} // setOriginCity()

	/**
	 * Set the value of [origin_state] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setOriginState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->origin_state !== $v) {
			$this->origin_state = $v;
			$this->modifiedColumns[] = VpoRequestPeer::ORIGIN_STATE;
		}

		return $this;
	} // setOriginState()

	/**
	 * Set the value of [dest_city] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setDestCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dest_city !== $v) {
			$this->dest_city = $v;
			$this->modifiedColumns[] = VpoRequestPeer::DEST_CITY;
		}

		return $this;
	} // setDestCity()

	/**
	 * Set the value of [dest_state] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setDestState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dest_state !== $v) {
			$this->dest_state = $v;
			$this->modifiedColumns[] = VpoRequestPeer::DEST_STATE;
		}

		return $this;
	} // setDestState()

	/**
	 * Sets the value of [preferred_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setPreferredDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->preferred_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->preferred_date !== null && $tmpDt = new DateTime($this->preferred_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->preferred_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = VpoRequestPeer::PREFERRED_DATE;
			}
		} // if either are not null

		return $this;
	} // setPreferredDate()

	/**
	 * Sets the value of [alternative_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setAlternativeDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->alternative_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->alternative_date !== null && $tmpDt = new DateTime($this->alternative_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->alternative_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = VpoRequestPeer::ALTERNATIVE_DATE;
			}
		} // if either are not null

		return $this;
	} // setAlternativeDate()

	/**
	 * Set the value of [transport_type] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setTransportType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->transport_type !== $v) {
			$this->transport_type = $v;
			$this->modifiedColumns[] = VpoRequestPeer::TRANSPORT_TYPE;
		}

		return $this;
	} // setTransportType()

	/**
	 * Sets the value of [request_posted_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setRequestPostedDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->request_posted_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->request_posted_date !== null && $tmpDt = new DateTime($this->request_posted_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->request_posted_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = VpoRequestPeer::REQUEST_POSTED_DATE;
			}
		} // if either are not null

		return $this;
	} // setRequestPostedDate()

	/**
	 * Set the value of [request_posted_to_afa_org_id] column.
	 * 
	 * @param      int $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setRequestPostedToAfaOrgId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->request_posted_to_afa_org_id !== $v) {
			$this->request_posted_to_afa_org_id = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQUEST_POSTED_TO_AFA_ORG_ID;
		}

		return $this;
	} // setRequestPostedToAfaOrgId()

	/**
	 * Sets the value of [reques_processed_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setRequesProcessedDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->reques_processed_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->reques_processed_date !== null && $tmpDt = new DateTime($this->reques_processed_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->reques_processed_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = VpoRequestPeer::REQUES_PROCESSED_DATE;
			}
		} // if either are not null

		return $this;
	} // setRequesProcessedDate()

	/**
	 * Set the value of [request_disposition] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setRequestDisposition($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->request_disposition !== $v) {
			$this->request_disposition = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQUEST_DISPOSITION;
		}

		return $this;
	} // setRequestDisposition()

	/**
	 * Set the value of [caller_name] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setCallerName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->caller_name !== $v) {
			$this->caller_name = $v;
			$this->modifiedColumns[] = VpoRequestPeer::CALLER_NAME;
		}

		return $this;
	} // setCallerName()

	/**
	 * Set the value of [caller_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setCallerPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->caller_phone !== $v) {
			$this->caller_phone = $v;
			$this->modifiedColumns[] = VpoRequestPeer::CALLER_PHONE;
		}

		return $this;
	} // setCallerPhone()

	/**
	 * Set the value of [request_post_results] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setRequestPostResults($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->request_post_results !== $v) {
			$this->request_post_results = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQUEST_POST_RESULTS;
		}

		return $this;
	} // setRequestPostResults()

	/**
	 * Set the value of [requester_vpo_user_id] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setRequesterVpoUserId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->requester_vpo_user_id !== $v) {
			$this->requester_vpo_user_id = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQUESTER_VPO_USER_ID;
		}

		return $this;
	} // setRequesterVpoUserId()

	/**
	 * Set the value of [source] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setSource($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->source !== $v) {
			$this->source = $v;
			$this->modifiedColumns[] = VpoRequestPeer::SOURCE;
		}

		return $this;
	} // setSource()

	/**
	 * Set the value of [soap_post_from_afa_org_id] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setSoapPostFromAfaOrgId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->soap_post_from_afa_org_id !== $v) {
			$this->soap_post_from_afa_org_id = $v;
			$this->modifiedColumns[] = VpoRequestPeer::SOAP_POST_FROM_AFA_ORG_ID;
		}

		return $this;
	} // setSoapPostFromAfaOrgId()

	/**
	 * Set the value of [soap_post_request_id] column.
	 * 
	 * @param      int $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setSoapPostRequestId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->soap_post_request_id !== $v) {
			$this->soap_post_request_id = $v;
			$this->modifiedColumns[] = VpoRequestPeer::SOAP_POST_REQUEST_ID;
		}

		return $this;
	} // setSoapPostRequestId()

	/**
	 * Set the value of [request_processed_by] column.
	 * 
	 * @param      int $v new value
	 * @return     VpoRequest The current object (for fluent API support)
	 */
	public function setRequestProcessedBy($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->request_processed_by !== $v) {
			$this->request_processed_by = $v;
			$this->modifiedColumns[] = VpoRequestPeer::REQUEST_PROCESSED_BY;
		}

		return $this;
	} // setRequestProcessedBy()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->hazardous_cargo_flag = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->request_date = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->request_reason_desc = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->agency_name = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->req_first_name = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->req_last_name = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->agency_division = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->req_address1 = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->req_address2 = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->req_city = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->req_state = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->req_country = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->req_zipcode = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->req_office_phone = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->req_office_comment = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->req_mobile_phone = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->req_mobile_comment = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->req_fax_phone = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->req_fax_comment = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->req_pager_phone = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->req_pager_comment = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->req_other_phone1 = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->req_other_comment1 = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->req_other_phone2 = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->req_other_comment2 = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->req_other_phone3 = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->req_other_comment3 = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->req_email = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->req_alt_email = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->contact_notes = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->origin_city = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->origin_state = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->dest_city = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->dest_state = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->preferred_date = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->alternative_date = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->transport_type = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->request_posted_date = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->request_posted_to_afa_org_id = ($row[$startcol + 39] !== null) ? (int) $row[$startcol + 39] : null;
			$this->reques_processed_date = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->request_disposition = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->caller_name = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
			$this->caller_phone = ($row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
			$this->request_post_results = ($row[$startcol + 44] !== null) ? (string) $row[$startcol + 44] : null;
			$this->requester_vpo_user_id = ($row[$startcol + 45] !== null) ? (string) $row[$startcol + 45] : null;
			$this->source = ($row[$startcol + 46] !== null) ? (string) $row[$startcol + 46] : null;
			$this->soap_post_from_afa_org_id = ($row[$startcol + 47] !== null) ? (string) $row[$startcol + 47] : null;
			$this->soap_post_request_id = ($row[$startcol + 48] !== null) ? (int) $row[$startcol + 48] : null;
			$this->request_processed_by = ($row[$startcol + 49] !== null) ? (int) $row[$startcol + 49] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 50; // 50 = VpoRequestPeer::NUM_COLUMNS - VpoRequestPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating VpoRequest object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(VpoRequestPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = VpoRequestPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collVpoRequestAnimals = null;
			$this->lastVpoRequestAnimalCriteria = null;

			$this->collVpoRequestCargos = null;
			$this->lastVpoRequestCargoCriteria = null;

			$this->collVpoRequestPassengers = null;
			$this->lastVpoRequestPassengerCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseVpoRequest:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(VpoRequestPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			VpoRequestPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseVpoRequest:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseVpoRequest:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(VpoRequestPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseVpoRequest:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			VpoRequestPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = VpoRequestPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = VpoRequestPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += VpoRequestPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collVpoRequestAnimals !== null) {
				foreach ($this->collVpoRequestAnimals as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collVpoRequestCargos !== null) {
				foreach ($this->collVpoRequestCargos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collVpoRequestPassengers !== null) {
				foreach ($this->collVpoRequestPassengers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = VpoRequestPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collVpoRequestAnimals !== null) {
					foreach ($this->collVpoRequestAnimals as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collVpoRequestCargos !== null) {
					foreach ($this->collVpoRequestCargos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collVpoRequestPassengers !== null) {
					foreach ($this->collVpoRequestPassengers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = VpoRequestPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getHazardousCargoFlag();
				break;
			case 2:
				return $this->getRequestDate();
				break;
			case 3:
				return $this->getRequestReasonDesc();
				break;
			case 4:
				return $this->getAgencyName();
				break;
			case 5:
				return $this->getReqFirstName();
				break;
			case 6:
				return $this->getReqLastName();
				break;
			case 7:
				return $this->getAgencyDivision();
				break;
			case 8:
				return $this->getReqAddress1();
				break;
			case 9:
				return $this->getReqAddress2();
				break;
			case 10:
				return $this->getReqCity();
				break;
			case 11:
				return $this->getReqState();
				break;
			case 12:
				return $this->getReqCountry();
				break;
			case 13:
				return $this->getReqZipcode();
				break;
			case 14:
				return $this->getReqOfficePhone();
				break;
			case 15:
				return $this->getReqOfficeComment();
				break;
			case 16:
				return $this->getReqMobilePhone();
				break;
			case 17:
				return $this->getReqMobileComment();
				break;
			case 18:
				return $this->getReqFaxPhone();
				break;
			case 19:
				return $this->getReqFaxComment();
				break;
			case 20:
				return $this->getReqPagerPhone();
				break;
			case 21:
				return $this->getReqPagerComment();
				break;
			case 22:
				return $this->getReqOtherPhone1();
				break;
			case 23:
				return $this->getReqOtherComment1();
				break;
			case 24:
				return $this->getReqOtherPhone2();
				break;
			case 25:
				return $this->getReqOtherComment2();
				break;
			case 26:
				return $this->getReqOtherPhone3();
				break;
			case 27:
				return $this->getReqOtherComment3();
				break;
			case 28:
				return $this->getReqEmail();
				break;
			case 29:
				return $this->getReqAltEmail();
				break;
			case 30:
				return $this->getContactNotes();
				break;
			case 31:
				return $this->getOriginCity();
				break;
			case 32:
				return $this->getOriginState();
				break;
			case 33:
				return $this->getDestCity();
				break;
			case 34:
				return $this->getDestState();
				break;
			case 35:
				return $this->getPreferredDate();
				break;
			case 36:
				return $this->getAlternativeDate();
				break;
			case 37:
				return $this->getTransportType();
				break;
			case 38:
				return $this->getRequestPostedDate();
				break;
			case 39:
				return $this->getRequestPostedToAfaOrgId();
				break;
			case 40:
				return $this->getRequesProcessedDate();
				break;
			case 41:
				return $this->getRequestDisposition();
				break;
			case 42:
				return $this->getCallerName();
				break;
			case 43:
				return $this->getCallerPhone();
				break;
			case 44:
				return $this->getRequestPostResults();
				break;
			case 45:
				return $this->getRequesterVpoUserId();
				break;
			case 46:
				return $this->getSource();
				break;
			case 47:
				return $this->getSoapPostFromAfaOrgId();
				break;
			case 48:
				return $this->getSoapPostRequestId();
				break;
			case 49:
				return $this->getRequestProcessedBy();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = VpoRequestPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getHazardousCargoFlag(),
			$keys[2] => $this->getRequestDate(),
			$keys[3] => $this->getRequestReasonDesc(),
			$keys[4] => $this->getAgencyName(),
			$keys[5] => $this->getReqFirstName(),
			$keys[6] => $this->getReqLastName(),
			$keys[7] => $this->getAgencyDivision(),
			$keys[8] => $this->getReqAddress1(),
			$keys[9] => $this->getReqAddress2(),
			$keys[10] => $this->getReqCity(),
			$keys[11] => $this->getReqState(),
			$keys[12] => $this->getReqCountry(),
			$keys[13] => $this->getReqZipcode(),
			$keys[14] => $this->getReqOfficePhone(),
			$keys[15] => $this->getReqOfficeComment(),
			$keys[16] => $this->getReqMobilePhone(),
			$keys[17] => $this->getReqMobileComment(),
			$keys[18] => $this->getReqFaxPhone(),
			$keys[19] => $this->getReqFaxComment(),
			$keys[20] => $this->getReqPagerPhone(),
			$keys[21] => $this->getReqPagerComment(),
			$keys[22] => $this->getReqOtherPhone1(),
			$keys[23] => $this->getReqOtherComment1(),
			$keys[24] => $this->getReqOtherPhone2(),
			$keys[25] => $this->getReqOtherComment2(),
			$keys[26] => $this->getReqOtherPhone3(),
			$keys[27] => $this->getReqOtherComment3(),
			$keys[28] => $this->getReqEmail(),
			$keys[29] => $this->getReqAltEmail(),
			$keys[30] => $this->getContactNotes(),
			$keys[31] => $this->getOriginCity(),
			$keys[32] => $this->getOriginState(),
			$keys[33] => $this->getDestCity(),
			$keys[34] => $this->getDestState(),
			$keys[35] => $this->getPreferredDate(),
			$keys[36] => $this->getAlternativeDate(),
			$keys[37] => $this->getTransportType(),
			$keys[38] => $this->getRequestPostedDate(),
			$keys[39] => $this->getRequestPostedToAfaOrgId(),
			$keys[40] => $this->getRequesProcessedDate(),
			$keys[41] => $this->getRequestDisposition(),
			$keys[42] => $this->getCallerName(),
			$keys[43] => $this->getCallerPhone(),
			$keys[44] => $this->getRequestPostResults(),
			$keys[45] => $this->getRequesterVpoUserId(),
			$keys[46] => $this->getSource(),
			$keys[47] => $this->getSoapPostFromAfaOrgId(),
			$keys[48] => $this->getSoapPostRequestId(),
			$keys[49] => $this->getRequestProcessedBy(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = VpoRequestPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setHazardousCargoFlag($value);
				break;
			case 2:
				$this->setRequestDate($value);
				break;
			case 3:
				$this->setRequestReasonDesc($value);
				break;
			case 4:
				$this->setAgencyName($value);
				break;
			case 5:
				$this->setReqFirstName($value);
				break;
			case 6:
				$this->setReqLastName($value);
				break;
			case 7:
				$this->setAgencyDivision($value);
				break;
			case 8:
				$this->setReqAddress1($value);
				break;
			case 9:
				$this->setReqAddress2($value);
				break;
			case 10:
				$this->setReqCity($value);
				break;
			case 11:
				$this->setReqState($value);
				break;
			case 12:
				$this->setReqCountry($value);
				break;
			case 13:
				$this->setReqZipcode($value);
				break;
			case 14:
				$this->setReqOfficePhone($value);
				break;
			case 15:
				$this->setReqOfficeComment($value);
				break;
			case 16:
				$this->setReqMobilePhone($value);
				break;
			case 17:
				$this->setReqMobileComment($value);
				break;
			case 18:
				$this->setReqFaxPhone($value);
				break;
			case 19:
				$this->setReqFaxComment($value);
				break;
			case 20:
				$this->setReqPagerPhone($value);
				break;
			case 21:
				$this->setReqPagerComment($value);
				break;
			case 22:
				$this->setReqOtherPhone1($value);
				break;
			case 23:
				$this->setReqOtherComment1($value);
				break;
			case 24:
				$this->setReqOtherPhone2($value);
				break;
			case 25:
				$this->setReqOtherComment2($value);
				break;
			case 26:
				$this->setReqOtherPhone3($value);
				break;
			case 27:
				$this->setReqOtherComment3($value);
				break;
			case 28:
				$this->setReqEmail($value);
				break;
			case 29:
				$this->setReqAltEmail($value);
				break;
			case 30:
				$this->setContactNotes($value);
				break;
			case 31:
				$this->setOriginCity($value);
				break;
			case 32:
				$this->setOriginState($value);
				break;
			case 33:
				$this->setDestCity($value);
				break;
			case 34:
				$this->setDestState($value);
				break;
			case 35:
				$this->setPreferredDate($value);
				break;
			case 36:
				$this->setAlternativeDate($value);
				break;
			case 37:
				$this->setTransportType($value);
				break;
			case 38:
				$this->setRequestPostedDate($value);
				break;
			case 39:
				$this->setRequestPostedToAfaOrgId($value);
				break;
			case 40:
				$this->setRequesProcessedDate($value);
				break;
			case 41:
				$this->setRequestDisposition($value);
				break;
			case 42:
				$this->setCallerName($value);
				break;
			case 43:
				$this->setCallerPhone($value);
				break;
			case 44:
				$this->setRequestPostResults($value);
				break;
			case 45:
				$this->setRequesterVpoUserId($value);
				break;
			case 46:
				$this->setSource($value);
				break;
			case 47:
				$this->setSoapPostFromAfaOrgId($value);
				break;
			case 48:
				$this->setSoapPostRequestId($value);
				break;
			case 49:
				$this->setRequestProcessedBy($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = VpoRequestPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setHazardousCargoFlag($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setRequestDate($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setRequestReasonDesc($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setAgencyName($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setReqFirstName($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setReqLastName($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setAgencyDivision($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setReqAddress1($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setReqAddress2($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setReqCity($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setReqState($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setReqCountry($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setReqZipcode($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setReqOfficePhone($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setReqOfficeComment($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setReqMobilePhone($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setReqMobileComment($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setReqFaxPhone($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setReqFaxComment($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setReqPagerPhone($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setReqPagerComment($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setReqOtherPhone1($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setReqOtherComment1($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setReqOtherPhone2($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setReqOtherComment2($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setReqOtherPhone3($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setReqOtherComment3($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setReqEmail($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setReqAltEmail($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setContactNotes($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setOriginCity($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setOriginState($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setDestCity($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setDestState($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setPreferredDate($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setAlternativeDate($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setTransportType($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setRequestPostedDate($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setRequestPostedToAfaOrgId($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setRequesProcessedDate($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setRequestDisposition($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setCallerName($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setCallerPhone($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setRequestPostResults($arr[$keys[44]]);
		if (array_key_exists($keys[45], $arr)) $this->setRequesterVpoUserId($arr[$keys[45]]);
		if (array_key_exists($keys[46], $arr)) $this->setSource($arr[$keys[46]]);
		if (array_key_exists($keys[47], $arr)) $this->setSoapPostFromAfaOrgId($arr[$keys[47]]);
		if (array_key_exists($keys[48], $arr)) $this->setSoapPostRequestId($arr[$keys[48]]);
		if (array_key_exists($keys[49], $arr)) $this->setRequestProcessedBy($arr[$keys[49]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(VpoRequestPeer::DATABASE_NAME);

		if ($this->isColumnModified(VpoRequestPeer::ID)) $criteria->add(VpoRequestPeer::ID, $this->id);
		if ($this->isColumnModified(VpoRequestPeer::HAZARDOUS_CARGO_FLAG)) $criteria->add(VpoRequestPeer::HAZARDOUS_CARGO_FLAG, $this->hazardous_cargo_flag);
		if ($this->isColumnModified(VpoRequestPeer::REQUEST_DATE)) $criteria->add(VpoRequestPeer::REQUEST_DATE, $this->request_date);
		if ($this->isColumnModified(VpoRequestPeer::REQUEST_REASON_DESC)) $criteria->add(VpoRequestPeer::REQUEST_REASON_DESC, $this->request_reason_desc);
		if ($this->isColumnModified(VpoRequestPeer::AGENCY_NAME)) $criteria->add(VpoRequestPeer::AGENCY_NAME, $this->agency_name);
		if ($this->isColumnModified(VpoRequestPeer::REQ_FIRST_NAME)) $criteria->add(VpoRequestPeer::REQ_FIRST_NAME, $this->req_first_name);
		if ($this->isColumnModified(VpoRequestPeer::REQ_LAST_NAME)) $criteria->add(VpoRequestPeer::REQ_LAST_NAME, $this->req_last_name);
		if ($this->isColumnModified(VpoRequestPeer::AGENCY_DIVISION)) $criteria->add(VpoRequestPeer::AGENCY_DIVISION, $this->agency_division);
		if ($this->isColumnModified(VpoRequestPeer::REQ_ADDRESS1)) $criteria->add(VpoRequestPeer::REQ_ADDRESS1, $this->req_address1);
		if ($this->isColumnModified(VpoRequestPeer::REQ_ADDRESS2)) $criteria->add(VpoRequestPeer::REQ_ADDRESS2, $this->req_address2);
		if ($this->isColumnModified(VpoRequestPeer::REQ_CITY)) $criteria->add(VpoRequestPeer::REQ_CITY, $this->req_city);
		if ($this->isColumnModified(VpoRequestPeer::REQ_STATE)) $criteria->add(VpoRequestPeer::REQ_STATE, $this->req_state);
		if ($this->isColumnModified(VpoRequestPeer::REQ_COUNTRY)) $criteria->add(VpoRequestPeer::REQ_COUNTRY, $this->req_country);
		if ($this->isColumnModified(VpoRequestPeer::REQ_ZIPCODE)) $criteria->add(VpoRequestPeer::REQ_ZIPCODE, $this->req_zipcode);
		if ($this->isColumnModified(VpoRequestPeer::REQ_OFFICE_PHONE)) $criteria->add(VpoRequestPeer::REQ_OFFICE_PHONE, $this->req_office_phone);
		if ($this->isColumnModified(VpoRequestPeer::REQ_OFFICE_COMMENT)) $criteria->add(VpoRequestPeer::REQ_OFFICE_COMMENT, $this->req_office_comment);
		if ($this->isColumnModified(VpoRequestPeer::REQ_MOBILE_PHONE)) $criteria->add(VpoRequestPeer::REQ_MOBILE_PHONE, $this->req_mobile_phone);
		if ($this->isColumnModified(VpoRequestPeer::REQ_MOBILE_COMMENT)) $criteria->add(VpoRequestPeer::REQ_MOBILE_COMMENT, $this->req_mobile_comment);
		if ($this->isColumnModified(VpoRequestPeer::REQ_FAX_PHONE)) $criteria->add(VpoRequestPeer::REQ_FAX_PHONE, $this->req_fax_phone);
		if ($this->isColumnModified(VpoRequestPeer::REQ_FAX_COMMENT)) $criteria->add(VpoRequestPeer::REQ_FAX_COMMENT, $this->req_fax_comment);
		if ($this->isColumnModified(VpoRequestPeer::REQ_PAGER_PHONE)) $criteria->add(VpoRequestPeer::REQ_PAGER_PHONE, $this->req_pager_phone);
		if ($this->isColumnModified(VpoRequestPeer::REQ_PAGER_COMMENT)) $criteria->add(VpoRequestPeer::REQ_PAGER_COMMENT, $this->req_pager_comment);
		if ($this->isColumnModified(VpoRequestPeer::REQ_OTHER_PHONE1)) $criteria->add(VpoRequestPeer::REQ_OTHER_PHONE1, $this->req_other_phone1);
		if ($this->isColumnModified(VpoRequestPeer::REQ_OTHER_COMMENT1)) $criteria->add(VpoRequestPeer::REQ_OTHER_COMMENT1, $this->req_other_comment1);
		if ($this->isColumnModified(VpoRequestPeer::REQ_OTHER_PHONE2)) $criteria->add(VpoRequestPeer::REQ_OTHER_PHONE2, $this->req_other_phone2);
		if ($this->isColumnModified(VpoRequestPeer::REQ_OTHER_COMMENT2)) $criteria->add(VpoRequestPeer::REQ_OTHER_COMMENT2, $this->req_other_comment2);
		if ($this->isColumnModified(VpoRequestPeer::REQ_OTHER_PHONE3)) $criteria->add(VpoRequestPeer::REQ_OTHER_PHONE3, $this->req_other_phone3);
		if ($this->isColumnModified(VpoRequestPeer::REQ_OTHER_COMMENT3)) $criteria->add(VpoRequestPeer::REQ_OTHER_COMMENT3, $this->req_other_comment3);
		if ($this->isColumnModified(VpoRequestPeer::REQ_EMAIL)) $criteria->add(VpoRequestPeer::REQ_EMAIL, $this->req_email);
		if ($this->isColumnModified(VpoRequestPeer::REQ_ALT_EMAIL)) $criteria->add(VpoRequestPeer::REQ_ALT_EMAIL, $this->req_alt_email);
		if ($this->isColumnModified(VpoRequestPeer::CONTACT_NOTES)) $criteria->add(VpoRequestPeer::CONTACT_NOTES, $this->contact_notes);
		if ($this->isColumnModified(VpoRequestPeer::ORIGIN_CITY)) $criteria->add(VpoRequestPeer::ORIGIN_CITY, $this->origin_city);
		if ($this->isColumnModified(VpoRequestPeer::ORIGIN_STATE)) $criteria->add(VpoRequestPeer::ORIGIN_STATE, $this->origin_state);
		if ($this->isColumnModified(VpoRequestPeer::DEST_CITY)) $criteria->add(VpoRequestPeer::DEST_CITY, $this->dest_city);
		if ($this->isColumnModified(VpoRequestPeer::DEST_STATE)) $criteria->add(VpoRequestPeer::DEST_STATE, $this->dest_state);
		if ($this->isColumnModified(VpoRequestPeer::PREFERRED_DATE)) $criteria->add(VpoRequestPeer::PREFERRED_DATE, $this->preferred_date);
		if ($this->isColumnModified(VpoRequestPeer::ALTERNATIVE_DATE)) $criteria->add(VpoRequestPeer::ALTERNATIVE_DATE, $this->alternative_date);
		if ($this->isColumnModified(VpoRequestPeer::TRANSPORT_TYPE)) $criteria->add(VpoRequestPeer::TRANSPORT_TYPE, $this->transport_type);
		if ($this->isColumnModified(VpoRequestPeer::REQUEST_POSTED_DATE)) $criteria->add(VpoRequestPeer::REQUEST_POSTED_DATE, $this->request_posted_date);
		if ($this->isColumnModified(VpoRequestPeer::REQUEST_POSTED_TO_AFA_ORG_ID)) $criteria->add(VpoRequestPeer::REQUEST_POSTED_TO_AFA_ORG_ID, $this->request_posted_to_afa_org_id);
		if ($this->isColumnModified(VpoRequestPeer::REQUES_PROCESSED_DATE)) $criteria->add(VpoRequestPeer::REQUES_PROCESSED_DATE, $this->reques_processed_date);
		if ($this->isColumnModified(VpoRequestPeer::REQUEST_DISPOSITION)) $criteria->add(VpoRequestPeer::REQUEST_DISPOSITION, $this->request_disposition);
		if ($this->isColumnModified(VpoRequestPeer::CALLER_NAME)) $criteria->add(VpoRequestPeer::CALLER_NAME, $this->caller_name);
		if ($this->isColumnModified(VpoRequestPeer::CALLER_PHONE)) $criteria->add(VpoRequestPeer::CALLER_PHONE, $this->caller_phone);
		if ($this->isColumnModified(VpoRequestPeer::REQUEST_POST_RESULTS)) $criteria->add(VpoRequestPeer::REQUEST_POST_RESULTS, $this->request_post_results);
		if ($this->isColumnModified(VpoRequestPeer::REQUESTER_VPO_USER_ID)) $criteria->add(VpoRequestPeer::REQUESTER_VPO_USER_ID, $this->requester_vpo_user_id);
		if ($this->isColumnModified(VpoRequestPeer::SOURCE)) $criteria->add(VpoRequestPeer::SOURCE, $this->source);
		if ($this->isColumnModified(VpoRequestPeer::SOAP_POST_FROM_AFA_ORG_ID)) $criteria->add(VpoRequestPeer::SOAP_POST_FROM_AFA_ORG_ID, $this->soap_post_from_afa_org_id);
		if ($this->isColumnModified(VpoRequestPeer::SOAP_POST_REQUEST_ID)) $criteria->add(VpoRequestPeer::SOAP_POST_REQUEST_ID, $this->soap_post_request_id);
		if ($this->isColumnModified(VpoRequestPeer::REQUEST_PROCESSED_BY)) $criteria->add(VpoRequestPeer::REQUEST_PROCESSED_BY, $this->request_processed_by);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(VpoRequestPeer::DATABASE_NAME);

		$criteria->add(VpoRequestPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of VpoRequest (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setHazardousCargoFlag($this->hazardous_cargo_flag);

		$copyObj->setRequestDate($this->request_date);

		$copyObj->setRequestReasonDesc($this->request_reason_desc);

		$copyObj->setAgencyName($this->agency_name);

		$copyObj->setReqFirstName($this->req_first_name);

		$copyObj->setReqLastName($this->req_last_name);

		$copyObj->setAgencyDivision($this->agency_division);

		$copyObj->setReqAddress1($this->req_address1);

		$copyObj->setReqAddress2($this->req_address2);

		$copyObj->setReqCity($this->req_city);

		$copyObj->setReqState($this->req_state);

		$copyObj->setReqCountry($this->req_country);

		$copyObj->setReqZipcode($this->req_zipcode);

		$copyObj->setReqOfficePhone($this->req_office_phone);

		$copyObj->setReqOfficeComment($this->req_office_comment);

		$copyObj->setReqMobilePhone($this->req_mobile_phone);

		$copyObj->setReqMobileComment($this->req_mobile_comment);

		$copyObj->setReqFaxPhone($this->req_fax_phone);

		$copyObj->setReqFaxComment($this->req_fax_comment);

		$copyObj->setReqPagerPhone($this->req_pager_phone);

		$copyObj->setReqPagerComment($this->req_pager_comment);

		$copyObj->setReqOtherPhone1($this->req_other_phone1);

		$copyObj->setReqOtherComment1($this->req_other_comment1);

		$copyObj->setReqOtherPhone2($this->req_other_phone2);

		$copyObj->setReqOtherComment2($this->req_other_comment2);

		$copyObj->setReqOtherPhone3($this->req_other_phone3);

		$copyObj->setReqOtherComment3($this->req_other_comment3);

		$copyObj->setReqEmail($this->req_email);

		$copyObj->setReqAltEmail($this->req_alt_email);

		$copyObj->setContactNotes($this->contact_notes);

		$copyObj->setOriginCity($this->origin_city);

		$copyObj->setOriginState($this->origin_state);

		$copyObj->setDestCity($this->dest_city);

		$copyObj->setDestState($this->dest_state);

		$copyObj->setPreferredDate($this->preferred_date);

		$copyObj->setAlternativeDate($this->alternative_date);

		$copyObj->setTransportType($this->transport_type);

		$copyObj->setRequestPostedDate($this->request_posted_date);

		$copyObj->setRequestPostedToAfaOrgId($this->request_posted_to_afa_org_id);

		$copyObj->setRequesProcessedDate($this->reques_processed_date);

		$copyObj->setRequestDisposition($this->request_disposition);

		$copyObj->setCallerName($this->caller_name);

		$copyObj->setCallerPhone($this->caller_phone);

		$copyObj->setRequestPostResults($this->request_post_results);

		$copyObj->setRequesterVpoUserId($this->requester_vpo_user_id);

		$copyObj->setSource($this->source);

		$copyObj->setSoapPostFromAfaOrgId($this->soap_post_from_afa_org_id);

		$copyObj->setSoapPostRequestId($this->soap_post_request_id);

		$copyObj->setRequestProcessedBy($this->request_processed_by);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getVpoRequestAnimals() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addVpoRequestAnimal($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getVpoRequestCargos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addVpoRequestCargo($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getVpoRequestPassengers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addVpoRequestPassenger($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     VpoRequest Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     VpoRequestPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new VpoRequestPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collVpoRequestAnimals collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addVpoRequestAnimals()
	 */
	public function clearVpoRequestAnimals()
	{
		$this->collVpoRequestAnimals = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collVpoRequestAnimals collection (array).
	 *
	 * By default this just sets the collVpoRequestAnimals collection to an empty array (like clearcollVpoRequestAnimals());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initVpoRequestAnimals()
	{
		$this->collVpoRequestAnimals = array();
	}

	/**
	 * Gets an array of VpoRequestAnimal objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this VpoRequest has previously been saved, it will retrieve
	 * related VpoRequestAnimals from storage. If this VpoRequest is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array VpoRequestAnimal[]
	 * @throws     PropelException
	 */
	public function getVpoRequestAnimals($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VpoRequestPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVpoRequestAnimals === null) {
			if ($this->isNew()) {
			   $this->collVpoRequestAnimals = array();
			} else {

				$criteria->add(VpoRequestAnimalPeer::REQUEST_ID, $this->id);

				VpoRequestAnimalPeer::addSelectColumns($criteria);
				$this->collVpoRequestAnimals = VpoRequestAnimalPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(VpoRequestAnimalPeer::REQUEST_ID, $this->id);

				VpoRequestAnimalPeer::addSelectColumns($criteria);
				if (!isset($this->lastVpoRequestAnimalCriteria) || !$this->lastVpoRequestAnimalCriteria->equals($criteria)) {
					$this->collVpoRequestAnimals = VpoRequestAnimalPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastVpoRequestAnimalCriteria = $criteria;
		return $this->collVpoRequestAnimals;
	}

	/**
	 * Returns the number of related VpoRequestAnimal objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related VpoRequestAnimal objects.
	 * @throws     PropelException
	 */
	public function countVpoRequestAnimals(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VpoRequestPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collVpoRequestAnimals === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(VpoRequestAnimalPeer::REQUEST_ID, $this->id);

				$count = VpoRequestAnimalPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(VpoRequestAnimalPeer::REQUEST_ID, $this->id);

				if (!isset($this->lastVpoRequestAnimalCriteria) || !$this->lastVpoRequestAnimalCriteria->equals($criteria)) {
					$count = VpoRequestAnimalPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collVpoRequestAnimals);
				}
			} else {
				$count = count($this->collVpoRequestAnimals);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a VpoRequestAnimal object to this object
	 * through the VpoRequestAnimal foreign key attribute.
	 *
	 * @param      VpoRequestAnimal $l VpoRequestAnimal
	 * @return     void
	 * @throws     PropelException
	 */
	public function addVpoRequestAnimal(VpoRequestAnimal $l)
	{
		if ($this->collVpoRequestAnimals === null) {
			$this->initVpoRequestAnimals();
		}
		if (!in_array($l, $this->collVpoRequestAnimals, true)) { // only add it if the **same** object is not already associated
			array_push($this->collVpoRequestAnimals, $l);
			$l->setVpoRequest($this);
		}
	}

	/**
	 * Clears out the collVpoRequestCargos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addVpoRequestCargos()
	 */
	public function clearVpoRequestCargos()
	{
		$this->collVpoRequestCargos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collVpoRequestCargos collection (array).
	 *
	 * By default this just sets the collVpoRequestCargos collection to an empty array (like clearcollVpoRequestCargos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initVpoRequestCargos()
	{
		$this->collVpoRequestCargos = array();
	}

	/**
	 * Gets an array of VpoRequestCargo objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this VpoRequest has previously been saved, it will retrieve
	 * related VpoRequestCargos from storage. If this VpoRequest is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array VpoRequestCargo[]
	 * @throws     PropelException
	 */
	public function getVpoRequestCargos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VpoRequestPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVpoRequestCargos === null) {
			if ($this->isNew()) {
			   $this->collVpoRequestCargos = array();
			} else {

				$criteria->add(VpoRequestCargoPeer::REQUEST_ID, $this->id);

				VpoRequestCargoPeer::addSelectColumns($criteria);
				$this->collVpoRequestCargos = VpoRequestCargoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(VpoRequestCargoPeer::REQUEST_ID, $this->id);

				VpoRequestCargoPeer::addSelectColumns($criteria);
				if (!isset($this->lastVpoRequestCargoCriteria) || !$this->lastVpoRequestCargoCriteria->equals($criteria)) {
					$this->collVpoRequestCargos = VpoRequestCargoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastVpoRequestCargoCriteria = $criteria;
		return $this->collVpoRequestCargos;
	}

	/**
	 * Returns the number of related VpoRequestCargo objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related VpoRequestCargo objects.
	 * @throws     PropelException
	 */
	public function countVpoRequestCargos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VpoRequestPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collVpoRequestCargos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(VpoRequestCargoPeer::REQUEST_ID, $this->id);

				$count = VpoRequestCargoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(VpoRequestCargoPeer::REQUEST_ID, $this->id);

				if (!isset($this->lastVpoRequestCargoCriteria) || !$this->lastVpoRequestCargoCriteria->equals($criteria)) {
					$count = VpoRequestCargoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collVpoRequestCargos);
				}
			} else {
				$count = count($this->collVpoRequestCargos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a VpoRequestCargo object to this object
	 * through the VpoRequestCargo foreign key attribute.
	 *
	 * @param      VpoRequestCargo $l VpoRequestCargo
	 * @return     void
	 * @throws     PropelException
	 */
	public function addVpoRequestCargo(VpoRequestCargo $l)
	{
		if ($this->collVpoRequestCargos === null) {
			$this->initVpoRequestCargos();
		}
		if (!in_array($l, $this->collVpoRequestCargos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collVpoRequestCargos, $l);
			$l->setVpoRequest($this);
		}
	}

	/**
	 * Clears out the collVpoRequestPassengers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addVpoRequestPassengers()
	 */
	public function clearVpoRequestPassengers()
	{
		$this->collVpoRequestPassengers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collVpoRequestPassengers collection (array).
	 *
	 * By default this just sets the collVpoRequestPassengers collection to an empty array (like clearcollVpoRequestPassengers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initVpoRequestPassengers()
	{
		$this->collVpoRequestPassengers = array();
	}

	/**
	 * Gets an array of VpoRequestPassenger objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this VpoRequest has previously been saved, it will retrieve
	 * related VpoRequestPassengers from storage. If this VpoRequest is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array VpoRequestPassenger[]
	 * @throws     PropelException
	 */
	public function getVpoRequestPassengers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VpoRequestPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collVpoRequestPassengers === null) {
			if ($this->isNew()) {
			   $this->collVpoRequestPassengers = array();
			} else {

				$criteria->add(VpoRequestPassengerPeer::REQUEST_ID, $this->id);

				VpoRequestPassengerPeer::addSelectColumns($criteria);
				$this->collVpoRequestPassengers = VpoRequestPassengerPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(VpoRequestPassengerPeer::REQUEST_ID, $this->id);

				VpoRequestPassengerPeer::addSelectColumns($criteria);
				if (!isset($this->lastVpoRequestPassengerCriteria) || !$this->lastVpoRequestPassengerCriteria->equals($criteria)) {
					$this->collVpoRequestPassengers = VpoRequestPassengerPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastVpoRequestPassengerCriteria = $criteria;
		return $this->collVpoRequestPassengers;
	}

	/**
	 * Returns the number of related VpoRequestPassenger objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related VpoRequestPassenger objects.
	 * @throws     PropelException
	 */
	public function countVpoRequestPassengers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(VpoRequestPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collVpoRequestPassengers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(VpoRequestPassengerPeer::REQUEST_ID, $this->id);

				$count = VpoRequestPassengerPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(VpoRequestPassengerPeer::REQUEST_ID, $this->id);

				if (!isset($this->lastVpoRequestPassengerCriteria) || !$this->lastVpoRequestPassengerCriteria->equals($criteria)) {
					$count = VpoRequestPassengerPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collVpoRequestPassengers);
				}
			} else {
				$count = count($this->collVpoRequestPassengers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a VpoRequestPassenger object to this object
	 * through the VpoRequestPassenger foreign key attribute.
	 *
	 * @param      VpoRequestPassenger $l VpoRequestPassenger
	 * @return     void
	 * @throws     PropelException
	 */
	public function addVpoRequestPassenger(VpoRequestPassenger $l)
	{
		if ($this->collVpoRequestPassengers === null) {
			$this->initVpoRequestPassengers();
		}
		if (!in_array($l, $this->collVpoRequestPassengers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collVpoRequestPassengers, $l);
			$l->setVpoRequest($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collVpoRequestAnimals) {
				foreach ((array) $this->collVpoRequestAnimals as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collVpoRequestCargos) {
				foreach ((array) $this->collVpoRequestCargos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collVpoRequestPassengers) {
				foreach ((array) $this->collVpoRequestPassengers as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collVpoRequestAnimals = null;
		$this->collVpoRequestCargos = null;
		$this->collVpoRequestPassengers = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseVpoRequest:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseVpoRequest::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseVpoRequest
