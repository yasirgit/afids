<?php

/**
 * Base class that represents a row from the 'vpo_request_passenger' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 01/05/11 08:19:53
 *
 * @package    lib.model.om
 */
abstract class BaseVpoRequestPassenger extends BaseObject  implements Persistent {


  const PEER = 'VpoRequestPassengerPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        VpoRequestPassengerPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the request_id field.
	 * @var        int
	 */
	protected $request_id;

	/**
	 * The value for the fema_no field.
	 * @var        string
	 */
	protected $fema_no;

	/**
	 * The value for the first_name field.
	 * @var        string
	 */
	protected $first_name;

	/**
	 * The value for the last_lame field.
	 * @var        string
	 */
	protected $last_lame;

	/**
	 * The value for the address1 field.
	 * @var        string
	 */
	protected $address1;

	/**
	 * The value for the address2 field.
	 * @var        string
	 */
	protected $address2;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the state field.
	 * @var        string
	 */
	protected $state;

	/**
	 * The value for the country field.
	 * @var        string
	 */
	protected $country;

	/**
	 * The value for the zipcode field.
	 * @var        string
	 */
	protected $zipcode;

	/**
	 * The value for the day_phone field.
	 * @var        string
	 */
	protected $day_phone;

	/**
	 * The value for the day_comment field.
	 * @var        string
	 */
	protected $day_comment;

	/**
	 * The value for the eve_phone field.
	 * @var        int
	 */
	protected $eve_phone;

	/**
	 * The value for the eve_comment field.
	 * @var        string
	 */
	protected $eve_comment;

	/**
	 * The value for the mobile_phone field.
	 * @var        string
	 */
	protected $mobile_phone;

	/**
	 * The value for the mobile_comment field.
	 * @var        string
	 */
	protected $mobile_comment;

	/**
	 * The value for the fax_phone field.
	 * @var        string
	 */
	protected $fax_phone;

	/**
	 * The value for the fax_comment field.
	 * @var        string
	 */
	protected $fax_comment;

	/**
	 * The value for the pager_phone field.
	 * @var        string
	 */
	protected $pager_phone;

	/**
	 * The value for the pager_comment field.
	 * @var        string
	 */
	protected $pager_comment;

	/**
	 * The value for the other_phone1 field.
	 * @var        string
	 */
	protected $other_phone1;

	/**
	 * The value for the other_comment1 field.
	 * @var        string
	 */
	protected $other_comment1;

	/**
	 * The value for the other_phone2 field.
	 * @var        string
	 */
	protected $other_phone2;

	/**
	 * The value for the other_comment2 field.
	 * @var        string
	 */
	protected $other_comment2;

	/**
	 * The value for the other_phone3 field.
	 * @var        string
	 */
	protected $other_phone3;

	/**
	 * The value for the other_comment3 field.
	 * @var        string
	 */
	protected $other_comment3;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the alt_email field.
	 * @var        string
	 */
	protected $alt_email;

	/**
	 * The value for the age field.
	 * @var        int
	 */
	protected $age;

	/**
	 * The value for the date_of_birth field.
	 * @var        string
	 */
	protected $date_of_birth;

	/**
	 * The value for the primary_language field.
	 * @var        string
	 */
	protected $primary_language;

	/**
	 * The value for the english_spoken field.
	 * @var        string
	 */
	protected $english_spoken;

	/**
	 * The value for the pregnant field.
	 * @var        string
	 */
	protected $pregnant;

	/**
	 * The value for the oxygen_required field.
	 * @var        string
	 */
	protected $oxygen_required;

	/**
	 * The value for the weight field.
	 * @var        int
	 */
	protected $weight;

	/**
	 * The value for the ambulatory field.
	 * @var        string
	 */
	protected $ambulatory;

	/**
	 * The value for the notes field.
	 * @var        string
	 */
	protected $notes;

	/**
	 * The value for the known_medicalcondition field.
	 * @var        string
	 */
	protected $known_medicalcondition;

	/**
	 * The value for the baggage_weight field.
	 * @var        int
	 */
	protected $baggage_weight;

	/**
	 * The value for the baggage_desc field.
	 * @var        string
	 */
	protected $baggage_desc;

	/**
	 * @var        VpoRequest
	 */
	protected $aVpoRequest;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseVpoRequestPassenger object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [request_id] column value.
	 * 
	 * @return     int
	 */
	public function getRequestId()
	{
		return $this->request_id;
	}

	/**
	 * Get the [fema_no] column value.
	 * 
	 * @return     string
	 */
	public function getFemaNo()
	{
		return $this->fema_no;
	}

	/**
	 * Get the [first_name] column value.
	 * 
	 * @return     string
	 */
	public function getFirstName()
	{
		return $this->first_name;
	}

	/**
	 * Get the [last_lame] column value.
	 * 
	 * @return     string
	 */
	public function getLastLame()
	{
		return $this->last_lame;
	}

	/**
	 * Get the [address1] column value.
	 * 
	 * @return     string
	 */
	public function getAddress1()
	{
		return $this->address1;
	}

	/**
	 * Get the [address2] column value.
	 * 
	 * @return     string
	 */
	public function getAddress2()
	{
		return $this->address2;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [state] column value.
	 * 
	 * @return     string
	 */
	public function getState()
	{
		return $this->state;
	}

	/**
	 * Get the [country] column value.
	 * 
	 * @return     string
	 */
	public function getCountry()
	{
		return $this->country;
	}

	/**
	 * Get the [zipcode] column value.
	 * 
	 * @return     string
	 */
	public function getZipcode()
	{
		return $this->zipcode;
	}

	/**
	 * Get the [day_phone] column value.
	 * 
	 * @return     string
	 */
	public function getDayPhone()
	{
		return $this->day_phone;
	}

	/**
	 * Get the [day_comment] column value.
	 * 
	 * @return     string
	 */
	public function getDayComment()
	{
		return $this->day_comment;
	}

	/**
	 * Get the [eve_phone] column value.
	 * 
	 * @return     int
	 */
	public function getEvePhone()
	{
		return $this->eve_phone;
	}

	/**
	 * Get the [eve_comment] column value.
	 * 
	 * @return     string
	 */
	public function getEveComment()
	{
		return $this->eve_comment;
	}

	/**
	 * Get the [mobile_phone] column value.
	 * 
	 * @return     string
	 */
	public function getMobilePhone()
	{
		return $this->mobile_phone;
	}

	/**
	 * Get the [mobile_comment] column value.
	 * 
	 * @return     string
	 */
	public function getMobileComment()
	{
		return $this->mobile_comment;
	}

	/**
	 * Get the [fax_phone] column value.
	 * 
	 * @return     string
	 */
	public function getFaxPhone()
	{
		return $this->fax_phone;
	}

	/**
	 * Get the [fax_comment] column value.
	 * 
	 * @return     string
	 */
	public function getFaxComment()
	{
		return $this->fax_comment;
	}

	/**
	 * Get the [pager_phone] column value.
	 * 
	 * @return     string
	 */
	public function getPagerPhone()
	{
		return $this->pager_phone;
	}

	/**
	 * Get the [pager_comment] column value.
	 * 
	 * @return     string
	 */
	public function getPagerComment()
	{
		return $this->pager_comment;
	}

	/**
	 * Get the [other_phone1] column value.
	 * 
	 * @return     string
	 */
	public function getOtherPhone1()
	{
		return $this->other_phone1;
	}

	/**
	 * Get the [other_comment1] column value.
	 * 
	 * @return     string
	 */
	public function getOtherComment1()
	{
		return $this->other_comment1;
	}

	/**
	 * Get the [other_phone2] column value.
	 * 
	 * @return     string
	 */
	public function getOtherPhone2()
	{
		return $this->other_phone2;
	}

	/**
	 * Get the [other_comment2] column value.
	 * 
	 * @return     string
	 */
	public function getOtherComment2()
	{
		return $this->other_comment2;
	}

	/**
	 * Get the [other_phone3] column value.
	 * 
	 * @return     string
	 */
	public function getOtherPhone3()
	{
		return $this->other_phone3;
	}

	/**
	 * Get the [other_comment3] column value.
	 * 
	 * @return     string
	 */
	public function getOtherComment3()
	{
		return $this->other_comment3;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [alt_email] column value.
	 * 
	 * @return     string
	 */
	public function getAltEmail()
	{
		return $this->alt_email;
	}

	/**
	 * Get the [age] column value.
	 * 
	 * @return     int
	 */
	public function getAge()
	{
		return $this->age;
	}

	/**
	 * Get the [optionally formatted] temporal [date_of_birth] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDateOfBirth($format = 'Y-m-d')
	{
		if ($this->date_of_birth === null) {
			return null;
		}


		if ($this->date_of_birth === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->date_of_birth);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->date_of_birth, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [primary_language] column value.
	 * 
	 * @return     string
	 */
	public function getPrimaryLanguage()
	{
		return $this->primary_language;
	}

	/**
	 * Get the [english_spoken] column value.
	 * 
	 * @return     string
	 */
	public function getEnglishSpoken()
	{
		return $this->english_spoken;
	}

	/**
	 * Get the [pregnant] column value.
	 * 
	 * @return     string
	 */
	public function getPregnant()
	{
		return $this->pregnant;
	}

	/**
	 * Get the [oxygen_required] column value.
	 * 
	 * @return     string
	 */
	public function getOxygenRequired()
	{
		return $this->oxygen_required;
	}

	/**
	 * Get the [weight] column value.
	 * 
	 * @return     int
	 */
	public function getWeight()
	{
		return $this->weight;
	}

	/**
	 * Get the [ambulatory] column value.
	 * 
	 * @return     string
	 */
	public function getAmbulatory()
	{
		return $this->ambulatory;
	}

	/**
	 * Get the [notes] column value.
	 * 
	 * @return     string
	 */
	public function getNotes()
	{
		return $this->notes;
	}

	/**
	 * Get the [known_medicalcondition] column value.
	 * 
	 * @return     string
	 */
	public function getKnownMedicalcondition()
	{
		return $this->known_medicalcondition;
	}

	/**
	 * Get the [baggage_weight] column value.
	 * 
	 * @return     int
	 */
	public function getBaggageWeight()
	{
		return $this->baggage_weight;
	}

	/**
	 * Get the [baggage_desc] column value.
	 * 
	 * @return     string
	 */
	public function getBaggageDesc()
	{
		return $this->baggage_desc;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [request_id] column.
	 * 
	 * @param      int $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setRequestId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->request_id !== $v) {
			$this->request_id = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::REQUEST_ID;
		}

		if ($this->aVpoRequest !== null && $this->aVpoRequest->getId() !== $v) {
			$this->aVpoRequest = null;
		}

		return $this;
	} // setRequestId()

	/**
	 * Set the value of [fema_no] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setFemaNo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fema_no !== $v) {
			$this->fema_no = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::FEMA_NO;
		}

		return $this;
	} // setFemaNo()

	/**
	 * Set the value of [first_name] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setFirstName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->first_name !== $v) {
			$this->first_name = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::FIRST_NAME;
		}

		return $this;
	} // setFirstName()

	/**
	 * Set the value of [last_lame] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setLastLame($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->last_lame !== $v) {
			$this->last_lame = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::LAST_LAME;
		}

		return $this;
	} // setLastLame()

	/**
	 * Set the value of [address1] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setAddress1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address1 !== $v) {
			$this->address1 = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::ADDRESS1;
		}

		return $this;
	} // setAddress1()

	/**
	 * Set the value of [address2] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setAddress2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address2 !== $v) {
			$this->address2 = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::ADDRESS2;
		}

		return $this;
	} // setAddress2()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [state] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->state !== $v) {
			$this->state = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::STATE;
		}

		return $this;
	} // setState()

	/**
	 * Set the value of [country] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setCountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->country !== $v) {
			$this->country = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::COUNTRY;
		}

		return $this;
	} // setCountry()

	/**
	 * Set the value of [zipcode] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setZipcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->zipcode !== $v) {
			$this->zipcode = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::ZIPCODE;
		}

		return $this;
	} // setZipcode()

	/**
	 * Set the value of [day_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setDayPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->day_phone !== $v) {
			$this->day_phone = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::DAY_PHONE;
		}

		return $this;
	} // setDayPhone()

	/**
	 * Set the value of [day_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setDayComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->day_comment !== $v) {
			$this->day_comment = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::DAY_COMMENT;
		}

		return $this;
	} // setDayComment()

	/**
	 * Set the value of [eve_phone] column.
	 * 
	 * @param      int $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setEvePhone($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->eve_phone !== $v) {
			$this->eve_phone = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::EVE_PHONE;
		}

		return $this;
	} // setEvePhone()

	/**
	 * Set the value of [eve_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setEveComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->eve_comment !== $v) {
			$this->eve_comment = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::EVE_COMMENT;
		}

		return $this;
	} // setEveComment()

	/**
	 * Set the value of [mobile_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setMobilePhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mobile_phone !== $v) {
			$this->mobile_phone = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::MOBILE_PHONE;
		}

		return $this;
	} // setMobilePhone()

	/**
	 * Set the value of [mobile_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setMobileComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mobile_comment !== $v) {
			$this->mobile_comment = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::MOBILE_COMMENT;
		}

		return $this;
	} // setMobileComment()

	/**
	 * Set the value of [fax_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setFaxPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax_phone !== $v) {
			$this->fax_phone = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::FAX_PHONE;
		}

		return $this;
	} // setFaxPhone()

	/**
	 * Set the value of [fax_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setFaxComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax_comment !== $v) {
			$this->fax_comment = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::FAX_COMMENT;
		}

		return $this;
	} // setFaxComment()

	/**
	 * Set the value of [pager_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setPagerPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pager_phone !== $v) {
			$this->pager_phone = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::PAGER_PHONE;
		}

		return $this;
	} // setPagerPhone()

	/**
	 * Set the value of [pager_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setPagerComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pager_comment !== $v) {
			$this->pager_comment = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::PAGER_COMMENT;
		}

		return $this;
	} // setPagerComment()

	/**
	 * Set the value of [other_phone1] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setOtherPhone1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other_phone1 !== $v) {
			$this->other_phone1 = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::OTHER_PHONE1;
		}

		return $this;
	} // setOtherPhone1()

	/**
	 * Set the value of [other_comment1] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setOtherComment1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other_comment1 !== $v) {
			$this->other_comment1 = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::OTHER_COMMENT1;
		}

		return $this;
	} // setOtherComment1()

	/**
	 * Set the value of [other_phone2] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setOtherPhone2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other_phone2 !== $v) {
			$this->other_phone2 = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::OTHER_PHONE2;
		}

		return $this;
	} // setOtherPhone2()

	/**
	 * Set the value of [other_comment2] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setOtherComment2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other_comment2 !== $v) {
			$this->other_comment2 = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::OTHER_COMMENT2;
		}

		return $this;
	} // setOtherComment2()

	/**
	 * Set the value of [other_phone3] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setOtherPhone3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other_phone3 !== $v) {
			$this->other_phone3 = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::OTHER_PHONE3;
		}

		return $this;
	} // setOtherPhone3()

	/**
	 * Set the value of [other_comment3] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setOtherComment3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other_comment3 !== $v) {
			$this->other_comment3 = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::OTHER_COMMENT3;
		}

		return $this;
	} // setOtherComment3()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [alt_email] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setAltEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->alt_email !== $v) {
			$this->alt_email = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::ALT_EMAIL;
		}

		return $this;
	} // setAltEmail()

	/**
	 * Set the value of [age] column.
	 * 
	 * @param      int $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setAge($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->age !== $v) {
			$this->age = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::AGE;
		}

		return $this;
	} // setAge()

	/**
	 * Sets the value of [date_of_birth] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setDateOfBirth($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->date_of_birth !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->date_of_birth !== null && $tmpDt = new DateTime($this->date_of_birth)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->date_of_birth = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = VpoRequestPassengerPeer::DATE_OF_BIRTH;
			}
		} // if either are not null

		return $this;
	} // setDateOfBirth()

	/**
	 * Set the value of [primary_language] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setPrimaryLanguage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->primary_language !== $v) {
			$this->primary_language = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::PRIMARY_LANGUAGE;
		}

		return $this;
	} // setPrimaryLanguage()

	/**
	 * Set the value of [english_spoken] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setEnglishSpoken($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->english_spoken !== $v) {
			$this->english_spoken = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::ENGLISH_SPOKEN;
		}

		return $this;
	} // setEnglishSpoken()

	/**
	 * Set the value of [pregnant] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setPregnant($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pregnant !== $v) {
			$this->pregnant = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::PREGNANT;
		}

		return $this;
	} // setPregnant()

	/**
	 * Set the value of [oxygen_required] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setOxygenRequired($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->oxygen_required !== $v) {
			$this->oxygen_required = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::OXYGEN_REQUIRED;
		}

		return $this;
	} // setOxygenRequired()

	/**
	 * Set the value of [weight] column.
	 * 
	 * @param      int $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setWeight($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->weight !== $v) {
			$this->weight = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::WEIGHT;
		}

		return $this;
	} // setWeight()

	/**
	 * Set the value of [ambulatory] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setAmbulatory($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ambulatory !== $v) {
			$this->ambulatory = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::AMBULATORY;
		}

		return $this;
	} // setAmbulatory()

	/**
	 * Set the value of [notes] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setNotes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->notes !== $v) {
			$this->notes = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::NOTES;
		}

		return $this;
	} // setNotes()

	/**
	 * Set the value of [known_medicalcondition] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setKnownMedicalcondition($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->known_medicalcondition !== $v) {
			$this->known_medicalcondition = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::KNOWN_MEDICALCONDITION;
		}

		return $this;
	} // setKnownMedicalcondition()

	/**
	 * Set the value of [baggage_weight] column.
	 * 
	 * @param      int $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setBaggageWeight($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->baggage_weight !== $v) {
			$this->baggage_weight = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::BAGGAGE_WEIGHT;
		}

		return $this;
	} // setBaggageWeight()

	/**
	 * Set the value of [baggage_desc] column.
	 * 
	 * @param      string $v new value
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 */
	public function setBaggageDesc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->baggage_desc !== $v) {
			$this->baggage_desc = $v;
			$this->modifiedColumns[] = VpoRequestPassengerPeer::BAGGAGE_DESC;
		}

		return $this;
	} // setBaggageDesc()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->request_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->fema_no = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->first_name = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->last_lame = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->address1 = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->address2 = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->city = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->state = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->country = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->zipcode = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->day_phone = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->day_comment = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->eve_phone = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->eve_comment = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->mobile_phone = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->mobile_comment = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->fax_phone = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->fax_comment = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->pager_phone = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->pager_comment = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->other_phone1 = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->other_comment1 = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->other_phone2 = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->other_comment2 = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->other_phone3 = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->other_comment3 = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->email = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->alt_email = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->age = ($row[$startcol + 29] !== null) ? (int) $row[$startcol + 29] : null;
			$this->date_of_birth = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->primary_language = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->english_spoken = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->pregnant = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->oxygen_required = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->weight = ($row[$startcol + 35] !== null) ? (int) $row[$startcol + 35] : null;
			$this->ambulatory = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->notes = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->known_medicalcondition = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->baggage_weight = ($row[$startcol + 39] !== null) ? (int) $row[$startcol + 39] : null;
			$this->baggage_desc = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 41; // 41 = VpoRequestPassengerPeer::NUM_COLUMNS - VpoRequestPassengerPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating VpoRequestPassenger object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aVpoRequest !== null && $this->request_id !== $this->aVpoRequest->getId()) {
			$this->aVpoRequest = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(VpoRequestPassengerPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = VpoRequestPassengerPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aVpoRequest = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseVpoRequestPassenger:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(VpoRequestPassengerPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			VpoRequestPassengerPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseVpoRequestPassenger:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseVpoRequestPassenger:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(VpoRequestPassengerPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseVpoRequestPassenger:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			VpoRequestPassengerPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aVpoRequest !== null) {
				if ($this->aVpoRequest->isModified() || $this->aVpoRequest->isNew()) {
					$affectedRows += $this->aVpoRequest->save($con);
				}
				$this->setVpoRequest($this->aVpoRequest);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = VpoRequestPassengerPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = VpoRequestPassengerPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += VpoRequestPassengerPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aVpoRequest !== null) {
				if (!$this->aVpoRequest->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aVpoRequest->getValidationFailures());
				}
			}


			if (($retval = VpoRequestPassengerPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = VpoRequestPassengerPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getRequestId();
				break;
			case 2:
				return $this->getFemaNo();
				break;
			case 3:
				return $this->getFirstName();
				break;
			case 4:
				return $this->getLastLame();
				break;
			case 5:
				return $this->getAddress1();
				break;
			case 6:
				return $this->getAddress2();
				break;
			case 7:
				return $this->getCity();
				break;
			case 8:
				return $this->getState();
				break;
			case 9:
				return $this->getCountry();
				break;
			case 10:
				return $this->getZipcode();
				break;
			case 11:
				return $this->getDayPhone();
				break;
			case 12:
				return $this->getDayComment();
				break;
			case 13:
				return $this->getEvePhone();
				break;
			case 14:
				return $this->getEveComment();
				break;
			case 15:
				return $this->getMobilePhone();
				break;
			case 16:
				return $this->getMobileComment();
				break;
			case 17:
				return $this->getFaxPhone();
				break;
			case 18:
				return $this->getFaxComment();
				break;
			case 19:
				return $this->getPagerPhone();
				break;
			case 20:
				return $this->getPagerComment();
				break;
			case 21:
				return $this->getOtherPhone1();
				break;
			case 22:
				return $this->getOtherComment1();
				break;
			case 23:
				return $this->getOtherPhone2();
				break;
			case 24:
				return $this->getOtherComment2();
				break;
			case 25:
				return $this->getOtherPhone3();
				break;
			case 26:
				return $this->getOtherComment3();
				break;
			case 27:
				return $this->getEmail();
				break;
			case 28:
				return $this->getAltEmail();
				break;
			case 29:
				return $this->getAge();
				break;
			case 30:
				return $this->getDateOfBirth();
				break;
			case 31:
				return $this->getPrimaryLanguage();
				break;
			case 32:
				return $this->getEnglishSpoken();
				break;
			case 33:
				return $this->getPregnant();
				break;
			case 34:
				return $this->getOxygenRequired();
				break;
			case 35:
				return $this->getWeight();
				break;
			case 36:
				return $this->getAmbulatory();
				break;
			case 37:
				return $this->getNotes();
				break;
			case 38:
				return $this->getKnownMedicalcondition();
				break;
			case 39:
				return $this->getBaggageWeight();
				break;
			case 40:
				return $this->getBaggageDesc();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = VpoRequestPassengerPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getRequestId(),
			$keys[2] => $this->getFemaNo(),
			$keys[3] => $this->getFirstName(),
			$keys[4] => $this->getLastLame(),
			$keys[5] => $this->getAddress1(),
			$keys[6] => $this->getAddress2(),
			$keys[7] => $this->getCity(),
			$keys[8] => $this->getState(),
			$keys[9] => $this->getCountry(),
			$keys[10] => $this->getZipcode(),
			$keys[11] => $this->getDayPhone(),
			$keys[12] => $this->getDayComment(),
			$keys[13] => $this->getEvePhone(),
			$keys[14] => $this->getEveComment(),
			$keys[15] => $this->getMobilePhone(),
			$keys[16] => $this->getMobileComment(),
			$keys[17] => $this->getFaxPhone(),
			$keys[18] => $this->getFaxComment(),
			$keys[19] => $this->getPagerPhone(),
			$keys[20] => $this->getPagerComment(),
			$keys[21] => $this->getOtherPhone1(),
			$keys[22] => $this->getOtherComment1(),
			$keys[23] => $this->getOtherPhone2(),
			$keys[24] => $this->getOtherComment2(),
			$keys[25] => $this->getOtherPhone3(),
			$keys[26] => $this->getOtherComment3(),
			$keys[27] => $this->getEmail(),
			$keys[28] => $this->getAltEmail(),
			$keys[29] => $this->getAge(),
			$keys[30] => $this->getDateOfBirth(),
			$keys[31] => $this->getPrimaryLanguage(),
			$keys[32] => $this->getEnglishSpoken(),
			$keys[33] => $this->getPregnant(),
			$keys[34] => $this->getOxygenRequired(),
			$keys[35] => $this->getWeight(),
			$keys[36] => $this->getAmbulatory(),
			$keys[37] => $this->getNotes(),
			$keys[38] => $this->getKnownMedicalcondition(),
			$keys[39] => $this->getBaggageWeight(),
			$keys[40] => $this->getBaggageDesc(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = VpoRequestPassengerPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setRequestId($value);
				break;
			case 2:
				$this->setFemaNo($value);
				break;
			case 3:
				$this->setFirstName($value);
				break;
			case 4:
				$this->setLastLame($value);
				break;
			case 5:
				$this->setAddress1($value);
				break;
			case 6:
				$this->setAddress2($value);
				break;
			case 7:
				$this->setCity($value);
				break;
			case 8:
				$this->setState($value);
				break;
			case 9:
				$this->setCountry($value);
				break;
			case 10:
				$this->setZipcode($value);
				break;
			case 11:
				$this->setDayPhone($value);
				break;
			case 12:
				$this->setDayComment($value);
				break;
			case 13:
				$this->setEvePhone($value);
				break;
			case 14:
				$this->setEveComment($value);
				break;
			case 15:
				$this->setMobilePhone($value);
				break;
			case 16:
				$this->setMobileComment($value);
				break;
			case 17:
				$this->setFaxPhone($value);
				break;
			case 18:
				$this->setFaxComment($value);
				break;
			case 19:
				$this->setPagerPhone($value);
				break;
			case 20:
				$this->setPagerComment($value);
				break;
			case 21:
				$this->setOtherPhone1($value);
				break;
			case 22:
				$this->setOtherComment1($value);
				break;
			case 23:
				$this->setOtherPhone2($value);
				break;
			case 24:
				$this->setOtherComment2($value);
				break;
			case 25:
				$this->setOtherPhone3($value);
				break;
			case 26:
				$this->setOtherComment3($value);
				break;
			case 27:
				$this->setEmail($value);
				break;
			case 28:
				$this->setAltEmail($value);
				break;
			case 29:
				$this->setAge($value);
				break;
			case 30:
				$this->setDateOfBirth($value);
				break;
			case 31:
				$this->setPrimaryLanguage($value);
				break;
			case 32:
				$this->setEnglishSpoken($value);
				break;
			case 33:
				$this->setPregnant($value);
				break;
			case 34:
				$this->setOxygenRequired($value);
				break;
			case 35:
				$this->setWeight($value);
				break;
			case 36:
				$this->setAmbulatory($value);
				break;
			case 37:
				$this->setNotes($value);
				break;
			case 38:
				$this->setKnownMedicalcondition($value);
				break;
			case 39:
				$this->setBaggageWeight($value);
				break;
			case 40:
				$this->setBaggageDesc($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = VpoRequestPassengerPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setRequestId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setFemaNo($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setFirstName($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setLastLame($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAddress1($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setAddress2($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCity($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setState($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCountry($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setZipcode($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setDayPhone($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setDayComment($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setEvePhone($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setEveComment($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setMobilePhone($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setMobileComment($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setFaxPhone($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setFaxComment($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setPagerPhone($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setPagerComment($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setOtherPhone1($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setOtherComment1($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setOtherPhone2($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setOtherComment2($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setOtherPhone3($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setOtherComment3($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setEmail($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setAltEmail($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setAge($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setDateOfBirth($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setPrimaryLanguage($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setEnglishSpoken($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setPregnant($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setOxygenRequired($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setWeight($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setAmbulatory($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setNotes($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setKnownMedicalcondition($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setBaggageWeight($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setBaggageDesc($arr[$keys[40]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(VpoRequestPassengerPeer::DATABASE_NAME);

		if ($this->isColumnModified(VpoRequestPassengerPeer::ID)) $criteria->add(VpoRequestPassengerPeer::ID, $this->id);
		if ($this->isColumnModified(VpoRequestPassengerPeer::REQUEST_ID)) $criteria->add(VpoRequestPassengerPeer::REQUEST_ID, $this->request_id);
		if ($this->isColumnModified(VpoRequestPassengerPeer::FEMA_NO)) $criteria->add(VpoRequestPassengerPeer::FEMA_NO, $this->fema_no);
		if ($this->isColumnModified(VpoRequestPassengerPeer::FIRST_NAME)) $criteria->add(VpoRequestPassengerPeer::FIRST_NAME, $this->first_name);
		if ($this->isColumnModified(VpoRequestPassengerPeer::LAST_LAME)) $criteria->add(VpoRequestPassengerPeer::LAST_LAME, $this->last_lame);
		if ($this->isColumnModified(VpoRequestPassengerPeer::ADDRESS1)) $criteria->add(VpoRequestPassengerPeer::ADDRESS1, $this->address1);
		if ($this->isColumnModified(VpoRequestPassengerPeer::ADDRESS2)) $criteria->add(VpoRequestPassengerPeer::ADDRESS2, $this->address2);
		if ($this->isColumnModified(VpoRequestPassengerPeer::CITY)) $criteria->add(VpoRequestPassengerPeer::CITY, $this->city);
		if ($this->isColumnModified(VpoRequestPassengerPeer::STATE)) $criteria->add(VpoRequestPassengerPeer::STATE, $this->state);
		if ($this->isColumnModified(VpoRequestPassengerPeer::COUNTRY)) $criteria->add(VpoRequestPassengerPeer::COUNTRY, $this->country);
		if ($this->isColumnModified(VpoRequestPassengerPeer::ZIPCODE)) $criteria->add(VpoRequestPassengerPeer::ZIPCODE, $this->zipcode);
		if ($this->isColumnModified(VpoRequestPassengerPeer::DAY_PHONE)) $criteria->add(VpoRequestPassengerPeer::DAY_PHONE, $this->day_phone);
		if ($this->isColumnModified(VpoRequestPassengerPeer::DAY_COMMENT)) $criteria->add(VpoRequestPassengerPeer::DAY_COMMENT, $this->day_comment);
		if ($this->isColumnModified(VpoRequestPassengerPeer::EVE_PHONE)) $criteria->add(VpoRequestPassengerPeer::EVE_PHONE, $this->eve_phone);
		if ($this->isColumnModified(VpoRequestPassengerPeer::EVE_COMMENT)) $criteria->add(VpoRequestPassengerPeer::EVE_COMMENT, $this->eve_comment);
		if ($this->isColumnModified(VpoRequestPassengerPeer::MOBILE_PHONE)) $criteria->add(VpoRequestPassengerPeer::MOBILE_PHONE, $this->mobile_phone);
		if ($this->isColumnModified(VpoRequestPassengerPeer::MOBILE_COMMENT)) $criteria->add(VpoRequestPassengerPeer::MOBILE_COMMENT, $this->mobile_comment);
		if ($this->isColumnModified(VpoRequestPassengerPeer::FAX_PHONE)) $criteria->add(VpoRequestPassengerPeer::FAX_PHONE, $this->fax_phone);
		if ($this->isColumnModified(VpoRequestPassengerPeer::FAX_COMMENT)) $criteria->add(VpoRequestPassengerPeer::FAX_COMMENT, $this->fax_comment);
		if ($this->isColumnModified(VpoRequestPassengerPeer::PAGER_PHONE)) $criteria->add(VpoRequestPassengerPeer::PAGER_PHONE, $this->pager_phone);
		if ($this->isColumnModified(VpoRequestPassengerPeer::PAGER_COMMENT)) $criteria->add(VpoRequestPassengerPeer::PAGER_COMMENT, $this->pager_comment);
		if ($this->isColumnModified(VpoRequestPassengerPeer::OTHER_PHONE1)) $criteria->add(VpoRequestPassengerPeer::OTHER_PHONE1, $this->other_phone1);
		if ($this->isColumnModified(VpoRequestPassengerPeer::OTHER_COMMENT1)) $criteria->add(VpoRequestPassengerPeer::OTHER_COMMENT1, $this->other_comment1);
		if ($this->isColumnModified(VpoRequestPassengerPeer::OTHER_PHONE2)) $criteria->add(VpoRequestPassengerPeer::OTHER_PHONE2, $this->other_phone2);
		if ($this->isColumnModified(VpoRequestPassengerPeer::OTHER_COMMENT2)) $criteria->add(VpoRequestPassengerPeer::OTHER_COMMENT2, $this->other_comment2);
		if ($this->isColumnModified(VpoRequestPassengerPeer::OTHER_PHONE3)) $criteria->add(VpoRequestPassengerPeer::OTHER_PHONE3, $this->other_phone3);
		if ($this->isColumnModified(VpoRequestPassengerPeer::OTHER_COMMENT3)) $criteria->add(VpoRequestPassengerPeer::OTHER_COMMENT3, $this->other_comment3);
		if ($this->isColumnModified(VpoRequestPassengerPeer::EMAIL)) $criteria->add(VpoRequestPassengerPeer::EMAIL, $this->email);
		if ($this->isColumnModified(VpoRequestPassengerPeer::ALT_EMAIL)) $criteria->add(VpoRequestPassengerPeer::ALT_EMAIL, $this->alt_email);
		if ($this->isColumnModified(VpoRequestPassengerPeer::AGE)) $criteria->add(VpoRequestPassengerPeer::AGE, $this->age);
		if ($this->isColumnModified(VpoRequestPassengerPeer::DATE_OF_BIRTH)) $criteria->add(VpoRequestPassengerPeer::DATE_OF_BIRTH, $this->date_of_birth);
		if ($this->isColumnModified(VpoRequestPassengerPeer::PRIMARY_LANGUAGE)) $criteria->add(VpoRequestPassengerPeer::PRIMARY_LANGUAGE, $this->primary_language);
		if ($this->isColumnModified(VpoRequestPassengerPeer::ENGLISH_SPOKEN)) $criteria->add(VpoRequestPassengerPeer::ENGLISH_SPOKEN, $this->english_spoken);
		if ($this->isColumnModified(VpoRequestPassengerPeer::PREGNANT)) $criteria->add(VpoRequestPassengerPeer::PREGNANT, $this->pregnant);
		if ($this->isColumnModified(VpoRequestPassengerPeer::OXYGEN_REQUIRED)) $criteria->add(VpoRequestPassengerPeer::OXYGEN_REQUIRED, $this->oxygen_required);
		if ($this->isColumnModified(VpoRequestPassengerPeer::WEIGHT)) $criteria->add(VpoRequestPassengerPeer::WEIGHT, $this->weight);
		if ($this->isColumnModified(VpoRequestPassengerPeer::AMBULATORY)) $criteria->add(VpoRequestPassengerPeer::AMBULATORY, $this->ambulatory);
		if ($this->isColumnModified(VpoRequestPassengerPeer::NOTES)) $criteria->add(VpoRequestPassengerPeer::NOTES, $this->notes);
		if ($this->isColumnModified(VpoRequestPassengerPeer::KNOWN_MEDICALCONDITION)) $criteria->add(VpoRequestPassengerPeer::KNOWN_MEDICALCONDITION, $this->known_medicalcondition);
		if ($this->isColumnModified(VpoRequestPassengerPeer::BAGGAGE_WEIGHT)) $criteria->add(VpoRequestPassengerPeer::BAGGAGE_WEIGHT, $this->baggage_weight);
		if ($this->isColumnModified(VpoRequestPassengerPeer::BAGGAGE_DESC)) $criteria->add(VpoRequestPassengerPeer::BAGGAGE_DESC, $this->baggage_desc);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(VpoRequestPassengerPeer::DATABASE_NAME);

		$criteria->add(VpoRequestPassengerPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of VpoRequestPassenger (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setRequestId($this->request_id);

		$copyObj->setFemaNo($this->fema_no);

		$copyObj->setFirstName($this->first_name);

		$copyObj->setLastLame($this->last_lame);

		$copyObj->setAddress1($this->address1);

		$copyObj->setAddress2($this->address2);

		$copyObj->setCity($this->city);

		$copyObj->setState($this->state);

		$copyObj->setCountry($this->country);

		$copyObj->setZipcode($this->zipcode);

		$copyObj->setDayPhone($this->day_phone);

		$copyObj->setDayComment($this->day_comment);

		$copyObj->setEvePhone($this->eve_phone);

		$copyObj->setEveComment($this->eve_comment);

		$copyObj->setMobilePhone($this->mobile_phone);

		$copyObj->setMobileComment($this->mobile_comment);

		$copyObj->setFaxPhone($this->fax_phone);

		$copyObj->setFaxComment($this->fax_comment);

		$copyObj->setPagerPhone($this->pager_phone);

		$copyObj->setPagerComment($this->pager_comment);

		$copyObj->setOtherPhone1($this->other_phone1);

		$copyObj->setOtherComment1($this->other_comment1);

		$copyObj->setOtherPhone2($this->other_phone2);

		$copyObj->setOtherComment2($this->other_comment2);

		$copyObj->setOtherPhone3($this->other_phone3);

		$copyObj->setOtherComment3($this->other_comment3);

		$copyObj->setEmail($this->email);

		$copyObj->setAltEmail($this->alt_email);

		$copyObj->setAge($this->age);

		$copyObj->setDateOfBirth($this->date_of_birth);

		$copyObj->setPrimaryLanguage($this->primary_language);

		$copyObj->setEnglishSpoken($this->english_spoken);

		$copyObj->setPregnant($this->pregnant);

		$copyObj->setOxygenRequired($this->oxygen_required);

		$copyObj->setWeight($this->weight);

		$copyObj->setAmbulatory($this->ambulatory);

		$copyObj->setNotes($this->notes);

		$copyObj->setKnownMedicalcondition($this->known_medicalcondition);

		$copyObj->setBaggageWeight($this->baggage_weight);

		$copyObj->setBaggageDesc($this->baggage_desc);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     VpoRequestPassenger Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     VpoRequestPassengerPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new VpoRequestPassengerPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a VpoRequest object.
	 *
	 * @param      VpoRequest $v
	 * @return     VpoRequestPassenger The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setVpoRequest(VpoRequest $v = null)
	{
		if ($v === null) {
			$this->setRequestId(NULL);
		} else {
			$this->setRequestId($v->getId());
		}

		$this->aVpoRequest = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the VpoRequest object, it will not be re-added.
		if ($v !== null) {
			$v->addVpoRequestPassenger($this);
		}

		return $this;
	}


	/**
	 * Get the associated VpoRequest object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     VpoRequest The associated VpoRequest object.
	 * @throws     PropelException
	 */
	public function getVpoRequest(PropelPDO $con = null)
	{
		if ($this->aVpoRequest === null && ($this->request_id !== null)) {
			$c = new Criteria(VpoRequestPeer::DATABASE_NAME);
			$c->add(VpoRequestPeer::ID, $this->request_id);
			$this->aVpoRequest = VpoRequestPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aVpoRequest->addVpoRequestPassengers($this);
			 */
		}
		return $this->aVpoRequest;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aVpoRequest = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseVpoRequestPassenger:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseVpoRequestPassenger::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseVpoRequestPassenger
