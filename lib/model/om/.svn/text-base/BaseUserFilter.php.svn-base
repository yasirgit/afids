<?php

/**
 * Base class that represents a row from the 'user_filter' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 01/05/11 08:19:52
 *
 * @package    lib.model.om
 */
abstract class BaseUserFilter extends BaseObject  implements Persistent {


  const PEER = 'UserFilterPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        UserFilterPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the person_id field.
	 * @var        int
	 */
	protected $person_id;

	/**
	 * The value for the date_range1 field.
	 * @var        string
	 */
	protected $date_range1;

	/**
	 * The value for the date_range2 field.
	 * @var        string
	 */
	protected $date_range2;

	/**
	 * The value for the day1 field.
	 * @var        string
	 */
	protected $day1;

	/**
	 * The value for the day2 field.
	 * @var        string
	 */
	protected $day2;

	/**
	 * The value for the day3 field.
	 * @var        string
	 */
	protected $day3;

	/**
	 * The value for the day4 field.
	 * @var        string
	 */
	protected $day4;

	/**
	 * The value for the day5 field.
	 * @var        string
	 */
	protected $day5;

	/**
	 * The value for the day6 field.
	 * @var        string
	 */
	protected $day6;

	/**
	 * The value for the day7 field.
	 * @var        string
	 */
	protected $day7;

	/**
	 * The value for the wing field.
	 * @var        string
	 */
	protected $wing;

	/**
	 * The value for the ident field.
	 * @var        string
	 */
	protected $ident;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the zipcode field.
	 * @var        string
	 */
	protected $zipcode;

	/**
	 * The value for the state field.
	 * @var        string
	 */
	protected $state;

	/**
	 * The value for the orgin field.
	 * @var        int
	 */
	protected $orgin;

	/**
	 * The value for the dest field.
	 * @var        int
	 */
	protected $dest;

	/**
	 * The value for the is_pilot field.
	 * @var        int
	 */
	protected $is_pilot;

	/**
	 * The value for the is_ma field.
	 * @var        int
	 */
	protected $is_ma;

	/**
	 * The value for the ifr_backup field.
	 * @var        int
	 */
	protected $ifr_backup;

	/**
	 * The value for the filled field.
	 * @var        int
	 */
	protected $filled;

	/**
	 * The value for the open field.
	 * @var        int
	 */
	protected $open;

	/**
	 * The value for the max_passenger field.
	 * @var        int
	 */
	protected $max_passenger;

	/**
	 * The value for the max_weight field.
	 * @var        int
	 */
	protected $max_weight;

	/**
	 * The value for the max_distance field.
	 * @var        int
	 */
	protected $max_distance;

	/**
	 * The value for the max_effciency field.
	 * @var        int
	 */
	protected $max_effciency;

	/**
	 * The value for the availability field.
	 * @var        int
	 */
	protected $availability;

	/**
	 * The value for the alltype field.
	 * @var        int
	 */
	protected $alltype;

	/**
	 * @var        array UserFilterMissionTypes[] Collection to store aggregation of UserFilterMissionTypes objects.
	 */
	protected $collUserFilterMissionTypess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUserFilterMissionTypess.
	 */
	private $lastUserFilterMissionTypesCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseUserFilter object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [person_id] column value.
	 * 
	 * @return     int
	 */
	public function getPersonId()
	{
		return $this->person_id;
	}

	/**
	 * Get the [optionally formatted] temporal [date_range1] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDateRange1($format = 'Y-m-d H:i:s')
	{
		if ($this->date_range1 === null) {
			return null;
		}


		if ($this->date_range1 === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->date_range1);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->date_range1, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [date_range2] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDateRange2($format = 'Y-m-d H:i:s')
	{
		if ($this->date_range2 === null) {
			return null;
		}


		if ($this->date_range2 === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->date_range2);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->date_range2, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [day1] column value.
	 * 
	 * @return     string
	 */
	public function getDay1()
	{
		return $this->day1;
	}

	/**
	 * Get the [day2] column value.
	 * 
	 * @return     string
	 */
	public function getDay2()
	{
		return $this->day2;
	}

	/**
	 * Get the [day3] column value.
	 * 
	 * @return     string
	 */
	public function getDay3()
	{
		return $this->day3;
	}

	/**
	 * Get the [day4] column value.
	 * 
	 * @return     string
	 */
	public function getDay4()
	{
		return $this->day4;
	}

	/**
	 * Get the [day5] column value.
	 * 
	 * @return     string
	 */
	public function getDay5()
	{
		return $this->day5;
	}

	/**
	 * Get the [day6] column value.
	 * 
	 * @return     string
	 */
	public function getDay6()
	{
		return $this->day6;
	}

	/**
	 * Get the [day7] column value.
	 * 
	 * @return     string
	 */
	public function getDay7()
	{
		return $this->day7;
	}

	/**
	 * Get the [wing] column value.
	 * 
	 * @return     string
	 */
	public function getWing()
	{
		return $this->wing;
	}

	/**
	 * Get the [ident] column value.
	 * 
	 * @return     string
	 */
	public function getIdent()
	{
		return $this->ident;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [zipcode] column value.
	 * 
	 * @return     string
	 */
	public function getZipcode()
	{
		return $this->zipcode;
	}

	/**
	 * Get the [state] column value.
	 * 
	 * @return     string
	 */
	public function getState()
	{
		return $this->state;
	}

	/**
	 * Get the [orgin] column value.
	 * 
	 * @return     int
	 */
	public function getOrgin()
	{
		return $this->orgin;
	}

	/**
	 * Get the [dest] column value.
	 * 
	 * @return     int
	 */
	public function getDest()
	{
		return $this->dest;
	}

	/**
	 * Get the [is_pilot] column value.
	 * 
	 * @return     int
	 */
	public function getIsPilot()
	{
		return $this->is_pilot;
	}

	/**
	 * Get the [is_ma] column value.
	 * 
	 * @return     int
	 */
	public function getIsMa()
	{
		return $this->is_ma;
	}

	/**
	 * Get the [ifr_backup] column value.
	 * 
	 * @return     int
	 */
	public function getIfrBackup()
	{
		return $this->ifr_backup;
	}

	/**
	 * Get the [filled] column value.
	 * 
	 * @return     int
	 */
	public function getFilled()
	{
		return $this->filled;
	}

	/**
	 * Get the [open] column value.
	 * 
	 * @return     int
	 */
	public function getOpen()
	{
		return $this->open;
	}

	/**
	 * Get the [max_passenger] column value.
	 * 
	 * @return     int
	 */
	public function getMaxPassenger()
	{
		return $this->max_passenger;
	}

	/**
	 * Get the [max_weight] column value.
	 * 
	 * @return     int
	 */
	public function getMaxWeight()
	{
		return $this->max_weight;
	}

	/**
	 * Get the [max_distance] column value.
	 * 
	 * @return     int
	 */
	public function getMaxDistance()
	{
		return $this->max_distance;
	}

	/**
	 * Get the [max_effciency] column value.
	 * 
	 * @return     int
	 */
	public function getMaxEffciency()
	{
		return $this->max_effciency;
	}

	/**
	 * Get the [availability] column value.
	 * 
	 * @return     int
	 */
	public function getAvailability()
	{
		return $this->availability;
	}

	/**
	 * Get the [alltype] column value.
	 * 
	 * @return     int
	 */
	public function getAlltype()
	{
		return $this->alltype;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = UserFilterPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [person_id] column.
	 * 
	 * @param      int $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setPersonId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->person_id !== $v) {
			$this->person_id = $v;
			$this->modifiedColumns[] = UserFilterPeer::PERSON_ID;
		}

		return $this;
	} // setPersonId()

	/**
	 * Sets the value of [date_range1] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setDateRange1($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->date_range1 !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->date_range1 !== null && $tmpDt = new DateTime($this->date_range1)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->date_range1 = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UserFilterPeer::DATE_RANGE1;
			}
		} // if either are not null

		return $this;
	} // setDateRange1()

	/**
	 * Sets the value of [date_range2] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setDateRange2($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->date_range2 !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->date_range2 !== null && $tmpDt = new DateTime($this->date_range2)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->date_range2 = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UserFilterPeer::DATE_RANGE2;
			}
		} // if either are not null

		return $this;
	} // setDateRange2()

	/**
	 * Set the value of [day1] column.
	 * 
	 * @param      string $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setDay1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->day1 !== $v) {
			$this->day1 = $v;
			$this->modifiedColumns[] = UserFilterPeer::DAY1;
		}

		return $this;
	} // setDay1()

	/**
	 * Set the value of [day2] column.
	 * 
	 * @param      string $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setDay2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->day2 !== $v) {
			$this->day2 = $v;
			$this->modifiedColumns[] = UserFilterPeer::DAY2;
		}

		return $this;
	} // setDay2()

	/**
	 * Set the value of [day3] column.
	 * 
	 * @param      string $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setDay3($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->day3 !== $v) {
			$this->day3 = $v;
			$this->modifiedColumns[] = UserFilterPeer::DAY3;
		}

		return $this;
	} // setDay3()

	/**
	 * Set the value of [day4] column.
	 * 
	 * @param      string $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setDay4($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->day4 !== $v) {
			$this->day4 = $v;
			$this->modifiedColumns[] = UserFilterPeer::DAY4;
		}

		return $this;
	} // setDay4()

	/**
	 * Set the value of [day5] column.
	 * 
	 * @param      string $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setDay5($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->day5 !== $v) {
			$this->day5 = $v;
			$this->modifiedColumns[] = UserFilterPeer::DAY5;
		}

		return $this;
	} // setDay5()

	/**
	 * Set the value of [day6] column.
	 * 
	 * @param      string $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setDay6($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->day6 !== $v) {
			$this->day6 = $v;
			$this->modifiedColumns[] = UserFilterPeer::DAY6;
		}

		return $this;
	} // setDay6()

	/**
	 * Set the value of [day7] column.
	 * 
	 * @param      string $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setDay7($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->day7 !== $v) {
			$this->day7 = $v;
			$this->modifiedColumns[] = UserFilterPeer::DAY7;
		}

		return $this;
	} // setDay7()

	/**
	 * Set the value of [wing] column.
	 * 
	 * @param      string $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setWing($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->wing !== $v) {
			$this->wing = $v;
			$this->modifiedColumns[] = UserFilterPeer::WING;
		}

		return $this;
	} // setWing()

	/**
	 * Set the value of [ident] column.
	 * 
	 * @param      string $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setIdent($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ident !== $v) {
			$this->ident = $v;
			$this->modifiedColumns[] = UserFilterPeer::IDENT;
		}

		return $this;
	} // setIdent()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = UserFilterPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [zipcode] column.
	 * 
	 * @param      string $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setZipcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->zipcode !== $v) {
			$this->zipcode = $v;
			$this->modifiedColumns[] = UserFilterPeer::ZIPCODE;
		}

		return $this;
	} // setZipcode()

	/**
	 * Set the value of [state] column.
	 * 
	 * @param      string $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->state !== $v) {
			$this->state = $v;
			$this->modifiedColumns[] = UserFilterPeer::STATE;
		}

		return $this;
	} // setState()

	/**
	 * Set the value of [orgin] column.
	 * 
	 * @param      int $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setOrgin($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->orgin !== $v) {
			$this->orgin = $v;
			$this->modifiedColumns[] = UserFilterPeer::ORGIN;
		}

		return $this;
	} // setOrgin()

	/**
	 * Set the value of [dest] column.
	 * 
	 * @param      int $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setDest($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->dest !== $v) {
			$this->dest = $v;
			$this->modifiedColumns[] = UserFilterPeer::DEST;
		}

		return $this;
	} // setDest()

	/**
	 * Set the value of [is_pilot] column.
	 * 
	 * @param      int $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setIsPilot($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->is_pilot !== $v) {
			$this->is_pilot = $v;
			$this->modifiedColumns[] = UserFilterPeer::IS_PILOT;
		}

		return $this;
	} // setIsPilot()

	/**
	 * Set the value of [is_ma] column.
	 * 
	 * @param      int $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setIsMa($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->is_ma !== $v) {
			$this->is_ma = $v;
			$this->modifiedColumns[] = UserFilterPeer::IS_MA;
		}

		return $this;
	} // setIsMa()

	/**
	 * Set the value of [ifr_backup] column.
	 * 
	 * @param      int $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setIfrBackup($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ifr_backup !== $v) {
			$this->ifr_backup = $v;
			$this->modifiedColumns[] = UserFilterPeer::IFR_BACKUP;
		}

		return $this;
	} // setIfrBackup()

	/**
	 * Set the value of [filled] column.
	 * 
	 * @param      int $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setFilled($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->filled !== $v) {
			$this->filled = $v;
			$this->modifiedColumns[] = UserFilterPeer::FILLED;
		}

		return $this;
	} // setFilled()

	/**
	 * Set the value of [open] column.
	 * 
	 * @param      int $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setOpen($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->open !== $v) {
			$this->open = $v;
			$this->modifiedColumns[] = UserFilterPeer::OPEN;
		}

		return $this;
	} // setOpen()

	/**
	 * Set the value of [max_passenger] column.
	 * 
	 * @param      int $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setMaxPassenger($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->max_passenger !== $v) {
			$this->max_passenger = $v;
			$this->modifiedColumns[] = UserFilterPeer::MAX_PASSENGER;
		}

		return $this;
	} // setMaxPassenger()

	/**
	 * Set the value of [max_weight] column.
	 * 
	 * @param      int $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setMaxWeight($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->max_weight !== $v) {
			$this->max_weight = $v;
			$this->modifiedColumns[] = UserFilterPeer::MAX_WEIGHT;
		}

		return $this;
	} // setMaxWeight()

	/**
	 * Set the value of [max_distance] column.
	 * 
	 * @param      int $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setMaxDistance($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->max_distance !== $v) {
			$this->max_distance = $v;
			$this->modifiedColumns[] = UserFilterPeer::MAX_DISTANCE;
		}

		return $this;
	} // setMaxDistance()

	/**
	 * Set the value of [max_effciency] column.
	 * 
	 * @param      int $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setMaxEffciency($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->max_effciency !== $v) {
			$this->max_effciency = $v;
			$this->modifiedColumns[] = UserFilterPeer::MAX_EFFCIENCY;
		}

		return $this;
	} // setMaxEffciency()

	/**
	 * Set the value of [availability] column.
	 * 
	 * @param      int $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setAvailability($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->availability !== $v) {
			$this->availability = $v;
			$this->modifiedColumns[] = UserFilterPeer::AVAILABILITY;
		}

		return $this;
	} // setAvailability()

	/**
	 * Set the value of [alltype] column.
	 * 
	 * @param      int $v new value
	 * @return     UserFilter The current object (for fluent API support)
	 */
	public function setAlltype($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->alltype !== $v) {
			$this->alltype = $v;
			$this->modifiedColumns[] = UserFilterPeer::ALLTYPE;
		}

		return $this;
	} // setAlltype()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->person_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->date_range1 = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->date_range2 = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->day1 = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->day2 = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->day3 = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->day4 = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->day5 = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->day6 = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->day7 = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->wing = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->ident = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->city = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->zipcode = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->state = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->orgin = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->dest = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->is_pilot = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->is_ma = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->ifr_backup = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->filled = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->open = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->max_passenger = ($row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
			$this->max_weight = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
			$this->max_distance = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
			$this->max_effciency = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->availability = ($row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->alltype = ($row[$startcol + 28] !== null) ? (int) $row[$startcol + 28] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 29; // 29 = UserFilterPeer::NUM_COLUMNS - UserFilterPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating UserFilter object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserFilterPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = UserFilterPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collUserFilterMissionTypess = null;
			$this->lastUserFilterMissionTypesCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseUserFilter:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserFilterPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			UserFilterPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseUserFilter:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseUserFilter:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UserFilterPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseUserFilter:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			UserFilterPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = UserFilterPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = UserFilterPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += UserFilterPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collUserFilterMissionTypess !== null) {
				foreach ($this->collUserFilterMissionTypess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = UserFilterPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collUserFilterMissionTypess !== null) {
					foreach ($this->collUserFilterMissionTypess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UserFilterPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getPersonId();
				break;
			case 2:
				return $this->getDateRange1();
				break;
			case 3:
				return $this->getDateRange2();
				break;
			case 4:
				return $this->getDay1();
				break;
			case 5:
				return $this->getDay2();
				break;
			case 6:
				return $this->getDay3();
				break;
			case 7:
				return $this->getDay4();
				break;
			case 8:
				return $this->getDay5();
				break;
			case 9:
				return $this->getDay6();
				break;
			case 10:
				return $this->getDay7();
				break;
			case 11:
				return $this->getWing();
				break;
			case 12:
				return $this->getIdent();
				break;
			case 13:
				return $this->getCity();
				break;
			case 14:
				return $this->getZipcode();
				break;
			case 15:
				return $this->getState();
				break;
			case 16:
				return $this->getOrgin();
				break;
			case 17:
				return $this->getDest();
				break;
			case 18:
				return $this->getIsPilot();
				break;
			case 19:
				return $this->getIsMa();
				break;
			case 20:
				return $this->getIfrBackup();
				break;
			case 21:
				return $this->getFilled();
				break;
			case 22:
				return $this->getOpen();
				break;
			case 23:
				return $this->getMaxPassenger();
				break;
			case 24:
				return $this->getMaxWeight();
				break;
			case 25:
				return $this->getMaxDistance();
				break;
			case 26:
				return $this->getMaxEffciency();
				break;
			case 27:
				return $this->getAvailability();
				break;
			case 28:
				return $this->getAlltype();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = UserFilterPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getPersonId(),
			$keys[2] => $this->getDateRange1(),
			$keys[3] => $this->getDateRange2(),
			$keys[4] => $this->getDay1(),
			$keys[5] => $this->getDay2(),
			$keys[6] => $this->getDay3(),
			$keys[7] => $this->getDay4(),
			$keys[8] => $this->getDay5(),
			$keys[9] => $this->getDay6(),
			$keys[10] => $this->getDay7(),
			$keys[11] => $this->getWing(),
			$keys[12] => $this->getIdent(),
			$keys[13] => $this->getCity(),
			$keys[14] => $this->getZipcode(),
			$keys[15] => $this->getState(),
			$keys[16] => $this->getOrgin(),
			$keys[17] => $this->getDest(),
			$keys[18] => $this->getIsPilot(),
			$keys[19] => $this->getIsMa(),
			$keys[20] => $this->getIfrBackup(),
			$keys[21] => $this->getFilled(),
			$keys[22] => $this->getOpen(),
			$keys[23] => $this->getMaxPassenger(),
			$keys[24] => $this->getMaxWeight(),
			$keys[25] => $this->getMaxDistance(),
			$keys[26] => $this->getMaxEffciency(),
			$keys[27] => $this->getAvailability(),
			$keys[28] => $this->getAlltype(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UserFilterPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setPersonId($value);
				break;
			case 2:
				$this->setDateRange1($value);
				break;
			case 3:
				$this->setDateRange2($value);
				break;
			case 4:
				$this->setDay1($value);
				break;
			case 5:
				$this->setDay2($value);
				break;
			case 6:
				$this->setDay3($value);
				break;
			case 7:
				$this->setDay4($value);
				break;
			case 8:
				$this->setDay5($value);
				break;
			case 9:
				$this->setDay6($value);
				break;
			case 10:
				$this->setDay7($value);
				break;
			case 11:
				$this->setWing($value);
				break;
			case 12:
				$this->setIdent($value);
				break;
			case 13:
				$this->setCity($value);
				break;
			case 14:
				$this->setZipcode($value);
				break;
			case 15:
				$this->setState($value);
				break;
			case 16:
				$this->setOrgin($value);
				break;
			case 17:
				$this->setDest($value);
				break;
			case 18:
				$this->setIsPilot($value);
				break;
			case 19:
				$this->setIsMa($value);
				break;
			case 20:
				$this->setIfrBackup($value);
				break;
			case 21:
				$this->setFilled($value);
				break;
			case 22:
				$this->setOpen($value);
				break;
			case 23:
				$this->setMaxPassenger($value);
				break;
			case 24:
				$this->setMaxWeight($value);
				break;
			case 25:
				$this->setMaxDistance($value);
				break;
			case 26:
				$this->setMaxEffciency($value);
				break;
			case 27:
				$this->setAvailability($value);
				break;
			case 28:
				$this->setAlltype($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = UserFilterPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setPersonId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setDateRange1($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setDateRange2($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setDay1($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setDay2($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setDay3($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setDay4($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setDay5($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setDay6($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setDay7($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setWing($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setIdent($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCity($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setZipcode($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setState($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setOrgin($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setDest($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setIsPilot($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setIsMa($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setIfrBackup($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setFilled($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setOpen($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setMaxPassenger($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setMaxWeight($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setMaxDistance($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setMaxEffciency($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setAvailability($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setAlltype($arr[$keys[28]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(UserFilterPeer::DATABASE_NAME);

		if ($this->isColumnModified(UserFilterPeer::ID)) $criteria->add(UserFilterPeer::ID, $this->id);
		if ($this->isColumnModified(UserFilterPeer::PERSON_ID)) $criteria->add(UserFilterPeer::PERSON_ID, $this->person_id);
		if ($this->isColumnModified(UserFilterPeer::DATE_RANGE1)) $criteria->add(UserFilterPeer::DATE_RANGE1, $this->date_range1);
		if ($this->isColumnModified(UserFilterPeer::DATE_RANGE2)) $criteria->add(UserFilterPeer::DATE_RANGE2, $this->date_range2);
		if ($this->isColumnModified(UserFilterPeer::DAY1)) $criteria->add(UserFilterPeer::DAY1, $this->day1);
		if ($this->isColumnModified(UserFilterPeer::DAY2)) $criteria->add(UserFilterPeer::DAY2, $this->day2);
		if ($this->isColumnModified(UserFilterPeer::DAY3)) $criteria->add(UserFilterPeer::DAY3, $this->day3);
		if ($this->isColumnModified(UserFilterPeer::DAY4)) $criteria->add(UserFilterPeer::DAY4, $this->day4);
		if ($this->isColumnModified(UserFilterPeer::DAY5)) $criteria->add(UserFilterPeer::DAY5, $this->day5);
		if ($this->isColumnModified(UserFilterPeer::DAY6)) $criteria->add(UserFilterPeer::DAY6, $this->day6);
		if ($this->isColumnModified(UserFilterPeer::DAY7)) $criteria->add(UserFilterPeer::DAY7, $this->day7);
		if ($this->isColumnModified(UserFilterPeer::WING)) $criteria->add(UserFilterPeer::WING, $this->wing);
		if ($this->isColumnModified(UserFilterPeer::IDENT)) $criteria->add(UserFilterPeer::IDENT, $this->ident);
		if ($this->isColumnModified(UserFilterPeer::CITY)) $criteria->add(UserFilterPeer::CITY, $this->city);
		if ($this->isColumnModified(UserFilterPeer::ZIPCODE)) $criteria->add(UserFilterPeer::ZIPCODE, $this->zipcode);
		if ($this->isColumnModified(UserFilterPeer::STATE)) $criteria->add(UserFilterPeer::STATE, $this->state);
		if ($this->isColumnModified(UserFilterPeer::ORGIN)) $criteria->add(UserFilterPeer::ORGIN, $this->orgin);
		if ($this->isColumnModified(UserFilterPeer::DEST)) $criteria->add(UserFilterPeer::DEST, $this->dest);
		if ($this->isColumnModified(UserFilterPeer::IS_PILOT)) $criteria->add(UserFilterPeer::IS_PILOT, $this->is_pilot);
		if ($this->isColumnModified(UserFilterPeer::IS_MA)) $criteria->add(UserFilterPeer::IS_MA, $this->is_ma);
		if ($this->isColumnModified(UserFilterPeer::IFR_BACKUP)) $criteria->add(UserFilterPeer::IFR_BACKUP, $this->ifr_backup);
		if ($this->isColumnModified(UserFilterPeer::FILLED)) $criteria->add(UserFilterPeer::FILLED, $this->filled);
		if ($this->isColumnModified(UserFilterPeer::OPEN)) $criteria->add(UserFilterPeer::OPEN, $this->open);
		if ($this->isColumnModified(UserFilterPeer::MAX_PASSENGER)) $criteria->add(UserFilterPeer::MAX_PASSENGER, $this->max_passenger);
		if ($this->isColumnModified(UserFilterPeer::MAX_WEIGHT)) $criteria->add(UserFilterPeer::MAX_WEIGHT, $this->max_weight);
		if ($this->isColumnModified(UserFilterPeer::MAX_DISTANCE)) $criteria->add(UserFilterPeer::MAX_DISTANCE, $this->max_distance);
		if ($this->isColumnModified(UserFilterPeer::MAX_EFFCIENCY)) $criteria->add(UserFilterPeer::MAX_EFFCIENCY, $this->max_effciency);
		if ($this->isColumnModified(UserFilterPeer::AVAILABILITY)) $criteria->add(UserFilterPeer::AVAILABILITY, $this->availability);
		if ($this->isColumnModified(UserFilterPeer::ALLTYPE)) $criteria->add(UserFilterPeer::ALLTYPE, $this->alltype);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(UserFilterPeer::DATABASE_NAME);

		$criteria->add(UserFilterPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of UserFilter (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setPersonId($this->person_id);

		$copyObj->setDateRange1($this->date_range1);

		$copyObj->setDateRange2($this->date_range2);

		$copyObj->setDay1($this->day1);

		$copyObj->setDay2($this->day2);

		$copyObj->setDay3($this->day3);

		$copyObj->setDay4($this->day4);

		$copyObj->setDay5($this->day5);

		$copyObj->setDay6($this->day6);

		$copyObj->setDay7($this->day7);

		$copyObj->setWing($this->wing);

		$copyObj->setIdent($this->ident);

		$copyObj->setCity($this->city);

		$copyObj->setZipcode($this->zipcode);

		$copyObj->setState($this->state);

		$copyObj->setOrgin($this->orgin);

		$copyObj->setDest($this->dest);

		$copyObj->setIsPilot($this->is_pilot);

		$copyObj->setIsMa($this->is_ma);

		$copyObj->setIfrBackup($this->ifr_backup);

		$copyObj->setFilled($this->filled);

		$copyObj->setOpen($this->open);

		$copyObj->setMaxPassenger($this->max_passenger);

		$copyObj->setMaxWeight($this->max_weight);

		$copyObj->setMaxDistance($this->max_distance);

		$copyObj->setMaxEffciency($this->max_effciency);

		$copyObj->setAvailability($this->availability);

		$copyObj->setAlltype($this->alltype);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getUserFilterMissionTypess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUserFilterMissionTypes($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     UserFilter Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     UserFilterPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new UserFilterPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collUserFilterMissionTypess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUserFilterMissionTypess()
	 */
	public function clearUserFilterMissionTypess()
	{
		$this->collUserFilterMissionTypess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUserFilterMissionTypess collection (array).
	 *
	 * By default this just sets the collUserFilterMissionTypess collection to an empty array (like clearcollUserFilterMissionTypess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUserFilterMissionTypess()
	{
		$this->collUserFilterMissionTypess = array();
	}

	/**
	 * Gets an array of UserFilterMissionTypes objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this UserFilter has previously been saved, it will retrieve
	 * related UserFilterMissionTypess from storage. If this UserFilter is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UserFilterMissionTypes[]
	 * @throws     PropelException
	 */
	public function getUserFilterMissionTypess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserFilterPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserFilterMissionTypess === null) {
			if ($this->isNew()) {
			   $this->collUserFilterMissionTypess = array();
			} else {

				$criteria->add(UserFilterMissionTypesPeer::USER_FILTER_ID, $this->id);

				UserFilterMissionTypesPeer::addSelectColumns($criteria);
				$this->collUserFilterMissionTypess = UserFilterMissionTypesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserFilterMissionTypesPeer::USER_FILTER_ID, $this->id);

				UserFilterMissionTypesPeer::addSelectColumns($criteria);
				if (!isset($this->lastUserFilterMissionTypesCriteria) || !$this->lastUserFilterMissionTypesCriteria->equals($criteria)) {
					$this->collUserFilterMissionTypess = UserFilterMissionTypesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserFilterMissionTypesCriteria = $criteria;
		return $this->collUserFilterMissionTypess;
	}

	/**
	 * Returns the number of related UserFilterMissionTypes objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UserFilterMissionTypes objects.
	 * @throws     PropelException
	 */
	public function countUserFilterMissionTypess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserFilterPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUserFilterMissionTypess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserFilterMissionTypesPeer::USER_FILTER_ID, $this->id);

				$count = UserFilterMissionTypesPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserFilterMissionTypesPeer::USER_FILTER_ID, $this->id);

				if (!isset($this->lastUserFilterMissionTypesCriteria) || !$this->lastUserFilterMissionTypesCriteria->equals($criteria)) {
					$count = UserFilterMissionTypesPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collUserFilterMissionTypess);
				}
			} else {
				$count = count($this->collUserFilterMissionTypess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UserFilterMissionTypes object to this object
	 * through the UserFilterMissionTypes foreign key attribute.
	 *
	 * @param      UserFilterMissionTypes $l UserFilterMissionTypes
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUserFilterMissionTypes(UserFilterMissionTypes $l)
	{
		if ($this->collUserFilterMissionTypess === null) {
			$this->initUserFilterMissionTypess();
		}
		if (!in_array($l, $this->collUserFilterMissionTypess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUserFilterMissionTypess, $l);
			$l->setUserFilter($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this UserFilter is new, it will return
	 * an empty collection; or if this UserFilter has previously
	 * been saved, it will retrieve related UserFilterMissionTypess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in UserFilter.
	 */
	public function getUserFilterMissionTypessJoinMissionType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UserFilterPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserFilterMissionTypess === null) {
			if ($this->isNew()) {
				$this->collUserFilterMissionTypess = array();
			} else {

				$criteria->add(UserFilterMissionTypesPeer::USER_FILTER_ID, $this->id);

				$this->collUserFilterMissionTypess = UserFilterMissionTypesPeer::doSelectJoinMissionType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserFilterMissionTypesPeer::USER_FILTER_ID, $this->id);

			if (!isset($this->lastUserFilterMissionTypesCriteria) || !$this->lastUserFilterMissionTypesCriteria->equals($criteria)) {
				$this->collUserFilterMissionTypess = UserFilterMissionTypesPeer::doSelectJoinMissionType($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserFilterMissionTypesCriteria = $criteria;

		return $this->collUserFilterMissionTypess;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collUserFilterMissionTypess) {
				foreach ((array) $this->collUserFilterMissionTypess as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collUserFilterMissionTypess = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseUserFilter:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseUserFilter::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseUserFilter
