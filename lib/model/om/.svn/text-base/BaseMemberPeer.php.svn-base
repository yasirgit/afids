<?php

/**
 * Base static class for performing query and update operations on the 'member' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 01/05/11 08:19:44
 *
 * @package    lib.model.om
 */
abstract class BaseMemberPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'member';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.Member';

	/** The total number of columns. */
	const NUM_COLUMNS = 49;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the ID field */
	const ID = 'member.ID';

	/** the column name for the PERSON_ID field */
	const PERSON_ID = 'member.PERSON_ID';

	/** the column name for the EXTERNAL_ID field */
	const EXTERNAL_ID = 'member.EXTERNAL_ID';

	/** the column name for the WING_ID field */
	const WING_ID = 'member.WING_ID';

	/** the column name for the MEMBER_CLASS_ID field */
	const MEMBER_CLASS_ID = 'member.MEMBER_CLASS_ID';

	/** the column name for the MASTER_MEMBER_ID field */
	const MASTER_MEMBER_ID = 'member.MASTER_MEMBER_ID';

	/** the column name for the JOIN_DATE field */
	const JOIN_DATE = 'member.JOIN_DATE';

	/** the column name for the ACTIVE field */
	const ACTIVE = 'member.ACTIVE';

	/** the column name for the INACTIVE_REASON field */
	const INACTIVE_REASON = 'member.INACTIVE_REASON';

	/** the column name for the INACTIVE_COMMENT field */
	const INACTIVE_COMMENT = 'member.INACTIVE_COMMENT';

	/** the column name for the FLIGHT_STATUS field */
	const FLIGHT_STATUS = 'member.FLIGHT_STATUS';

	/** the column name for the CO_PILOT field */
	const CO_PILOT = 'member.CO_PILOT';

	/** the column name for the CONTACT field */
	const CONTACT = 'member.CONTACT';

	/** the column name for the DATE_OF_BIRTH field */
	const DATE_OF_BIRTH = 'member.DATE_OF_BIRTH';

	/** the column name for the WEIGHT field */
	const WEIGHT = 'member.WEIGHT';

	/** the column name for the SPOUSE_NAME field */
	const SPOUSE_NAME = 'member.SPOUSE_NAME';

	/** the column name for the LANGUAGES field */
	const LANGUAGES = 'member.LANGUAGES';

	/** the column name for the COORDINATOR_NOTES field */
	const COORDINATOR_NOTES = 'member.COORDINATOR_NOTES';

	/** the column name for the RENEWED_DATE field */
	const RENEWED_DATE = 'member.RENEWED_DATE';

	/** the column name for the RENEWAL_DATE field */
	const RENEWAL_DATE = 'member.RENEWAL_DATE';

	/** the column name for the RENEWAL_NOTICE1 field */
	const RENEWAL_NOTICE1 = 'member.RENEWAL_NOTICE1';

	/** the column name for the RENEWAL_NOTICE2 field */
	const RENEWAL_NOTICE2 = 'member.RENEWAL_NOTICE2';

	/** the column name for the RENEWAL_NOTICE3 field */
	const RENEWAL_NOTICE3 = 'member.RENEWAL_NOTICE3';

	/** the column name for the RENEWAL_NOTICE4 field */
	const RENEWAL_NOTICE4 = 'member.RENEWAL_NOTICE4';

	/** the column name for the REVIEW_DONE field */
	const REVIEW_DONE = 'member.REVIEW_DONE';

	/** the column name for the ED_NEW_MEMBER_NOTIFY field */
	const ED_NEW_MEMBER_NOTIFY = 'member.ED_NEW_MEMBER_NOTIFY';

	/** the column name for the WN_NEW_MEMBERN_NTIFY field */
	const WN_NEW_MEMBERN_NTIFY = 'member.WN_NEW_MEMBERN_NTIFY';

	/** the column name for the NO_WING_CONTACT_ACK field */
	const NO_WING_CONTACT_ACK = 'member.NO_WING_CONTACT_ACK';

	/** the column name for the HOLD_HARMLESS_RECEIVED field */
	const HOLD_HARMLESS_RECEIVED = 'member.HOLD_HARMLESS_RECEIVED';

	/** the column name for the MEMBER_WELCOMED field */
	const MEMBER_WELCOMED = 'member.MEMBER_WELCOMED';

	/** the column name for the BADGE_MADE field */
	const BADGE_MADE = 'member.BADGE_MADE';

	/** the column name for the NOTEBOOK_SENT field */
	const NOTEBOOK_SENT = 'member.NOTEBOOK_SENT';

	/** the column name for the CLOTHING_SENT field */
	const CLOTHING_SENT = 'member.CLOTHING_SENT';

	/** the column name for the S_MOD_MEMBER_NOTIFY field */
	const S_MOD_MEMBER_NOTIFY = 'member.S_MOD_MEMBER_NOTIFY';

	/** the column name for the W_MOD_MEMBER_NOTIFY field */
	const W_MOD_MEMBER_NOTIFY = 'member.W_MOD_MEMBER_NOTIFY';

	/** the column name for the RENEW_MARK field */
	const RENEW_MARK = 'member.RENEW_MARK';

	/** the column name for the RENEWAL_SENT_DATE field */
	const RENEWAL_SENT_DATE = 'member.RENEWAL_SENT_DATE';

	/** the column name for the S_LATE_RENEWAL_NOTIFY field */
	const S_LATE_RENEWAL_NOTIFY = 'member.S_LATE_RENEWAL_NOTIFY';

	/** the column name for the W_LATE_RENEWAL_NOTIFY field */
	const W_LATE_RENEWAL_NOTIFY = 'member.W_LATE_RENEWAL_NOTIFY';

	/** the column name for the S_INACTIVE_NOTIFY field */
	const S_INACTIVE_NOTIFY = 'member.S_INACTIVE_NOTIFY';

	/** the column name for the W_INACTIVE_NOTIFY field */
	const W_INACTIVE_NOTIFY = 'member.W_INACTIVE_NOTIFY';

	/** the column name for the W_NOT_ORIENTED_NOTIFY_DATE1 field */
	const W_NOT_ORIENTED_NOTIFY_DATE1 = 'member.W_NOT_ORIENTED_NOTIFY_DATE1';

	/** the column name for the W_NOT_ORIENTED_NOTIFY_DATE2 field */
	const W_NOT_ORIENTED_NOTIFY_DATE2 = 'member.W_NOT_ORIENTED_NOTIFY_DATE2';

	/** the column name for the EMERGENCY_CONTACT_NAME field */
	const EMERGENCY_CONTACT_NAME = 'member.EMERGENCY_CONTACT_NAME';

	/** the column name for the EMERGENCY_CONTACT_PHONE field */
	const EMERGENCY_CONTACT_PHONE = 'member.EMERGENCY_CONTACT_PHONE';

	/** the column name for the DRIVERS_LICENSE_STATE field */
	const DRIVERS_LICENSE_STATE = 'member.DRIVERS_LICENSE_STATE';

	/** the column name for the DRIVERS_LICENSE_NUMBER field */
	const DRIVERS_LICENSE_NUMBER = 'member.DRIVERS_LICENSE_NUMBER';

	/** the column name for the HEIGHT field */
	const HEIGHT = 'member.HEIGHT';

	/** the column name for the SECONDARY_WING_ID field */
	const SECONDARY_WING_ID = 'member.SECONDARY_WING_ID';

	/**
	 * An identiy map to hold any loaded instances of Member objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array Member[]
	 */
	public static $instances = array();

	/**
	 * The MapBuilder instance for this peer.
	 * @var        MapBuilder
	 */
	private static $mapBuilder = null;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('Id', 'PersonId', 'ExternalId', 'WingId', 'MemberClassId', 'MasterMemberId', 'JoinDate', 'Active', 'InactiveReason', 'InactiveComment', 'FlightStatus', 'CoPilot', 'Contact', 'DateOfBirth', 'Weight', 'SpouseName', 'Languages', 'CoordinatorNotes', 'RenewedDate', 'RenewalDate', 'RenewalNotice1', 'RenewalNotice2', 'RenewalNotice3', 'RenewalNotice4', 'ReviewDone', 'EdNewMemberNotify', 'WnNewMembernNtify', 'NoWingContactAck', 'HoldHarmlessReceived', 'MemberWelcomed', 'BadgeMade', 'NotebookSent', 'ClothingSent', 'SModMemberNotify', 'WModMemberNotify', 'RenewMark', 'RenewalSentDate', 'SLateRenewalNotify', 'WLateRenewalNotify', 'SInactiveNotify', 'WInactiveNotify', 'WNotOrientedNotifyDate1', 'WNotOrientedNotifyDate2', 'EmergencyContactName', 'EmergencyContactPhone', 'DriversLicenseState', 'DriversLicenseNumber', 'Height', 'SecondaryWingId', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id', 'personId', 'externalId', 'wingId', 'memberClassId', 'masterMemberId', 'joinDate', 'active', 'inactiveReason', 'inactiveComment', 'flightStatus', 'coPilot', 'contact', 'dateOfBirth', 'weight', 'spouseName', 'languages', 'coordinatorNotes', 'renewedDate', 'renewalDate', 'renewalNotice1', 'renewalNotice2', 'renewalNotice3', 'renewalNotice4', 'reviewDone', 'edNewMemberNotify', 'wnNewMembernNtify', 'noWingContactAck', 'holdHarmlessReceived', 'memberWelcomed', 'badgeMade', 'notebookSent', 'clothingSent', 'sModMemberNotify', 'wModMemberNotify', 'renewMark', 'renewalSentDate', 'sLateRenewalNotify', 'wLateRenewalNotify', 'sInactiveNotify', 'wInactiveNotify', 'wNotOrientedNotifyDate1', 'wNotOrientedNotifyDate2', 'emergencyContactName', 'emergencyContactPhone', 'driversLicenseState', 'driversLicenseNumber', 'height', 'secondaryWingId', ),
		BasePeer::TYPE_COLNAME => array (self::ID, self::PERSON_ID, self::EXTERNAL_ID, self::WING_ID, self::MEMBER_CLASS_ID, self::MASTER_MEMBER_ID, self::JOIN_DATE, self::ACTIVE, self::INACTIVE_REASON, self::INACTIVE_COMMENT, self::FLIGHT_STATUS, self::CO_PILOT, self::CONTACT, self::DATE_OF_BIRTH, self::WEIGHT, self::SPOUSE_NAME, self::LANGUAGES, self::COORDINATOR_NOTES, self::RENEWED_DATE, self::RENEWAL_DATE, self::RENEWAL_NOTICE1, self::RENEWAL_NOTICE2, self::RENEWAL_NOTICE3, self::RENEWAL_NOTICE4, self::REVIEW_DONE, self::ED_NEW_MEMBER_NOTIFY, self::WN_NEW_MEMBERN_NTIFY, self::NO_WING_CONTACT_ACK, self::HOLD_HARMLESS_RECEIVED, self::MEMBER_WELCOMED, self::BADGE_MADE, self::NOTEBOOK_SENT, self::CLOTHING_SENT, self::S_MOD_MEMBER_NOTIFY, self::W_MOD_MEMBER_NOTIFY, self::RENEW_MARK, self::RENEWAL_SENT_DATE, self::S_LATE_RENEWAL_NOTIFY, self::W_LATE_RENEWAL_NOTIFY, self::S_INACTIVE_NOTIFY, self::W_INACTIVE_NOTIFY, self::W_NOT_ORIENTED_NOTIFY_DATE1, self::W_NOT_ORIENTED_NOTIFY_DATE2, self::EMERGENCY_CONTACT_NAME, self::EMERGENCY_CONTACT_PHONE, self::DRIVERS_LICENSE_STATE, self::DRIVERS_LICENSE_NUMBER, self::HEIGHT, self::SECONDARY_WING_ID, ),
		BasePeer::TYPE_FIELDNAME => array ('id', 'person_id', 'external_id', 'wing_id', 'member_class_id', 'master_member_id', 'join_date', 'active', 'inactive_reason', 'inactive_comment', 'flight_status', 'co_pilot', 'contact', 'date_of_birth', 'weight', 'spouse_name', 'languages', 'coordinator_notes', 'renewed_date', 'renewal_date', 'renewal_notice1', 'renewal_notice2', 'renewal_notice3', 'renewal_notice4', 'review_done', 'ed_new_member_notify', 'wn_new_memberN_ntify', 'no_wing_contact_ack', 'hold_harmless_received', 'member_welcomed', 'badge_made', 'notebook_sent', 'clothing_sent', 's_mod_member_notify', 'w_mod_member_notify', 'renew_mark', 'renewal_sent_date', 's_late_renewal_notify', 'w_late_renewal_notify', 's_inactive_notify', 'w_inactive_notify', 'w_not_oriented_notify_date1', 'w_not_oriented_notify_date2', 'emergency_contact_name', 'emergency_contact_phone', 'drivers_license_state', 'drivers_license_number', 'height', 'secondary_wing_id', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('Id' => 0, 'PersonId' => 1, 'ExternalId' => 2, 'WingId' => 3, 'MemberClassId' => 4, 'MasterMemberId' => 5, 'JoinDate' => 6, 'Active' => 7, 'InactiveReason' => 8, 'InactiveComment' => 9, 'FlightStatus' => 10, 'CoPilot' => 11, 'Contact' => 12, 'DateOfBirth' => 13, 'Weight' => 14, 'SpouseName' => 15, 'Languages' => 16, 'CoordinatorNotes' => 17, 'RenewedDate' => 18, 'RenewalDate' => 19, 'RenewalNotice1' => 20, 'RenewalNotice2' => 21, 'RenewalNotice3' => 22, 'RenewalNotice4' => 23, 'ReviewDone' => 24, 'EdNewMemberNotify' => 25, 'WnNewMembernNtify' => 26, 'NoWingContactAck' => 27, 'HoldHarmlessReceived' => 28, 'MemberWelcomed' => 29, 'BadgeMade' => 30, 'NotebookSent' => 31, 'ClothingSent' => 32, 'SModMemberNotify' => 33, 'WModMemberNotify' => 34, 'RenewMark' => 35, 'RenewalSentDate' => 36, 'SLateRenewalNotify' => 37, 'WLateRenewalNotify' => 38, 'SInactiveNotify' => 39, 'WInactiveNotify' => 40, 'WNotOrientedNotifyDate1' => 41, 'WNotOrientedNotifyDate2' => 42, 'EmergencyContactName' => 43, 'EmergencyContactPhone' => 44, 'DriversLicenseState' => 45, 'DriversLicenseNumber' => 46, 'Height' => 47, 'SecondaryWingId' => 48, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id' => 0, 'personId' => 1, 'externalId' => 2, 'wingId' => 3, 'memberClassId' => 4, 'masterMemberId' => 5, 'joinDate' => 6, 'active' => 7, 'inactiveReason' => 8, 'inactiveComment' => 9, 'flightStatus' => 10, 'coPilot' => 11, 'contact' => 12, 'dateOfBirth' => 13, 'weight' => 14, 'spouseName' => 15, 'languages' => 16, 'coordinatorNotes' => 17, 'renewedDate' => 18, 'renewalDate' => 19, 'renewalNotice1' => 20, 'renewalNotice2' => 21, 'renewalNotice3' => 22, 'renewalNotice4' => 23, 'reviewDone' => 24, 'edNewMemberNotify' => 25, 'wnNewMembernNtify' => 26, 'noWingContactAck' => 27, 'holdHarmlessReceived' => 28, 'memberWelcomed' => 29, 'badgeMade' => 30, 'notebookSent' => 31, 'clothingSent' => 32, 'sModMemberNotify' => 33, 'wModMemberNotify' => 34, 'renewMark' => 35, 'renewalSentDate' => 36, 'sLateRenewalNotify' => 37, 'wLateRenewalNotify' => 38, 'sInactiveNotify' => 39, 'wInactiveNotify' => 40, 'wNotOrientedNotifyDate1' => 41, 'wNotOrientedNotifyDate2' => 42, 'emergencyContactName' => 43, 'emergencyContactPhone' => 44, 'driversLicenseState' => 45, 'driversLicenseNumber' => 46, 'height' => 47, 'secondaryWingId' => 48, ),
		BasePeer::TYPE_COLNAME => array (self::ID => 0, self::PERSON_ID => 1, self::EXTERNAL_ID => 2, self::WING_ID => 3, self::MEMBER_CLASS_ID => 4, self::MASTER_MEMBER_ID => 5, self::JOIN_DATE => 6, self::ACTIVE => 7, self::INACTIVE_REASON => 8, self::INACTIVE_COMMENT => 9, self::FLIGHT_STATUS => 10, self::CO_PILOT => 11, self::CONTACT => 12, self::DATE_OF_BIRTH => 13, self::WEIGHT => 14, self::SPOUSE_NAME => 15, self::LANGUAGES => 16, self::COORDINATOR_NOTES => 17, self::RENEWED_DATE => 18, self::RENEWAL_DATE => 19, self::RENEWAL_NOTICE1 => 20, self::RENEWAL_NOTICE2 => 21, self::RENEWAL_NOTICE3 => 22, self::RENEWAL_NOTICE4 => 23, self::REVIEW_DONE => 24, self::ED_NEW_MEMBER_NOTIFY => 25, self::WN_NEW_MEMBERN_NTIFY => 26, self::NO_WING_CONTACT_ACK => 27, self::HOLD_HARMLESS_RECEIVED => 28, self::MEMBER_WELCOMED => 29, self::BADGE_MADE => 30, self::NOTEBOOK_SENT => 31, self::CLOTHING_SENT => 32, self::S_MOD_MEMBER_NOTIFY => 33, self::W_MOD_MEMBER_NOTIFY => 34, self::RENEW_MARK => 35, self::RENEWAL_SENT_DATE => 36, self::S_LATE_RENEWAL_NOTIFY => 37, self::W_LATE_RENEWAL_NOTIFY => 38, self::S_INACTIVE_NOTIFY => 39, self::W_INACTIVE_NOTIFY => 40, self::W_NOT_ORIENTED_NOTIFY_DATE1 => 41, self::W_NOT_ORIENTED_NOTIFY_DATE2 => 42, self::EMERGENCY_CONTACT_NAME => 43, self::EMERGENCY_CONTACT_PHONE => 44, self::DRIVERS_LICENSE_STATE => 45, self::DRIVERS_LICENSE_NUMBER => 46, self::HEIGHT => 47, self::SECONDARY_WING_ID => 48, ),
		BasePeer::TYPE_FIELDNAME => array ('id' => 0, 'person_id' => 1, 'external_id' => 2, 'wing_id' => 3, 'member_class_id' => 4, 'master_member_id' => 5, 'join_date' => 6, 'active' => 7, 'inactive_reason' => 8, 'inactive_comment' => 9, 'flight_status' => 10, 'co_pilot' => 11, 'contact' => 12, 'date_of_birth' => 13, 'weight' => 14, 'spouse_name' => 15, 'languages' => 16, 'coordinator_notes' => 17, 'renewed_date' => 18, 'renewal_date' => 19, 'renewal_notice1' => 20, 'renewal_notice2' => 21, 'renewal_notice3' => 22, 'renewal_notice4' => 23, 'review_done' => 24, 'ed_new_member_notify' => 25, 'wn_new_memberN_ntify' => 26, 'no_wing_contact_ack' => 27, 'hold_harmless_received' => 28, 'member_welcomed' => 29, 'badge_made' => 30, 'notebook_sent' => 31, 'clothing_sent' => 32, 's_mod_member_notify' => 33, 'w_mod_member_notify' => 34, 'renew_mark' => 35, 'renewal_sent_date' => 36, 's_late_renewal_notify' => 37, 'w_late_renewal_notify' => 38, 's_inactive_notify' => 39, 'w_inactive_notify' => 40, 'w_not_oriented_notify_date1' => 41, 'w_not_oriented_notify_date2' => 42, 'emergency_contact_name' => 43, 'emergency_contact_phone' => 44, 'drivers_license_state' => 45, 'drivers_license_number' => 46, 'height' => 47, 'secondary_wing_id' => 48, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, )
	);

	/**
	 * Get a (singleton) instance of the MapBuilder for this peer class.
	 * @return     MapBuilder The map builder for this peer
	 */
	public static function getMapBuilder()
	{
		if (self::$mapBuilder === null) {
			self::$mapBuilder = new MemberMapBuilder();
		}
		return self::$mapBuilder;
	}
	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. MemberPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(MemberPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{

		$criteria->addSelectColumn(MemberPeer::ID);

		$criteria->addSelectColumn(MemberPeer::PERSON_ID);

		$criteria->addSelectColumn(MemberPeer::EXTERNAL_ID);

		$criteria->addSelectColumn(MemberPeer::WING_ID);

		$criteria->addSelectColumn(MemberPeer::MEMBER_CLASS_ID);

		$criteria->addSelectColumn(MemberPeer::MASTER_MEMBER_ID);

		$criteria->addSelectColumn(MemberPeer::JOIN_DATE);

		$criteria->addSelectColumn(MemberPeer::ACTIVE);

		$criteria->addSelectColumn(MemberPeer::INACTIVE_REASON);

		$criteria->addSelectColumn(MemberPeer::INACTIVE_COMMENT);

		$criteria->addSelectColumn(MemberPeer::FLIGHT_STATUS);

		$criteria->addSelectColumn(MemberPeer::CO_PILOT);

		$criteria->addSelectColumn(MemberPeer::CONTACT);

		$criteria->addSelectColumn(MemberPeer::DATE_OF_BIRTH);

		$criteria->addSelectColumn(MemberPeer::WEIGHT);

		$criteria->addSelectColumn(MemberPeer::SPOUSE_NAME);

		$criteria->addSelectColumn(MemberPeer::LANGUAGES);

		$criteria->addSelectColumn(MemberPeer::COORDINATOR_NOTES);

		$criteria->addSelectColumn(MemberPeer::RENEWED_DATE);

		$criteria->addSelectColumn(MemberPeer::RENEWAL_DATE);

		$criteria->addSelectColumn(MemberPeer::RENEWAL_NOTICE1);

		$criteria->addSelectColumn(MemberPeer::RENEWAL_NOTICE2);

		$criteria->addSelectColumn(MemberPeer::RENEWAL_NOTICE3);

		$criteria->addSelectColumn(MemberPeer::RENEWAL_NOTICE4);

		$criteria->addSelectColumn(MemberPeer::REVIEW_DONE);

		$criteria->addSelectColumn(MemberPeer::ED_NEW_MEMBER_NOTIFY);

		$criteria->addSelectColumn(MemberPeer::WN_NEW_MEMBERN_NTIFY);

		$criteria->addSelectColumn(MemberPeer::NO_WING_CONTACT_ACK);

		$criteria->addSelectColumn(MemberPeer::HOLD_HARMLESS_RECEIVED);

		$criteria->addSelectColumn(MemberPeer::MEMBER_WELCOMED);

		$criteria->addSelectColumn(MemberPeer::BADGE_MADE);

		$criteria->addSelectColumn(MemberPeer::NOTEBOOK_SENT);

		$criteria->addSelectColumn(MemberPeer::CLOTHING_SENT);

		$criteria->addSelectColumn(MemberPeer::S_MOD_MEMBER_NOTIFY);

		$criteria->addSelectColumn(MemberPeer::W_MOD_MEMBER_NOTIFY);

		$criteria->addSelectColumn(MemberPeer::RENEW_MARK);

		$criteria->addSelectColumn(MemberPeer::RENEWAL_SENT_DATE);

		$criteria->addSelectColumn(MemberPeer::S_LATE_RENEWAL_NOTIFY);

		$criteria->addSelectColumn(MemberPeer::W_LATE_RENEWAL_NOTIFY);

		$criteria->addSelectColumn(MemberPeer::S_INACTIVE_NOTIFY);

		$criteria->addSelectColumn(MemberPeer::W_INACTIVE_NOTIFY);

		$criteria->addSelectColumn(MemberPeer::W_NOT_ORIENTED_NOTIFY_DATE1);

		$criteria->addSelectColumn(MemberPeer::W_NOT_ORIENTED_NOTIFY_DATE2);

		$criteria->addSelectColumn(MemberPeer::EMERGENCY_CONTACT_NAME);

		$criteria->addSelectColumn(MemberPeer::EMERGENCY_CONTACT_PHONE);

		$criteria->addSelectColumn(MemberPeer::DRIVERS_LICENSE_STATE);

		$criteria->addSelectColumn(MemberPeer::DRIVERS_LICENSE_NUMBER);

		$criteria->addSelectColumn(MemberPeer::HEIGHT);

		$criteria->addSelectColumn(MemberPeer::SECONDARY_WING_ID);

	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MemberPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MemberPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}


    foreach (sfMixer::getCallables('BaseMemberPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMemberPeer', $criteria, $con);
    }


		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     Member
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = MemberPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return MemberPeer::populateObjects(MemberPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMemberPeer:doSelectStmt:doSelectStmt') as $callable)
    {
      call_user_func($callable, 'BaseMemberPeer', $criteria, $con);
    }


		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			MemberPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      Member $value A Member object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(Member $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getId();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A Member object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof Member) {
				$key = (string) $value->getId();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or Member object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     Member Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 0] === null) {
			return null;
		}
		return (string) $row[$startcol + 0];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = MemberPeer::getOMClass();
		$cls = substr('.'.$cls, strrpos('.'.$cls, '.') + 1);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = MemberPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = MemberPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
		
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				MemberPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related Person table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinPerson(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MemberPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MemberPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(MemberPeer::PERSON_ID,), array(PersonPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseMemberPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMemberPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related WingRelatedByWingId table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinWingRelatedByWingId(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MemberPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MemberPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(MemberPeer::WING_ID,), array(WingPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseMemberPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMemberPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related MemberClass table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinMemberClass(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MemberPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MemberPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(MemberPeer::MEMBER_CLASS_ID,), array(MemberClassPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseMemberPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMemberPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related WingRelatedBySecondaryWingId table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinWingRelatedBySecondaryWingId(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MemberPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MemberPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(MemberPeer::SECONDARY_WING_ID,), array(WingPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseMemberPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMemberPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of Member objects pre-filled with their Person objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Member objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinPerson(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseMemberPeer:doSelectJoin:doSelectJoin') as $callable)
    {
      call_user_func($callable, 'BaseMemberPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MemberPeer::addSelectColumns($c);
		$startcol = (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);
		PersonPeer::addSelectColumns($c);

		$c->addJoin(array(MemberPeer::PERSON_ID,), array(PersonPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MemberPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MemberPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = MemberPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MemberPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = PersonPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = PersonPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = PersonPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					PersonPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Member) to $obj2 (Person)
				$obj2->addMember($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Member objects pre-filled with their Wing objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Member objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinWingRelatedByWingId(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MemberPeer::addSelectColumns($c);
		$startcol = (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);
		WingPeer::addSelectColumns($c);

		$c->addJoin(array(MemberPeer::WING_ID,), array(WingPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MemberPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MemberPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = MemberPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MemberPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = WingPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = WingPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = WingPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					WingPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Member) to $obj2 (Wing)
				$obj2->addMemberRelatedByWingId($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Member objects pre-filled with their MemberClass objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Member objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinMemberClass(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MemberPeer::addSelectColumns($c);
		$startcol = (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);
		MemberClassPeer::addSelectColumns($c);

		$c->addJoin(array(MemberPeer::MEMBER_CLASS_ID,), array(MemberClassPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MemberPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MemberPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = MemberPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MemberPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = MemberClassPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = MemberClassPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = MemberClassPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					MemberClassPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Member) to $obj2 (MemberClass)
				$obj2->addMember($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Member objects pre-filled with their Wing objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Member objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinWingRelatedBySecondaryWingId(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MemberPeer::addSelectColumns($c);
		$startcol = (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);
		WingPeer::addSelectColumns($c);

		$c->addJoin(array(MemberPeer::SECONDARY_WING_ID,), array(WingPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MemberPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MemberPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = MemberPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MemberPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = WingPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = WingPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = WingPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					WingPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (Member) to $obj2 (Wing)
				$obj2->addMemberRelatedBySecondaryWingId($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MemberPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MemberPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(MemberPeer::PERSON_ID,), array(PersonPeer::ID,), $join_behavior);
		$criteria->addJoin(array(MemberPeer::WING_ID,), array(WingPeer::ID,), $join_behavior);
		$criteria->addJoin(array(MemberPeer::MEMBER_CLASS_ID,), array(MemberClassPeer::ID,), $join_behavior);
		$criteria->addJoin(array(MemberPeer::SECONDARY_WING_ID,), array(WingPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseMemberPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMemberPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of Member objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Member objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseMemberPeer:doSelectJoinAll:doSelectJoinAll') as $callable)
    {
      call_user_func($callable, 'BaseMemberPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MemberPeer::addSelectColumns($c);
		$startcol2 = (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		PersonPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (PersonPeer::NUM_COLUMNS - PersonPeer::NUM_LAZY_LOAD_COLUMNS);

		WingPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (WingPeer::NUM_COLUMNS - WingPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberClassPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (MemberClassPeer::NUM_COLUMNS - MemberClassPeer::NUM_LAZY_LOAD_COLUMNS);

		WingPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (WingPeer::NUM_COLUMNS - WingPeer::NUM_LAZY_LOAD_COLUMNS);

		$c->addJoin(array(MemberPeer::PERSON_ID,), array(PersonPeer::ID,), $join_behavior);
		$c->addJoin(array(MemberPeer::WING_ID,), array(WingPeer::ID,), $join_behavior);
		$c->addJoin(array(MemberPeer::MEMBER_CLASS_ID,), array(MemberClassPeer::ID,), $join_behavior);
		$c->addJoin(array(MemberPeer::SECONDARY_WING_ID,), array(WingPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MemberPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MemberPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = MemberPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MemberPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined Person rows

			$key2 = PersonPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = PersonPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = PersonPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					PersonPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (Member) to the collection in $obj2 (Person)
				$obj2->addMember($obj1);
			} // if joined row not null

			// Add objects for joined Wing rows

			$key3 = WingPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = WingPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$omClass = WingPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					WingPeer::addInstanceToPool($obj3, $key3);
				} // if obj3 loaded

				// Add the $obj1 (Member) to the collection in $obj3 (Wing)
				$obj3->addMemberRelatedByWingId($obj1);
			} // if joined row not null

			// Add objects for joined MemberClass rows

			$key4 = MemberClassPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = MemberClassPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$omClass = MemberClassPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					MemberClassPeer::addInstanceToPool($obj4, $key4);
				} // if obj4 loaded

				// Add the $obj1 (Member) to the collection in $obj4 (MemberClass)
				$obj4->addMember($obj1);
			} // if joined row not null

			// Add objects for joined Wing rows

			$key5 = WingPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = WingPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$omClass = WingPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					WingPeer::addInstanceToPool($obj5, $key5);
				} // if obj5 loaded

				// Add the $obj1 (Member) to the collection in $obj5 (Wing)
				$obj5->addMemberRelatedBySecondaryWingId($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Person table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptPerson(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MemberPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(MemberPeer::WING_ID,), array(WingPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MemberPeer::MEMBER_CLASS_ID,), array(MemberClassPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MemberPeer::SECONDARY_WING_ID,), array(WingPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseMemberPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMemberPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related WingRelatedByWingId table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptWingRelatedByWingId(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MemberPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(MemberPeer::PERSON_ID,), array(PersonPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MemberPeer::MEMBER_CLASS_ID,), array(MemberClassPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseMemberPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMemberPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related MemberClass table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptMemberClass(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MemberPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(MemberPeer::PERSON_ID,), array(PersonPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MemberPeer::WING_ID,), array(WingPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MemberPeer::SECONDARY_WING_ID,), array(WingPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseMemberPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMemberPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related MemberRelatedByMasterMemberId table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptMemberRelatedByMasterMemberId(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MemberPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(MemberPeer::PERSON_ID,), array(PersonPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MemberPeer::WING_ID,), array(WingPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MemberPeer::MEMBER_CLASS_ID,), array(MemberClassPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MemberPeer::SECONDARY_WING_ID,), array(WingPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseMemberPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMemberPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related WingRelatedBySecondaryWingId table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptWingRelatedBySecondaryWingId(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MemberPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(MemberPeer::PERSON_ID,), array(PersonPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MemberPeer::MEMBER_CLASS_ID,), array(MemberClassPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseMemberPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMemberPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of Member objects pre-filled with all related objects except Person.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Member objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptPerson(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseMemberPeer:doSelectJoinAllExcept:doSelectJoinAllExcept') as $callable)
    {
      call_user_func($callable, 'BaseMemberPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MemberPeer::addSelectColumns($c);
		$startcol2 = (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		WingPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (WingPeer::NUM_COLUMNS - WingPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberClassPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (MemberClassPeer::NUM_COLUMNS - MemberClassPeer::NUM_LAZY_LOAD_COLUMNS);

		WingPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (WingPeer::NUM_COLUMNS - WingPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(MemberPeer::WING_ID,), array(WingPeer::ID,), $join_behavior);
				$c->addJoin(array(MemberPeer::MEMBER_CLASS_ID,), array(MemberClassPeer::ID,), $join_behavior);
				$c->addJoin(array(MemberPeer::SECONDARY_WING_ID,), array(WingPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MemberPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MemberPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = MemberPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MemberPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Wing rows

				$key2 = WingPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = WingPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = WingPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					WingPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Member) to the collection in $obj2 (Wing)
				$obj2->addMemberRelatedByWingId($obj1);

			} // if joined row is not null

				// Add objects for joined MemberClass rows

				$key3 = MemberClassPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = MemberClassPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = MemberClassPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					MemberClassPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Member) to the collection in $obj3 (MemberClass)
				$obj3->addMember($obj1);

			} // if joined row is not null

				// Add objects for joined Wing rows

				$key4 = WingPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = WingPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = WingPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					WingPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Member) to the collection in $obj4 (Wing)
				$obj4->addMemberRelatedBySecondaryWingId($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Member objects pre-filled with all related objects except WingRelatedByWingId.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Member objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptWingRelatedByWingId(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MemberPeer::addSelectColumns($c);
		$startcol2 = (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		PersonPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (PersonPeer::NUM_COLUMNS - PersonPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberClassPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (MemberClassPeer::NUM_COLUMNS - MemberClassPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(MemberPeer::PERSON_ID,), array(PersonPeer::ID,), $join_behavior);
				$c->addJoin(array(MemberPeer::MEMBER_CLASS_ID,), array(MemberClassPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MemberPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MemberPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = MemberPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MemberPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Person rows

				$key2 = PersonPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = PersonPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = PersonPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					PersonPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Member) to the collection in $obj2 (Person)
				$obj2->addMember($obj1);

			} // if joined row is not null

				// Add objects for joined MemberClass rows

				$key3 = MemberClassPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = MemberClassPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = MemberClassPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					MemberClassPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Member) to the collection in $obj3 (MemberClass)
				$obj3->addMember($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Member objects pre-filled with all related objects except MemberClass.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Member objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptMemberClass(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MemberPeer::addSelectColumns($c);
		$startcol2 = (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		PersonPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (PersonPeer::NUM_COLUMNS - PersonPeer::NUM_LAZY_LOAD_COLUMNS);

		WingPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (WingPeer::NUM_COLUMNS - WingPeer::NUM_LAZY_LOAD_COLUMNS);

		WingPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (WingPeer::NUM_COLUMNS - WingPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(MemberPeer::PERSON_ID,), array(PersonPeer::ID,), $join_behavior);
				$c->addJoin(array(MemberPeer::WING_ID,), array(WingPeer::ID,), $join_behavior);
				$c->addJoin(array(MemberPeer::SECONDARY_WING_ID,), array(WingPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MemberPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MemberPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = MemberPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MemberPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Person rows

				$key2 = PersonPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = PersonPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = PersonPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					PersonPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Member) to the collection in $obj2 (Person)
				$obj2->addMember($obj1);

			} // if joined row is not null

				// Add objects for joined Wing rows

				$key3 = WingPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = WingPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = WingPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					WingPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Member) to the collection in $obj3 (Wing)
				$obj3->addMemberRelatedByWingId($obj1);

			} // if joined row is not null

				// Add objects for joined Wing rows

				$key4 = WingPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = WingPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = WingPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					WingPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Member) to the collection in $obj4 (Wing)
				$obj4->addMemberRelatedBySecondaryWingId($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Member objects pre-filled with all related objects except MemberRelatedByMasterMemberId.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Member objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptMemberRelatedByMasterMemberId(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MemberPeer::addSelectColumns($c);
		$startcol2 = (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		PersonPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (PersonPeer::NUM_COLUMNS - PersonPeer::NUM_LAZY_LOAD_COLUMNS);

		WingPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (WingPeer::NUM_COLUMNS - WingPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberClassPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (MemberClassPeer::NUM_COLUMNS - MemberClassPeer::NUM_LAZY_LOAD_COLUMNS);

		WingPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (WingPeer::NUM_COLUMNS - WingPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(MemberPeer::PERSON_ID,), array(PersonPeer::ID,), $join_behavior);
				$c->addJoin(array(MemberPeer::WING_ID,), array(WingPeer::ID,), $join_behavior);
				$c->addJoin(array(MemberPeer::MEMBER_CLASS_ID,), array(MemberClassPeer::ID,), $join_behavior);
				$c->addJoin(array(MemberPeer::SECONDARY_WING_ID,), array(WingPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MemberPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MemberPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = MemberPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MemberPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Person rows

				$key2 = PersonPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = PersonPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = PersonPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					PersonPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Member) to the collection in $obj2 (Person)
				$obj2->addMember($obj1);

			} // if joined row is not null

				// Add objects for joined Wing rows

				$key3 = WingPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = WingPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = WingPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					WingPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Member) to the collection in $obj3 (Wing)
				$obj3->addMemberRelatedByWingId($obj1);

			} // if joined row is not null

				// Add objects for joined MemberClass rows

				$key4 = MemberClassPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = MemberClassPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = MemberClassPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					MemberClassPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (Member) to the collection in $obj4 (MemberClass)
				$obj4->addMember($obj1);

			} // if joined row is not null

				// Add objects for joined Wing rows

				$key5 = WingPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = WingPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = WingPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					WingPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (Member) to the collection in $obj5 (Wing)
				$obj5->addMemberRelatedBySecondaryWingId($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of Member objects pre-filled with all related objects except WingRelatedBySecondaryWingId.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of Member objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptWingRelatedBySecondaryWingId(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MemberPeer::addSelectColumns($c);
		$startcol2 = (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		PersonPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (PersonPeer::NUM_COLUMNS - PersonPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberClassPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (MemberClassPeer::NUM_COLUMNS - MemberClassPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(MemberPeer::PERSON_ID,), array(PersonPeer::ID,), $join_behavior);
				$c->addJoin(array(MemberPeer::MEMBER_CLASS_ID,), array(MemberClassPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MemberPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MemberPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = MemberPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MemberPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Person rows

				$key2 = PersonPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = PersonPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = PersonPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					PersonPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (Member) to the collection in $obj2 (Person)
				$obj2->addMember($obj1);

			} // if joined row is not null

				// Add objects for joined MemberClass rows

				$key3 = MemberClassPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = MemberClassPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = MemberClassPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					MemberClassPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (Member) to the collection in $obj3 (MemberClass)
				$obj3->addMember($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


  static public function getUniqueColumnNames()
  {
    return array(array('person_id'));
  }
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * This uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass()
	{
		return MemberPeer::CLASS_DEFAULT;
	}

	/**
	 * Method perform an INSERT on the database, given a Member or Criteria object.
	 *
	 * @param      mixed $values Criteria or Member object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMemberPeer:doInsert:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseMemberPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from Member object
		}

		if ($criteria->containsKey(MemberPeer::ID) && $criteria->keyContainsValue(MemberPeer::ID) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.MemberPeer::ID.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		
    foreach (sfMixer::getCallables('BaseMemberPeer:doInsert:post') as $callable)
    {
      call_user_func($callable, 'BaseMemberPeer', $values, $con, $pk);
    }

    return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a Member or Criteria object.
	 *
	 * @param      mixed $values Criteria or Member object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMemberPeer:doUpdate:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseMemberPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(MemberPeer::ID);
			$selectCriteria->add(MemberPeer::ID, $criteria->remove(MemberPeer::ID), $comparison);

		} else { // $values is Member object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);
	

    foreach (sfMixer::getCallables('BaseMemberPeer:doUpdate:post') as $callable)
    {
      call_user_func($callable, 'BaseMemberPeer', $values, $con, $ret);
    }

    return $ret;
  }

	/**
	 * Method to DELETE all rows from the member table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(MemberPeer::TABLE_NAME, $con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a Member or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or Member object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			MemberPeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof Member) {
			// invalidate the cache for this single object
			MemberPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(MemberPeer::ID, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				MemberPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);

			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given Member object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      Member $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(Member $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(MemberPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(MemberPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		$res =  BasePeer::doValidate(MemberPeer::DATABASE_NAME, MemberPeer::TABLE_NAME, $columns);
    if ($res !== true) {
        $request = sfContext::getInstance()->getRequest();
        foreach ($res as $failed) {
            $col = MemberPeer::translateFieldname($failed->getColumn(), BasePeer::TYPE_COLNAME, BasePeer::TYPE_PHPNAME);
        }
    }

    return $res;
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     Member
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = MemberPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		$criteria->add(MemberPeer::ID, $pk);

		$v = MemberPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
			$criteria->add(MemberPeer::ID, $pks, Criteria::IN);
			$objs = MemberPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

} // BaseMemberPeer

// This is the static code needed to register the MapBuilder for this table with the main Propel class.
//
// NOTE: This static code cannot call methods on the MemberPeer class, because it is not defined yet.
// If you need to use overridden methods, you can add this code to the bottom of the MemberPeer class:
//
// Propel::getDatabaseMap(MemberPeer::DATABASE_NAME)->addTableBuilder(MemberPeer::TABLE_NAME, MemberPeer::getMapBuilder());
//
// Doing so will effectively overwrite the registration below.

Propel::getDatabaseMap(BaseMemberPeer::DATABASE_NAME)->addTableBuilder(BaseMemberPeer::TABLE_NAME, BaseMemberPeer::getMapBuilder());

