<?php

/**
 * Base class that represents a row from the 'event_reservation' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 04/25/11 05:29:33
 *
 * @package    lib.model.om
 */
abstract class BaseEventReservation extends BaseObject  implements Persistent {


  const PEER = 'EventReservationPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        EventReservationPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the event_id field.
	 * @var        int
	 */
	protected $event_id;

	/**
	 * The value for the member_id field.
	 * @var        int
	 */
	protected $member_id;

	/**
	 * The value for the reservation_date field.
	 * @var        string
	 */
	protected $reservation_date;

	/**
	 * The value for the first_name field.
	 * @var        string
	 */
	protected $first_name;

	/**
	 * The value for the last_name field.
	 * @var        string
	 */
	protected $last_name;

	/**
	 * The value for the address field.
	 * @var        string
	 */
	protected $address;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the state field.
	 * @var        string
	 */
	protected $state;

	/**
	 * The value for the zipcode field.
	 * @var        string
	 */
	protected $zipcode;

	/**
	 * The value for the phone field.
	 * @var        string
	 */
	protected $phone;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the adult_guests field.
	 * @var        int
	 */
	protected $adult_guests;

	/**
	 * The value for the child_guests field.
	 * @var        int
	 */
	protected $child_guests;

	/**
	 * The value for the guest_names field.
	 * @var        string
	 */
	protected $guest_names;

	/**
	 * The value for the amt_paid field.
	 * @var        int
	 */
	protected $amt_paid;

	/**
	 * The value for the method_of_payment field.
	 * @var        string
	 */
	protected $method_of_payment;

	/**
	 * The value for the payment_date field.
	 * @var        string
	 */
	protected $payment_date;

	/**
	 * The value for the auth_number field.
	 * @var        string
	 */
	protected $auth_number;

	/**
	 * The value for the status field.
	 * @var        string
	 */
	protected $status;

	/**
	 * The value for the comments field.
	 * @var        string
	 */
	protected $comments;

	/**
	 * The value for the collect_secure_info field.
	 * @var        int
	 */
	protected $collect_secure_info;

	/**
	 * The value for the addl_info_fields field.
	 * @var        string
	 */
	protected $addl_info_fields;

	/**
	 * The value for the novapointe_trans_id field.
	 * @var        string
	 */
	protected $novapointe_trans_id;

	/**
	 * @var        Event
	 */
	protected $aEvent;

	/**
	 * @var        Member
	 */
	protected $aMember;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseEventReservation object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [event_id] column value.
	 * 
	 * @return     int
	 */
	public function getEventId()
	{
		return $this->event_id;
	}

	/**
	 * Get the [member_id] column value.
	 * 
	 * @return     int
	 */
	public function getMemberId()
	{
		return $this->member_id;
	}

	/**
	 * Get the [optionally formatted] temporal [reservation_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getReservationDate($format = 'Y-m-d H:i:s')
	{
		if ($this->reservation_date === null) {
			return null;
		}


		if ($this->reservation_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->reservation_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->reservation_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [first_name] column value.
	 * 
	 * @return     string
	 */
	public function getFirstName()
	{
		return $this->first_name;
	}

	/**
	 * Get the [last_name] column value.
	 * 
	 * @return     string
	 */
	public function getLastName()
	{
		return $this->last_name;
	}

	/**
	 * Get the [address] column value.
	 * 
	 * @return     string
	 */
	public function getAddress()
	{
		return $this->address;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [state] column value.
	 * 
	 * @return     string
	 */
	public function getState()
	{
		return $this->state;
	}

	/**
	 * Get the [zipcode] column value.
	 * 
	 * @return     string
	 */
	public function getZipcode()
	{
		return $this->zipcode;
	}

	/**
	 * Get the [phone] column value.
	 * 
	 * @return     string
	 */
	public function getPhone()
	{
		return $this->phone;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [adult_guests] column value.
	 * 
	 * @return     int
	 */
	public function getAdultGuests()
	{
		return $this->adult_guests;
	}

	/**
	 * Get the [child_guests] column value.
	 * 
	 * @return     int
	 */
	public function getChildGuests()
	{
		return $this->child_guests;
	}

	/**
	 * Get the [guest_names] column value.
	 * 
	 * @return     string
	 */
	public function getGuestNames()
	{
		return $this->guest_names;
	}

	/**
	 * Get the [amt_paid] column value.
	 * 
	 * @return     int
	 */
	public function getAmtPaid()
	{
		return $this->amt_paid;
	}

	/**
	 * Get the [method_of_payment] column value.
	 * 
	 * @return     string
	 */
	public function getMethodOfPayment()
	{
		return $this->method_of_payment;
	}

	/**
	 * Get the [optionally formatted] temporal [payment_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getPaymentDate($format = 'Y-m-d H:i:s')
	{
		if ($this->payment_date === null) {
			return null;
		}


		if ($this->payment_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->payment_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->payment_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [auth_number] column value.
	 * 
	 * @return     string
	 */
	public function getAuthNumber()
	{
		return $this->auth_number;
	}

	/**
	 * Get the [status] column value.
	 * 
	 * @return     string
	 */
	public function getStatus()
	{
		return $this->status;
	}

	/**
	 * Get the [comments] column value.
	 * 
	 * @return     string
	 */
	public function getComments()
	{
		return $this->comments;
	}

	/**
	 * Get the [collect_secure_info] column value.
	 * 
	 * @return     int
	 */
	public function getCollectSecureInfo()
	{
		return $this->collect_secure_info;
	}

	/**
	 * Get the [addl_info_fields] column value.
	 * 
	 * @return     string
	 */
	public function getAddlInfoFields()
	{
		return $this->addl_info_fields;
	}

	/**
	 * Get the [novapointe_trans_id] column value.
	 * 
	 * @return     string
	 */
	public function getNovapointeTransId()
	{
		return $this->novapointe_trans_id;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = EventReservationPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [event_id] column.
	 * 
	 * @param      int $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setEventId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->event_id !== $v) {
			$this->event_id = $v;
			$this->modifiedColumns[] = EventReservationPeer::EVENT_ID;
		}

		if ($this->aEvent !== null && $this->aEvent->getId() !== $v) {
			$this->aEvent = null;
		}

		return $this;
	} // setEventId()

	/**
	 * Set the value of [member_id] column.
	 * 
	 * @param      int $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setMemberId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->member_id !== $v) {
			$this->member_id = $v;
			$this->modifiedColumns[] = EventReservationPeer::MEMBER_ID;
		}

		if ($this->aMember !== null && $this->aMember->getId() !== $v) {
			$this->aMember = null;
		}

		return $this;
	} // setMemberId()

	/**
	 * Sets the value of [reservation_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setReservationDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->reservation_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->reservation_date !== null && $tmpDt = new DateTime($this->reservation_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->reservation_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EventReservationPeer::RESERVATION_DATE;
			}
		} // if either are not null

		return $this;
	} // setReservationDate()

	/**
	 * Set the value of [first_name] column.
	 * 
	 * @param      string $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setFirstName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->first_name !== $v) {
			$this->first_name = $v;
			$this->modifiedColumns[] = EventReservationPeer::FIRST_NAME;
		}

		return $this;
	} // setFirstName()

	/**
	 * Set the value of [last_name] column.
	 * 
	 * @param      string $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setLastName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->last_name !== $v) {
			$this->last_name = $v;
			$this->modifiedColumns[] = EventReservationPeer::LAST_NAME;
		}

		return $this;
	} // setLastName()

	/**
	 * Set the value of [address] column.
	 * 
	 * @param      string $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address !== $v) {
			$this->address = $v;
			$this->modifiedColumns[] = EventReservationPeer::ADDRESS;
		}

		return $this;
	} // setAddress()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = EventReservationPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [state] column.
	 * 
	 * @param      string $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->state !== $v) {
			$this->state = $v;
			$this->modifiedColumns[] = EventReservationPeer::STATE;
		}

		return $this;
	} // setState()

	/**
	 * Set the value of [zipcode] column.
	 * 
	 * @param      string $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setZipcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->zipcode !== $v) {
			$this->zipcode = $v;
			$this->modifiedColumns[] = EventReservationPeer::ZIPCODE;
		}

		return $this;
	} // setZipcode()

	/**
	 * Set the value of [phone] column.
	 * 
	 * @param      string $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->phone !== $v) {
			$this->phone = $v;
			$this->modifiedColumns[] = EventReservationPeer::PHONE;
		}

		return $this;
	} // setPhone()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = EventReservationPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [adult_guests] column.
	 * 
	 * @param      int $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setAdultGuests($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->adult_guests !== $v) {
			$this->adult_guests = $v;
			$this->modifiedColumns[] = EventReservationPeer::ADULT_GUESTS;
		}

		return $this;
	} // setAdultGuests()

	/**
	 * Set the value of [child_guests] column.
	 * 
	 * @param      int $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setChildGuests($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->child_guests !== $v) {
			$this->child_guests = $v;
			$this->modifiedColumns[] = EventReservationPeer::CHILD_GUESTS;
		}

		return $this;
	} // setChildGuests()

	/**
	 * Set the value of [guest_names] column.
	 * 
	 * @param      string $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setGuestNames($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->guest_names !== $v) {
			$this->guest_names = $v;
			$this->modifiedColumns[] = EventReservationPeer::GUEST_NAMES;
		}

		return $this;
	} // setGuestNames()

	/**
	 * Set the value of [amt_paid] column.
	 * 
	 * @param      int $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setAmtPaid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->amt_paid !== $v) {
			$this->amt_paid = $v;
			$this->modifiedColumns[] = EventReservationPeer::AMT_PAID;
		}

		return $this;
	} // setAmtPaid()

	/**
	 * Set the value of [method_of_payment] column.
	 * 
	 * @param      string $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setMethodOfPayment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->method_of_payment !== $v) {
			$this->method_of_payment = $v;
			$this->modifiedColumns[] = EventReservationPeer::METHOD_OF_PAYMENT;
		}

		return $this;
	} // setMethodOfPayment()

	/**
	 * Sets the value of [payment_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setPaymentDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->payment_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->payment_date !== null && $tmpDt = new DateTime($this->payment_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->payment_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EventReservationPeer::PAYMENT_DATE;
			}
		} // if either are not null

		return $this;
	} // setPaymentDate()

	/**
	 * Set the value of [auth_number] column.
	 * 
	 * @param      string $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setAuthNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->auth_number !== $v) {
			$this->auth_number = $v;
			$this->modifiedColumns[] = EventReservationPeer::AUTH_NUMBER;
		}

		return $this;
	} // setAuthNumber()

	/**
	 * Set the value of [status] column.
	 * 
	 * @param      string $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setStatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->status !== $v) {
			$this->status = $v;
			$this->modifiedColumns[] = EventReservationPeer::STATUS;
		}

		return $this;
	} // setStatus()

	/**
	 * Set the value of [comments] column.
	 * 
	 * @param      string $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setComments($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comments !== $v) {
			$this->comments = $v;
			$this->modifiedColumns[] = EventReservationPeer::COMMENTS;
		}

		return $this;
	} // setComments()

	/**
	 * Set the value of [collect_secure_info] column.
	 * 
	 * @param      int $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setCollectSecureInfo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->collect_secure_info !== $v) {
			$this->collect_secure_info = $v;
			$this->modifiedColumns[] = EventReservationPeer::COLLECT_SECURE_INFO;
		}

		return $this;
	} // setCollectSecureInfo()

	/**
	 * Set the value of [addl_info_fields] column.
	 * 
	 * @param      string $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setAddlInfoFields($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->addl_info_fields !== $v) {
			$this->addl_info_fields = $v;
			$this->modifiedColumns[] = EventReservationPeer::ADDL_INFO_FIELDS;
		}

		return $this;
	} // setAddlInfoFields()

	/**
	 * Set the value of [novapointe_trans_id] column.
	 * 
	 * @param      string $v new value
	 * @return     EventReservation The current object (for fluent API support)
	 */
	public function setNovapointeTransId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->novapointe_trans_id !== $v) {
			$this->novapointe_trans_id = $v;
			$this->modifiedColumns[] = EventReservationPeer::NOVAPOINTE_TRANS_ID;
		}

		return $this;
	} // setNovapointeTransId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->event_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->member_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->reservation_date = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->first_name = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->last_name = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->address = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->city = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->state = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->zipcode = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->phone = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->email = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->adult_guests = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->child_guests = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->guest_names = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->amt_paid = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->method_of_payment = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->payment_date = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->auth_number = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->status = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->comments = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->collect_secure_info = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->addl_info_fields = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->novapointe_trans_id = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 24; // 24 = EventReservationPeer::NUM_COLUMNS - EventReservationPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating EventReservation object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aEvent !== null && $this->event_id !== $this->aEvent->getId()) {
			$this->aEvent = null;
		}
		if ($this->aMember !== null && $this->member_id !== $this->aMember->getId()) {
			$this->aMember = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EventReservationPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = EventReservationPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aEvent = null;
			$this->aMember = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseEventReservation:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EventReservationPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			EventReservationPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseEventReservation:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseEventReservation:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EventReservationPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseEventReservation:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			EventReservationPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aEvent !== null) {
				if ($this->aEvent->isModified() || $this->aEvent->isNew()) {
					$affectedRows += $this->aEvent->save($con);
				}
				$this->setEvent($this->aEvent);
			}

			if ($this->aMember !== null) {
				if ($this->aMember->isModified() || $this->aMember->isNew()) {
					$affectedRows += $this->aMember->save($con);
				}
				$this->setMember($this->aMember);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = EventReservationPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = EventReservationPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += EventReservationPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aEvent !== null) {
				if (!$this->aEvent->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEvent->getValidationFailures());
				}
			}

			if ($this->aMember !== null) {
				if (!$this->aMember->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMember->getValidationFailures());
				}
			}


			if (($retval = EventReservationPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EventReservationPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getEventId();
				break;
			case 2:
				return $this->getMemberId();
				break;
			case 3:
				return $this->getReservationDate();
				break;
			case 4:
				return $this->getFirstName();
				break;
			case 5:
				return $this->getLastName();
				break;
			case 6:
				return $this->getAddress();
				break;
			case 7:
				return $this->getCity();
				break;
			case 8:
				return $this->getState();
				break;
			case 9:
				return $this->getZipcode();
				break;
			case 10:
				return $this->getPhone();
				break;
			case 11:
				return $this->getEmail();
				break;
			case 12:
				return $this->getAdultGuests();
				break;
			case 13:
				return $this->getChildGuests();
				break;
			case 14:
				return $this->getGuestNames();
				break;
			case 15:
				return $this->getAmtPaid();
				break;
			case 16:
				return $this->getMethodOfPayment();
				break;
			case 17:
				return $this->getPaymentDate();
				break;
			case 18:
				return $this->getAuthNumber();
				break;
			case 19:
				return $this->getStatus();
				break;
			case 20:
				return $this->getComments();
				break;
			case 21:
				return $this->getCollectSecureInfo();
				break;
			case 22:
				return $this->getAddlInfoFields();
				break;
			case 23:
				return $this->getNovapointeTransId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = EventReservationPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getEventId(),
			$keys[2] => $this->getMemberId(),
			$keys[3] => $this->getReservationDate(),
			$keys[4] => $this->getFirstName(),
			$keys[5] => $this->getLastName(),
			$keys[6] => $this->getAddress(),
			$keys[7] => $this->getCity(),
			$keys[8] => $this->getState(),
			$keys[9] => $this->getZipcode(),
			$keys[10] => $this->getPhone(),
			$keys[11] => $this->getEmail(),
			$keys[12] => $this->getAdultGuests(),
			$keys[13] => $this->getChildGuests(),
			$keys[14] => $this->getGuestNames(),
			$keys[15] => $this->getAmtPaid(),
			$keys[16] => $this->getMethodOfPayment(),
			$keys[17] => $this->getPaymentDate(),
			$keys[18] => $this->getAuthNumber(),
			$keys[19] => $this->getStatus(),
			$keys[20] => $this->getComments(),
			$keys[21] => $this->getCollectSecureInfo(),
			$keys[22] => $this->getAddlInfoFields(),
			$keys[23] => $this->getNovapointeTransId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EventReservationPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setEventId($value);
				break;
			case 2:
				$this->setMemberId($value);
				break;
			case 3:
				$this->setReservationDate($value);
				break;
			case 4:
				$this->setFirstName($value);
				break;
			case 5:
				$this->setLastName($value);
				break;
			case 6:
				$this->setAddress($value);
				break;
			case 7:
				$this->setCity($value);
				break;
			case 8:
				$this->setState($value);
				break;
			case 9:
				$this->setZipcode($value);
				break;
			case 10:
				$this->setPhone($value);
				break;
			case 11:
				$this->setEmail($value);
				break;
			case 12:
				$this->setAdultGuests($value);
				break;
			case 13:
				$this->setChildGuests($value);
				break;
			case 14:
				$this->setGuestNames($value);
				break;
			case 15:
				$this->setAmtPaid($value);
				break;
			case 16:
				$this->setMethodOfPayment($value);
				break;
			case 17:
				$this->setPaymentDate($value);
				break;
			case 18:
				$this->setAuthNumber($value);
				break;
			case 19:
				$this->setStatus($value);
				break;
			case 20:
				$this->setComments($value);
				break;
			case 21:
				$this->setCollectSecureInfo($value);
				break;
			case 22:
				$this->setAddlInfoFields($value);
				break;
			case 23:
				$this->setNovapointeTransId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = EventReservationPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setEventId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setMemberId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setReservationDate($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setFirstName($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setLastName($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setAddress($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCity($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setState($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setZipcode($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPhone($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setEmail($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setAdultGuests($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setChildGuests($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setGuestNames($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setAmtPaid($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setMethodOfPayment($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setPaymentDate($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setAuthNumber($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setStatus($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setComments($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setCollectSecureInfo($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setAddlInfoFields($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setNovapointeTransId($arr[$keys[23]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(EventReservationPeer::DATABASE_NAME);

		if ($this->isColumnModified(EventReservationPeer::ID)) $criteria->add(EventReservationPeer::ID, $this->id);
		if ($this->isColumnModified(EventReservationPeer::EVENT_ID)) $criteria->add(EventReservationPeer::EVENT_ID, $this->event_id);
		if ($this->isColumnModified(EventReservationPeer::MEMBER_ID)) $criteria->add(EventReservationPeer::MEMBER_ID, $this->member_id);
		if ($this->isColumnModified(EventReservationPeer::RESERVATION_DATE)) $criteria->add(EventReservationPeer::RESERVATION_DATE, $this->reservation_date);
		if ($this->isColumnModified(EventReservationPeer::FIRST_NAME)) $criteria->add(EventReservationPeer::FIRST_NAME, $this->first_name);
		if ($this->isColumnModified(EventReservationPeer::LAST_NAME)) $criteria->add(EventReservationPeer::LAST_NAME, $this->last_name);
		if ($this->isColumnModified(EventReservationPeer::ADDRESS)) $criteria->add(EventReservationPeer::ADDRESS, $this->address);
		if ($this->isColumnModified(EventReservationPeer::CITY)) $criteria->add(EventReservationPeer::CITY, $this->city);
		if ($this->isColumnModified(EventReservationPeer::STATE)) $criteria->add(EventReservationPeer::STATE, $this->state);
		if ($this->isColumnModified(EventReservationPeer::ZIPCODE)) $criteria->add(EventReservationPeer::ZIPCODE, $this->zipcode);
		if ($this->isColumnModified(EventReservationPeer::PHONE)) $criteria->add(EventReservationPeer::PHONE, $this->phone);
		if ($this->isColumnModified(EventReservationPeer::EMAIL)) $criteria->add(EventReservationPeer::EMAIL, $this->email);
		if ($this->isColumnModified(EventReservationPeer::ADULT_GUESTS)) $criteria->add(EventReservationPeer::ADULT_GUESTS, $this->adult_guests);
		if ($this->isColumnModified(EventReservationPeer::CHILD_GUESTS)) $criteria->add(EventReservationPeer::CHILD_GUESTS, $this->child_guests);
		if ($this->isColumnModified(EventReservationPeer::GUEST_NAMES)) $criteria->add(EventReservationPeer::GUEST_NAMES, $this->guest_names);
		if ($this->isColumnModified(EventReservationPeer::AMT_PAID)) $criteria->add(EventReservationPeer::AMT_PAID, $this->amt_paid);
		if ($this->isColumnModified(EventReservationPeer::METHOD_OF_PAYMENT)) $criteria->add(EventReservationPeer::METHOD_OF_PAYMENT, $this->method_of_payment);
		if ($this->isColumnModified(EventReservationPeer::PAYMENT_DATE)) $criteria->add(EventReservationPeer::PAYMENT_DATE, $this->payment_date);
		if ($this->isColumnModified(EventReservationPeer::AUTH_NUMBER)) $criteria->add(EventReservationPeer::AUTH_NUMBER, $this->auth_number);
		if ($this->isColumnModified(EventReservationPeer::STATUS)) $criteria->add(EventReservationPeer::STATUS, $this->status);
		if ($this->isColumnModified(EventReservationPeer::COMMENTS)) $criteria->add(EventReservationPeer::COMMENTS, $this->comments);
		if ($this->isColumnModified(EventReservationPeer::COLLECT_SECURE_INFO)) $criteria->add(EventReservationPeer::COLLECT_SECURE_INFO, $this->collect_secure_info);
		if ($this->isColumnModified(EventReservationPeer::ADDL_INFO_FIELDS)) $criteria->add(EventReservationPeer::ADDL_INFO_FIELDS, $this->addl_info_fields);
		if ($this->isColumnModified(EventReservationPeer::NOVAPOINTE_TRANS_ID)) $criteria->add(EventReservationPeer::NOVAPOINTE_TRANS_ID, $this->novapointe_trans_id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(EventReservationPeer::DATABASE_NAME);

		$criteria->add(EventReservationPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of EventReservation (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setEventId($this->event_id);

		$copyObj->setMemberId($this->member_id);

		$copyObj->setReservationDate($this->reservation_date);

		$copyObj->setFirstName($this->first_name);

		$copyObj->setLastName($this->last_name);

		$copyObj->setAddress($this->address);

		$copyObj->setCity($this->city);

		$copyObj->setState($this->state);

		$copyObj->setZipcode($this->zipcode);

		$copyObj->setPhone($this->phone);

		$copyObj->setEmail($this->email);

		$copyObj->setAdultGuests($this->adult_guests);

		$copyObj->setChildGuests($this->child_guests);

		$copyObj->setGuestNames($this->guest_names);

		$copyObj->setAmtPaid($this->amt_paid);

		$copyObj->setMethodOfPayment($this->method_of_payment);

		$copyObj->setPaymentDate($this->payment_date);

		$copyObj->setAuthNumber($this->auth_number);

		$copyObj->setStatus($this->status);

		$copyObj->setComments($this->comments);

		$copyObj->setCollectSecureInfo($this->collect_secure_info);

		$copyObj->setAddlInfoFields($this->addl_info_fields);

		$copyObj->setNovapointeTransId($this->novapointe_trans_id);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     EventReservation Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     EventReservationPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new EventReservationPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Event object.
	 *
	 * @param      Event $v
	 * @return     EventReservation The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEvent(Event $v = null)
	{
		if ($v === null) {
			$this->setEventId(NULL);
		} else {
			$this->setEventId($v->getId());
		}

		$this->aEvent = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Event object, it will not be re-added.
		if ($v !== null) {
			$v->addEventReservation($this);
		}

		return $this;
	}


	/**
	 * Get the associated Event object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Event The associated Event object.
	 * @throws     PropelException
	 */
	public function getEvent(PropelPDO $con = null)
	{
		if ($this->aEvent === null && ($this->event_id !== null)) {
			$c = new Criteria(EventPeer::DATABASE_NAME);
			$c->add(EventPeer::ID, $this->event_id);
			$this->aEvent = EventPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aEvent->addEventReservations($this);
			 */
		}
		return $this->aEvent;
	}

	/**
	 * Declares an association between this object and a Member object.
	 *
	 * @param      Member $v
	 * @return     EventReservation The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMember(Member $v = null)
	{
		if ($v === null) {
			$this->setMemberId(NULL);
		} else {
			$this->setMemberId($v->getId());
		}

		$this->aMember = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Member object, it will not be re-added.
		if ($v !== null) {
			$v->addEventReservation($this);
		}

		return $this;
	}


	/**
	 * Get the associated Member object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Member The associated Member object.
	 * @throws     PropelException
	 */
	public function getMember(PropelPDO $con = null)
	{
		if ($this->aMember === null && ($this->member_id !== null)) {
			$c = new Criteria(MemberPeer::DATABASE_NAME);
			$c->add(MemberPeer::ID, $this->member_id);
			$this->aMember = MemberPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMember->addEventReservations($this);
			 */
		}
		return $this->aMember;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aEvent = null;
			$this->aMember = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseEventReservation:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseEventReservation::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseEventReservation
