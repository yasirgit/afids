<?php

/**
 * Base class that represents a row from the 'pilot' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 04/07/11 07:27:39
 *
 * @package    lib.model.om
 */
abstract class BasePilot extends BaseObject  implements Persistent {


  const PEER = 'PilotPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PilotPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the member_id field.
	 * @var        int
	 */
	protected $member_id;

	/**
	 * The value for the primary_airport_id field.
	 * @var        int
	 */
	protected $primary_airport_id;

	/**
	 * The value for the secondary_home_bases field.
	 * @var        string
	 */
	protected $secondary_home_bases;

	/**
	 * The value for the total_hours field.
	 * @var        int
	 */
	protected $total_hours;

	/**
	 * The value for the license_type field.
	 * @var        string
	 */
	protected $license_type;

	/**
	 * The value for the ifr field.
	 * @var        int
	 */
	protected $ifr;

	/**
	 * The value for the multi_engine field.
	 * @var        int
	 */
	protected $multi_engine;

	/**
	 * The value for the se_instructor field.
	 * @var        string
	 */
	protected $se_instructor;

	/**
	 * The value for the me_instructor field.
	 * @var        string
	 */
	protected $me_instructor;

	/**
	 * The value for the other_ratings field.
	 * @var        string
	 */
	protected $other_ratings;

	/**
	 * The value for the insurance_received field.
	 * @var        string
	 */
	protected $insurance_received;

	/**
	 * The value for the oriented_member_id field.
	 * @var        int
	 */
	protected $oriented_member_id;

	/**
	 * The value for the oriented_date field.
	 * @var        string
	 */
	protected $oriented_date;

	/**
	 * The value for the mop_active_status field.
	 * @var        int
	 */
	protected $mop_active_status;

	/**
	 * The value for the mop_oriented_member_id field.
	 * @var        int
	 */
	protected $mop_oriented_member_id;

	/**
	 * The value for the mop_oriented_date field.
	 * @var        string
	 */
	protected $mop_oriented_date;

	/**
	 * The value for the mop_regions_served field.
	 * @var        string
	 */
	protected $mop_regions_served;

	/**
	 * The value for the mop_served_by field.
	 * @var        string
	 */
	protected $mop_served_by;

	/**
	 * The value for the mop_qualifications field.
	 * @var        string
	 */
	protected $mop_qualifications;

	/**
	 * The value for the hseats field.
	 * @var        string
	 */
	protected $hseats;

	/**
	 * The value for the transplant field.
	 * @var        int
	 */
	protected $transplant;

	/**
	 * @var        Member
	 */
	protected $aMember;

	/**
	 * @var        Airport
	 */
	protected $aAirport;

	/**
	 * @var        Pilot
	 */
	protected $aPilotRelatedByOrientedMemberId;

	/**
	 * @var        Pilot
	 */
	protected $aPilotRelatedByMopOrientedMemberId;

	/**
	 * @var        array MissionLeg[] Collection to store aggregation of MissionLeg objects.
	 */
	protected $collMissionLegsRelatedByPilotId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMissionLegsRelatedByPilotId.
	 */
	private $lastMissionLegRelatedByPilotIdCriteria = null;

	/**
	 * @var        array MissionLeg[] Collection to store aggregation of MissionLeg objects.
	 */
	protected $collMissionLegsRelatedByBackupPilotId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMissionLegsRelatedByBackupPilotId.
	 */
	private $lastMissionLegRelatedByBackupPilotIdCriteria = null;

	/**
	 * @var        array MissionLegChange[] Collection to store aggregation of MissionLegChange objects.
	 */
	protected $collMissionLegChanges;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMissionLegChanges.
	 */
	private $lastMissionLegChangeCriteria = null;

	/**
	 * @var        array PersonalFlight[] Collection to store aggregation of PersonalFlight objects.
	 */
	protected $collPersonalFlights;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPersonalFlights.
	 */
	private $lastPersonalFlightCriteria = null;

	/**
	 * @var        array Pilot[] Collection to store aggregation of Pilot objects.
	 */
	protected $collPilotsRelatedByOrientedMemberId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPilotsRelatedByOrientedMemberId.
	 */
	private $lastPilotRelatedByOrientedMemberIdCriteria = null;

	/**
	 * @var        array Pilot[] Collection to store aggregation of Pilot objects.
	 */
	protected $collPilotsRelatedByMopOrientedMemberId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPilotsRelatedByMopOrientedMemberId.
	 */
	private $lastPilotRelatedByMopOrientedMemberIdCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BasePilot object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [member_id] column value.
	 * 
	 * @return     int
	 */
	public function getMemberId()
	{
		return $this->member_id;
	}

	/**
	 * Get the [primary_airport_id] column value.
	 * 
	 * @return     int
	 */
	public function getPrimaryAirportId()
	{
		return $this->primary_airport_id;
	}

	/**
	 * Get the [secondary_home_bases] column value.
	 * 
	 * @return     string
	 */
	public function getSecondaryHomeBases()
	{
		return $this->secondary_home_bases;
	}

	/**
	 * Get the [total_hours] column value.
	 * 
	 * @return     int
	 */
	public function getTotalHours()
	{
		return $this->total_hours;
	}

	/**
	 * Get the [license_type] column value.
	 * 
	 * @return     string
	 */
	public function getLicenseType()
	{
		return $this->license_type;
	}

	/**
	 * Get the [ifr] column value.
	 * 
	 * @return     int
	 */
	public function getIfr()
	{
		return $this->ifr;
	}

	/**
	 * Get the [multi_engine] column value.
	 * 
	 * @return     int
	 */
	public function getMultiEngine()
	{
		return $this->multi_engine;
	}

	/**
	 * Get the [se_instructor] column value.
	 * 
	 * @return     string
	 */
	public function getSeInstructor()
	{
		return $this->se_instructor;
	}

	/**
	 * Get the [me_instructor] column value.
	 * 
	 * @return     string
	 */
	public function getMeInstructor()
	{
		return $this->me_instructor;
	}

	/**
	 * Get the [other_ratings] column value.
	 * 
	 * @return     string
	 */
	public function getOtherRatings()
	{
		return $this->other_ratings;
	}

	/**
	 * Get the [optionally formatted] temporal [insurance_received] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getInsuranceReceived($format = 'Y-m-d H:i:s')
	{
		if ($this->insurance_received === null) {
			return null;
		}


		if ($this->insurance_received === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->insurance_received);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->insurance_received, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [oriented_member_id] column value.
	 * 
	 * @return     int
	 */
	public function getOrientedMemberId()
	{
		return $this->oriented_member_id;
	}

	/**
	 * Get the [optionally formatted] temporal [oriented_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getOrientedDate($format = 'Y-m-d H:i:s')
	{
		if ($this->oriented_date === null) {
			return null;
		}


		if ($this->oriented_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->oriented_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->oriented_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [mop_active_status] column value.
	 * 
	 * @return     int
	 */
	public function getMopActiveStatus()
	{
		return $this->mop_active_status;
	}

	/**
	 * Get the [mop_oriented_member_id] column value.
	 * 
	 * @return     int
	 */
	public function getMopOrientedMemberId()
	{
		return $this->mop_oriented_member_id;
	}

	/**
	 * Get the [optionally formatted] temporal [mop_oriented_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getMopOrientedDate($format = 'Y-m-d H:i:s')
	{
		if ($this->mop_oriented_date === null) {
			return null;
		}


		if ($this->mop_oriented_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->mop_oriented_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->mop_oriented_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [mop_regions_served] column value.
	 * 
	 * @return     string
	 */
	public function getMopRegionsServed()
	{
		return $this->mop_regions_served;
	}

	/**
	 * Get the [mop_served_by] column value.
	 * 
	 * @return     string
	 */
	public function getMopServedBy()
	{
		return $this->mop_served_by;
	}

	/**
	 * Get the [mop_qualifications] column value.
	 * 
	 * @return     string
	 */
	public function getMopQualifications()
	{
		return $this->mop_qualifications;
	}

	/**
	 * Get the [hseats] column value.
	 * 
	 * @return     string
	 */
	public function getHseats()
	{
		return $this->hseats;
	}

	/**
	 * Get the [transplant] column value.
	 * 
	 * @return     int
	 */
	public function getTransplant()
	{
		return $this->transplant;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = PilotPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [member_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setMemberId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->member_id !== $v) {
			$this->member_id = $v;
			$this->modifiedColumns[] = PilotPeer::MEMBER_ID;
		}

		if ($this->aMember !== null && $this->aMember->getId() !== $v) {
			$this->aMember = null;
		}

		return $this;
	} // setMemberId()

	/**
	 * Set the value of [primary_airport_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setPrimaryAirportId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->primary_airport_id !== $v) {
			$this->primary_airport_id = $v;
			$this->modifiedColumns[] = PilotPeer::PRIMARY_AIRPORT_ID;
		}

		if ($this->aAirport !== null && $this->aAirport->getId() !== $v) {
			$this->aAirport = null;
		}

		return $this;
	} // setPrimaryAirportId()

	/**
	 * Set the value of [secondary_home_bases] column.
	 * 
	 * @param      string $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setSecondaryHomeBases($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->secondary_home_bases !== $v) {
			$this->secondary_home_bases = $v;
			$this->modifiedColumns[] = PilotPeer::SECONDARY_HOME_BASES;
		}

		return $this;
	} // setSecondaryHomeBases()

	/**
	 * Set the value of [total_hours] column.
	 * 
	 * @param      int $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setTotalHours($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->total_hours !== $v) {
			$this->total_hours = $v;
			$this->modifiedColumns[] = PilotPeer::TOTAL_HOURS;
		}

		return $this;
	} // setTotalHours()

	/**
	 * Set the value of [license_type] column.
	 * 
	 * @param      string $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setLicenseType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->license_type !== $v) {
			$this->license_type = $v;
			$this->modifiedColumns[] = PilotPeer::LICENSE_TYPE;
		}

		return $this;
	} // setLicenseType()

	/**
	 * Set the value of [ifr] column.
	 * 
	 * @param      int $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setIfr($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ifr !== $v) {
			$this->ifr = $v;
			$this->modifiedColumns[] = PilotPeer::IFR;
		}

		return $this;
	} // setIfr()

	/**
	 * Set the value of [multi_engine] column.
	 * 
	 * @param      int $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setMultiEngine($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->multi_engine !== $v) {
			$this->multi_engine = $v;
			$this->modifiedColumns[] = PilotPeer::MULTI_ENGINE;
		}

		return $this;
	} // setMultiEngine()

	/**
	 * Set the value of [se_instructor] column.
	 * 
	 * @param      string $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setSeInstructor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->se_instructor !== $v) {
			$this->se_instructor = $v;
			$this->modifiedColumns[] = PilotPeer::SE_INSTRUCTOR;
		}

		return $this;
	} // setSeInstructor()

	/**
	 * Set the value of [me_instructor] column.
	 * 
	 * @param      string $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setMeInstructor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->me_instructor !== $v) {
			$this->me_instructor = $v;
			$this->modifiedColumns[] = PilotPeer::ME_INSTRUCTOR;
		}

		return $this;
	} // setMeInstructor()

	/**
	 * Set the value of [other_ratings] column.
	 * 
	 * @param      string $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setOtherRatings($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other_ratings !== $v) {
			$this->other_ratings = $v;
			$this->modifiedColumns[] = PilotPeer::OTHER_RATINGS;
		}

		return $this;
	} // setOtherRatings()

	/**
	 * Sets the value of [insurance_received] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setInsuranceReceived($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->insurance_received !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->insurance_received !== null && $tmpDt = new DateTime($this->insurance_received)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->insurance_received = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PilotPeer::INSURANCE_RECEIVED;
			}
		} // if either are not null

		return $this;
	} // setInsuranceReceived()

	/**
	 * Set the value of [oriented_member_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setOrientedMemberId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->oriented_member_id !== $v) {
			$this->oriented_member_id = $v;
			$this->modifiedColumns[] = PilotPeer::ORIENTED_MEMBER_ID;
		}

		if ($this->aPilotRelatedByOrientedMemberId !== null && $this->aPilotRelatedByOrientedMemberId->getId() !== $v) {
			$this->aPilotRelatedByOrientedMemberId = null;
		}

		return $this;
	} // setOrientedMemberId()

	/**
	 * Sets the value of [oriented_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setOrientedDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->oriented_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->oriented_date !== null && $tmpDt = new DateTime($this->oriented_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->oriented_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PilotPeer::ORIENTED_DATE;
			}
		} // if either are not null

		return $this;
	} // setOrientedDate()

	/**
	 * Set the value of [mop_active_status] column.
	 * 
	 * @param      int $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setMopActiveStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->mop_active_status !== $v) {
			$this->mop_active_status = $v;
			$this->modifiedColumns[] = PilotPeer::MOP_ACTIVE_STATUS;
		}

		return $this;
	} // setMopActiveStatus()

	/**
	 * Set the value of [mop_oriented_member_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setMopOrientedMemberId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->mop_oriented_member_id !== $v) {
			$this->mop_oriented_member_id = $v;
			$this->modifiedColumns[] = PilotPeer::MOP_ORIENTED_MEMBER_ID;
		}

		if ($this->aPilotRelatedByMopOrientedMemberId !== null && $this->aPilotRelatedByMopOrientedMemberId->getId() !== $v) {
			$this->aPilotRelatedByMopOrientedMemberId = null;
		}

		return $this;
	} // setMopOrientedMemberId()

	/**
	 * Sets the value of [mop_oriented_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setMopOrientedDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->mop_oriented_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->mop_oriented_date !== null && $tmpDt = new DateTime($this->mop_oriented_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->mop_oriented_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PilotPeer::MOP_ORIENTED_DATE;
			}
		} // if either are not null

		return $this;
	} // setMopOrientedDate()

	/**
	 * Set the value of [mop_regions_served] column.
	 * 
	 * @param      string $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setMopRegionsServed($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mop_regions_served !== $v) {
			$this->mop_regions_served = $v;
			$this->modifiedColumns[] = PilotPeer::MOP_REGIONS_SERVED;
		}

		return $this;
	} // setMopRegionsServed()

	/**
	 * Set the value of [mop_served_by] column.
	 * 
	 * @param      string $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setMopServedBy($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mop_served_by !== $v) {
			$this->mop_served_by = $v;
			$this->modifiedColumns[] = PilotPeer::MOP_SERVED_BY;
		}

		return $this;
	} // setMopServedBy()

	/**
	 * Set the value of [mop_qualifications] column.
	 * 
	 * @param      string $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setMopQualifications($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mop_qualifications !== $v) {
			$this->mop_qualifications = $v;
			$this->modifiedColumns[] = PilotPeer::MOP_QUALIFICATIONS;
		}

		return $this;
	} // setMopQualifications()

	/**
	 * Set the value of [hseats] column.
	 * 
	 * @param      string $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setHseats($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->hseats !== $v) {
			$this->hseats = $v;
			$this->modifiedColumns[] = PilotPeer::HSEATS;
		}

		return $this;
	} // setHseats()

	/**
	 * Set the value of [transplant] column.
	 * 
	 * @param      int $v new value
	 * @return     Pilot The current object (for fluent API support)
	 */
	public function setTransplant($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->transplant !== $v) {
			$this->transplant = $v;
			$this->modifiedColumns[] = PilotPeer::TRANSPLANT;
		}

		return $this;
	} // setTransplant()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->member_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->primary_airport_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->secondary_home_bases = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->total_hours = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->license_type = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->ifr = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->multi_engine = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->se_instructor = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->me_instructor = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->other_ratings = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->insurance_received = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->oriented_member_id = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->oriented_date = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->mop_active_status = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->mop_oriented_member_id = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->mop_oriented_date = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->mop_regions_served = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->mop_served_by = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->mop_qualifications = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->hseats = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->transplant = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 22; // 22 = PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Pilot object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aMember !== null && $this->member_id !== $this->aMember->getId()) {
			$this->aMember = null;
		}
		if ($this->aAirport !== null && $this->primary_airport_id !== $this->aAirport->getId()) {
			$this->aAirport = null;
		}
		if ($this->aPilotRelatedByOrientedMemberId !== null && $this->oriented_member_id !== $this->aPilotRelatedByOrientedMemberId->getId()) {
			$this->aPilotRelatedByOrientedMemberId = null;
		}
		if ($this->aPilotRelatedByMopOrientedMemberId !== null && $this->mop_oriented_member_id !== $this->aPilotRelatedByMopOrientedMemberId->getId()) {
			$this->aPilotRelatedByMopOrientedMemberId = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PilotPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PilotPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aMember = null;
			$this->aAirport = null;
			$this->aPilotRelatedByOrientedMemberId = null;
			$this->aPilotRelatedByMopOrientedMemberId = null;
			$this->collMissionLegsRelatedByPilotId = null;
			$this->lastMissionLegRelatedByPilotIdCriteria = null;

			$this->collMissionLegsRelatedByBackupPilotId = null;
			$this->lastMissionLegRelatedByBackupPilotIdCriteria = null;

			$this->collMissionLegChanges = null;
			$this->lastMissionLegChangeCriteria = null;

			$this->collPersonalFlights = null;
			$this->lastPersonalFlightCriteria = null;

			$this->collPilotsRelatedByOrientedMemberId = null;
			$this->lastPilotRelatedByOrientedMemberIdCriteria = null;

			$this->collPilotsRelatedByMopOrientedMemberId = null;
			$this->lastPilotRelatedByMopOrientedMemberIdCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasePilot:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PilotPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			PilotPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BasePilot:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasePilot:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PilotPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BasePilot:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			PilotPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aMember !== null) {
				if ($this->aMember->isModified() || $this->aMember->isNew()) {
					$affectedRows += $this->aMember->save($con);
				}
				$this->setMember($this->aMember);
			}

			if ($this->aAirport !== null) {
				if ($this->aAirport->isModified() || $this->aAirport->isNew()) {
					$affectedRows += $this->aAirport->save($con);
				}
				$this->setAirport($this->aAirport);
			}

			if ($this->aPilotRelatedByOrientedMemberId !== null) {
				if ($this->aPilotRelatedByOrientedMemberId->isModified() || $this->aPilotRelatedByOrientedMemberId->isNew()) {
					$affectedRows += $this->aPilotRelatedByOrientedMemberId->save($con);
				}
				$this->setPilotRelatedByOrientedMemberId($this->aPilotRelatedByOrientedMemberId);
			}

			if ($this->aPilotRelatedByMopOrientedMemberId !== null) {
				if ($this->aPilotRelatedByMopOrientedMemberId->isModified() || $this->aPilotRelatedByMopOrientedMemberId->isNew()) {
					$affectedRows += $this->aPilotRelatedByMopOrientedMemberId->save($con);
				}
				$this->setPilotRelatedByMopOrientedMemberId($this->aPilotRelatedByMopOrientedMemberId);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PilotPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PilotPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PilotPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collMissionLegsRelatedByPilotId !== null) {
				foreach ($this->collMissionLegsRelatedByPilotId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMissionLegsRelatedByBackupPilotId !== null) {
				foreach ($this->collMissionLegsRelatedByBackupPilotId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMissionLegChanges !== null) {
				foreach ($this->collMissionLegChanges as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPersonalFlights !== null) {
				foreach ($this->collPersonalFlights as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPilotsRelatedByOrientedMemberId !== null) {
				foreach ($this->collPilotsRelatedByOrientedMemberId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPilotsRelatedByMopOrientedMemberId !== null) {
				foreach ($this->collPilotsRelatedByMopOrientedMemberId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aMember !== null) {
				if (!$this->aMember->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMember->getValidationFailures());
				}
			}

			if ($this->aAirport !== null) {
				if (!$this->aAirport->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAirport->getValidationFailures());
				}
			}

			if ($this->aPilotRelatedByOrientedMemberId !== null) {
				if (!$this->aPilotRelatedByOrientedMemberId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPilotRelatedByOrientedMemberId->getValidationFailures());
				}
			}

			if ($this->aPilotRelatedByMopOrientedMemberId !== null) {
				if (!$this->aPilotRelatedByMopOrientedMemberId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPilotRelatedByMopOrientedMemberId->getValidationFailures());
				}
			}


			if (($retval = PilotPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collMissionLegsRelatedByPilotId !== null) {
					foreach ($this->collMissionLegsRelatedByPilotId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMissionLegsRelatedByBackupPilotId !== null) {
					foreach ($this->collMissionLegsRelatedByBackupPilotId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMissionLegChanges !== null) {
					foreach ($this->collMissionLegChanges as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPersonalFlights !== null) {
					foreach ($this->collPersonalFlights as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPilotsRelatedByOrientedMemberId !== null) {
					foreach ($this->collPilotsRelatedByOrientedMemberId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPilotsRelatedByMopOrientedMemberId !== null) {
					foreach ($this->collPilotsRelatedByMopOrientedMemberId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PilotPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getMemberId();
				break;
			case 2:
				return $this->getPrimaryAirportId();
				break;
			case 3:
				return $this->getSecondaryHomeBases();
				break;
			case 4:
				return $this->getTotalHours();
				break;
			case 5:
				return $this->getLicenseType();
				break;
			case 6:
				return $this->getIfr();
				break;
			case 7:
				return $this->getMultiEngine();
				break;
			case 8:
				return $this->getSeInstructor();
				break;
			case 9:
				return $this->getMeInstructor();
				break;
			case 10:
				return $this->getOtherRatings();
				break;
			case 11:
				return $this->getInsuranceReceived();
				break;
			case 12:
				return $this->getOrientedMemberId();
				break;
			case 13:
				return $this->getOrientedDate();
				break;
			case 14:
				return $this->getMopActiveStatus();
				break;
			case 15:
				return $this->getMopOrientedMemberId();
				break;
			case 16:
				return $this->getMopOrientedDate();
				break;
			case 17:
				return $this->getMopRegionsServed();
				break;
			case 18:
				return $this->getMopServedBy();
				break;
			case 19:
				return $this->getMopQualifications();
				break;
			case 20:
				return $this->getHseats();
				break;
			case 21:
				return $this->getTransplant();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PilotPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getMemberId(),
			$keys[2] => $this->getPrimaryAirportId(),
			$keys[3] => $this->getSecondaryHomeBases(),
			$keys[4] => $this->getTotalHours(),
			$keys[5] => $this->getLicenseType(),
			$keys[6] => $this->getIfr(),
			$keys[7] => $this->getMultiEngine(),
			$keys[8] => $this->getSeInstructor(),
			$keys[9] => $this->getMeInstructor(),
			$keys[10] => $this->getOtherRatings(),
			$keys[11] => $this->getInsuranceReceived(),
			$keys[12] => $this->getOrientedMemberId(),
			$keys[13] => $this->getOrientedDate(),
			$keys[14] => $this->getMopActiveStatus(),
			$keys[15] => $this->getMopOrientedMemberId(),
			$keys[16] => $this->getMopOrientedDate(),
			$keys[17] => $this->getMopRegionsServed(),
			$keys[18] => $this->getMopServedBy(),
			$keys[19] => $this->getMopQualifications(),
			$keys[20] => $this->getHseats(),
			$keys[21] => $this->getTransplant(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PilotPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setMemberId($value);
				break;
			case 2:
				$this->setPrimaryAirportId($value);
				break;
			case 3:
				$this->setSecondaryHomeBases($value);
				break;
			case 4:
				$this->setTotalHours($value);
				break;
			case 5:
				$this->setLicenseType($value);
				break;
			case 6:
				$this->setIfr($value);
				break;
			case 7:
				$this->setMultiEngine($value);
				break;
			case 8:
				$this->setSeInstructor($value);
				break;
			case 9:
				$this->setMeInstructor($value);
				break;
			case 10:
				$this->setOtherRatings($value);
				break;
			case 11:
				$this->setInsuranceReceived($value);
				break;
			case 12:
				$this->setOrientedMemberId($value);
				break;
			case 13:
				$this->setOrientedDate($value);
				break;
			case 14:
				$this->setMopActiveStatus($value);
				break;
			case 15:
				$this->setMopOrientedMemberId($value);
				break;
			case 16:
				$this->setMopOrientedDate($value);
				break;
			case 17:
				$this->setMopRegionsServed($value);
				break;
			case 18:
				$this->setMopServedBy($value);
				break;
			case 19:
				$this->setMopQualifications($value);
				break;
			case 20:
				$this->setHseats($value);
				break;
			case 21:
				$this->setTransplant($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PilotPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setMemberId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setPrimaryAirportId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setSecondaryHomeBases($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setTotalHours($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setLicenseType($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setIfr($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setMultiEngine($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setSeInstructor($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setMeInstructor($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setOtherRatings($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setInsuranceReceived($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setOrientedMemberId($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setOrientedDate($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setMopActiveStatus($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setMopOrientedMemberId($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setMopOrientedDate($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setMopRegionsServed($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setMopServedBy($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setMopQualifications($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setHseats($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setTransplant($arr[$keys[21]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PilotPeer::DATABASE_NAME);

		if ($this->isColumnModified(PilotPeer::ID)) $criteria->add(PilotPeer::ID, $this->id);
		if ($this->isColumnModified(PilotPeer::MEMBER_ID)) $criteria->add(PilotPeer::MEMBER_ID, $this->member_id);
		if ($this->isColumnModified(PilotPeer::PRIMARY_AIRPORT_ID)) $criteria->add(PilotPeer::PRIMARY_AIRPORT_ID, $this->primary_airport_id);
		if ($this->isColumnModified(PilotPeer::SECONDARY_HOME_BASES)) $criteria->add(PilotPeer::SECONDARY_HOME_BASES, $this->secondary_home_bases);
		if ($this->isColumnModified(PilotPeer::TOTAL_HOURS)) $criteria->add(PilotPeer::TOTAL_HOURS, $this->total_hours);
		if ($this->isColumnModified(PilotPeer::LICENSE_TYPE)) $criteria->add(PilotPeer::LICENSE_TYPE, $this->license_type);
		if ($this->isColumnModified(PilotPeer::IFR)) $criteria->add(PilotPeer::IFR, $this->ifr);
		if ($this->isColumnModified(PilotPeer::MULTI_ENGINE)) $criteria->add(PilotPeer::MULTI_ENGINE, $this->multi_engine);
		if ($this->isColumnModified(PilotPeer::SE_INSTRUCTOR)) $criteria->add(PilotPeer::SE_INSTRUCTOR, $this->se_instructor);
		if ($this->isColumnModified(PilotPeer::ME_INSTRUCTOR)) $criteria->add(PilotPeer::ME_INSTRUCTOR, $this->me_instructor);
		if ($this->isColumnModified(PilotPeer::OTHER_RATINGS)) $criteria->add(PilotPeer::OTHER_RATINGS, $this->other_ratings);
		if ($this->isColumnModified(PilotPeer::INSURANCE_RECEIVED)) $criteria->add(PilotPeer::INSURANCE_RECEIVED, $this->insurance_received);
		if ($this->isColumnModified(PilotPeer::ORIENTED_MEMBER_ID)) $criteria->add(PilotPeer::ORIENTED_MEMBER_ID, $this->oriented_member_id);
		if ($this->isColumnModified(PilotPeer::ORIENTED_DATE)) $criteria->add(PilotPeer::ORIENTED_DATE, $this->oriented_date);
		if ($this->isColumnModified(PilotPeer::MOP_ACTIVE_STATUS)) $criteria->add(PilotPeer::MOP_ACTIVE_STATUS, $this->mop_active_status);
		if ($this->isColumnModified(PilotPeer::MOP_ORIENTED_MEMBER_ID)) $criteria->add(PilotPeer::MOP_ORIENTED_MEMBER_ID, $this->mop_oriented_member_id);
		if ($this->isColumnModified(PilotPeer::MOP_ORIENTED_DATE)) $criteria->add(PilotPeer::MOP_ORIENTED_DATE, $this->mop_oriented_date);
		if ($this->isColumnModified(PilotPeer::MOP_REGIONS_SERVED)) $criteria->add(PilotPeer::MOP_REGIONS_SERVED, $this->mop_regions_served);
		if ($this->isColumnModified(PilotPeer::MOP_SERVED_BY)) $criteria->add(PilotPeer::MOP_SERVED_BY, $this->mop_served_by);
		if ($this->isColumnModified(PilotPeer::MOP_QUALIFICATIONS)) $criteria->add(PilotPeer::MOP_QUALIFICATIONS, $this->mop_qualifications);
		if ($this->isColumnModified(PilotPeer::HSEATS)) $criteria->add(PilotPeer::HSEATS, $this->hseats);
		if ($this->isColumnModified(PilotPeer::TRANSPLANT)) $criteria->add(PilotPeer::TRANSPLANT, $this->transplant);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PilotPeer::DATABASE_NAME);

		$criteria->add(PilotPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Pilot (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setMemberId($this->member_id);

		$copyObj->setPrimaryAirportId($this->primary_airport_id);

		$copyObj->setSecondaryHomeBases($this->secondary_home_bases);

		$copyObj->setTotalHours($this->total_hours);

		$copyObj->setLicenseType($this->license_type);

		$copyObj->setIfr($this->ifr);

		$copyObj->setMultiEngine($this->multi_engine);

		$copyObj->setSeInstructor($this->se_instructor);

		$copyObj->setMeInstructor($this->me_instructor);

		$copyObj->setOtherRatings($this->other_ratings);

		$copyObj->setInsuranceReceived($this->insurance_received);

		$copyObj->setOrientedMemberId($this->oriented_member_id);

		$copyObj->setOrientedDate($this->oriented_date);

		$copyObj->setMopActiveStatus($this->mop_active_status);

		$copyObj->setMopOrientedMemberId($this->mop_oriented_member_id);

		$copyObj->setMopOrientedDate($this->mop_oriented_date);

		$copyObj->setMopRegionsServed($this->mop_regions_served);

		$copyObj->setMopServedBy($this->mop_served_by);

		$copyObj->setMopQualifications($this->mop_qualifications);

		$copyObj->setHseats($this->hseats);

		$copyObj->setTransplant($this->transplant);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getMissionLegsRelatedByPilotId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMissionLegRelatedByPilotId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMissionLegsRelatedByBackupPilotId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMissionLegRelatedByBackupPilotId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMissionLegChanges() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMissionLegChange($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPersonalFlights() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPersonalFlight($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPilotsRelatedByOrientedMemberId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPilotRelatedByOrientedMemberId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPilotsRelatedByMopOrientedMemberId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPilotRelatedByMopOrientedMemberId($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Pilot Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PilotPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PilotPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Member object.
	 *
	 * @param      Member $v
	 * @return     Pilot The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMember(Member $v = null)
	{
		if ($v === null) {
			$this->setMemberId(NULL);
		} else {
			$this->setMemberId($v->getId());
		}

		$this->aMember = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Member object, it will not be re-added.
		if ($v !== null) {
			$v->addPilot($this);
		}

		return $this;
	}


	/**
	 * Get the associated Member object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Member The associated Member object.
	 * @throws     PropelException
	 */
	public function getMember(PropelPDO $con = null)
	{
		if ($this->aMember === null && ($this->member_id !== null)) {
			$c = new Criteria(MemberPeer::DATABASE_NAME);
			$c->add(MemberPeer::ID, $this->member_id);
			$this->aMember = MemberPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMember->addPilots($this);
			 */
		}
		return $this->aMember;
	}

	/**
	 * Declares an association between this object and a Airport object.
	 *
	 * @param      Airport $v
	 * @return     Pilot The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAirport(Airport $v = null)
	{
		if ($v === null) {
			$this->setPrimaryAirportId(NULL);
		} else {
			$this->setPrimaryAirportId($v->getId());
		}

		$this->aAirport = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Airport object, it will not be re-added.
		if ($v !== null) {
			$v->addPilot($this);
		}

		return $this;
	}


	/**
	 * Get the associated Airport object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Airport The associated Airport object.
	 * @throws     PropelException
	 */
	public function getAirport(PropelPDO $con = null)
	{
		if ($this->aAirport === null && ($this->primary_airport_id !== null)) {
			$c = new Criteria(AirportPeer::DATABASE_NAME);
			$c->add(AirportPeer::ID, $this->primary_airport_id);
			$this->aAirport = AirportPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAirport->addPilots($this);
			 */
		}
		return $this->aAirport;
	}

	/**
	 * Declares an association between this object and a Pilot object.
	 *
	 * @param      Pilot $v
	 * @return     Pilot The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPilotRelatedByOrientedMemberId(Pilot $v = null)
	{
		if ($v === null) {
			$this->setOrientedMemberId(NULL);
		} else {
			$this->setOrientedMemberId($v->getId());
		}

		$this->aPilotRelatedByOrientedMemberId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Pilot object, it will not be re-added.
		if ($v !== null) {
			$v->addPilotRelatedByOrientedMemberId($this);
		}

		return $this;
	}


	/**
	 * Get the associated Pilot object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Pilot The associated Pilot object.
	 * @throws     PropelException
	 */
	public function getPilotRelatedByOrientedMemberId(PropelPDO $con = null)
	{
		if ($this->aPilotRelatedByOrientedMemberId === null && ($this->oriented_member_id !== null)) {
			$c = new Criteria(PilotPeer::DATABASE_NAME);
			$c->add(PilotPeer::ID, $this->oriented_member_id);
			$this->aPilotRelatedByOrientedMemberId = PilotPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPilotRelatedByOrientedMemberId->addPilotsRelatedByOrientedMemberId($this);
			 */
		}
		return $this->aPilotRelatedByOrientedMemberId;
	}

	/**
	 * Declares an association between this object and a Pilot object.
	 *
	 * @param      Pilot $v
	 * @return     Pilot The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPilotRelatedByMopOrientedMemberId(Pilot $v = null)
	{
		if ($v === null) {
			$this->setMopOrientedMemberId(NULL);
		} else {
			$this->setMopOrientedMemberId($v->getId());
		}

		$this->aPilotRelatedByMopOrientedMemberId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Pilot object, it will not be re-added.
		if ($v !== null) {
			$v->addPilotRelatedByMopOrientedMemberId($this);
		}

		return $this;
	}


	/**
	 * Get the associated Pilot object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Pilot The associated Pilot object.
	 * @throws     PropelException
	 */
	public function getPilotRelatedByMopOrientedMemberId(PropelPDO $con = null)
	{
		if ($this->aPilotRelatedByMopOrientedMemberId === null && ($this->mop_oriented_member_id !== null)) {
			$c = new Criteria(PilotPeer::DATABASE_NAME);
			$c->add(PilotPeer::ID, $this->mop_oriented_member_id);
			$this->aPilotRelatedByMopOrientedMemberId = PilotPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPilotRelatedByMopOrientedMemberId->addPilotsRelatedByMopOrientedMemberId($this);
			 */
		}
		return $this->aPilotRelatedByMopOrientedMemberId;
	}

	/**
	 * Clears out the collMissionLegsRelatedByPilotId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMissionLegsRelatedByPilotId()
	 */
	public function clearMissionLegsRelatedByPilotId()
	{
		$this->collMissionLegsRelatedByPilotId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMissionLegsRelatedByPilotId collection (array).
	 *
	 * By default this just sets the collMissionLegsRelatedByPilotId collection to an empty array (like clearcollMissionLegsRelatedByPilotId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMissionLegsRelatedByPilotId()
	{
		$this->collMissionLegsRelatedByPilotId = array();
	}

	/**
	 * Gets an array of MissionLeg objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Pilot has previously been saved, it will retrieve
	 * related MissionLegsRelatedByPilotId from storage. If this Pilot is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MissionLeg[]
	 * @throws     PropelException
	 */
	public function getMissionLegsRelatedByPilotId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByPilotId === null) {
			if ($this->isNew()) {
			   $this->collMissionLegsRelatedByPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

				MissionLegPeer::addSelectColumns($criteria);
				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

				MissionLegPeer::addSelectColumns($criteria);
				if (!isset($this->lastMissionLegRelatedByPilotIdCriteria) || !$this->lastMissionLegRelatedByPilotIdCriteria->equals($criteria)) {
					$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMissionLegRelatedByPilotIdCriteria = $criteria;
		return $this->collMissionLegsRelatedByPilotId;
	}

	/**
	 * Returns the number of related MissionLeg objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MissionLeg objects.
	 * @throws     PropelException
	 */
	public function countMissionLegsRelatedByPilotId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMissionLegsRelatedByPilotId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

				$count = MissionLegPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

				if (!isset($this->lastMissionLegRelatedByPilotIdCriteria) || !$this->lastMissionLegRelatedByPilotIdCriteria->equals($criteria)) {
					$count = MissionLegPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMissionLegsRelatedByPilotId);
				}
			} else {
				$count = count($this->collMissionLegsRelatedByPilotId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MissionLeg object to this object
	 * through the MissionLeg foreign key attribute.
	 *
	 * @param      MissionLeg $l MissionLeg
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMissionLegRelatedByPilotId(MissionLeg $l)
	{
		if ($this->collMissionLegsRelatedByPilotId === null) {
			$this->initMissionLegsRelatedByPilotId();
		}
		if (!in_array($l, $this->collMissionLegsRelatedByPilotId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMissionLegsRelatedByPilotId, $l);
			$l->setPilotRelatedByPilotId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByPilotIdJoinMission($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinMission($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByPilotIdCriteria) || !$this->lastMissionLegRelatedByPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinMission($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByPilotIdJoinAirportRelatedByFromAirportId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinAirportRelatedByFromAirportId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByPilotIdCriteria) || !$this->lastMissionLegRelatedByPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinAirportRelatedByFromAirportId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByPilotIdJoinAirportRelatedByToAirportId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinAirportRelatedByToAirportId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByPilotIdCriteria) || !$this->lastMissionLegRelatedByPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinAirportRelatedByToAirportId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByPilotIdJoinCoordinator($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinCoordinator($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByPilotIdCriteria) || !$this->lastMissionLegRelatedByPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinCoordinator($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByPilotIdJoinMemberRelatedByCopilotId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinMemberRelatedByCopilotId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByPilotIdCriteria) || !$this->lastMissionLegRelatedByPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinMemberRelatedByCopilotId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByPilotIdJoinMemberRelatedByMissAssisId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinMemberRelatedByMissAssisId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByPilotIdCriteria) || !$this->lastMissionLegRelatedByPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinMemberRelatedByMissAssisId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByPilotIdJoinMemberRelatedByBackupCopilotId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinMemberRelatedByBackupCopilotId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByPilotIdCriteria) || !$this->lastMissionLegRelatedByPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinMemberRelatedByBackupCopilotId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByPilotIdJoinMemberRelatedByBackupMissAssisId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinMemberRelatedByBackupMissAssisId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByPilotIdCriteria) || !$this->lastMissionLegRelatedByPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinMemberRelatedByBackupMissAssisId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByPilotIdJoinMissionReport($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinMissionReport($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByPilotIdCriteria) || !$this->lastMissionLegRelatedByPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinMissionReport($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByPilotIdJoinPilotAircraft($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinPilotAircraft($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByPilotIdCriteria) || !$this->lastMissionLegRelatedByPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinPilotAircraft($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByPilotIdJoinFbo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinFbo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByPilotIdCriteria) || !$this->lastMissionLegRelatedByPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByPilotId = MissionLegPeer::doSelectJoinFbo($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByPilotId;
	}

	/**
	 * Clears out the collMissionLegsRelatedByBackupPilotId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMissionLegsRelatedByBackupPilotId()
	 */
	public function clearMissionLegsRelatedByBackupPilotId()
	{
		$this->collMissionLegsRelatedByBackupPilotId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMissionLegsRelatedByBackupPilotId collection (array).
	 *
	 * By default this just sets the collMissionLegsRelatedByBackupPilotId collection to an empty array (like clearcollMissionLegsRelatedByBackupPilotId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMissionLegsRelatedByBackupPilotId()
	{
		$this->collMissionLegsRelatedByBackupPilotId = array();
	}

	/**
	 * Gets an array of MissionLeg objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Pilot has previously been saved, it will retrieve
	 * related MissionLegsRelatedByBackupPilotId from storage. If this Pilot is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MissionLeg[]
	 * @throws     PropelException
	 */
	public function getMissionLegsRelatedByBackupPilotId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupPilotId === null) {
			if ($this->isNew()) {
			   $this->collMissionLegsRelatedByBackupPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

				MissionLegPeer::addSelectColumns($criteria);
				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

				MissionLegPeer::addSelectColumns($criteria);
				if (!isset($this->lastMissionLegRelatedByBackupPilotIdCriteria) || !$this->lastMissionLegRelatedByBackupPilotIdCriteria->equals($criteria)) {
					$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMissionLegRelatedByBackupPilotIdCriteria = $criteria;
		return $this->collMissionLegsRelatedByBackupPilotId;
	}

	/**
	 * Returns the number of related MissionLeg objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MissionLeg objects.
	 * @throws     PropelException
	 */
	public function countMissionLegsRelatedByBackupPilotId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMissionLegsRelatedByBackupPilotId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

				$count = MissionLegPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

				if (!isset($this->lastMissionLegRelatedByBackupPilotIdCriteria) || !$this->lastMissionLegRelatedByBackupPilotIdCriteria->equals($criteria)) {
					$count = MissionLegPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMissionLegsRelatedByBackupPilotId);
				}
			} else {
				$count = count($this->collMissionLegsRelatedByBackupPilotId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MissionLeg object to this object
	 * through the MissionLeg foreign key attribute.
	 *
	 * @param      MissionLeg $l MissionLeg
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMissionLegRelatedByBackupPilotId(MissionLeg $l)
	{
		if ($this->collMissionLegsRelatedByBackupPilotId === null) {
			$this->initMissionLegsRelatedByBackupPilotId();
		}
		if (!in_array($l, $this->collMissionLegsRelatedByBackupPilotId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMissionLegsRelatedByBackupPilotId, $l);
			$l->setPilotRelatedByBackupPilotId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByBackupPilotIdJoinMission($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinMission($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupPilotIdCriteria) || !$this->lastMissionLegRelatedByBackupPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinMission($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByBackupPilotIdJoinAirportRelatedByFromAirportId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinAirportRelatedByFromAirportId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupPilotIdCriteria) || !$this->lastMissionLegRelatedByBackupPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinAirportRelatedByFromAirportId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByBackupPilotIdJoinAirportRelatedByToAirportId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinAirportRelatedByToAirportId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupPilotIdCriteria) || !$this->lastMissionLegRelatedByBackupPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinAirportRelatedByToAirportId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByBackupPilotIdJoinCoordinator($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinCoordinator($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupPilotIdCriteria) || !$this->lastMissionLegRelatedByBackupPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinCoordinator($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByBackupPilotIdJoinMemberRelatedByCopilotId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinMemberRelatedByCopilotId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupPilotIdCriteria) || !$this->lastMissionLegRelatedByBackupPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinMemberRelatedByCopilotId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByBackupPilotIdJoinMemberRelatedByMissAssisId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinMemberRelatedByMissAssisId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupPilotIdCriteria) || !$this->lastMissionLegRelatedByBackupPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinMemberRelatedByMissAssisId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByBackupPilotIdJoinMemberRelatedByBackupCopilotId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinMemberRelatedByBackupCopilotId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupPilotIdCriteria) || !$this->lastMissionLegRelatedByBackupPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinMemberRelatedByBackupCopilotId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByBackupPilotIdJoinMemberRelatedByBackupMissAssisId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinMemberRelatedByBackupMissAssisId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupPilotIdCriteria) || !$this->lastMissionLegRelatedByBackupPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinMemberRelatedByBackupMissAssisId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByBackupPilotIdJoinMissionReport($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinMissionReport($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupPilotIdCriteria) || !$this->lastMissionLegRelatedByBackupPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinMissionReport($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByBackupPilotIdJoinPilotAircraft($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinPilotAircraft($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupPilotIdCriteria) || !$this->lastMissionLegRelatedByBackupPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinPilotAircraft($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupPilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupPilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getMissionLegsRelatedByBackupPilotIdJoinFbo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupPilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupPilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinFbo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupPilotIdCriteria) || !$this->lastMissionLegRelatedByBackupPilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupPilotId = MissionLegPeer::doSelectJoinFbo($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupPilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupPilotId;
	}

	/**
	 * Clears out the collMissionLegChanges collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMissionLegChanges()
	 */
	public function clearMissionLegChanges()
	{
		$this->collMissionLegChanges = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMissionLegChanges collection (array).
	 *
	 * By default this just sets the collMissionLegChanges collection to an empty array (like clearcollMissionLegChanges());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMissionLegChanges()
	{
		$this->collMissionLegChanges = array();
	}

	/**
	 * Gets an array of MissionLegChange objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Pilot has previously been saved, it will retrieve
	 * related MissionLegChanges from storage. If this Pilot is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MissionLegChange[]
	 * @throws     PropelException
	 */
	public function getMissionLegChanges($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegChanges === null) {
			if ($this->isNew()) {
			   $this->collMissionLegChanges = array();
			} else {

				$criteria->add(MissionLegChangePeer::PILOT_ID, $this->id);

				MissionLegChangePeer::addSelectColumns($criteria);
				$this->collMissionLegChanges = MissionLegChangePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MissionLegChangePeer::PILOT_ID, $this->id);

				MissionLegChangePeer::addSelectColumns($criteria);
				if (!isset($this->lastMissionLegChangeCriteria) || !$this->lastMissionLegChangeCriteria->equals($criteria)) {
					$this->collMissionLegChanges = MissionLegChangePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMissionLegChangeCriteria = $criteria;
		return $this->collMissionLegChanges;
	}

	/**
	 * Returns the number of related MissionLegChange objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MissionLegChange objects.
	 * @throws     PropelException
	 */
	public function countMissionLegChanges(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMissionLegChanges === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MissionLegChangePeer::PILOT_ID, $this->id);

				$count = MissionLegChangePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MissionLegChangePeer::PILOT_ID, $this->id);

				if (!isset($this->lastMissionLegChangeCriteria) || !$this->lastMissionLegChangeCriteria->equals($criteria)) {
					$count = MissionLegChangePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMissionLegChanges);
				}
			} else {
				$count = count($this->collMissionLegChanges);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MissionLegChange object to this object
	 * through the MissionLegChange foreign key attribute.
	 *
	 * @param      MissionLegChange $l MissionLegChange
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMissionLegChange(MissionLegChange $l)
	{
		if ($this->collMissionLegChanges === null) {
			$this->initMissionLegChanges();
		}
		if (!in_array($l, $this->collMissionLegChanges, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMissionLegChanges, $l);
			$l->setPilot($this);
		}
	}

	/**
	 * Clears out the collPersonalFlights collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPersonalFlights()
	 */
	public function clearPersonalFlights()
	{
		$this->collPersonalFlights = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPersonalFlights collection (array).
	 *
	 * By default this just sets the collPersonalFlights collection to an empty array (like clearcollPersonalFlights());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPersonalFlights()
	{
		$this->collPersonalFlights = array();
	}

	/**
	 * Gets an array of PersonalFlight objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Pilot has previously been saved, it will retrieve
	 * related PersonalFlights from storage. If this Pilot is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PersonalFlight[]
	 * @throws     PropelException
	 */
	public function getPersonalFlights($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPersonalFlights === null) {
			if ($this->isNew()) {
			   $this->collPersonalFlights = array();
			} else {

				$criteria->add(PersonalFlightPeer::PILOT_ID, $this->id);

				PersonalFlightPeer::addSelectColumns($criteria);
				$this->collPersonalFlights = PersonalFlightPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PersonalFlightPeer::PILOT_ID, $this->id);

				PersonalFlightPeer::addSelectColumns($criteria);
				if (!isset($this->lastPersonalFlightCriteria) || !$this->lastPersonalFlightCriteria->equals($criteria)) {
					$this->collPersonalFlights = PersonalFlightPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPersonalFlightCriteria = $criteria;
		return $this->collPersonalFlights;
	}

	/**
	 * Returns the number of related PersonalFlight objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PersonalFlight objects.
	 * @throws     PropelException
	 */
	public function countPersonalFlights(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPersonalFlights === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PersonalFlightPeer::PILOT_ID, $this->id);

				$count = PersonalFlightPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PersonalFlightPeer::PILOT_ID, $this->id);

				if (!isset($this->lastPersonalFlightCriteria) || !$this->lastPersonalFlightCriteria->equals($criteria)) {
					$count = PersonalFlightPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPersonalFlights);
				}
			} else {
				$count = count($this->collPersonalFlights);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PersonalFlight object to this object
	 * through the PersonalFlight foreign key attribute.
	 *
	 * @param      PersonalFlight $l PersonalFlight
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPersonalFlight(PersonalFlight $l)
	{
		if ($this->collPersonalFlights === null) {
			$this->initPersonalFlights();
		}
		if (!in_array($l, $this->collPersonalFlights, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPersonalFlights, $l);
			$l->setPilot($this);
		}
	}

	/**
	 * Clears out the collPilotsRelatedByOrientedMemberId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPilotsRelatedByOrientedMemberId()
	 */
	public function clearPilotsRelatedByOrientedMemberId()
	{
		$this->collPilotsRelatedByOrientedMemberId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPilotsRelatedByOrientedMemberId collection (array).
	 *
	 * By default this just sets the collPilotsRelatedByOrientedMemberId collection to an empty array (like clearcollPilotsRelatedByOrientedMemberId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPilotsRelatedByOrientedMemberId()
	{
		$this->collPilotsRelatedByOrientedMemberId = array();
	}

	/**
	 * Gets an array of Pilot objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Pilot has previously been saved, it will retrieve
	 * related PilotsRelatedByOrientedMemberId from storage. If this Pilot is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Pilot[]
	 * @throws     PropelException
	 */
	public function getPilotsRelatedByOrientedMemberId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilotsRelatedByOrientedMemberId === null) {
			if ($this->isNew()) {
			   $this->collPilotsRelatedByOrientedMemberId = array();
			} else {

				$criteria->add(PilotPeer::ORIENTED_MEMBER_ID, $this->id);

				PilotPeer::addSelectColumns($criteria);
				$this->collPilotsRelatedByOrientedMemberId = PilotPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PilotPeer::ORIENTED_MEMBER_ID, $this->id);

				PilotPeer::addSelectColumns($criteria);
				if (!isset($this->lastPilotRelatedByOrientedMemberIdCriteria) || !$this->lastPilotRelatedByOrientedMemberIdCriteria->equals($criteria)) {
					$this->collPilotsRelatedByOrientedMemberId = PilotPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPilotRelatedByOrientedMemberIdCriteria = $criteria;
		return $this->collPilotsRelatedByOrientedMemberId;
	}

	/**
	 * Returns the number of related Pilot objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Pilot objects.
	 * @throws     PropelException
	 */
	public function countPilotsRelatedByOrientedMemberId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPilotsRelatedByOrientedMemberId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PilotPeer::ORIENTED_MEMBER_ID, $this->id);

				$count = PilotPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PilotPeer::ORIENTED_MEMBER_ID, $this->id);

				if (!isset($this->lastPilotRelatedByOrientedMemberIdCriteria) || !$this->lastPilotRelatedByOrientedMemberIdCriteria->equals($criteria)) {
					$count = PilotPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPilotsRelatedByOrientedMemberId);
				}
			} else {
				$count = count($this->collPilotsRelatedByOrientedMemberId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Pilot object to this object
	 * through the Pilot foreign key attribute.
	 *
	 * @param      Pilot $l Pilot
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPilotRelatedByOrientedMemberId(Pilot $l)
	{
		if ($this->collPilotsRelatedByOrientedMemberId === null) {
			$this->initPilotsRelatedByOrientedMemberId();
		}
		if (!in_array($l, $this->collPilotsRelatedByOrientedMemberId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPilotsRelatedByOrientedMemberId, $l);
			$l->setPilotRelatedByOrientedMemberId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related PilotsRelatedByOrientedMemberId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getPilotsRelatedByOrientedMemberIdJoinMember($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilotsRelatedByOrientedMemberId === null) {
			if ($this->isNew()) {
				$this->collPilotsRelatedByOrientedMemberId = array();
			} else {

				$criteria->add(PilotPeer::ORIENTED_MEMBER_ID, $this->id);

				$this->collPilotsRelatedByOrientedMemberId = PilotPeer::doSelectJoinMember($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PilotPeer::ORIENTED_MEMBER_ID, $this->id);

			if (!isset($this->lastPilotRelatedByOrientedMemberIdCriteria) || !$this->lastPilotRelatedByOrientedMemberIdCriteria->equals($criteria)) {
				$this->collPilotsRelatedByOrientedMemberId = PilotPeer::doSelectJoinMember($criteria, $con, $join_behavior);
			}
		}
		$this->lastPilotRelatedByOrientedMemberIdCriteria = $criteria;

		return $this->collPilotsRelatedByOrientedMemberId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related PilotsRelatedByOrientedMemberId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getPilotsRelatedByOrientedMemberIdJoinAirport($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilotsRelatedByOrientedMemberId === null) {
			if ($this->isNew()) {
				$this->collPilotsRelatedByOrientedMemberId = array();
			} else {

				$criteria->add(PilotPeer::ORIENTED_MEMBER_ID, $this->id);

				$this->collPilotsRelatedByOrientedMemberId = PilotPeer::doSelectJoinAirport($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PilotPeer::ORIENTED_MEMBER_ID, $this->id);

			if (!isset($this->lastPilotRelatedByOrientedMemberIdCriteria) || !$this->lastPilotRelatedByOrientedMemberIdCriteria->equals($criteria)) {
				$this->collPilotsRelatedByOrientedMemberId = PilotPeer::doSelectJoinAirport($criteria, $con, $join_behavior);
			}
		}
		$this->lastPilotRelatedByOrientedMemberIdCriteria = $criteria;

		return $this->collPilotsRelatedByOrientedMemberId;
	}

	/**
	 * Clears out the collPilotsRelatedByMopOrientedMemberId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPilotsRelatedByMopOrientedMemberId()
	 */
	public function clearPilotsRelatedByMopOrientedMemberId()
	{
		$this->collPilotsRelatedByMopOrientedMemberId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPilotsRelatedByMopOrientedMemberId collection (array).
	 *
	 * By default this just sets the collPilotsRelatedByMopOrientedMemberId collection to an empty array (like clearcollPilotsRelatedByMopOrientedMemberId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPilotsRelatedByMopOrientedMemberId()
	{
		$this->collPilotsRelatedByMopOrientedMemberId = array();
	}

	/**
	 * Gets an array of Pilot objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Pilot has previously been saved, it will retrieve
	 * related PilotsRelatedByMopOrientedMemberId from storage. If this Pilot is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Pilot[]
	 * @throws     PropelException
	 */
	public function getPilotsRelatedByMopOrientedMemberId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilotsRelatedByMopOrientedMemberId === null) {
			if ($this->isNew()) {
			   $this->collPilotsRelatedByMopOrientedMemberId = array();
			} else {

				$criteria->add(PilotPeer::MOP_ORIENTED_MEMBER_ID, $this->id);

				PilotPeer::addSelectColumns($criteria);
				$this->collPilotsRelatedByMopOrientedMemberId = PilotPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PilotPeer::MOP_ORIENTED_MEMBER_ID, $this->id);

				PilotPeer::addSelectColumns($criteria);
				if (!isset($this->lastPilotRelatedByMopOrientedMemberIdCriteria) || !$this->lastPilotRelatedByMopOrientedMemberIdCriteria->equals($criteria)) {
					$this->collPilotsRelatedByMopOrientedMemberId = PilotPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPilotRelatedByMopOrientedMemberIdCriteria = $criteria;
		return $this->collPilotsRelatedByMopOrientedMemberId;
	}

	/**
	 * Returns the number of related Pilot objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Pilot objects.
	 * @throws     PropelException
	 */
	public function countPilotsRelatedByMopOrientedMemberId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPilotsRelatedByMopOrientedMemberId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PilotPeer::MOP_ORIENTED_MEMBER_ID, $this->id);

				$count = PilotPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PilotPeer::MOP_ORIENTED_MEMBER_ID, $this->id);

				if (!isset($this->lastPilotRelatedByMopOrientedMemberIdCriteria) || !$this->lastPilotRelatedByMopOrientedMemberIdCriteria->equals($criteria)) {
					$count = PilotPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPilotsRelatedByMopOrientedMemberId);
				}
			} else {
				$count = count($this->collPilotsRelatedByMopOrientedMemberId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Pilot object to this object
	 * through the Pilot foreign key attribute.
	 *
	 * @param      Pilot $l Pilot
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPilotRelatedByMopOrientedMemberId(Pilot $l)
	{
		if ($this->collPilotsRelatedByMopOrientedMemberId === null) {
			$this->initPilotsRelatedByMopOrientedMemberId();
		}
		if (!in_array($l, $this->collPilotsRelatedByMopOrientedMemberId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPilotsRelatedByMopOrientedMemberId, $l);
			$l->setPilotRelatedByMopOrientedMemberId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related PilotsRelatedByMopOrientedMemberId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getPilotsRelatedByMopOrientedMemberIdJoinMember($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilotsRelatedByMopOrientedMemberId === null) {
			if ($this->isNew()) {
				$this->collPilotsRelatedByMopOrientedMemberId = array();
			} else {

				$criteria->add(PilotPeer::MOP_ORIENTED_MEMBER_ID, $this->id);

				$this->collPilotsRelatedByMopOrientedMemberId = PilotPeer::doSelectJoinMember($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PilotPeer::MOP_ORIENTED_MEMBER_ID, $this->id);

			if (!isset($this->lastPilotRelatedByMopOrientedMemberIdCriteria) || !$this->lastPilotRelatedByMopOrientedMemberIdCriteria->equals($criteria)) {
				$this->collPilotsRelatedByMopOrientedMemberId = PilotPeer::doSelectJoinMember($criteria, $con, $join_behavior);
			}
		}
		$this->lastPilotRelatedByMopOrientedMemberIdCriteria = $criteria;

		return $this->collPilotsRelatedByMopOrientedMemberId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Pilot is new, it will return
	 * an empty collection; or if this Pilot has previously
	 * been saved, it will retrieve related PilotsRelatedByMopOrientedMemberId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Pilot.
	 */
	public function getPilotsRelatedByMopOrientedMemberIdJoinAirport($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilotsRelatedByMopOrientedMemberId === null) {
			if ($this->isNew()) {
				$this->collPilotsRelatedByMopOrientedMemberId = array();
			} else {

				$criteria->add(PilotPeer::MOP_ORIENTED_MEMBER_ID, $this->id);

				$this->collPilotsRelatedByMopOrientedMemberId = PilotPeer::doSelectJoinAirport($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PilotPeer::MOP_ORIENTED_MEMBER_ID, $this->id);

			if (!isset($this->lastPilotRelatedByMopOrientedMemberIdCriteria) || !$this->lastPilotRelatedByMopOrientedMemberIdCriteria->equals($criteria)) {
				$this->collPilotsRelatedByMopOrientedMemberId = PilotPeer::doSelectJoinAirport($criteria, $con, $join_behavior);
			}
		}
		$this->lastPilotRelatedByMopOrientedMemberIdCriteria = $criteria;

		return $this->collPilotsRelatedByMopOrientedMemberId;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collMissionLegsRelatedByPilotId) {
				foreach ((array) $this->collMissionLegsRelatedByPilotId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMissionLegsRelatedByBackupPilotId) {
				foreach ((array) $this->collMissionLegsRelatedByBackupPilotId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMissionLegChanges) {
				foreach ((array) $this->collMissionLegChanges as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPersonalFlights) {
				foreach ((array) $this->collPersonalFlights as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPilotsRelatedByOrientedMemberId) {
				foreach ((array) $this->collPilotsRelatedByOrientedMemberId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPilotsRelatedByMopOrientedMemberId) {
				foreach ((array) $this->collPilotsRelatedByMopOrientedMemberId as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collMissionLegsRelatedByPilotId = null;
		$this->collMissionLegsRelatedByBackupPilotId = null;
		$this->collMissionLegChanges = null;
		$this->collPersonalFlights = null;
		$this->collPilotsRelatedByOrientedMemberId = null;
		$this->collPilotsRelatedByMopOrientedMemberId = null;
			$this->aMember = null;
			$this->aAirport = null;
			$this->aPilotRelatedByOrientedMemberId = null;
			$this->aPilotRelatedByMopOrientedMemberId = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BasePilot:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BasePilot::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BasePilot
