<?php

/**
 * Base static class for performing query and update operations on the 'mission_request_temp' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 11/29/10 01:05:19
 *
 * @package    lib.model.om
 */
abstract class BaseMissionRequestTempPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'mission_request_temp';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.MissionRequestTemp';

	/** The total number of columns. */
	const NUM_COLUMNS = 184;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the ID field */
	const ID = 'mission_request_temp.ID';

	/** the column name for the REQUEST_DATE field */
	const REQUEST_DATE = 'mission_request_temp.REQUEST_DATE';

	/** the column name for the REQUEST_BY field */
	const REQUEST_BY = 'mission_request_temp.REQUEST_BY';

	/** the column name for the REQUEST_ON_BEHALF field */
	const REQUEST_ON_BEHALF = 'mission_request_temp.REQUEST_ON_BEHALF';

	/** the column name for the APPT_DATE field */
	const APPT_DATE = 'mission_request_temp.APPT_DATE';

	/** the column name for the RETURN_DATE field */
	const RETURN_DATE = 'mission_request_temp.RETURN_DATE';

	/** the column name for the BAGGAGE_WEIGHT field */
	const BAGGAGE_WEIGHT = 'mission_request_temp.BAGGAGE_WEIGHT';

	/** the column name for the BAGGAGE_DESC field */
	const BAGGAGE_DESC = 'mission_request_temp.BAGGAGE_DESC';

	/** the column name for the PASS_TITLE field */
	const PASS_TITLE = 'mission_request_temp.PASS_TITLE';

	/** the column name for the PASS_FIRST_NAME field */
	const PASS_FIRST_NAME = 'mission_request_temp.PASS_FIRST_NAME';

	/** the column name for the PASS_LAST_NAME field */
	const PASS_LAST_NAME = 'mission_request_temp.PASS_LAST_NAME';

	/** the column name for the PASS_ADDRESS1 field */
	const PASS_ADDRESS1 = 'mission_request_temp.PASS_ADDRESS1';

	/** the column name for the PASS_ADDRESS2 field */
	const PASS_ADDRESS2 = 'mission_request_temp.PASS_ADDRESS2';

	/** the column name for the PASS_CITY field */
	const PASS_CITY = 'mission_request_temp.PASS_CITY';

	/** the column name for the PASS_COUNTY field */
	const PASS_COUNTY = 'mission_request_temp.PASS_COUNTY';

	/** the column name for the PASS_STATE field */
	const PASS_STATE = 'mission_request_temp.PASS_STATE';

	/** the column name for the PASS_COUNTRY field */
	const PASS_COUNTRY = 'mission_request_temp.PASS_COUNTRY';

	/** the column name for the PASS_ZIPCODE field */
	const PASS_ZIPCODE = 'mission_request_temp.PASS_ZIPCODE';

	/** the column name for the PASS_DAY_PHONE field */
	const PASS_DAY_PHONE = 'mission_request_temp.PASS_DAY_PHONE';

	/** the column name for the PASS_DAY_COMMENT field */
	const PASS_DAY_COMMENT = 'mission_request_temp.PASS_DAY_COMMENT';

	/** the column name for the PASS_EVE_PHONE field */
	const PASS_EVE_PHONE = 'mission_request_temp.PASS_EVE_PHONE';

	/** the column name for the PASS_EVE_COMMENT field */
	const PASS_EVE_COMMENT = 'mission_request_temp.PASS_EVE_COMMENT';

	/** the column name for the PASS_MOBILE_PHONE field */
	const PASS_MOBILE_PHONE = 'mission_request_temp.PASS_MOBILE_PHONE';

	/** the column name for the PASS_MOBILE_COMMENT field */
	const PASS_MOBILE_COMMENT = 'mission_request_temp.PASS_MOBILE_COMMENT';

	/** the column name for the PASS_PAGER_PHONE field */
	const PASS_PAGER_PHONE = 'mission_request_temp.PASS_PAGER_PHONE';

	/** the column name for the PASS_PAGER_COMMENT field */
	const PASS_PAGER_COMMENT = 'mission_request_temp.PASS_PAGER_COMMENT';

	/** the column name for the PASS_OTHER_PHONE field */
	const PASS_OTHER_PHONE = 'mission_request_temp.PASS_OTHER_PHONE';

	/** the column name for the PASS_OTHER_COMMENT field */
	const PASS_OTHER_COMMENT = 'mission_request_temp.PASS_OTHER_COMMENT';

	/** the column name for the PASS_EMAIL field */
	const PASS_EMAIL = 'mission_request_temp.PASS_EMAIL';

	/** the column name for the PASS_DATE_OF_BIRTH field */
	const PASS_DATE_OF_BIRTH = 'mission_request_temp.PASS_DATE_OF_BIRTH';

	/** the column name for the ILLNESS field */
	const ILLNESS = 'mission_request_temp.ILLNESS';

	/** the column name for the FINANCIAL field */
	const FINANCIAL = 'mission_request_temp.FINANCIAL';

	/** the column name for the PASS_WEIGHT field */
	const PASS_WEIGHT = 'mission_request_temp.PASS_WEIGHT';

	/** the column name for the RELEASING_PHYSICIAN field */
	const RELEASING_PHYSICIAN = 'mission_request_temp.RELEASING_PHYSICIAN';

	/** the column name for the RELEASE_PHONE field */
	const RELEASE_PHONE = 'mission_request_temp.RELEASE_PHONE';

	/** the column name for the RELEASE_PHONE_COMMENT field */
	const RELEASE_PHONE_COMMENT = 'mission_request_temp.RELEASE_PHONE_COMMENT';

	/** the column name for the RELEASE_FAX field */
	const RELEASE_FAX = 'mission_request_temp.RELEASE_FAX';

	/** the column name for the RELEASE_FAX_COMMENT field */
	const RELEASE_FAX_COMMENT = 'mission_request_temp.RELEASE_FAX_COMMENT';

	/** the column name for the RELEASE_EMAIL field */
	const RELEASE_EMAIL = 'mission_request_temp.RELEASE_EMAIL';

	/** the column name for the TREATING_PHYSICIAN field */
	const TREATING_PHYSICIAN = 'mission_request_temp.TREATING_PHYSICIAN';

	/** the column name for the TREATING_PHONE field */
	const TREATING_PHONE = 'mission_request_temp.TREATING_PHONE';

	/** the column name for the TREATING_PHONE_COMMENT field */
	const TREATING_PHONE_COMMENT = 'mission_request_temp.TREATING_PHONE_COMMENT';

	/** the column name for the TREATING_FAX field */
	const TREATING_FAX = 'mission_request_temp.TREATING_FAX';

	/** the column name for the TREATING_FAX_COMMENT field */
	const TREATING_FAX_COMMENT = 'mission_request_temp.TREATING_FAX_COMMENT';

	/** the column name for the REQ_TITLE field */
	const REQ_TITLE = 'mission_request_temp.REQ_TITLE';

	/** the column name for the REQ_FIRST_NAME field */
	const REQ_FIRST_NAME = 'mission_request_temp.REQ_FIRST_NAME';

	/** the column name for the REQ_LAST_NAME field */
	const REQ_LAST_NAME = 'mission_request_temp.REQ_LAST_NAME';

	/** the column name for the AGENCY_NAME field */
	const AGENCY_NAME = 'mission_request_temp.AGENCY_NAME';

	/** the column name for the REQ_ADDRESS1 field */
	const REQ_ADDRESS1 = 'mission_request_temp.REQ_ADDRESS1';

	/** the column name for the REQ_ADDRESS2 field */
	const REQ_ADDRESS2 = 'mission_request_temp.REQ_ADDRESS2';

	/** the column name for the REQ_CITY field */
	const REQ_CITY = 'mission_request_temp.REQ_CITY';

	/** the column name for the REQ_COUNTY field */
	const REQ_COUNTY = 'mission_request_temp.REQ_COUNTY';

	/** the column name for the REQ_STATE field */
	const REQ_STATE = 'mission_request_temp.REQ_STATE';

	/** the column name for the REQ_COUNTRY field */
	const REQ_COUNTRY = 'mission_request_temp.REQ_COUNTRY';

	/** the column name for the REQ_ZIPCODE field */
	const REQ_ZIPCODE = 'mission_request_temp.REQ_ZIPCODE';

	/** the column name for the REQ_DAY_PHONE field */
	const REQ_DAY_PHONE = 'mission_request_temp.REQ_DAY_PHONE';

	/** the column name for the REQ_DAY_COMMENT field */
	const REQ_DAY_COMMENT = 'mission_request_temp.REQ_DAY_COMMENT';

	/** the column name for the REQ_EVE_PHONE field */
	const REQ_EVE_PHONE = 'mission_request_temp.REQ_EVE_PHONE';

	/** the column name for the REQ_EVE_COMMENT field */
	const REQ_EVE_COMMENT = 'mission_request_temp.REQ_EVE_COMMENT';

	/** the column name for the REQ_MOBILE_PHONE field */
	const REQ_MOBILE_PHONE = 'mission_request_temp.REQ_MOBILE_PHONE';

	/** the column name for the REQ_MOBILE_COMMENT field */
	const REQ_MOBILE_COMMENT = 'mission_request_temp.REQ_MOBILE_COMMENT';

	/** the column name for the REQ_PAGER_PHONE field */
	const REQ_PAGER_PHONE = 'mission_request_temp.REQ_PAGER_PHONE';

	/** the column name for the REQ_PAGER_COMMENT field */
	const REQ_PAGER_COMMENT = 'mission_request_temp.REQ_PAGER_COMMENT';

	/** the column name for the REQ_OTHER_PHONE field */
	const REQ_OTHER_PHONE = 'mission_request_temp.REQ_OTHER_PHONE';

	/** the column name for the REQ_OTHER_COMMENT field */
	const REQ_OTHER_COMMENT = 'mission_request_temp.REQ_OTHER_COMMENT';

	/** the column name for the REQ_EMAIL field */
	const REQ_EMAIL = 'mission_request_temp.REQ_EMAIL';

	/** the column name for the ORIGIN_IDENT field */
	const ORIGIN_IDENT = 'mission_request_temp.ORIGIN_IDENT';

	/** the column name for the ORIGIN_ID field */
	const ORIGIN_ID = 'mission_request_temp.ORIGIN_ID';

	/** the column name for the ORIGIN_CITY field */
	const ORIGIN_CITY = 'mission_request_temp.ORIGIN_CITY';

	/** the column name for the ORIGIN_STATE field */
	const ORIGIN_STATE = 'mission_request_temp.ORIGIN_STATE';

	/** the column name for the ORIGIN_ZIPCODE field */
	const ORIGIN_ZIPCODE = 'mission_request_temp.ORIGIN_ZIPCODE';

	/** the column name for the DEST_IDENT field */
	const DEST_IDENT = 'mission_request_temp.DEST_IDENT';

	/** the column name for the DEST_ID field */
	const DEST_ID = 'mission_request_temp.DEST_ID';

	/** the column name for the DEST_CITY field */
	const DEST_CITY = 'mission_request_temp.DEST_CITY';

	/** the column name for the DEST_STATE field */
	const DEST_STATE = 'mission_request_temp.DEST_STATE';

	/** the column name for the DEST_ZIPCODE field */
	const DEST_ZIPCODE = 'mission_request_temp.DEST_ZIPCODE';

	/** the column name for the COM1_NAME field */
	const COM1_NAME = 'mission_request_temp.COM1_NAME';

	/** the column name for the COM1_RELATIONSHIP field */
	const COM1_RELATIONSHIP = 'mission_request_temp.COM1_RELATIONSHIP';

	/** the column name for the COM1_DATE_OF_BIRTH field */
	const COM1_DATE_OF_BIRTH = 'mission_request_temp.COM1_DATE_OF_BIRTH';

	/** the column name for the COM1_WEIGHT field */
	const COM1_WEIGHT = 'mission_request_temp.COM1_WEIGHT';

	/** the column name for the COM1_PHONE field */
	const COM1_PHONE = 'mission_request_temp.COM1_PHONE';

	/** the column name for the COM1_COMMENT field */
	const COM1_COMMENT = 'mission_request_temp.COM1_COMMENT';

	/** the column name for the COM2_NAME field */
	const COM2_NAME = 'mission_request_temp.COM2_NAME';

	/** the column name for the COM2_RELATIONSHIP field */
	const COM2_RELATIONSHIP = 'mission_request_temp.COM2_RELATIONSHIP';

	/** the column name for the COM2_DATE_OF_BIRTH field */
	const COM2_DATE_OF_BIRTH = 'mission_request_temp.COM2_DATE_OF_BIRTH';

	/** the column name for the COM2_WEIGHT field */
	const COM2_WEIGHT = 'mission_request_temp.COM2_WEIGHT';

	/** the column name for the COM2_PHONE field */
	const COM2_PHONE = 'mission_request_temp.COM2_PHONE';

	/** the column name for the COM2_COMMENT field */
	const COM2_COMMENT = 'mission_request_temp.COM2_COMMENT';

	/** the column name for the COM3_NAME field */
	const COM3_NAME = 'mission_request_temp.COM3_NAME';

	/** the column name for the COM3_RELATIONSHIP field */
	const COM3_RELATIONSHIP = 'mission_request_temp.COM3_RELATIONSHIP';

	/** the column name for the COM3_DATE_OF_BIRTH field */
	const COM3_DATE_OF_BIRTH = 'mission_request_temp.COM3_DATE_OF_BIRTH';

	/** the column name for the COM3_WEIGHT field */
	const COM3_WEIGHT = 'mission_request_temp.COM3_WEIGHT';

	/** the column name for the COM3_PHONE field */
	const COM3_PHONE = 'mission_request_temp.COM3_PHONE';

	/** the column name for the COM3_COMMENT field */
	const COM3_COMMENT = 'mission_request_temp.COM3_COMMENT';

	/** the column name for the COM4_NAME field */
	const COM4_NAME = 'mission_request_temp.COM4_NAME';

	/** the column name for the COM4_RELATIONSHIP field */
	const COM4_RELATIONSHIP = 'mission_request_temp.COM4_RELATIONSHIP';

	/** the column name for the COM4_DATE_OF_BIRTH field */
	const COM4_DATE_OF_BIRTH = 'mission_request_temp.COM4_DATE_OF_BIRTH';

	/** the column name for the COM4_WEIGHT field */
	const COM4_WEIGHT = 'mission_request_temp.COM4_WEIGHT';

	/** the column name for the COM4_PHONE field */
	const COM4_PHONE = 'mission_request_temp.COM4_PHONE';

	/** the column name for the COM4_COMMENT field */
	const COM4_COMMENT = 'mission_request_temp.COM4_COMMENT';

	/** the column name for the LODGING_NAME field */
	const LODGING_NAME = 'mission_request_temp.LODGING_NAME';

	/** the column name for the LODGING_PHONE field */
	const LODGING_PHONE = 'mission_request_temp.LODGING_PHONE';

	/** the column name for the FACILITY_NAME field */
	const FACILITY_NAME = 'mission_request_temp.FACILITY_NAME';

	/** the column name for the FACILITY_PHONE field */
	const FACILITY_PHONE = 'mission_request_temp.FACILITY_PHONE';

	/** the column name for the FACILITY_PHONE_COMMENT field */
	const FACILITY_PHONE_COMMENT = 'mission_request_temp.FACILITY_PHONE_COMMENT';

	/** the column name for the REQ_LANGUAGE_SPOKEN field */
	const REQ_LANGUAGE_SPOKEN = 'mission_request_temp.REQ_LANGUAGE_SPOKEN';

	/** the column name for the BEST_CONTACT field */
	const BEST_CONTACT = 'mission_request_temp.BEST_CONTACT';

	/** the column name for the EMERGENCY_NAME field */
	const EMERGENCY_NAME = 'mission_request_temp.EMERGENCY_NAME';

	/** the column name for the EMERGENCY_PHONE1 field */
	const EMERGENCY_PHONE1 = 'mission_request_temp.EMERGENCY_PHONE1';

	/** the column name for the EMERGENCY_PHONE2 field */
	const EMERGENCY_PHONE2 = 'mission_request_temp.EMERGENCY_PHONE2';

	/** the column name for the EMERGENCY_PHONE1_COMMENT field */
	const EMERGENCY_PHONE1_COMMENT = 'mission_request_temp.EMERGENCY_PHONE1_COMMENT';

	/** the column name for the EMERGENCY_PHONE2_COMMENT field */
	const EMERGENCY_PHONE2_COMMENT = 'mission_request_temp.EMERGENCY_PHONE2_COMMENT';

	/** the column name for the COMMENT field */
	const COMMENT = 'mission_request_temp.COMMENT';

	/** the column name for the PROCESSED_DATE field */
	const PROCESSED_DATE = 'mission_request_temp.PROCESSED_DATE';

	/** the column name for the SESSION_ID field */
	const SESSION_ID = 'mission_request_temp.SESSION_ID';

	/** the column name for the IP_ADDRESS field */
	const IP_ADDRESS = 'mission_request_temp.IP_ADDRESS';

	/** the column name for the PASS_FAX_PHONE1 field */
	const PASS_FAX_PHONE1 = 'mission_request_temp.PASS_FAX_PHONE1';

	/** the column name for the PASS_FAX_COMMENT1 field */
	const PASS_FAX_COMMENT1 = 'mission_request_temp.PASS_FAX_COMMENT1';

	/** the column name for the GUAR_FIRST_NAME field */
	const GUAR_FIRST_NAME = 'mission_request_temp.GUAR_FIRST_NAME';

	/** the column name for the GUAR_LAST_NAME field */
	const GUAR_LAST_NAME = 'mission_request_temp.GUAR_LAST_NAME';

	/** the column name for the GUAR_ADDRESS1 field */
	const GUAR_ADDRESS1 = 'mission_request_temp.GUAR_ADDRESS1';

	/** the column name for the GUAR_ADDRESS2 field */
	const GUAR_ADDRESS2 = 'mission_request_temp.GUAR_ADDRESS2';

	/** the column name for the GUAR_CITY field */
	const GUAR_CITY = 'mission_request_temp.GUAR_CITY';

	/** the column name for the GUAR_STATE field */
	const GUAR_STATE = 'mission_request_temp.GUAR_STATE';

	/** the column name for the GUAR_ZIPCODE field */
	const GUAR_ZIPCODE = 'mission_request_temp.GUAR_ZIPCODE';

	/** the column name for the GUAR_DAY_PHONE field */
	const GUAR_DAY_PHONE = 'mission_request_temp.GUAR_DAY_PHONE';

	/** the column name for the GUAR_DAY_COMMENT field */
	const GUAR_DAY_COMMENT = 'mission_request_temp.GUAR_DAY_COMMENT';

	/** the column name for the GUAR_EVE_PHONE field */
	const GUAR_EVE_PHONE = 'mission_request_temp.GUAR_EVE_PHONE';

	/** the column name for the GUAR_EVE_COMMENT field */
	const GUAR_EVE_COMMENT = 'mission_request_temp.GUAR_EVE_COMMENT';

	/** the column name for the GUAR_FAX_PHONE1 field */
	const GUAR_FAX_PHONE1 = 'mission_request_temp.GUAR_FAX_PHONE1';

	/** the column name for the GUAR_FAX_COMMENT1 field */
	const GUAR_FAX_COMMENT1 = 'mission_request_temp.GUAR_FAX_COMMENT1';

	/** the column name for the GUAR_MOBILE_PHONE field */
	const GUAR_MOBILE_PHONE = 'mission_request_temp.GUAR_MOBILE_PHONE';

	/** the column name for the GUAR_MOBILE_COMMENT field */
	const GUAR_MOBILE_COMMENT = 'mission_request_temp.GUAR_MOBILE_COMMENT';

	/** the column name for the GUAR_PAGER_PHONE field */
	const GUAR_PAGER_PHONE = 'mission_request_temp.GUAR_PAGER_PHONE';

	/** the column name for the GUAR_PAGER_COMMENT field */
	const GUAR_PAGER_COMMENT = 'mission_request_temp.GUAR_PAGER_COMMENT';

	/** the column name for the GUAR_OTHER_PHONE field */
	const GUAR_OTHER_PHONE = 'mission_request_temp.GUAR_OTHER_PHONE';

	/** the column name for the GUAR_OTHER_COMMENT field */
	const GUAR_OTHER_COMMENT = 'mission_request_temp.GUAR_OTHER_COMMENT';

	/** the column name for the GUAR_GUAR_EMAIL field */
	const GUAR_GUAR_EMAIL = 'mission_request_temp.GUAR_GUAR_EMAIL';

	/** the column name for the REQ_FAX_PHONE1 field */
	const REQ_FAX_PHONE1 = 'mission_request_temp.REQ_FAX_PHONE1';

	/** the column name for the REQ_FAX_COMMENT1 field */
	const REQ_FAX_COMMENT1 = 'mission_request_temp.REQ_FAX_COMMENT1';

	/** the column name for the PASS_ENGLISH field */
	const PASS_ENGLISH = 'mission_request_temp.PASS_ENGLISH';

	/** the column name for the PASS_LANGUAGE field */
	const PASS_LANGUAGE = 'mission_request_temp.PASS_LANGUAGE';

	/** the column name for the APPT_TIME field */
	const APPT_TIME = 'mission_request_temp.APPT_TIME';

	/** the column name for the REQUESTER_ID field */
	const REQUESTER_ID = 'mission_request_temp.REQUESTER_ID';

	/** the column name for the PASSENGER_ID field */
	const PASSENGER_ID = 'mission_request_temp.PASSENGER_ID';

	/** the column name for the MISSION_ID field */
	const MISSION_ID = 'mission_request_temp.MISSION_ID';

	/** the column name for the TREATING_EMAIL field */
	const TREATING_EMAIL = 'mission_request_temp.TREATING_EMAIL';

	/** the column name for the PASS_HEIGHT field */
	const PASS_HEIGHT = 'mission_request_temp.PASS_HEIGHT';

	/** the column name for the RETURN_TIME field */
	const RETURN_TIME = 'mission_request_temp.RETURN_TIME';

	/** the column name for the PASS_OXYGEN field */
	const PASS_OXYGEN = 'mission_request_temp.PASS_OXYGEN';

	/** the column name for the PASS_MEDICAL field */
	const PASS_MEDICAL = 'mission_request_temp.PASS_MEDICAL';

	/** the column name for the REFERRAL_SOURCE_ID field */
	const REFERRAL_SOURCE_ID = 'mission_request_temp.REFERRAL_SOURCE_ID';

	/** the column name for the FOLLOW_UP_CONTACT_NAME field */
	const FOLLOW_UP_CONTACT_NAME = 'mission_request_temp.FOLLOW_UP_CONTACT_NAME';

	/** the column name for the FOLLOW_UP_CONTACT_PHONE field */
	const FOLLOW_UP_CONTACT_PHONE = 'mission_request_temp.FOLLOW_UP_CONTACT_PHONE';

	/** the column name for the FOLLOW_UP_EMAIL field */
	const FOLLOW_UP_EMAIL = 'mission_request_temp.FOLLOW_UP_EMAIL';

	/** the column name for the MISS_REQ_ORIGINATOR_AFA_ORG_ID field */
	const MISS_REQ_ORIGINATOR_AFA_ORG_ID = 'mission_request_temp.MISS_REQ_ORIGINATOR_AFA_ORG_ID';

	/** the column name for the AFA_ORG_ID field */
	const AFA_ORG_ID = 'mission_request_temp.AFA_ORG_ID';

	/** the column name for the AFA_ORG_MISSION_ID field */
	const AFA_ORG_MISSION_ID = 'mission_request_temp.AFA_ORG_MISSION_ID';

	/** the column name for the MISSION_REQUEST_TYPE field */
	const MISSION_REQUEST_TYPE = 'mission_request_temp.MISSION_REQUEST_TYPE';

	/** the column name for the LAST_PAGE_PROCESSED field */
	const LAST_PAGE_PROCESSED = 'mission_request_temp.LAST_PAGE_PROCESSED';

	/** the column name for the GUARDIAN_MIDDLE_NAME field */
	const GUARDIAN_MIDDLE_NAME = 'mission_request_temp.GUARDIAN_MIDDLE_NAME';

	/** the column name for the GUARDIAN_NICKNAME field */
	const GUARDIAN_NICKNAME = 'mission_request_temp.GUARDIAN_NICKNAME';

	/** the column name for the GUARDIAN_PAGER_EMAIL field */
	const GUARDIAN_PAGER_EMAIL = 'mission_request_temp.GUARDIAN_PAGER_EMAIL';

	/** the column name for the GUARDIAN_SECONDARY_EMAIL field */
	const GUARDIAN_SECONDARY_EMAIL = 'mission_request_temp.GUARDIAN_SECONDARY_EMAIL';

	/** the column name for the GUARDIAN_SUFFIX field */
	const GUARDIAN_SUFFIX = 'mission_request_temp.GUARDIAN_SUFFIX';

	/** the column name for the GUARDIAN_TITLE field */
	const GUARDIAN_TITLE = 'mission_request_temp.GUARDIAN_TITLE';

	/** the column name for the GUARDIAN_VETERAN field */
	const GUARDIAN_VETERAN = 'mission_request_temp.GUARDIAN_VETERAN';

	/** the column name for the PASS_GENDER field */
	const PASS_GENDER = 'mission_request_temp.PASS_GENDER';

	/** the column name for the PASS_MIDDLE_NAME field */
	const PASS_MIDDLE_NAME = 'mission_request_temp.PASS_MIDDLE_NAME';

	/** the column name for the PASS_NICKNAME field */
	const PASS_NICKNAME = 'mission_request_temp.PASS_NICKNAME';

	/** the column name for the PASS_PAGER_EMAIL field */
	const PASS_PAGER_EMAIL = 'mission_request_temp.PASS_PAGER_EMAIL';

	/** the column name for the PASS_SECONDARY_EMAIL field */
	const PASS_SECONDARY_EMAIL = 'mission_request_temp.PASS_SECONDARY_EMAIL';

	/** the column name for the PASS_SUFFIX field */
	const PASS_SUFFIX = 'mission_request_temp.PASS_SUFFIX';

	/** the column name for the PASS_VETERAN field */
	const PASS_VETERAN = 'mission_request_temp.PASS_VETERAN';

	/** the column name for the REQ_MIDDLE_NAME field */
	const REQ_MIDDLE_NAME = 'mission_request_temp.REQ_MIDDLE_NAME';

	/** the column name for the REQ_NICKNAME field */
	const REQ_NICKNAME = 'mission_request_temp.REQ_NICKNAME';

	/** the column name for the REQ_PAGER_EMAIL field */
	const REQ_PAGER_EMAIL = 'mission_request_temp.REQ_PAGER_EMAIL';

	/** the column name for the REQ_SECONDARY_EMAIL field */
	const REQ_SECONDARY_EMAIL = 'mission_request_temp.REQ_SECONDARY_EMAIL';

	/** the column name for the REQ_SUFFIX field */
	const REQ_SUFFIX = 'mission_request_temp.REQ_SUFFIX';

	/** the column name for the REQ_VETERAN field */
	const REQ_VETERAN = 'mission_request_temp.REQ_VETERAN';

	/** the column name for the LODGING_PHONE_COMMENT field */
	const LODGING_PHONE_COMMENT = 'mission_request_temp.LODGING_PHONE_COMMENT';

	/** the column name for the REQ_GENDER field */
	const REQ_GENDER = 'mission_request_temp.REQ_GENDER';

	/** the column name for the GUARDIAN_GENDER field */
	const GUARDIAN_GENDER = 'mission_request_temp.GUARDIAN_GENDER';

	/** the column name for the AGENCY_POSITION field */
	const AGENCY_POSITION = 'mission_request_temp.AGENCY_POSITION';

	/**
	 * An identiy map to hold any loaded instances of MissionRequestTemp objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array MissionRequestTemp[]
	 */
	public static $instances = array();

	/**
	 * The MapBuilder instance for this peer.
	 * @var        MapBuilder
	 */
	private static $mapBuilder = null;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('Id', 'RequestDate', 'RequestBy', 'RequestOnBehalf', 'ApptDate', 'ReturnDate', 'BaggageWeight', 'BaggageDesc', 'PassTitle', 'PassFirstName', 'PassLastName', 'PassAddress1', 'PassAddress2', 'PassCity', 'PassCounty', 'PassState', 'PassCountry', 'PassZipcode', 'PassDayPhone', 'PassDayComment', 'PassEvePhone', 'PassEveComment', 'PassMobilePhone', 'PassMobileComment', 'PassPagerPhone', 'PassPagerComment', 'PassOtherPhone', 'PassOtherComment', 'PassEmail', 'PassDateOfBirth', 'Illness', 'Financial', 'PassWeight', 'ReleasingPhysician', 'ReleasePhone', 'ReleasePhoneComment', 'ReleaseFax', 'ReleaseFaxComment', 'ReleaseEmail', 'TreatingPhysician', 'TreatingPhone', 'TreatingPhoneComment', 'TreatingFax', 'TreatingFaxComment', 'ReqTitle', 'ReqFirstName', 'ReqLastName', 'AgencyName', 'ReqAddress1', 'ReqAddress2', 'ReqCity', 'ReqCounty', 'ReqState', 'ReqCountry', 'ReqZipcode', 'ReqDayPhone', 'ReqDayComment', 'ReqEvePhone', 'ReqEveComment', 'ReqMobilePhone', 'ReqMobileComment', 'ReqPagerPhone', 'ReqPagerComment', 'ReqOtherPhone', 'ReqOtherComment', 'ReqEmail', 'OriginIdent', 'OriginId', 'OriginCity', 'OriginState', 'OriginZipcode', 'DestIdent', 'DestId', 'DestCity', 'DestState', 'DestZipcode', 'Com1Name', 'Com1Relationship', 'Com1DateOfBirth', 'Com1Weight', 'Com1Phone', 'Com1Comment', 'Com2Name', 'Com2Relationship', 'Com2DateOfBirth', 'Com2Weight', 'Com2Phone', 'Com2Comment', 'Com3Name', 'Com3Relationship', 'Com3DateOfBirth', 'Com3Weight', 'Com3Phone', 'Com3Comment', 'Com4Name', 'Com4Relationship', 'Com4DateOfBirth', 'Com4Weight', 'Com4Phone', 'Com4Comment', 'LodgingName', 'LodgingPhone', 'FacilityName', 'FacilityPhone', 'FacilityPhoneComment', 'ReqLanguageSpoken', 'BestContact', 'EmergencyName', 'EmergencyPhone1', 'EmergencyPhone2', 'EmergencyPhone1Comment', 'EmergencyPhone2Comment', 'Comment', 'ProcessedDate', 'SessionId', 'IpAddress', 'PassFaxPhone1', 'PassFaxComment1', 'GuarFirstName', 'GuarLastName', 'GuarAddress1', 'GuarAddress2', 'GuarCity', 'GuarState', 'GuarZipcode', 'GuarDayPhone', 'GuarDayComment', 'GuarEvePhone', 'GuarEveComment', 'GuarFaxPhone1', 'GuarFaxComment1', 'GuarMobilePhone', 'GuarMobileComment', 'GuarPagerPhone', 'GuarPagerComment', 'GuarOtherPhone', 'GuarOtherComment', 'GuarGuarEmail', 'ReqFaxPhone1', 'ReqFaxComment1', 'PassEnglish', 'PassLanguage', 'ApptTime', 'RequesterId', 'PassengerId', 'MissionId', 'TreatingEmail', 'PassHeight', 'ReturnTime', 'PassOxygen', 'PassMedical', 'ReferralSourceId', 'FollowUpContactName', 'FollowUpContactPhone', 'FollowUpEmail', 'MissReqOriginatorAfaOrgId', 'AfaOrgId', 'AfaOrgMissionId', 'MissionRequestType', 'LastPageProcessed', 'GuardianMiddleName', 'GuardianNickname', 'GuardianPagerEmail', 'GuardianSecondaryEmail', 'GuardianSuffix', 'GuardianTitle', 'GuardianVeteran', 'PassGender', 'PassMiddleName', 'PassNickname', 'PassPagerEmail', 'PassSecondaryEmail', 'PassSuffix', 'PassVeteran', 'ReqMiddleName', 'ReqNickname', 'ReqPagerEmail', 'ReqSecondaryEmail', 'ReqSuffix', 'ReqVeteran', 'LodgingPhoneComment', 'ReqGender', 'GuardianGender', 'AgencyPosition', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id', 'requestDate', 'requestBy', 'requestOnBehalf', 'apptDate', 'returnDate', 'baggageWeight', 'baggageDesc', 'passTitle', 'passFirstName', 'passLastName', 'passAddress1', 'passAddress2', 'passCity', 'passCounty', 'passState', 'passCountry', 'passZipcode', 'passDayPhone', 'passDayComment', 'passEvePhone', 'passEveComment', 'passMobilePhone', 'passMobileComment', 'passPagerPhone', 'passPagerComment', 'passOtherPhone', 'passOtherComment', 'passEmail', 'passDateOfBirth', 'illness', 'financial', 'passWeight', 'releasingPhysician', 'releasePhone', 'releasePhoneComment', 'releaseFax', 'releaseFaxComment', 'releaseEmail', 'treatingPhysician', 'treatingPhone', 'treatingPhoneComment', 'treatingFax', 'treatingFaxComment', 'reqTitle', 'reqFirstName', 'reqLastName', 'agencyName', 'reqAddress1', 'reqAddress2', 'reqCity', 'reqCounty', 'reqState', 'reqCountry', 'reqZipcode', 'reqDayPhone', 'reqDayComment', 'reqEvePhone', 'reqEveComment', 'reqMobilePhone', 'reqMobileComment', 'reqPagerPhone', 'reqPagerComment', 'reqOtherPhone', 'reqOtherComment', 'reqEmail', 'originIdent', 'originId', 'originCity', 'originState', 'originZipcode', 'destIdent', 'destId', 'destCity', 'destState', 'destZipcode', 'com1Name', 'com1Relationship', 'com1DateOfBirth', 'com1Weight', 'com1Phone', 'com1Comment', 'com2Name', 'com2Relationship', 'com2DateOfBirth', 'com2Weight', 'com2Phone', 'com2Comment', 'com3Name', 'com3Relationship', 'com3DateOfBirth', 'com3Weight', 'com3Phone', 'com3Comment', 'com4Name', 'com4Relationship', 'com4DateOfBirth', 'com4Weight', 'com4Phone', 'com4Comment', 'lodgingName', 'lodgingPhone', 'facilityName', 'facilityPhone', 'facilityPhoneComment', 'reqLanguageSpoken', 'bestContact', 'emergencyName', 'emergencyPhone1', 'emergencyPhone2', 'emergencyPhone1Comment', 'emergencyPhone2Comment', 'comment', 'processedDate', 'sessionId', 'ipAddress', 'passFaxPhone1', 'passFaxComment1', 'guarFirstName', 'guarLastName', 'guarAddress1', 'guarAddress2', 'guarCity', 'guarState', 'guarZipcode', 'guarDayPhone', 'guarDayComment', 'guarEvePhone', 'guarEveComment', 'guarFaxPhone1', 'guarFaxComment1', 'guarMobilePhone', 'guarMobileComment', 'guarPagerPhone', 'guarPagerComment', 'guarOtherPhone', 'guarOtherComment', 'guarGuarEmail', 'reqFaxPhone1', 'reqFaxComment1', 'passEnglish', 'passLanguage', 'apptTime', 'requesterId', 'passengerId', 'missionId', 'treatingEmail', 'passHeight', 'returnTime', 'passOxygen', 'passMedical', 'referralSourceId', 'followUpContactName', 'followUpContactPhone', 'followUpEmail', 'missReqOriginatorAfaOrgId', 'afaOrgId', 'afaOrgMissionId', 'missionRequestType', 'lastPageProcessed', 'guardianMiddleName', 'guardianNickname', 'guardianPagerEmail', 'guardianSecondaryEmail', 'guardianSuffix', 'guardianTitle', 'guardianVeteran', 'passGender', 'passMiddleName', 'passNickname', 'passPagerEmail', 'passSecondaryEmail', 'passSuffix', 'passVeteran', 'reqMiddleName', 'reqNickname', 'reqPagerEmail', 'reqSecondaryEmail', 'reqSuffix', 'reqVeteran', 'lodgingPhoneComment', 'reqGender', 'guardianGender', 'agencyPosition', ),
		BasePeer::TYPE_COLNAME => array (self::ID, self::REQUEST_DATE, self::REQUEST_BY, self::REQUEST_ON_BEHALF, self::APPT_DATE, self::RETURN_DATE, self::BAGGAGE_WEIGHT, self::BAGGAGE_DESC, self::PASS_TITLE, self::PASS_FIRST_NAME, self::PASS_LAST_NAME, self::PASS_ADDRESS1, self::PASS_ADDRESS2, self::PASS_CITY, self::PASS_COUNTY, self::PASS_STATE, self::PASS_COUNTRY, self::PASS_ZIPCODE, self::PASS_DAY_PHONE, self::PASS_DAY_COMMENT, self::PASS_EVE_PHONE, self::PASS_EVE_COMMENT, self::PASS_MOBILE_PHONE, self::PASS_MOBILE_COMMENT, self::PASS_PAGER_PHONE, self::PASS_PAGER_COMMENT, self::PASS_OTHER_PHONE, self::PASS_OTHER_COMMENT, self::PASS_EMAIL, self::PASS_DATE_OF_BIRTH, self::ILLNESS, self::FINANCIAL, self::PASS_WEIGHT, self::RELEASING_PHYSICIAN, self::RELEASE_PHONE, self::RELEASE_PHONE_COMMENT, self::RELEASE_FAX, self::RELEASE_FAX_COMMENT, self::RELEASE_EMAIL, self::TREATING_PHYSICIAN, self::TREATING_PHONE, self::TREATING_PHONE_COMMENT, self::TREATING_FAX, self::TREATING_FAX_COMMENT, self::REQ_TITLE, self::REQ_FIRST_NAME, self::REQ_LAST_NAME, self::AGENCY_NAME, self::REQ_ADDRESS1, self::REQ_ADDRESS2, self::REQ_CITY, self::REQ_COUNTY, self::REQ_STATE, self::REQ_COUNTRY, self::REQ_ZIPCODE, self::REQ_DAY_PHONE, self::REQ_DAY_COMMENT, self::REQ_EVE_PHONE, self::REQ_EVE_COMMENT, self::REQ_MOBILE_PHONE, self::REQ_MOBILE_COMMENT, self::REQ_PAGER_PHONE, self::REQ_PAGER_COMMENT, self::REQ_OTHER_PHONE, self::REQ_OTHER_COMMENT, self::REQ_EMAIL, self::ORIGIN_IDENT, self::ORIGIN_ID, self::ORIGIN_CITY, self::ORIGIN_STATE, self::ORIGIN_ZIPCODE, self::DEST_IDENT, self::DEST_ID, self::DEST_CITY, self::DEST_STATE, self::DEST_ZIPCODE, self::COM1_NAME, self::COM1_RELATIONSHIP, self::COM1_DATE_OF_BIRTH, self::COM1_WEIGHT, self::COM1_PHONE, self::COM1_COMMENT, self::COM2_NAME, self::COM2_RELATIONSHIP, self::COM2_DATE_OF_BIRTH, self::COM2_WEIGHT, self::COM2_PHONE, self::COM2_COMMENT, self::COM3_NAME, self::COM3_RELATIONSHIP, self::COM3_DATE_OF_BIRTH, self::COM3_WEIGHT, self::COM3_PHONE, self::COM3_COMMENT, self::COM4_NAME, self::COM4_RELATIONSHIP, self::COM4_DATE_OF_BIRTH, self::COM4_WEIGHT, self::COM4_PHONE, self::COM4_COMMENT, self::LODGING_NAME, self::LODGING_PHONE, self::FACILITY_NAME, self::FACILITY_PHONE, self::FACILITY_PHONE_COMMENT, self::REQ_LANGUAGE_SPOKEN, self::BEST_CONTACT, self::EMERGENCY_NAME, self::EMERGENCY_PHONE1, self::EMERGENCY_PHONE2, self::EMERGENCY_PHONE1_COMMENT, self::EMERGENCY_PHONE2_COMMENT, self::COMMENT, self::PROCESSED_DATE, self::SESSION_ID, self::IP_ADDRESS, self::PASS_FAX_PHONE1, self::PASS_FAX_COMMENT1, self::GUAR_FIRST_NAME, self::GUAR_LAST_NAME, self::GUAR_ADDRESS1, self::GUAR_ADDRESS2, self::GUAR_CITY, self::GUAR_STATE, self::GUAR_ZIPCODE, self::GUAR_DAY_PHONE, self::GUAR_DAY_COMMENT, self::GUAR_EVE_PHONE, self::GUAR_EVE_COMMENT, self::GUAR_FAX_PHONE1, self::GUAR_FAX_COMMENT1, self::GUAR_MOBILE_PHONE, self::GUAR_MOBILE_COMMENT, self::GUAR_PAGER_PHONE, self::GUAR_PAGER_COMMENT, self::GUAR_OTHER_PHONE, self::GUAR_OTHER_COMMENT, self::GUAR_GUAR_EMAIL, self::REQ_FAX_PHONE1, self::REQ_FAX_COMMENT1, self::PASS_ENGLISH, self::PASS_LANGUAGE, self::APPT_TIME, self::REQUESTER_ID, self::PASSENGER_ID, self::MISSION_ID, self::TREATING_EMAIL, self::PASS_HEIGHT, self::RETURN_TIME, self::PASS_OXYGEN, self::PASS_MEDICAL, self::REFERRAL_SOURCE_ID, self::FOLLOW_UP_CONTACT_NAME, self::FOLLOW_UP_CONTACT_PHONE, self::FOLLOW_UP_EMAIL, self::MISS_REQ_ORIGINATOR_AFA_ORG_ID, self::AFA_ORG_ID, self::AFA_ORG_MISSION_ID, self::MISSION_REQUEST_TYPE, self::LAST_PAGE_PROCESSED, self::GUARDIAN_MIDDLE_NAME, self::GUARDIAN_NICKNAME, self::GUARDIAN_PAGER_EMAIL, self::GUARDIAN_SECONDARY_EMAIL, self::GUARDIAN_SUFFIX, self::GUARDIAN_TITLE, self::GUARDIAN_VETERAN, self::PASS_GENDER, self::PASS_MIDDLE_NAME, self::PASS_NICKNAME, self::PASS_PAGER_EMAIL, self::PASS_SECONDARY_EMAIL, self::PASS_SUFFIX, self::PASS_VETERAN, self::REQ_MIDDLE_NAME, self::REQ_NICKNAME, self::REQ_PAGER_EMAIL, self::REQ_SECONDARY_EMAIL, self::REQ_SUFFIX, self::REQ_VETERAN, self::LODGING_PHONE_COMMENT, self::REQ_GENDER, self::GUARDIAN_GENDER, self::AGENCY_POSITION, ),
		BasePeer::TYPE_FIELDNAME => array ('id', 'request_date', 'request_by', 'request_on_behalf', 'appt_date', 'return_date', 'baggage_weight', 'baggage_desc', 'pass_title', 'pass_first_name', 'pass_last_name', 'pass_address1', 'pass_address2', 'pass_city', 'pass_county', 'pass_state', 'pass_country', 'pass_zipcode', 'pass_day_phone', 'pass_day_comment', 'pass_eve_phone', 'pass_eve_comment', 'pass_mobile_phone', 'pass_mobile_comment', 'pass_pager_phone', 'pass_pager_comment', 'pass_other_phone', 'pass_other_comment', 'pass_email', 'pass_date_of_birth', 'illness', 'financial', 'pass_weight', 'releasing_physician', 'release_phone', 'release_phone_comment', 'release_fax', 'release_fax_comment', 'release_email', 'treating_physician', 'treating_phone', 'treating_phone_comment', 'treating_fax', 'treating_fax_comment', 'req_title', 'req_first_name', 'req_last_name', 'agency_name', 'req_address1', 'req_address2', 'req_city', 'req_county', 'req_state', 'req_country', 'req_zipcode', 'req_day_phone', 'req_day_comment', 'req_eve_phone', 'req_eve_comment', 'req_mobile_phone', 'req_mobile_comment', 'req_pager_phone', 'req_pager_comment', 'req_other_phone', 'req_other_comment', 'req_email', 'origin_ident', 'origin_id', 'origin_city', 'origin_state', 'origin_zipcode', 'dest_ident', 'dest_id', 'dest_city', 'dest_state', 'dest_zipcode', 'com1_name', 'com1_relationship', 'com1_date_of_birth', 'com1_weight', 'com1_phone', 'com1_comment', 'com2_name', 'com2_relationship', 'com2_date_of_birth', 'com2_weight', 'com2_phone', 'com2_comment', 'com3_name', 'com3_relationship', 'com3_date_of_birth', 'com3_weight', 'com3_phone', 'com3_comment', 'com4_name', 'com4_relationship', 'com4_date_of_birth', 'com4_weight', 'com4_phone', 'com4_comment', 'lodging_name', 'lodging_phone', 'facility_name', 'facility_phone', 'facility_phone_comment', 'req_language_spoken', 'best_contact', 'emergency_name', 'emergency_phone1', 'emergency_phone2', 'emergency_phone1_comment', 'emergency_phone2_comment', 'comment', 'processed_date', 'session_id', 'ip_address', 'pass_fax_phone1', 'pass_fax_comment1', 'guar_first_name', 'guar_last_name', 'guar_address1', 'guar_address2', 'guar_city', 'guar_state', 'guar_zipcode', 'guar_day_phone', 'guar_day_comment', 'guar_eve_phone', 'guar_eve_comment', 'guar_fax_phone1', 'guar_fax_comment1', 'guar_mobile_phone', 'guar_mobile_comment', 'guar_pager_phone', 'guar_pager_comment', 'guar_other_phone', 'guar_other_comment', 'guar_guar_email', 'req_fax_phone1', 'req_fax_comment1', 'pass_english', 'pass_language', 'appt_time', 'requester_id', 'passenger_id', 'mission_id', 'treating_email', 'pass_height', 'return_time', 'pass_oxygen', 'pass_medical', 'referral_source_id', 'follow_up_contact_name', 'follow_up_contact_phone', 'follow_up_email', 'miss_req_originator_afa_org_id', 'afa_org_id', 'afa_org_mission_id', 'mission_request_type', 'last_page_processed', 'guardian_middle_name', 'guardian_nickname', 'guardian_pager_email', 'guardian_secondary_email', 'guardian_suffix', 'guardian_title', 'guardian_veteran', 'pass_gender', 'pass_middle_name', 'pass_nickname', 'pass_pager_email', 'pass_secondary_email', 'pass_suffix', 'pass_veteran', 'req_middle_name', 'req_nickname', 'req_pager_email', 'req_secondary_email', 'req_suffix', 'req_veteran', 'lodging_phone_comment', 'req_gender', 'guardian_gender', 'agency_position', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('Id' => 0, 'RequestDate' => 1, 'RequestBy' => 2, 'RequestOnBehalf' => 3, 'ApptDate' => 4, 'ReturnDate' => 5, 'BaggageWeight' => 6, 'BaggageDesc' => 7, 'PassTitle' => 8, 'PassFirstName' => 9, 'PassLastName' => 10, 'PassAddress1' => 11, 'PassAddress2' => 12, 'PassCity' => 13, 'PassCounty' => 14, 'PassState' => 15, 'PassCountry' => 16, 'PassZipcode' => 17, 'PassDayPhone' => 18, 'PassDayComment' => 19, 'PassEvePhone' => 20, 'PassEveComment' => 21, 'PassMobilePhone' => 22, 'PassMobileComment' => 23, 'PassPagerPhone' => 24, 'PassPagerComment' => 25, 'PassOtherPhone' => 26, 'PassOtherComment' => 27, 'PassEmail' => 28, 'PassDateOfBirth' => 29, 'Illness' => 30, 'Financial' => 31, 'PassWeight' => 32, 'ReleasingPhysician' => 33, 'ReleasePhone' => 34, 'ReleasePhoneComment' => 35, 'ReleaseFax' => 36, 'ReleaseFaxComment' => 37, 'ReleaseEmail' => 38, 'TreatingPhysician' => 39, 'TreatingPhone' => 40, 'TreatingPhoneComment' => 41, 'TreatingFax' => 42, 'TreatingFaxComment' => 43, 'ReqTitle' => 44, 'ReqFirstName' => 45, 'ReqLastName' => 46, 'AgencyName' => 47, 'ReqAddress1' => 48, 'ReqAddress2' => 49, 'ReqCity' => 50, 'ReqCounty' => 51, 'ReqState' => 52, 'ReqCountry' => 53, 'ReqZipcode' => 54, 'ReqDayPhone' => 55, 'ReqDayComment' => 56, 'ReqEvePhone' => 57, 'ReqEveComment' => 58, 'ReqMobilePhone' => 59, 'ReqMobileComment' => 60, 'ReqPagerPhone' => 61, 'ReqPagerComment' => 62, 'ReqOtherPhone' => 63, 'ReqOtherComment' => 64, 'ReqEmail' => 65, 'OriginIdent' => 66, 'OriginId' => 67, 'OriginCity' => 68, 'OriginState' => 69, 'OriginZipcode' => 70, 'DestIdent' => 71, 'DestId' => 72, 'DestCity' => 73, 'DestState' => 74, 'DestZipcode' => 75, 'Com1Name' => 76, 'Com1Relationship' => 77, 'Com1DateOfBirth' => 78, 'Com1Weight' => 79, 'Com1Phone' => 80, 'Com1Comment' => 81, 'Com2Name' => 82, 'Com2Relationship' => 83, 'Com2DateOfBirth' => 84, 'Com2Weight' => 85, 'Com2Phone' => 86, 'Com2Comment' => 87, 'Com3Name' => 88, 'Com3Relationship' => 89, 'Com3DateOfBirth' => 90, 'Com3Weight' => 91, 'Com3Phone' => 92, 'Com3Comment' => 93, 'Com4Name' => 94, 'Com4Relationship' => 95, 'Com4DateOfBirth' => 96, 'Com4Weight' => 97, 'Com4Phone' => 98, 'Com4Comment' => 99, 'LodgingName' => 100, 'LodgingPhone' => 101, 'FacilityName' => 102, 'FacilityPhone' => 103, 'FacilityPhoneComment' => 104, 'ReqLanguageSpoken' => 105, 'BestContact' => 106, 'EmergencyName' => 107, 'EmergencyPhone1' => 108, 'EmergencyPhone2' => 109, 'EmergencyPhone1Comment' => 110, 'EmergencyPhone2Comment' => 111, 'Comment' => 112, 'ProcessedDate' => 113, 'SessionId' => 114, 'IpAddress' => 115, 'PassFaxPhone1' => 116, 'PassFaxComment1' => 117, 'GuarFirstName' => 118, 'GuarLastName' => 119, 'GuarAddress1' => 120, 'GuarAddress2' => 121, 'GuarCity' => 122, 'GuarState' => 123, 'GuarZipcode' => 124, 'GuarDayPhone' => 125, 'GuarDayComment' => 126, 'GuarEvePhone' => 127, 'GuarEveComment' => 128, 'GuarFaxPhone1' => 129, 'GuarFaxComment1' => 130, 'GuarMobilePhone' => 131, 'GuarMobileComment' => 132, 'GuarPagerPhone' => 133, 'GuarPagerComment' => 134, 'GuarOtherPhone' => 135, 'GuarOtherComment' => 136, 'GuarGuarEmail' => 137, 'ReqFaxPhone1' => 138, 'ReqFaxComment1' => 139, 'PassEnglish' => 140, 'PassLanguage' => 141, 'ApptTime' => 142, 'RequesterId' => 143, 'PassengerId' => 144, 'MissionId' => 145, 'TreatingEmail' => 146, 'PassHeight' => 147, 'ReturnTime' => 148, 'PassOxygen' => 149, 'PassMedical' => 150, 'ReferralSourceId' => 151, 'FollowUpContactName' => 152, 'FollowUpContactPhone' => 153, 'FollowUpEmail' => 154, 'MissReqOriginatorAfaOrgId' => 155, 'AfaOrgId' => 156, 'AfaOrgMissionId' => 157, 'MissionRequestType' => 158, 'LastPageProcessed' => 159, 'GuardianMiddleName' => 160, 'GuardianNickname' => 161, 'GuardianPagerEmail' => 162, 'GuardianSecondaryEmail' => 163, 'GuardianSuffix' => 164, 'GuardianTitle' => 165, 'GuardianVeteran' => 166, 'PassGender' => 167, 'PassMiddleName' => 168, 'PassNickname' => 169, 'PassPagerEmail' => 170, 'PassSecondaryEmail' => 171, 'PassSuffix' => 172, 'PassVeteran' => 173, 'ReqMiddleName' => 174, 'ReqNickname' => 175, 'ReqPagerEmail' => 176, 'ReqSecondaryEmail' => 177, 'ReqSuffix' => 178, 'ReqVeteran' => 179, 'LodgingPhoneComment' => 180, 'ReqGender' => 181, 'GuardianGender' => 182, 'AgencyPosition' => 183, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id' => 0, 'requestDate' => 1, 'requestBy' => 2, 'requestOnBehalf' => 3, 'apptDate' => 4, 'returnDate' => 5, 'baggageWeight' => 6, 'baggageDesc' => 7, 'passTitle' => 8, 'passFirstName' => 9, 'passLastName' => 10, 'passAddress1' => 11, 'passAddress2' => 12, 'passCity' => 13, 'passCounty' => 14, 'passState' => 15, 'passCountry' => 16, 'passZipcode' => 17, 'passDayPhone' => 18, 'passDayComment' => 19, 'passEvePhone' => 20, 'passEveComment' => 21, 'passMobilePhone' => 22, 'passMobileComment' => 23, 'passPagerPhone' => 24, 'passPagerComment' => 25, 'passOtherPhone' => 26, 'passOtherComment' => 27, 'passEmail' => 28, 'passDateOfBirth' => 29, 'illness' => 30, 'financial' => 31, 'passWeight' => 32, 'releasingPhysician' => 33, 'releasePhone' => 34, 'releasePhoneComment' => 35, 'releaseFax' => 36, 'releaseFaxComment' => 37, 'releaseEmail' => 38, 'treatingPhysician' => 39, 'treatingPhone' => 40, 'treatingPhoneComment' => 41, 'treatingFax' => 42, 'treatingFaxComment' => 43, 'reqTitle' => 44, 'reqFirstName' => 45, 'reqLastName' => 46, 'agencyName' => 47, 'reqAddress1' => 48, 'reqAddress2' => 49, 'reqCity' => 50, 'reqCounty' => 51, 'reqState' => 52, 'reqCountry' => 53, 'reqZipcode' => 54, 'reqDayPhone' => 55, 'reqDayComment' => 56, 'reqEvePhone' => 57, 'reqEveComment' => 58, 'reqMobilePhone' => 59, 'reqMobileComment' => 60, 'reqPagerPhone' => 61, 'reqPagerComment' => 62, 'reqOtherPhone' => 63, 'reqOtherComment' => 64, 'reqEmail' => 65, 'originIdent' => 66, 'originId' => 67, 'originCity' => 68, 'originState' => 69, 'originZipcode' => 70, 'destIdent' => 71, 'destId' => 72, 'destCity' => 73, 'destState' => 74, 'destZipcode' => 75, 'com1Name' => 76, 'com1Relationship' => 77, 'com1DateOfBirth' => 78, 'com1Weight' => 79, 'com1Phone' => 80, 'com1Comment' => 81, 'com2Name' => 82, 'com2Relationship' => 83, 'com2DateOfBirth' => 84, 'com2Weight' => 85, 'com2Phone' => 86, 'com2Comment' => 87, 'com3Name' => 88, 'com3Relationship' => 89, 'com3DateOfBirth' => 90, 'com3Weight' => 91, 'com3Phone' => 92, 'com3Comment' => 93, 'com4Name' => 94, 'com4Relationship' => 95, 'com4DateOfBirth' => 96, 'com4Weight' => 97, 'com4Phone' => 98, 'com4Comment' => 99, 'lodgingName' => 100, 'lodgingPhone' => 101, 'facilityName' => 102, 'facilityPhone' => 103, 'facilityPhoneComment' => 104, 'reqLanguageSpoken' => 105, 'bestContact' => 106, 'emergencyName' => 107, 'emergencyPhone1' => 108, 'emergencyPhone2' => 109, 'emergencyPhone1Comment' => 110, 'emergencyPhone2Comment' => 111, 'comment' => 112, 'processedDate' => 113, 'sessionId' => 114, 'ipAddress' => 115, 'passFaxPhone1' => 116, 'passFaxComment1' => 117, 'guarFirstName' => 118, 'guarLastName' => 119, 'guarAddress1' => 120, 'guarAddress2' => 121, 'guarCity' => 122, 'guarState' => 123, 'guarZipcode' => 124, 'guarDayPhone' => 125, 'guarDayComment' => 126, 'guarEvePhone' => 127, 'guarEveComment' => 128, 'guarFaxPhone1' => 129, 'guarFaxComment1' => 130, 'guarMobilePhone' => 131, 'guarMobileComment' => 132, 'guarPagerPhone' => 133, 'guarPagerComment' => 134, 'guarOtherPhone' => 135, 'guarOtherComment' => 136, 'guarGuarEmail' => 137, 'reqFaxPhone1' => 138, 'reqFaxComment1' => 139, 'passEnglish' => 140, 'passLanguage' => 141, 'apptTime' => 142, 'requesterId' => 143, 'passengerId' => 144, 'missionId' => 145, 'treatingEmail' => 146, 'passHeight' => 147, 'returnTime' => 148, 'passOxygen' => 149, 'passMedical' => 150, 'referralSourceId' => 151, 'followUpContactName' => 152, 'followUpContactPhone' => 153, 'followUpEmail' => 154, 'missReqOriginatorAfaOrgId' => 155, 'afaOrgId' => 156, 'afaOrgMissionId' => 157, 'missionRequestType' => 158, 'lastPageProcessed' => 159, 'guardianMiddleName' => 160, 'guardianNickname' => 161, 'guardianPagerEmail' => 162, 'guardianSecondaryEmail' => 163, 'guardianSuffix' => 164, 'guardianTitle' => 165, 'guardianVeteran' => 166, 'passGender' => 167, 'passMiddleName' => 168, 'passNickname' => 169, 'passPagerEmail' => 170, 'passSecondaryEmail' => 171, 'passSuffix' => 172, 'passVeteran' => 173, 'reqMiddleName' => 174, 'reqNickname' => 175, 'reqPagerEmail' => 176, 'reqSecondaryEmail' => 177, 'reqSuffix' => 178, 'reqVeteran' => 179, 'lodgingPhoneComment' => 180, 'reqGender' => 181, 'guardianGender' => 182, 'agencyPosition' => 183, ),
		BasePeer::TYPE_COLNAME => array (self::ID => 0, self::REQUEST_DATE => 1, self::REQUEST_BY => 2, self::REQUEST_ON_BEHALF => 3, self::APPT_DATE => 4, self::RETURN_DATE => 5, self::BAGGAGE_WEIGHT => 6, self::BAGGAGE_DESC => 7, self::PASS_TITLE => 8, self::PASS_FIRST_NAME => 9, self::PASS_LAST_NAME => 10, self::PASS_ADDRESS1 => 11, self::PASS_ADDRESS2 => 12, self::PASS_CITY => 13, self::PASS_COUNTY => 14, self::PASS_STATE => 15, self::PASS_COUNTRY => 16, self::PASS_ZIPCODE => 17, self::PASS_DAY_PHONE => 18, self::PASS_DAY_COMMENT => 19, self::PASS_EVE_PHONE => 20, self::PASS_EVE_COMMENT => 21, self::PASS_MOBILE_PHONE => 22, self::PASS_MOBILE_COMMENT => 23, self::PASS_PAGER_PHONE => 24, self::PASS_PAGER_COMMENT => 25, self::PASS_OTHER_PHONE => 26, self::PASS_OTHER_COMMENT => 27, self::PASS_EMAIL => 28, self::PASS_DATE_OF_BIRTH => 29, self::ILLNESS => 30, self::FINANCIAL => 31, self::PASS_WEIGHT => 32, self::RELEASING_PHYSICIAN => 33, self::RELEASE_PHONE => 34, self::RELEASE_PHONE_COMMENT => 35, self::RELEASE_FAX => 36, self::RELEASE_FAX_COMMENT => 37, self::RELEASE_EMAIL => 38, self::TREATING_PHYSICIAN => 39, self::TREATING_PHONE => 40, self::TREATING_PHONE_COMMENT => 41, self::TREATING_FAX => 42, self::TREATING_FAX_COMMENT => 43, self::REQ_TITLE => 44, self::REQ_FIRST_NAME => 45, self::REQ_LAST_NAME => 46, self::AGENCY_NAME => 47, self::REQ_ADDRESS1 => 48, self::REQ_ADDRESS2 => 49, self::REQ_CITY => 50, self::REQ_COUNTY => 51, self::REQ_STATE => 52, self::REQ_COUNTRY => 53, self::REQ_ZIPCODE => 54, self::REQ_DAY_PHONE => 55, self::REQ_DAY_COMMENT => 56, self::REQ_EVE_PHONE => 57, self::REQ_EVE_COMMENT => 58, self::REQ_MOBILE_PHONE => 59, self::REQ_MOBILE_COMMENT => 60, self::REQ_PAGER_PHONE => 61, self::REQ_PAGER_COMMENT => 62, self::REQ_OTHER_PHONE => 63, self::REQ_OTHER_COMMENT => 64, self::REQ_EMAIL => 65, self::ORIGIN_IDENT => 66, self::ORIGIN_ID => 67, self::ORIGIN_CITY => 68, self::ORIGIN_STATE => 69, self::ORIGIN_ZIPCODE => 70, self::DEST_IDENT => 71, self::DEST_ID => 72, self::DEST_CITY => 73, self::DEST_STATE => 74, self::DEST_ZIPCODE => 75, self::COM1_NAME => 76, self::COM1_RELATIONSHIP => 77, self::COM1_DATE_OF_BIRTH => 78, self::COM1_WEIGHT => 79, self::COM1_PHONE => 80, self::COM1_COMMENT => 81, self::COM2_NAME => 82, self::COM2_RELATIONSHIP => 83, self::COM2_DATE_OF_BIRTH => 84, self::COM2_WEIGHT => 85, self::COM2_PHONE => 86, self::COM2_COMMENT => 87, self::COM3_NAME => 88, self::COM3_RELATIONSHIP => 89, self::COM3_DATE_OF_BIRTH => 90, self::COM3_WEIGHT => 91, self::COM3_PHONE => 92, self::COM3_COMMENT => 93, self::COM4_NAME => 94, self::COM4_RELATIONSHIP => 95, self::COM4_DATE_OF_BIRTH => 96, self::COM4_WEIGHT => 97, self::COM4_PHONE => 98, self::COM4_COMMENT => 99, self::LODGING_NAME => 100, self::LODGING_PHONE => 101, self::FACILITY_NAME => 102, self::FACILITY_PHONE => 103, self::FACILITY_PHONE_COMMENT => 104, self::REQ_LANGUAGE_SPOKEN => 105, self::BEST_CONTACT => 106, self::EMERGENCY_NAME => 107, self::EMERGENCY_PHONE1 => 108, self::EMERGENCY_PHONE2 => 109, self::EMERGENCY_PHONE1_COMMENT => 110, self::EMERGENCY_PHONE2_COMMENT => 111, self::COMMENT => 112, self::PROCESSED_DATE => 113, self::SESSION_ID => 114, self::IP_ADDRESS => 115, self::PASS_FAX_PHONE1 => 116, self::PASS_FAX_COMMENT1 => 117, self::GUAR_FIRST_NAME => 118, self::GUAR_LAST_NAME => 119, self::GUAR_ADDRESS1 => 120, self::GUAR_ADDRESS2 => 121, self::GUAR_CITY => 122, self::GUAR_STATE => 123, self::GUAR_ZIPCODE => 124, self::GUAR_DAY_PHONE => 125, self::GUAR_DAY_COMMENT => 126, self::GUAR_EVE_PHONE => 127, self::GUAR_EVE_COMMENT => 128, self::GUAR_FAX_PHONE1 => 129, self::GUAR_FAX_COMMENT1 => 130, self::GUAR_MOBILE_PHONE => 131, self::GUAR_MOBILE_COMMENT => 132, self::GUAR_PAGER_PHONE => 133, self::GUAR_PAGER_COMMENT => 134, self::GUAR_OTHER_PHONE => 135, self::GUAR_OTHER_COMMENT => 136, self::GUAR_GUAR_EMAIL => 137, self::REQ_FAX_PHONE1 => 138, self::REQ_FAX_COMMENT1 => 139, self::PASS_ENGLISH => 140, self::PASS_LANGUAGE => 141, self::APPT_TIME => 142, self::REQUESTER_ID => 143, self::PASSENGER_ID => 144, self::MISSION_ID => 145, self::TREATING_EMAIL => 146, self::PASS_HEIGHT => 147, self::RETURN_TIME => 148, self::PASS_OXYGEN => 149, self::PASS_MEDICAL => 150, self::REFERRAL_SOURCE_ID => 151, self::FOLLOW_UP_CONTACT_NAME => 152, self::FOLLOW_UP_CONTACT_PHONE => 153, self::FOLLOW_UP_EMAIL => 154, self::MISS_REQ_ORIGINATOR_AFA_ORG_ID => 155, self::AFA_ORG_ID => 156, self::AFA_ORG_MISSION_ID => 157, self::MISSION_REQUEST_TYPE => 158, self::LAST_PAGE_PROCESSED => 159, self::GUARDIAN_MIDDLE_NAME => 160, self::GUARDIAN_NICKNAME => 161, self::GUARDIAN_PAGER_EMAIL => 162, self::GUARDIAN_SECONDARY_EMAIL => 163, self::GUARDIAN_SUFFIX => 164, self::GUARDIAN_TITLE => 165, self::GUARDIAN_VETERAN => 166, self::PASS_GENDER => 167, self::PASS_MIDDLE_NAME => 168, self::PASS_NICKNAME => 169, self::PASS_PAGER_EMAIL => 170, self::PASS_SECONDARY_EMAIL => 171, self::PASS_SUFFIX => 172, self::PASS_VETERAN => 173, self::REQ_MIDDLE_NAME => 174, self::REQ_NICKNAME => 175, self::REQ_PAGER_EMAIL => 176, self::REQ_SECONDARY_EMAIL => 177, self::REQ_SUFFIX => 178, self::REQ_VETERAN => 179, self::LODGING_PHONE_COMMENT => 180, self::REQ_GENDER => 181, self::GUARDIAN_GENDER => 182, self::AGENCY_POSITION => 183, ),
		BasePeer::TYPE_FIELDNAME => array ('id' => 0, 'request_date' => 1, 'request_by' => 2, 'request_on_behalf' => 3, 'appt_date' => 4, 'return_date' => 5, 'baggage_weight' => 6, 'baggage_desc' => 7, 'pass_title' => 8, 'pass_first_name' => 9, 'pass_last_name' => 10, 'pass_address1' => 11, 'pass_address2' => 12, 'pass_city' => 13, 'pass_county' => 14, 'pass_state' => 15, 'pass_country' => 16, 'pass_zipcode' => 17, 'pass_day_phone' => 18, 'pass_day_comment' => 19, 'pass_eve_phone' => 20, 'pass_eve_comment' => 21, 'pass_mobile_phone' => 22, 'pass_mobile_comment' => 23, 'pass_pager_phone' => 24, 'pass_pager_comment' => 25, 'pass_other_phone' => 26, 'pass_other_comment' => 27, 'pass_email' => 28, 'pass_date_of_birth' => 29, 'illness' => 30, 'financial' => 31, 'pass_weight' => 32, 'releasing_physician' => 33, 'release_phone' => 34, 'release_phone_comment' => 35, 'release_fax' => 36, 'release_fax_comment' => 37, 'release_email' => 38, 'treating_physician' => 39, 'treating_phone' => 40, 'treating_phone_comment' => 41, 'treating_fax' => 42, 'treating_fax_comment' => 43, 'req_title' => 44, 'req_first_name' => 45, 'req_last_name' => 46, 'agency_name' => 47, 'req_address1' => 48, 'req_address2' => 49, 'req_city' => 50, 'req_county' => 51, 'req_state' => 52, 'req_country' => 53, 'req_zipcode' => 54, 'req_day_phone' => 55, 'req_day_comment' => 56, 'req_eve_phone' => 57, 'req_eve_comment' => 58, 'req_mobile_phone' => 59, 'req_mobile_comment' => 60, 'req_pager_phone' => 61, 'req_pager_comment' => 62, 'req_other_phone' => 63, 'req_other_comment' => 64, 'req_email' => 65, 'origin_ident' => 66, 'origin_id' => 67, 'origin_city' => 68, 'origin_state' => 69, 'origin_zipcode' => 70, 'dest_ident' => 71, 'dest_id' => 72, 'dest_city' => 73, 'dest_state' => 74, 'dest_zipcode' => 75, 'com1_name' => 76, 'com1_relationship' => 77, 'com1_date_of_birth' => 78, 'com1_weight' => 79, 'com1_phone' => 80, 'com1_comment' => 81, 'com2_name' => 82, 'com2_relationship' => 83, 'com2_date_of_birth' => 84, 'com2_weight' => 85, 'com2_phone' => 86, 'com2_comment' => 87, 'com3_name' => 88, 'com3_relationship' => 89, 'com3_date_of_birth' => 90, 'com3_weight' => 91, 'com3_phone' => 92, 'com3_comment' => 93, 'com4_name' => 94, 'com4_relationship' => 95, 'com4_date_of_birth' => 96, 'com4_weight' => 97, 'com4_phone' => 98, 'com4_comment' => 99, 'lodging_name' => 100, 'lodging_phone' => 101, 'facility_name' => 102, 'facility_phone' => 103, 'facility_phone_comment' => 104, 'req_language_spoken' => 105, 'best_contact' => 106, 'emergency_name' => 107, 'emergency_phone1' => 108, 'emergency_phone2' => 109, 'emergency_phone1_comment' => 110, 'emergency_phone2_comment' => 111, 'comment' => 112, 'processed_date' => 113, 'session_id' => 114, 'ip_address' => 115, 'pass_fax_phone1' => 116, 'pass_fax_comment1' => 117, 'guar_first_name' => 118, 'guar_last_name' => 119, 'guar_address1' => 120, 'guar_address2' => 121, 'guar_city' => 122, 'guar_state' => 123, 'guar_zipcode' => 124, 'guar_day_phone' => 125, 'guar_day_comment' => 126, 'guar_eve_phone' => 127, 'guar_eve_comment' => 128, 'guar_fax_phone1' => 129, 'guar_fax_comment1' => 130, 'guar_mobile_phone' => 131, 'guar_mobile_comment' => 132, 'guar_pager_phone' => 133, 'guar_pager_comment' => 134, 'guar_other_phone' => 135, 'guar_other_comment' => 136, 'guar_guar_email' => 137, 'req_fax_phone1' => 138, 'req_fax_comment1' => 139, 'pass_english' => 140, 'pass_language' => 141, 'appt_time' => 142, 'requester_id' => 143, 'passenger_id' => 144, 'mission_id' => 145, 'treating_email' => 146, 'pass_height' => 147, 'return_time' => 148, 'pass_oxygen' => 149, 'pass_medical' => 150, 'referral_source_id' => 151, 'follow_up_contact_name' => 152, 'follow_up_contact_phone' => 153, 'follow_up_email' => 154, 'miss_req_originator_afa_org_id' => 155, 'afa_org_id' => 156, 'afa_org_mission_id' => 157, 'mission_request_type' => 158, 'last_page_processed' => 159, 'guardian_middle_name' => 160, 'guardian_nickname' => 161, 'guardian_pager_email' => 162, 'guardian_secondary_email' => 163, 'guardian_suffix' => 164, 'guardian_title' => 165, 'guardian_veteran' => 166, 'pass_gender' => 167, 'pass_middle_name' => 168, 'pass_nickname' => 169, 'pass_pager_email' => 170, 'pass_secondary_email' => 171, 'pass_suffix' => 172, 'pass_veteran' => 173, 'req_middle_name' => 174, 'req_nickname' => 175, 'req_pager_email' => 176, 'req_secondary_email' => 177, 'req_suffix' => 178, 'req_veteran' => 179, 'lodging_phone_comment' => 180, 'req_gender' => 181, 'guardian_gender' => 182, 'agency_position' => 183, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, )
	);

	/**
	 * Get a (singleton) instance of the MapBuilder for this peer class.
	 * @return     MapBuilder The map builder for this peer
	 */
	public static function getMapBuilder()
	{
		if (self::$mapBuilder === null) {
			self::$mapBuilder = new MissionRequestTempMapBuilder();
		}
		return self::$mapBuilder;
	}
	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. MissionRequestTempPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(MissionRequestTempPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{

		$criteria->addSelectColumn(MissionRequestTempPeer::ID);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQUEST_DATE);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQUEST_BY);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQUEST_ON_BEHALF);

		$criteria->addSelectColumn(MissionRequestTempPeer::APPT_DATE);

		$criteria->addSelectColumn(MissionRequestTempPeer::RETURN_DATE);

		$criteria->addSelectColumn(MissionRequestTempPeer::BAGGAGE_WEIGHT);

		$criteria->addSelectColumn(MissionRequestTempPeer::BAGGAGE_DESC);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_TITLE);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_FIRST_NAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_LAST_NAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_ADDRESS1);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_ADDRESS2);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_CITY);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_COUNTY);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_STATE);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_COUNTRY);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_ZIPCODE);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_DAY_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_DAY_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_EVE_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_EVE_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_MOBILE_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_MOBILE_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_PAGER_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_PAGER_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_OTHER_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_OTHER_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_EMAIL);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_DATE_OF_BIRTH);

		$criteria->addSelectColumn(MissionRequestTempPeer::ILLNESS);

		$criteria->addSelectColumn(MissionRequestTempPeer::FINANCIAL);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_WEIGHT);

		$criteria->addSelectColumn(MissionRequestTempPeer::RELEASING_PHYSICIAN);

		$criteria->addSelectColumn(MissionRequestTempPeer::RELEASE_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::RELEASE_PHONE_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::RELEASE_FAX);

		$criteria->addSelectColumn(MissionRequestTempPeer::RELEASE_FAX_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::RELEASE_EMAIL);

		$criteria->addSelectColumn(MissionRequestTempPeer::TREATING_PHYSICIAN);

		$criteria->addSelectColumn(MissionRequestTempPeer::TREATING_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::TREATING_PHONE_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::TREATING_FAX);

		$criteria->addSelectColumn(MissionRequestTempPeer::TREATING_FAX_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_TITLE);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_FIRST_NAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_LAST_NAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::AGENCY_NAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_ADDRESS1);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_ADDRESS2);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_CITY);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_COUNTY);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_STATE);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_COUNTRY);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_ZIPCODE);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_DAY_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_DAY_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_EVE_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_EVE_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_MOBILE_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_MOBILE_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_PAGER_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_PAGER_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_OTHER_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_OTHER_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_EMAIL);

		$criteria->addSelectColumn(MissionRequestTempPeer::ORIGIN_IDENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::ORIGIN_ID);

		$criteria->addSelectColumn(MissionRequestTempPeer::ORIGIN_CITY);

		$criteria->addSelectColumn(MissionRequestTempPeer::ORIGIN_STATE);

		$criteria->addSelectColumn(MissionRequestTempPeer::ORIGIN_ZIPCODE);

		$criteria->addSelectColumn(MissionRequestTempPeer::DEST_IDENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::DEST_ID);

		$criteria->addSelectColumn(MissionRequestTempPeer::DEST_CITY);

		$criteria->addSelectColumn(MissionRequestTempPeer::DEST_STATE);

		$criteria->addSelectColumn(MissionRequestTempPeer::DEST_ZIPCODE);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM1_NAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM1_RELATIONSHIP);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM1_DATE_OF_BIRTH);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM1_WEIGHT);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM1_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM1_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM2_NAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM2_RELATIONSHIP);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM2_DATE_OF_BIRTH);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM2_WEIGHT);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM2_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM2_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM3_NAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM3_RELATIONSHIP);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM3_DATE_OF_BIRTH);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM3_WEIGHT);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM3_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM3_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM4_NAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM4_RELATIONSHIP);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM4_DATE_OF_BIRTH);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM4_WEIGHT);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM4_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::COM4_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::LODGING_NAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::LODGING_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::FACILITY_NAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::FACILITY_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::FACILITY_PHONE_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_LANGUAGE_SPOKEN);

		$criteria->addSelectColumn(MissionRequestTempPeer::BEST_CONTACT);

		$criteria->addSelectColumn(MissionRequestTempPeer::EMERGENCY_NAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::EMERGENCY_PHONE1);

		$criteria->addSelectColumn(MissionRequestTempPeer::EMERGENCY_PHONE2);

		$criteria->addSelectColumn(MissionRequestTempPeer::EMERGENCY_PHONE1_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::EMERGENCY_PHONE2_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::PROCESSED_DATE);

		$criteria->addSelectColumn(MissionRequestTempPeer::SESSION_ID);

		$criteria->addSelectColumn(MissionRequestTempPeer::IP_ADDRESS);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_FAX_PHONE1);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_FAX_COMMENT1);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_FIRST_NAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_LAST_NAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_ADDRESS1);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_ADDRESS2);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_CITY);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_STATE);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_ZIPCODE);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_DAY_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_DAY_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_EVE_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_EVE_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_FAX_PHONE1);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_FAX_COMMENT1);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_MOBILE_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_MOBILE_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_PAGER_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_PAGER_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_OTHER_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_OTHER_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUAR_GUAR_EMAIL);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_FAX_PHONE1);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_FAX_COMMENT1);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_ENGLISH);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_LANGUAGE);

		$criteria->addSelectColumn(MissionRequestTempPeer::APPT_TIME);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQUESTER_ID);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASSENGER_ID);

		$criteria->addSelectColumn(MissionRequestTempPeer::MISSION_ID);

		$criteria->addSelectColumn(MissionRequestTempPeer::TREATING_EMAIL);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_HEIGHT);

		$criteria->addSelectColumn(MissionRequestTempPeer::RETURN_TIME);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_OXYGEN);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_MEDICAL);

		$criteria->addSelectColumn(MissionRequestTempPeer::REFERRAL_SOURCE_ID);

		$criteria->addSelectColumn(MissionRequestTempPeer::FOLLOW_UP_CONTACT_NAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::FOLLOW_UP_CONTACT_PHONE);

		$criteria->addSelectColumn(MissionRequestTempPeer::FOLLOW_UP_EMAIL);

		$criteria->addSelectColumn(MissionRequestTempPeer::MISS_REQ_ORIGINATOR_AFA_ORG_ID);

		$criteria->addSelectColumn(MissionRequestTempPeer::AFA_ORG_ID);

		$criteria->addSelectColumn(MissionRequestTempPeer::AFA_ORG_MISSION_ID);

		$criteria->addSelectColumn(MissionRequestTempPeer::MISSION_REQUEST_TYPE);

		$criteria->addSelectColumn(MissionRequestTempPeer::LAST_PAGE_PROCESSED);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUARDIAN_MIDDLE_NAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUARDIAN_NICKNAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUARDIAN_PAGER_EMAIL);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUARDIAN_SECONDARY_EMAIL);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUARDIAN_SUFFIX);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUARDIAN_TITLE);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUARDIAN_VETERAN);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_GENDER);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_MIDDLE_NAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_NICKNAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_PAGER_EMAIL);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_SECONDARY_EMAIL);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_SUFFIX);

		$criteria->addSelectColumn(MissionRequestTempPeer::PASS_VETERAN);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_MIDDLE_NAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_NICKNAME);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_PAGER_EMAIL);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_SECONDARY_EMAIL);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_SUFFIX);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_VETERAN);

		$criteria->addSelectColumn(MissionRequestTempPeer::LODGING_PHONE_COMMENT);

		$criteria->addSelectColumn(MissionRequestTempPeer::REQ_GENDER);

		$criteria->addSelectColumn(MissionRequestTempPeer::GUARDIAN_GENDER);

		$criteria->addSelectColumn(MissionRequestTempPeer::AGENCY_POSITION);

	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MissionRequestTempPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionRequestTempPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(MissionRequestTempPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}


    foreach (sfMixer::getCallables('BaseMissionRequestTempPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionRequestTempPeer', $criteria, $con);
    }


		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     MissionRequestTemp
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = MissionRequestTempPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return MissionRequestTempPeer::populateObjects(MissionRequestTempPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMissionRequestTempPeer:doSelectStmt:doSelectStmt') as $callable)
    {
      call_user_func($callable, 'BaseMissionRequestTempPeer', $criteria, $con);
    }


		if ($con === null) {
			$con = Propel::getConnection(MissionRequestTempPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			MissionRequestTempPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      MissionRequestTemp $value A MissionRequestTemp object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(MissionRequestTemp $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getId();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A MissionRequestTemp object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof MissionRequestTemp) {
				$key = (string) $value->getId();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or MissionRequestTemp object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     MissionRequestTemp Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 0] === null) {
			return null;
		}
		return (string) $row[$startcol + 0];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = MissionRequestTempPeer::getOMClass();
		$cls = substr('.'.$cls, strrpos('.'.$cls, '.') + 1);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = MissionRequestTempPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = MissionRequestTempPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
		
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				MissionRequestTempPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

  static public function getUniqueColumnNames()
  {
    return array();
  }
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * This uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass()
	{
		return MissionRequestTempPeer::CLASS_DEFAULT;
	}

	/**
	 * Method perform an INSERT on the database, given a MissionRequestTemp or Criteria object.
	 *
	 * @param      mixed $values Criteria or MissionRequestTemp object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMissionRequestTempPeer:doInsert:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseMissionRequestTempPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(MissionRequestTempPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from MissionRequestTemp object
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		
    foreach (sfMixer::getCallables('BaseMissionRequestTempPeer:doInsert:post') as $callable)
    {
      call_user_func($callable, 'BaseMissionRequestTempPeer', $values, $con, $pk);
    }

    return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a MissionRequestTemp or Criteria object.
	 *
	 * @param      mixed $values Criteria or MissionRequestTemp object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMissionRequestTempPeer:doUpdate:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseMissionRequestTempPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(MissionRequestTempPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(MissionRequestTempPeer::ID);
			$selectCriteria->add(MissionRequestTempPeer::ID, $criteria->remove(MissionRequestTempPeer::ID), $comparison);

		} else { // $values is MissionRequestTemp object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);
	

    foreach (sfMixer::getCallables('BaseMissionRequestTempPeer:doUpdate:post') as $callable)
    {
      call_user_func($callable, 'BaseMissionRequestTempPeer', $values, $con, $ret);
    }

    return $ret;
  }

	/**
	 * Method to DELETE all rows from the mission_request_temp table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(MissionRequestTempPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(MissionRequestTempPeer::TABLE_NAME, $con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a MissionRequestTemp or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or MissionRequestTemp object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(MissionRequestTempPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			MissionRequestTempPeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof MissionRequestTemp) {
			// invalidate the cache for this single object
			MissionRequestTempPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(MissionRequestTempPeer::ID, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				MissionRequestTempPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);

			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given MissionRequestTemp object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      MissionRequestTemp $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(MissionRequestTemp $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(MissionRequestTempPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(MissionRequestTempPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		$res =  BasePeer::doValidate(MissionRequestTempPeer::DATABASE_NAME, MissionRequestTempPeer::TABLE_NAME, $columns);
    if ($res !== true) {
        $request = sfContext::getInstance()->getRequest();
        foreach ($res as $failed) {
            $col = MissionRequestTempPeer::translateFieldname($failed->getColumn(), BasePeer::TYPE_COLNAME, BasePeer::TYPE_PHPNAME);
        }
    }

    return $res;
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     MissionRequestTemp
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = MissionRequestTempPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(MissionRequestTempPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(MissionRequestTempPeer::DATABASE_NAME);
		$criteria->add(MissionRequestTempPeer::ID, $pk);

		$v = MissionRequestTempPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(MissionRequestTempPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(MissionRequestTempPeer::DATABASE_NAME);
			$criteria->add(MissionRequestTempPeer::ID, $pks, Criteria::IN);
			$objs = MissionRequestTempPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

} // BaseMissionRequestTempPeer

// This is the static code needed to register the MapBuilder for this table with the main Propel class.
//
// NOTE: This static code cannot call methods on the MissionRequestTempPeer class, because it is not defined yet.
// If you need to use overridden methods, you can add this code to the bottom of the MissionRequestTempPeer class:
//
// Propel::getDatabaseMap(MissionRequestTempPeer::DATABASE_NAME)->addTableBuilder(MissionRequestTempPeer::TABLE_NAME, MissionRequestTempPeer::getMapBuilder());
//
// Doing so will effectively overwrite the registration below.

Propel::getDatabaseMap(BaseMissionRequestTempPeer::DATABASE_NAME)->addTableBuilder(BaseMissionRequestTempPeer::TABLE_NAME, BaseMissionRequestTempPeer::getMapBuilder());

