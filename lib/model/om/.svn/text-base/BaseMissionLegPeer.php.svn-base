<?php

/**
 * Base static class for performing query and update operations on the 'mission_leg' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 04/20/11 01:49:08
 *
 * @package    lib.model.om
 */
abstract class BaseMissionLegPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'mission_leg';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.MissionLeg';

	/** The total number of columns. */
	const NUM_COLUMNS = 44;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the ID field */
	const ID = 'mission_leg.ID';

	/** the column name for the MISSION_ID field */
	const MISSION_ID = 'mission_leg.MISSION_ID';

	/** the column name for the LEG_NUMBER field */
	const LEG_NUMBER = 'mission_leg.LEG_NUMBER';

	/** the column name for the FROM_AIRPORT_ID field */
	const FROM_AIRPORT_ID = 'mission_leg.FROM_AIRPORT_ID';

	/** the column name for the TO_AIRPORT_ID field */
	const TO_AIRPORT_ID = 'mission_leg.TO_AIRPORT_ID';

	/** the column name for the REVERSE_FROM field */
	const REVERSE_FROM = 'mission_leg.REVERSE_FROM';

	/** the column name for the PASS_ON_BOARD field */
	const PASS_ON_BOARD = 'mission_leg.PASS_ON_BOARD';

	/** the column name for the BAGGAGE_WEIGHT field */
	const BAGGAGE_WEIGHT = 'mission_leg.BAGGAGE_WEIGHT';

	/** the column name for the BAGGAGE_DESC field */
	const BAGGAGE_DESC = 'mission_leg.BAGGAGE_DESC';

	/** the column name for the COORDINATOR_ID field */
	const COORDINATOR_ID = 'mission_leg.COORDINATOR_ID';

	/** the column name for the PUBLIC_C_NOTE field */
	const PUBLIC_C_NOTE = 'mission_leg.PUBLIC_C_NOTE';

	/** the column name for the PRIVATE_C_NOTE field */
	const PRIVATE_C_NOTE = 'mission_leg.PRIVATE_C_NOTE';

	/** the column name for the COPILOT_WANTED field */
	const COPILOT_WANTED = 'mission_leg.COPILOT_WANTED';

	/** the column name for the PILOT_ID field */
	const PILOT_ID = 'mission_leg.PILOT_ID';

	/** the column name for the COPILOT_ID field */
	const COPILOT_ID = 'mission_leg.COPILOT_ID';

	/** the column name for the MISS_ASSIS_ID field */
	const MISS_ASSIS_ID = 'mission_leg.MISS_ASSIS_ID';

	/** the column name for the BACKUP_PILOT_ID field */
	const BACKUP_PILOT_ID = 'mission_leg.BACKUP_PILOT_ID';

	/** the column name for the BACKUP_COPILOT_ID field */
	const BACKUP_COPILOT_ID = 'mission_leg.BACKUP_COPILOT_ID';

	/** the column name for the BACKUP_MISS_ASSIS_ID field */
	const BACKUP_MISS_ASSIS_ID = 'mission_leg.BACKUP_MISS_ASSIS_ID';

	/** the column name for the CANCELLED field */
	const CANCELLED = 'mission_leg.CANCELLED';

	/** the column name for the CANCEL_COMMENT field */
	const CANCEL_COMMENT = 'mission_leg.CANCEL_COMMENT';

	/** the column name for the WAIVER_RECEIVED field */
	const WAIVER_RECEIVED = 'mission_leg.WAIVER_RECEIVED';

	/** the column name for the WEB_COORDINATED field */
	const WEB_COORDINATED = 'mission_leg.WEB_COORDINATED';

	/** the column name for the MISSION_REPORT_ID field */
	const MISSION_REPORT_ID = 'mission_leg.MISSION_REPORT_ID';

	/** the column name for the PILOT_AIRCRAFT_ID field */
	const PILOT_AIRCRAFT_ID = 'mission_leg.PILOT_AIRCRAFT_ID';

	/** the column name for the FBO_ID field */
	const FBO_ID = 'mission_leg.FBO_ID';

	/** the column name for the FBO_ADDRESS_NEW field */
	const FBO_ADDRESS_NEW = 'mission_leg.FBO_ADDRESS_NEW';

	/** the column name for the FBO_DEST_ID field */
	const FBO_DEST_ID = 'mission_leg.FBO_DEST_ID';

	/** the column name for the SHARE_AFA_ORG_ID field */
	const SHARE_AFA_ORG_ID = 'mission_leg.SHARE_AFA_ORG_ID';

	/** the column name for the TRANSPORTATION field */
	const TRANSPORTATION = 'mission_leg.TRANSPORTATION';

	/** the column name for the GROUND_ORIGIN field */
	const GROUND_ORIGIN = 'mission_leg.GROUND_ORIGIN';

	/** the column name for the GROUND_DESTINATION field */
	const GROUND_DESTINATION = 'mission_leg.GROUND_DESTINATION';

	/** the column name for the FLIGHT_TIME field */
	const FLIGHT_TIME = 'mission_leg.FLIGHT_TIME';

	/** the column name for the AIRLINE_ID field */
	const AIRLINE_ID = 'mission_leg.AIRLINE_ID';

	/** the column name for the FUND_ID field */
	const FUND_ID = 'mission_leg.FUND_ID';

	/** the column name for the CONFIRM_CODE field */
	const CONFIRM_CODE = 'mission_leg.CONFIRM_CODE';

	/** the column name for the FLIGHT_COST field */
	const FLIGHT_COST = 'mission_leg.FLIGHT_COST';

	/** the column name for the COMM_ORIGIN field */
	const COMM_ORIGIN = 'mission_leg.COMM_ORIGIN';

	/** the column name for the COMM_DEST field */
	const COMM_DEST = 'mission_leg.COMM_DEST';

	/** the column name for the FLIGHT_NUMBER field */
	const FLIGHT_NUMBER = 'mission_leg.FLIGHT_NUMBER';

	/** the column name for the DEPARTURE field */
	const DEPARTURE = 'mission_leg.DEPARTURE';

	/** the column name for the ARRIVAL field */
	const ARRIVAL = 'mission_leg.ARRIVAL';

	/** the column name for the PREFIX field */
	const PREFIX = 'mission_leg.PREFIX';

	/** the column name for the CANCEL_MISSION_LEG field */
	const CANCEL_MISSION_LEG = 'mission_leg.CANCEL_MISSION_LEG';

	/**
	 * An identiy map to hold any loaded instances of MissionLeg objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array MissionLeg[]
	 */
	public static $instances = array();

	/**
	 * The MapBuilder instance for this peer.
	 * @var        MapBuilder
	 */
	private static $mapBuilder = null;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('Id', 'MissionId', 'LegNumber', 'FromAirportId', 'ToAirportId', 'ReverseFrom', 'PassOnBoard', 'BaggageWeight', 'BaggageDesc', 'CoordinatorId', 'PublicCNote', 'PrivateCNote', 'CopilotWanted', 'PilotId', 'CopilotId', 'MissAssisId', 'BackupPilotId', 'BackupCopilotId', 'BackupMissAssisId', 'Cancelled', 'CancelComment', 'WaiverReceived', 'WebCoordinated', 'MissionReportId', 'PilotAircraftId', 'FboId', 'FboAddressNew', 'FboDestId', 'ShareAfaOrgId', 'Transportation', 'GroundOrigin', 'GroundDestination', 'FlightTime', 'AirlineId', 'FundId', 'ConfirmCode', 'FlightCost', 'CommOrigin', 'CommDest', 'FlightNumber', 'Departure', 'Arrival', 'Prefix', 'CancelMissionLeg', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id', 'missionId', 'legNumber', 'fromAirportId', 'toAirportId', 'reverseFrom', 'passOnBoard', 'baggageWeight', 'baggageDesc', 'coordinatorId', 'publicCNote', 'privateCNote', 'copilotWanted', 'pilotId', 'copilotId', 'missAssisId', 'backupPilotId', 'backupCopilotId', 'backupMissAssisId', 'cancelled', 'cancelComment', 'waiverReceived', 'webCoordinated', 'missionReportId', 'pilotAircraftId', 'fboId', 'fboAddressNew', 'fboDestId', 'shareAfaOrgId', 'transportation', 'groundOrigin', 'groundDestination', 'flightTime', 'airlineId', 'fundId', 'confirmCode', 'flightCost', 'commOrigin', 'commDest', 'flightNumber', 'departure', 'arrival', 'prefix', 'cancelMissionLeg', ),
		BasePeer::TYPE_COLNAME => array (self::ID, self::MISSION_ID, self::LEG_NUMBER, self::FROM_AIRPORT_ID, self::TO_AIRPORT_ID, self::REVERSE_FROM, self::PASS_ON_BOARD, self::BAGGAGE_WEIGHT, self::BAGGAGE_DESC, self::COORDINATOR_ID, self::PUBLIC_C_NOTE, self::PRIVATE_C_NOTE, self::COPILOT_WANTED, self::PILOT_ID, self::COPILOT_ID, self::MISS_ASSIS_ID, self::BACKUP_PILOT_ID, self::BACKUP_COPILOT_ID, self::BACKUP_MISS_ASSIS_ID, self::CANCELLED, self::CANCEL_COMMENT, self::WAIVER_RECEIVED, self::WEB_COORDINATED, self::MISSION_REPORT_ID, self::PILOT_AIRCRAFT_ID, self::FBO_ID, self::FBO_ADDRESS_NEW, self::FBO_DEST_ID, self::SHARE_AFA_ORG_ID, self::TRANSPORTATION, self::GROUND_ORIGIN, self::GROUND_DESTINATION, self::FLIGHT_TIME, self::AIRLINE_ID, self::FUND_ID, self::CONFIRM_CODE, self::FLIGHT_COST, self::COMM_ORIGIN, self::COMM_DEST, self::FLIGHT_NUMBER, self::DEPARTURE, self::ARRIVAL, self::PREFIX, self::CANCEL_MISSION_LEG, ),
		BasePeer::TYPE_FIELDNAME => array ('id', 'mission_id', 'leg_number', 'from_airport_id', 'to_airport_id', 'reverse_from', 'pass_on_board', 'baggage_weight', 'baggage_desc', 'coordinator_id', 'public_c_note', 'private_c_note', 'copilot_wanted', 'pilot_id', 'copilot_id', 'miss_assis_id', 'backup_pilot_id', 'backup_copilot_id', 'backup_miss_assis_id', 'cancelled', 'cancel_comment', 'waiver_received', 'web_coordinated', 'mission_report_id', 'pilot_aircraft_id', 'fbo_id', 'fbo_address_new', 'fbo_dest_id', 'share_afa_org_id', 'transportation', 'ground_origin', 'ground_destination', 'flight_time', 'airline_id', 'fund_id', 'confirm_code', 'flight_cost', 'comm_origin', 'comm_dest', 'flight_number', 'departure', 'arrival', 'prefix', 'cancel_mission_leg', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('Id' => 0, 'MissionId' => 1, 'LegNumber' => 2, 'FromAirportId' => 3, 'ToAirportId' => 4, 'ReverseFrom' => 5, 'PassOnBoard' => 6, 'BaggageWeight' => 7, 'BaggageDesc' => 8, 'CoordinatorId' => 9, 'PublicCNote' => 10, 'PrivateCNote' => 11, 'CopilotWanted' => 12, 'PilotId' => 13, 'CopilotId' => 14, 'MissAssisId' => 15, 'BackupPilotId' => 16, 'BackupCopilotId' => 17, 'BackupMissAssisId' => 18, 'Cancelled' => 19, 'CancelComment' => 20, 'WaiverReceived' => 21, 'WebCoordinated' => 22, 'MissionReportId' => 23, 'PilotAircraftId' => 24, 'FboId' => 25, 'FboAddressNew' => 26, 'FboDestId' => 27, 'ShareAfaOrgId' => 28, 'Transportation' => 29, 'GroundOrigin' => 30, 'GroundDestination' => 31, 'FlightTime' => 32, 'AirlineId' => 33, 'FundId' => 34, 'ConfirmCode' => 35, 'FlightCost' => 36, 'CommOrigin' => 37, 'CommDest' => 38, 'FlightNumber' => 39, 'Departure' => 40, 'Arrival' => 41, 'Prefix' => 42, 'CancelMissionLeg' => 43, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id' => 0, 'missionId' => 1, 'legNumber' => 2, 'fromAirportId' => 3, 'toAirportId' => 4, 'reverseFrom' => 5, 'passOnBoard' => 6, 'baggageWeight' => 7, 'baggageDesc' => 8, 'coordinatorId' => 9, 'publicCNote' => 10, 'privateCNote' => 11, 'copilotWanted' => 12, 'pilotId' => 13, 'copilotId' => 14, 'missAssisId' => 15, 'backupPilotId' => 16, 'backupCopilotId' => 17, 'backupMissAssisId' => 18, 'cancelled' => 19, 'cancelComment' => 20, 'waiverReceived' => 21, 'webCoordinated' => 22, 'missionReportId' => 23, 'pilotAircraftId' => 24, 'fboId' => 25, 'fboAddressNew' => 26, 'fboDestId' => 27, 'shareAfaOrgId' => 28, 'transportation' => 29, 'groundOrigin' => 30, 'groundDestination' => 31, 'flightTime' => 32, 'airlineId' => 33, 'fundId' => 34, 'confirmCode' => 35, 'flightCost' => 36, 'commOrigin' => 37, 'commDest' => 38, 'flightNumber' => 39, 'departure' => 40, 'arrival' => 41, 'prefix' => 42, 'cancelMissionLeg' => 43, ),
		BasePeer::TYPE_COLNAME => array (self::ID => 0, self::MISSION_ID => 1, self::LEG_NUMBER => 2, self::FROM_AIRPORT_ID => 3, self::TO_AIRPORT_ID => 4, self::REVERSE_FROM => 5, self::PASS_ON_BOARD => 6, self::BAGGAGE_WEIGHT => 7, self::BAGGAGE_DESC => 8, self::COORDINATOR_ID => 9, self::PUBLIC_C_NOTE => 10, self::PRIVATE_C_NOTE => 11, self::COPILOT_WANTED => 12, self::PILOT_ID => 13, self::COPILOT_ID => 14, self::MISS_ASSIS_ID => 15, self::BACKUP_PILOT_ID => 16, self::BACKUP_COPILOT_ID => 17, self::BACKUP_MISS_ASSIS_ID => 18, self::CANCELLED => 19, self::CANCEL_COMMENT => 20, self::WAIVER_RECEIVED => 21, self::WEB_COORDINATED => 22, self::MISSION_REPORT_ID => 23, self::PILOT_AIRCRAFT_ID => 24, self::FBO_ID => 25, self::FBO_ADDRESS_NEW => 26, self::FBO_DEST_ID => 27, self::SHARE_AFA_ORG_ID => 28, self::TRANSPORTATION => 29, self::GROUND_ORIGIN => 30, self::GROUND_DESTINATION => 31, self::FLIGHT_TIME => 32, self::AIRLINE_ID => 33, self::FUND_ID => 34, self::CONFIRM_CODE => 35, self::FLIGHT_COST => 36, self::COMM_ORIGIN => 37, self::COMM_DEST => 38, self::FLIGHT_NUMBER => 39, self::DEPARTURE => 40, self::ARRIVAL => 41, self::PREFIX => 42, self::CANCEL_MISSION_LEG => 43, ),
		BasePeer::TYPE_FIELDNAME => array ('id' => 0, 'mission_id' => 1, 'leg_number' => 2, 'from_airport_id' => 3, 'to_airport_id' => 4, 'reverse_from' => 5, 'pass_on_board' => 6, 'baggage_weight' => 7, 'baggage_desc' => 8, 'coordinator_id' => 9, 'public_c_note' => 10, 'private_c_note' => 11, 'copilot_wanted' => 12, 'pilot_id' => 13, 'copilot_id' => 14, 'miss_assis_id' => 15, 'backup_pilot_id' => 16, 'backup_copilot_id' => 17, 'backup_miss_assis_id' => 18, 'cancelled' => 19, 'cancel_comment' => 20, 'waiver_received' => 21, 'web_coordinated' => 22, 'mission_report_id' => 23, 'pilot_aircraft_id' => 24, 'fbo_id' => 25, 'fbo_address_new' => 26, 'fbo_dest_id' => 27, 'share_afa_org_id' => 28, 'transportation' => 29, 'ground_origin' => 30, 'ground_destination' => 31, 'flight_time' => 32, 'airline_id' => 33, 'fund_id' => 34, 'confirm_code' => 35, 'flight_cost' => 36, 'comm_origin' => 37, 'comm_dest' => 38, 'flight_number' => 39, 'departure' => 40, 'arrival' => 41, 'prefix' => 42, 'cancel_mission_leg' => 43, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, )
	);

	/**
	 * Get a (singleton) instance of the MapBuilder for this peer class.
	 * @return     MapBuilder The map builder for this peer
	 */
	public static function getMapBuilder()
	{
		if (self::$mapBuilder === null) {
			self::$mapBuilder = new MissionLegMapBuilder();
		}
		return self::$mapBuilder;
	}
	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. MissionLegPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(MissionLegPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{

		$criteria->addSelectColumn(MissionLegPeer::ID);

		$criteria->addSelectColumn(MissionLegPeer::MISSION_ID);

		$criteria->addSelectColumn(MissionLegPeer::LEG_NUMBER);

		$criteria->addSelectColumn(MissionLegPeer::FROM_AIRPORT_ID);

		$criteria->addSelectColumn(MissionLegPeer::TO_AIRPORT_ID);

		$criteria->addSelectColumn(MissionLegPeer::REVERSE_FROM);

		$criteria->addSelectColumn(MissionLegPeer::PASS_ON_BOARD);

		$criteria->addSelectColumn(MissionLegPeer::BAGGAGE_WEIGHT);

		$criteria->addSelectColumn(MissionLegPeer::BAGGAGE_DESC);

		$criteria->addSelectColumn(MissionLegPeer::COORDINATOR_ID);

		$criteria->addSelectColumn(MissionLegPeer::PUBLIC_C_NOTE);

		$criteria->addSelectColumn(MissionLegPeer::PRIVATE_C_NOTE);

		$criteria->addSelectColumn(MissionLegPeer::COPILOT_WANTED);

		$criteria->addSelectColumn(MissionLegPeer::PILOT_ID);

		$criteria->addSelectColumn(MissionLegPeer::COPILOT_ID);

		$criteria->addSelectColumn(MissionLegPeer::MISS_ASSIS_ID);

		$criteria->addSelectColumn(MissionLegPeer::BACKUP_PILOT_ID);

		$criteria->addSelectColumn(MissionLegPeer::BACKUP_COPILOT_ID);

		$criteria->addSelectColumn(MissionLegPeer::BACKUP_MISS_ASSIS_ID);

		$criteria->addSelectColumn(MissionLegPeer::CANCELLED);

		$criteria->addSelectColumn(MissionLegPeer::CANCEL_COMMENT);

		$criteria->addSelectColumn(MissionLegPeer::WAIVER_RECEIVED);

		$criteria->addSelectColumn(MissionLegPeer::WEB_COORDINATED);

		$criteria->addSelectColumn(MissionLegPeer::MISSION_REPORT_ID);

		$criteria->addSelectColumn(MissionLegPeer::PILOT_AIRCRAFT_ID);

		$criteria->addSelectColumn(MissionLegPeer::FBO_ID);

		$criteria->addSelectColumn(MissionLegPeer::FBO_ADDRESS_NEW);

		$criteria->addSelectColumn(MissionLegPeer::FBO_DEST_ID);

		$criteria->addSelectColumn(MissionLegPeer::SHARE_AFA_ORG_ID);

		$criteria->addSelectColumn(MissionLegPeer::TRANSPORTATION);

		$criteria->addSelectColumn(MissionLegPeer::GROUND_ORIGIN);

		$criteria->addSelectColumn(MissionLegPeer::GROUND_DESTINATION);

		$criteria->addSelectColumn(MissionLegPeer::FLIGHT_TIME);

		$criteria->addSelectColumn(MissionLegPeer::AIRLINE_ID);

		$criteria->addSelectColumn(MissionLegPeer::FUND_ID);

		$criteria->addSelectColumn(MissionLegPeer::CONFIRM_CODE);

		$criteria->addSelectColumn(MissionLegPeer::FLIGHT_COST);

		$criteria->addSelectColumn(MissionLegPeer::COMM_ORIGIN);

		$criteria->addSelectColumn(MissionLegPeer::COMM_DEST);

		$criteria->addSelectColumn(MissionLegPeer::FLIGHT_NUMBER);

		$criteria->addSelectColumn(MissionLegPeer::DEPARTURE);

		$criteria->addSelectColumn(MissionLegPeer::ARRIVAL);

		$criteria->addSelectColumn(MissionLegPeer::PREFIX);

		$criteria->addSelectColumn(MissionLegPeer::CANCEL_MISSION_LEG);

	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MissionLegPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}


    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     MissionLeg
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = MissionLegPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return MissionLegPeer::populateObjects(MissionLegPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doSelectStmt:doSelectStmt') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			MissionLegPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      MissionLeg $value A MissionLeg object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(MissionLeg $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getId();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A MissionLeg object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof MissionLeg) {
				$key = (string) $value->getId();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or MissionLeg object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     MissionLeg Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 0] === null) {
			return null;
		}
		return (string) $row[$startcol + 0];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = MissionLegPeer::getOMClass();
		$cls = substr('.'.$cls, strrpos('.'.$cls, '.') + 1);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = MissionLegPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
		
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				MissionLegPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the number of rows matching criteria, joining the related Mission table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinMission(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MissionLegPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AirportRelatedByFromAirportId table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAirportRelatedByFromAirportId(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MissionLegPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AirportRelatedByToAirportId table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAirportRelatedByToAirportId(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MissionLegPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Coordinator table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinCoordinator(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MissionLegPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related PilotRelatedByPilotId table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinPilotRelatedByPilotId(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MissionLegPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related MemberRelatedByCopilotId table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinMemberRelatedByCopilotId(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MissionLegPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related PilotRelatedByBackupPilotId table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinPilotRelatedByBackupPilotId(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MissionLegPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related MemberRelatedByBackupCopilotId table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinMemberRelatedByBackupCopilotId(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MissionLegPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related MissionReport table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinMissionReport(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MissionLegPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related PilotAircraft table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinPilotAircraft(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MissionLegPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Fbo table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinFbo(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MissionLegPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);


    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with their Mission objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinMission(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doSelectJoin:doSelectJoin') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);
		MissionPeer::addSelectColumns($c);

		$c->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = MissionPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = MissionPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = MissionPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					MissionPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (MissionLeg) to $obj2 (Mission)
				$obj2->addMissionLeg($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with their Airport objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAirportRelatedByFromAirportId(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);
		AirportPeer::addSelectColumns($c);

		$c->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = AirportPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = AirportPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					AirportPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (MissionLeg) to $obj2 (Airport)
				$obj2->addMissionLegRelatedByFromAirportId($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with their Airport objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAirportRelatedByToAirportId(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);
		AirportPeer::addSelectColumns($c);

		$c->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = AirportPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = AirportPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					AirportPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (MissionLeg) to $obj2 (Airport)
				$obj2->addMissionLegRelatedByToAirportId($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with their Coordinator objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinCoordinator(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);
		CoordinatorPeer::addSelectColumns($c);

		$c->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = CoordinatorPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = CoordinatorPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = CoordinatorPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					CoordinatorPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (MissionLeg) to $obj2 (Coordinator)
				$obj2->addMissionLeg($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with their Pilot objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinPilotRelatedByPilotId(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);
		PilotPeer::addSelectColumns($c);

		$c->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = PilotPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = PilotPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					PilotPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (MissionLeg) to $obj2 (Pilot)
				$obj2->addMissionLegRelatedByPilotId($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with their Member objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinMemberRelatedByCopilotId(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);
		MemberPeer::addSelectColumns($c);

		$c->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = MemberPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = MemberPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					MemberPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (MissionLeg) to $obj2 (Member)
				$obj2->addMissionLegRelatedByCopilotId($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with their Pilot objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinPilotRelatedByBackupPilotId(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);
		PilotPeer::addSelectColumns($c);

		$c->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = PilotPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = PilotPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					PilotPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (MissionLeg) to $obj2 (Pilot)
				$obj2->addMissionLegRelatedByBackupPilotId($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with their Member objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinMemberRelatedByBackupCopilotId(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);
		MemberPeer::addSelectColumns($c);

		$c->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = MemberPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = MemberPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					MemberPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (MissionLeg) to $obj2 (Member)
				$obj2->addMissionLegRelatedByBackupCopilotId($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with their MissionReport objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinMissionReport(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);
		MissionReportPeer::addSelectColumns($c);

		$c->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = MissionReportPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = MissionReportPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = MissionReportPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					MissionReportPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (MissionLeg) to $obj2 (MissionReport)
				$obj2->addMissionLeg($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with their PilotAircraft objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinPilotAircraft(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);
		PilotAircraftPeer::addSelectColumns($c);

		$c->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = PilotAircraftPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = PilotAircraftPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = PilotAircraftPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					PilotAircraftPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (MissionLeg) to $obj2 (PilotAircraft)
				$obj2->addMissionLeg($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with their Fbo objects.
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinFbo(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);
		FboPeer::addSelectColumns($c);

		$c->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = FboPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = FboPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = FboPeer::getOMClass();

					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					FboPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (MissionLeg) to $obj2 (Fbo)
				$obj2->addMissionLeg($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(MissionLegPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
		$criteria->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
		$criteria->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
		$criteria->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
		$criteria->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
		$criteria->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
		$criteria->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
		$criteria->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
		$criteria->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
		$criteria->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
		$criteria->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of MissionLeg objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doSelectJoinAll:doSelectJoinAll') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol2 = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (MissionPeer::NUM_COLUMNS - MissionPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		CoordinatorPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (CoordinatorPeer::NUM_COLUMNS - CoordinatorPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionReportPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (MissionReportPeer::NUM_COLUMNS - MissionReportPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotAircraftPeer::addSelectColumns($c);
		$startcol12 = $startcol11 + (PilotAircraftPeer::NUM_COLUMNS - PilotAircraftPeer::NUM_LAZY_LOAD_COLUMNS);

		FboPeer::addSelectColumns($c);
		$startcol13 = $startcol12 + (FboPeer::NUM_COLUMNS - FboPeer::NUM_LAZY_LOAD_COLUMNS);

		$c->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
		$c->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
		$c->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
		$c->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
		$c->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
		$c->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
		$c->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
		$c->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
		$c->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
		$c->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
		$c->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);
		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined Mission rows

			$key2 = MissionPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = MissionPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$omClass = MissionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					MissionPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj2 (Mission)
				$obj2->addMissionLeg($obj1);
			} // if joined row not null

			// Add objects for joined Airport rows

			$key3 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = AirportPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AirportPeer::addInstanceToPool($obj3, $key3);
				} // if obj3 loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj3 (Airport)
				$obj3->addMissionLegRelatedByFromAirportId($obj1);
			} // if joined row not null

			// Add objects for joined Airport rows

			$key4 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = AirportPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AirportPeer::addInstanceToPool($obj4, $key4);
				} // if obj4 loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj4 (Airport)
				$obj4->addMissionLegRelatedByToAirportId($obj1);
			} // if joined row not null

			// Add objects for joined Coordinator rows

			$key5 = CoordinatorPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = CoordinatorPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$omClass = CoordinatorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					CoordinatorPeer::addInstanceToPool($obj5, $key5);
				} // if obj5 loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj5 (Coordinator)
				$obj5->addMissionLeg($obj1);
			} // if joined row not null

			// Add objects for joined Pilot rows

			$key6 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = PilotPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					PilotPeer::addInstanceToPool($obj6, $key6);
				} // if obj6 loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj6 (Pilot)
				$obj6->addMissionLegRelatedByPilotId($obj1);
			} // if joined row not null

			// Add objects for joined Member rows

			$key7 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = MemberPeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					MemberPeer::addInstanceToPool($obj7, $key7);
				} // if obj7 loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj7 (Member)
				$obj7->addMissionLegRelatedByCopilotId($obj1);
			} // if joined row not null

			// Add objects for joined Pilot rows

			$key8 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol8);
			if ($key8 !== null) {
				$obj8 = PilotPeer::getInstanceFromPool($key8);
				if (!$obj8) {

					$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					PilotPeer::addInstanceToPool($obj8, $key8);
				} // if obj8 loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj8 (Pilot)
				$obj8->addMissionLegRelatedByBackupPilotId($obj1);
			} // if joined row not null

			// Add objects for joined Member rows

			$key9 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol9);
			if ($key9 !== null) {
				$obj9 = MemberPeer::getInstanceFromPool($key9);
				if (!$obj9) {

					$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					MemberPeer::addInstanceToPool($obj9, $key9);
				} // if obj9 loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj9 (Member)
				$obj9->addMissionLegRelatedByBackupCopilotId($obj1);
			} // if joined row not null

			// Add objects for joined MissionReport rows

			$key10 = MissionReportPeer::getPrimaryKeyHashFromRow($row, $startcol10);
			if ($key10 !== null) {
				$obj10 = MissionReportPeer::getInstanceFromPool($key10);
				if (!$obj10) {

					$omClass = MissionReportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					MissionReportPeer::addInstanceToPool($obj10, $key10);
				} // if obj10 loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj10 (MissionReport)
				$obj10->addMissionLeg($obj1);
			} // if joined row not null

			// Add objects for joined PilotAircraft rows

			$key11 = PilotAircraftPeer::getPrimaryKeyHashFromRow($row, $startcol11);
			if ($key11 !== null) {
				$obj11 = PilotAircraftPeer::getInstanceFromPool($key11);
				if (!$obj11) {

					$omClass = PilotAircraftPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					PilotAircraftPeer::addInstanceToPool($obj11, $key11);
				} // if obj11 loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj11 (PilotAircraft)
				$obj11->addMissionLeg($obj1);
			} // if joined row not null

			// Add objects for joined Fbo rows

			$key12 = FboPeer::getPrimaryKeyHashFromRow($row, $startcol12);
			if ($key12 !== null) {
				$obj12 = FboPeer::getInstanceFromPool($key12);
				if (!$obj12) {

					$omClass = FboPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj12 = new $cls();
					$obj12->hydrate($row, $startcol12);
					FboPeer::addInstanceToPool($obj12, $key12);
				} // if obj12 loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj12 (Fbo)
				$obj12->addMissionLeg($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Mission table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptMission(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AirportRelatedByFromAirportId table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptAirportRelatedByFromAirportId(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related AirportRelatedByToAirportId table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptAirportRelatedByToAirportId(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Coordinator table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptCoordinator(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related PilotRelatedByPilotId table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptPilotRelatedByPilotId(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related MemberRelatedByCopilotId table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptMemberRelatedByCopilotId(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related PilotRelatedByBackupPilotId table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptPilotRelatedByBackupPilotId(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related MemberRelatedByBackupCopilotId table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptMemberRelatedByBackupCopilotId(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related MissionReport table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptMissionReport(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related PilotAircraft table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptPilotAircraft(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Fbo table
	 *
	 * @param      Criteria $c
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptFbo(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			MissionLegPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
				$criteria->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$criteria->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $criteria, $con);
    }


		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with all related objects except Mission.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptMission(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doSelectJoinAllExcept:doSelectJoinAllExcept') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $c, $con);
    }


		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol2 = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		CoordinatorPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (CoordinatorPeer::NUM_COLUMNS - CoordinatorPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionReportPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (MissionReportPeer::NUM_COLUMNS - MissionReportPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotAircraftPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (PilotAircraftPeer::NUM_COLUMNS - PilotAircraftPeer::NUM_LAZY_LOAD_COLUMNS);

		FboPeer::addSelectColumns($c);
		$startcol12 = $startcol11 + (FboPeer::NUM_COLUMNS - FboPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Airport rows

				$key2 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = AirportPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					AirportPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj2 (Airport)
				$obj2->addMissionLegRelatedByFromAirportId($obj1);

			} // if joined row is not null

				// Add objects for joined Airport rows

				$key3 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = AirportPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AirportPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj3 (Airport)
				$obj3->addMissionLegRelatedByToAirportId($obj1);

			} // if joined row is not null

				// Add objects for joined Coordinator rows

				$key4 = CoordinatorPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = CoordinatorPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = CoordinatorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					CoordinatorPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj4 (Coordinator)
				$obj4->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Pilot rows

				$key5 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = PilotPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					PilotPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj5 (Pilot)
				$obj5->addMissionLegRelatedByPilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Member rows

				$key6 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = MemberPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					MemberPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj6 (Member)
				$obj6->addMissionLegRelatedByCopilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Pilot rows

				$key7 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = PilotPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					PilotPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj7 (Pilot)
				$obj7->addMissionLegRelatedByBackupPilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Member rows

				$key8 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = MemberPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					MemberPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj8 (Member)
				$obj8->addMissionLegRelatedByBackupCopilotId($obj1);

			} // if joined row is not null

				// Add objects for joined MissionReport rows

				$key9 = MissionReportPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = MissionReportPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = MissionReportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					MissionReportPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj9 (MissionReport)
				$obj9->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined PilotAircraft rows

				$key10 = PilotAircraftPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = PilotAircraftPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = PilotAircraftPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					PilotAircraftPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj10 (PilotAircraft)
				$obj10->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Fbo rows

				$key11 = FboPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = FboPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$omClass = FboPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					FboPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj11 (Fbo)
				$obj11->addMissionLeg($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with all related objects except AirportRelatedByFromAirportId.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptAirportRelatedByFromAirportId(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol2 = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (MissionPeer::NUM_COLUMNS - MissionPeer::NUM_LAZY_LOAD_COLUMNS);

		CoordinatorPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (CoordinatorPeer::NUM_COLUMNS - CoordinatorPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionReportPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (MissionReportPeer::NUM_COLUMNS - MissionReportPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotAircraftPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (PilotAircraftPeer::NUM_COLUMNS - PilotAircraftPeer::NUM_LAZY_LOAD_COLUMNS);

		FboPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (FboPeer::NUM_COLUMNS - FboPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Mission rows

				$key2 = MissionPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = MissionPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = MissionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					MissionPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj2 (Mission)
				$obj2->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Coordinator rows

				$key3 = CoordinatorPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = CoordinatorPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = CoordinatorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					CoordinatorPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj3 (Coordinator)
				$obj3->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Pilot rows

				$key4 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = PilotPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					PilotPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj4 (Pilot)
				$obj4->addMissionLegRelatedByPilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Member rows

				$key5 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = MemberPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					MemberPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj5 (Member)
				$obj5->addMissionLegRelatedByCopilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Pilot rows

				$key6 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = PilotPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					PilotPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj6 (Pilot)
				$obj6->addMissionLegRelatedByBackupPilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Member rows

				$key7 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = MemberPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					MemberPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj7 (Member)
				$obj7->addMissionLegRelatedByBackupCopilotId($obj1);

			} // if joined row is not null

				// Add objects for joined MissionReport rows

				$key8 = MissionReportPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = MissionReportPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = MissionReportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					MissionReportPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj8 (MissionReport)
				$obj8->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined PilotAircraft rows

				$key9 = PilotAircraftPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = PilotAircraftPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = PilotAircraftPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					PilotAircraftPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj9 (PilotAircraft)
				$obj9->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Fbo rows

				$key10 = FboPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = FboPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = FboPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					FboPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj10 (Fbo)
				$obj10->addMissionLeg($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with all related objects except AirportRelatedByToAirportId.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptAirportRelatedByToAirportId(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol2 = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (MissionPeer::NUM_COLUMNS - MissionPeer::NUM_LAZY_LOAD_COLUMNS);

		CoordinatorPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (CoordinatorPeer::NUM_COLUMNS - CoordinatorPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionReportPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (MissionReportPeer::NUM_COLUMNS - MissionReportPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotAircraftPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (PilotAircraftPeer::NUM_COLUMNS - PilotAircraftPeer::NUM_LAZY_LOAD_COLUMNS);

		FboPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (FboPeer::NUM_COLUMNS - FboPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Mission rows

				$key2 = MissionPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = MissionPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = MissionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					MissionPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj2 (Mission)
				$obj2->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Coordinator rows

				$key3 = CoordinatorPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = CoordinatorPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = CoordinatorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					CoordinatorPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj3 (Coordinator)
				$obj3->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Pilot rows

				$key4 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = PilotPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					PilotPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj4 (Pilot)
				$obj4->addMissionLegRelatedByPilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Member rows

				$key5 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = MemberPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					MemberPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj5 (Member)
				$obj5->addMissionLegRelatedByCopilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Pilot rows

				$key6 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = PilotPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					PilotPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj6 (Pilot)
				$obj6->addMissionLegRelatedByBackupPilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Member rows

				$key7 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = MemberPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					MemberPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj7 (Member)
				$obj7->addMissionLegRelatedByBackupCopilotId($obj1);

			} // if joined row is not null

				// Add objects for joined MissionReport rows

				$key8 = MissionReportPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = MissionReportPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = MissionReportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					MissionReportPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj8 (MissionReport)
				$obj8->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined PilotAircraft rows

				$key9 = PilotAircraftPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = PilotAircraftPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = PilotAircraftPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					PilotAircraftPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj9 (PilotAircraft)
				$obj9->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Fbo rows

				$key10 = FboPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = FboPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = FboPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					FboPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj10 (Fbo)
				$obj10->addMissionLeg($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with all related objects except Coordinator.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptCoordinator(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol2 = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (MissionPeer::NUM_COLUMNS - MissionPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionReportPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (MissionReportPeer::NUM_COLUMNS - MissionReportPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotAircraftPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (PilotAircraftPeer::NUM_COLUMNS - PilotAircraftPeer::NUM_LAZY_LOAD_COLUMNS);

		FboPeer::addSelectColumns($c);
		$startcol12 = $startcol11 + (FboPeer::NUM_COLUMNS - FboPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Mission rows

				$key2 = MissionPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = MissionPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = MissionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					MissionPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj2 (Mission)
				$obj2->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Airport rows

				$key3 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = AirportPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AirportPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj3 (Airport)
				$obj3->addMissionLegRelatedByFromAirportId($obj1);

			} // if joined row is not null

				// Add objects for joined Airport rows

				$key4 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = AirportPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AirportPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj4 (Airport)
				$obj4->addMissionLegRelatedByToAirportId($obj1);

			} // if joined row is not null

				// Add objects for joined Pilot rows

				$key5 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = PilotPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					PilotPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj5 (Pilot)
				$obj5->addMissionLegRelatedByPilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Member rows

				$key6 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = MemberPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					MemberPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj6 (Member)
				$obj6->addMissionLegRelatedByCopilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Pilot rows

				$key7 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = PilotPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					PilotPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj7 (Pilot)
				$obj7->addMissionLegRelatedByBackupPilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Member rows

				$key8 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = MemberPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					MemberPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj8 (Member)
				$obj8->addMissionLegRelatedByBackupCopilotId($obj1);

			} // if joined row is not null

				// Add objects for joined MissionReport rows

				$key9 = MissionReportPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = MissionReportPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = MissionReportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					MissionReportPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj9 (MissionReport)
				$obj9->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined PilotAircraft rows

				$key10 = PilotAircraftPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = PilotAircraftPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = PilotAircraftPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					PilotAircraftPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj10 (PilotAircraft)
				$obj10->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Fbo rows

				$key11 = FboPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = FboPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$omClass = FboPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					FboPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj11 (Fbo)
				$obj11->addMissionLeg($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with all related objects except PilotRelatedByPilotId.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptPilotRelatedByPilotId(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol2 = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (MissionPeer::NUM_COLUMNS - MissionPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		CoordinatorPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (CoordinatorPeer::NUM_COLUMNS - CoordinatorPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionReportPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (MissionReportPeer::NUM_COLUMNS - MissionReportPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotAircraftPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (PilotAircraftPeer::NUM_COLUMNS - PilotAircraftPeer::NUM_LAZY_LOAD_COLUMNS);

		FboPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (FboPeer::NUM_COLUMNS - FboPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Mission rows

				$key2 = MissionPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = MissionPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = MissionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					MissionPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj2 (Mission)
				$obj2->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Airport rows

				$key3 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = AirportPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AirportPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj3 (Airport)
				$obj3->addMissionLegRelatedByFromAirportId($obj1);

			} // if joined row is not null

				// Add objects for joined Airport rows

				$key4 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = AirportPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AirportPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj4 (Airport)
				$obj4->addMissionLegRelatedByToAirportId($obj1);

			} // if joined row is not null

				// Add objects for joined Coordinator rows

				$key5 = CoordinatorPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = CoordinatorPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = CoordinatorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					CoordinatorPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj5 (Coordinator)
				$obj5->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Member rows

				$key6 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = MemberPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					MemberPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj6 (Member)
				$obj6->addMissionLegRelatedByCopilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Member rows

				$key7 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = MemberPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					MemberPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj7 (Member)
				$obj7->addMissionLegRelatedByBackupCopilotId($obj1);

			} // if joined row is not null

				// Add objects for joined MissionReport rows

				$key8 = MissionReportPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = MissionReportPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = MissionReportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					MissionReportPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj8 (MissionReport)
				$obj8->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined PilotAircraft rows

				$key9 = PilotAircraftPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = PilotAircraftPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = PilotAircraftPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					PilotAircraftPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj9 (PilotAircraft)
				$obj9->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Fbo rows

				$key10 = FboPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = FboPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = FboPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					FboPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj10 (Fbo)
				$obj10->addMissionLeg($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with all related objects except MemberRelatedByCopilotId.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptMemberRelatedByCopilotId(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol2 = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (MissionPeer::NUM_COLUMNS - MissionPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		CoordinatorPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (CoordinatorPeer::NUM_COLUMNS - CoordinatorPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionReportPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (MissionReportPeer::NUM_COLUMNS - MissionReportPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotAircraftPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (PilotAircraftPeer::NUM_COLUMNS - PilotAircraftPeer::NUM_LAZY_LOAD_COLUMNS);

		FboPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (FboPeer::NUM_COLUMNS - FboPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Mission rows

				$key2 = MissionPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = MissionPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = MissionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					MissionPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj2 (Mission)
				$obj2->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Airport rows

				$key3 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = AirportPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AirportPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj3 (Airport)
				$obj3->addMissionLegRelatedByFromAirportId($obj1);

			} // if joined row is not null

				// Add objects for joined Airport rows

				$key4 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = AirportPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AirportPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj4 (Airport)
				$obj4->addMissionLegRelatedByToAirportId($obj1);

			} // if joined row is not null

				// Add objects for joined Coordinator rows

				$key5 = CoordinatorPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = CoordinatorPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = CoordinatorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					CoordinatorPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj5 (Coordinator)
				$obj5->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Pilot rows

				$key6 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = PilotPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					PilotPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj6 (Pilot)
				$obj6->addMissionLegRelatedByPilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Pilot rows

				$key7 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = PilotPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					PilotPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj7 (Pilot)
				$obj7->addMissionLegRelatedByBackupPilotId($obj1);

			} // if joined row is not null

				// Add objects for joined MissionReport rows

				$key8 = MissionReportPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = MissionReportPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = MissionReportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					MissionReportPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj8 (MissionReport)
				$obj8->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined PilotAircraft rows

				$key9 = PilotAircraftPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = PilotAircraftPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = PilotAircraftPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					PilotAircraftPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj9 (PilotAircraft)
				$obj9->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Fbo rows

				$key10 = FboPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = FboPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = FboPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					FboPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj10 (Fbo)
				$obj10->addMissionLeg($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with all related objects except PilotRelatedByBackupPilotId.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptPilotRelatedByBackupPilotId(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol2 = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (MissionPeer::NUM_COLUMNS - MissionPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		CoordinatorPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (CoordinatorPeer::NUM_COLUMNS - CoordinatorPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionReportPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (MissionReportPeer::NUM_COLUMNS - MissionReportPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotAircraftPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (PilotAircraftPeer::NUM_COLUMNS - PilotAircraftPeer::NUM_LAZY_LOAD_COLUMNS);

		FboPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (FboPeer::NUM_COLUMNS - FboPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Mission rows

				$key2 = MissionPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = MissionPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = MissionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					MissionPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj2 (Mission)
				$obj2->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Airport rows

				$key3 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = AirportPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AirportPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj3 (Airport)
				$obj3->addMissionLegRelatedByFromAirportId($obj1);

			} // if joined row is not null

				// Add objects for joined Airport rows

				$key4 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = AirportPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AirportPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj4 (Airport)
				$obj4->addMissionLegRelatedByToAirportId($obj1);

			} // if joined row is not null

				// Add objects for joined Coordinator rows

				$key5 = CoordinatorPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = CoordinatorPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = CoordinatorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					CoordinatorPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj5 (Coordinator)
				$obj5->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Member rows

				$key6 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = MemberPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					MemberPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj6 (Member)
				$obj6->addMissionLegRelatedByCopilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Member rows

				$key7 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = MemberPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					MemberPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj7 (Member)
				$obj7->addMissionLegRelatedByBackupCopilotId($obj1);

			} // if joined row is not null

				// Add objects for joined MissionReport rows

				$key8 = MissionReportPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = MissionReportPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = MissionReportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					MissionReportPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj8 (MissionReport)
				$obj8->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined PilotAircraft rows

				$key9 = PilotAircraftPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = PilotAircraftPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = PilotAircraftPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					PilotAircraftPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj9 (PilotAircraft)
				$obj9->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Fbo rows

				$key10 = FboPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = FboPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = FboPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					FboPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj10 (Fbo)
				$obj10->addMissionLeg($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with all related objects except MemberRelatedByBackupCopilotId.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptMemberRelatedByBackupCopilotId(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol2 = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (MissionPeer::NUM_COLUMNS - MissionPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		CoordinatorPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (CoordinatorPeer::NUM_COLUMNS - CoordinatorPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionReportPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (MissionReportPeer::NUM_COLUMNS - MissionReportPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotAircraftPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (PilotAircraftPeer::NUM_COLUMNS - PilotAircraftPeer::NUM_LAZY_LOAD_COLUMNS);

		FboPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (FboPeer::NUM_COLUMNS - FboPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Mission rows

				$key2 = MissionPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = MissionPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = MissionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					MissionPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj2 (Mission)
				$obj2->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Airport rows

				$key3 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = AirportPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AirportPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj3 (Airport)
				$obj3->addMissionLegRelatedByFromAirportId($obj1);

			} // if joined row is not null

				// Add objects for joined Airport rows

				$key4 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = AirportPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AirportPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj4 (Airport)
				$obj4->addMissionLegRelatedByToAirportId($obj1);

			} // if joined row is not null

				// Add objects for joined Coordinator rows

				$key5 = CoordinatorPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = CoordinatorPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = CoordinatorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					CoordinatorPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj5 (Coordinator)
				$obj5->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Pilot rows

				$key6 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = PilotPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					PilotPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj6 (Pilot)
				$obj6->addMissionLegRelatedByPilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Pilot rows

				$key7 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = PilotPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					PilotPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj7 (Pilot)
				$obj7->addMissionLegRelatedByBackupPilotId($obj1);

			} // if joined row is not null

				// Add objects for joined MissionReport rows

				$key8 = MissionReportPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = MissionReportPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = MissionReportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					MissionReportPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj8 (MissionReport)
				$obj8->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined PilotAircraft rows

				$key9 = PilotAircraftPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = PilotAircraftPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = PilotAircraftPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					PilotAircraftPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj9 (PilotAircraft)
				$obj9->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Fbo rows

				$key10 = FboPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = FboPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = FboPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					FboPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj10 (Fbo)
				$obj10->addMissionLeg($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with all related objects except MissionReport.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptMissionReport(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol2 = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (MissionPeer::NUM_COLUMNS - MissionPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		CoordinatorPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (CoordinatorPeer::NUM_COLUMNS - CoordinatorPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotAircraftPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (PilotAircraftPeer::NUM_COLUMNS - PilotAircraftPeer::NUM_LAZY_LOAD_COLUMNS);

		FboPeer::addSelectColumns($c);
		$startcol12 = $startcol11 + (FboPeer::NUM_COLUMNS - FboPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Mission rows

				$key2 = MissionPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = MissionPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = MissionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					MissionPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj2 (Mission)
				$obj2->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Airport rows

				$key3 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = AirportPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AirportPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj3 (Airport)
				$obj3->addMissionLegRelatedByFromAirportId($obj1);

			} // if joined row is not null

				// Add objects for joined Airport rows

				$key4 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = AirportPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AirportPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj4 (Airport)
				$obj4->addMissionLegRelatedByToAirportId($obj1);

			} // if joined row is not null

				// Add objects for joined Coordinator rows

				$key5 = CoordinatorPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = CoordinatorPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = CoordinatorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					CoordinatorPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj5 (Coordinator)
				$obj5->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Pilot rows

				$key6 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = PilotPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					PilotPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj6 (Pilot)
				$obj6->addMissionLegRelatedByPilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Member rows

				$key7 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = MemberPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					MemberPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj7 (Member)
				$obj7->addMissionLegRelatedByCopilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Pilot rows

				$key8 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = PilotPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					PilotPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj8 (Pilot)
				$obj8->addMissionLegRelatedByBackupPilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Member rows

				$key9 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = MemberPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					MemberPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj9 (Member)
				$obj9->addMissionLegRelatedByBackupCopilotId($obj1);

			} // if joined row is not null

				// Add objects for joined PilotAircraft rows

				$key10 = PilotAircraftPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = PilotAircraftPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = PilotAircraftPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					PilotAircraftPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj10 (PilotAircraft)
				$obj10->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Fbo rows

				$key11 = FboPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = FboPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$omClass = FboPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					FboPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj11 (Fbo)
				$obj11->addMissionLeg($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with all related objects except PilotAircraft.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptPilotAircraft(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol2 = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (MissionPeer::NUM_COLUMNS - MissionPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		CoordinatorPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (CoordinatorPeer::NUM_COLUMNS - CoordinatorPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionReportPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (MissionReportPeer::NUM_COLUMNS - MissionReportPeer::NUM_LAZY_LOAD_COLUMNS);

		FboPeer::addSelectColumns($c);
		$startcol12 = $startcol11 + (FboPeer::NUM_COLUMNS - FboPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::FBO_ID,), array(FboPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Mission rows

				$key2 = MissionPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = MissionPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = MissionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					MissionPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj2 (Mission)
				$obj2->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Airport rows

				$key3 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = AirportPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AirportPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj3 (Airport)
				$obj3->addMissionLegRelatedByFromAirportId($obj1);

			} // if joined row is not null

				// Add objects for joined Airport rows

				$key4 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = AirportPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AirportPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj4 (Airport)
				$obj4->addMissionLegRelatedByToAirportId($obj1);

			} // if joined row is not null

				// Add objects for joined Coordinator rows

				$key5 = CoordinatorPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = CoordinatorPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = CoordinatorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					CoordinatorPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj5 (Coordinator)
				$obj5->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Pilot rows

				$key6 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = PilotPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					PilotPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj6 (Pilot)
				$obj6->addMissionLegRelatedByPilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Member rows

				$key7 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = MemberPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					MemberPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj7 (Member)
				$obj7->addMissionLegRelatedByCopilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Pilot rows

				$key8 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = PilotPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					PilotPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj8 (Pilot)
				$obj8->addMissionLegRelatedByBackupPilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Member rows

				$key9 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = MemberPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					MemberPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj9 (Member)
				$obj9->addMissionLegRelatedByBackupCopilotId($obj1);

			} // if joined row is not null

				// Add objects for joined MissionReport rows

				$key10 = MissionReportPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = MissionReportPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = MissionReportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					MissionReportPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj10 (MissionReport)
				$obj10->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Fbo rows

				$key11 = FboPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = FboPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$omClass = FboPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					FboPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj11 (Fbo)
				$obj11->addMissionLeg($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of MissionLeg objects pre-filled with all related objects except Fbo.
	 *
	 * @param      Criteria  $c
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of MissionLeg objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptFbo(Criteria $c, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$c = clone $c;

		// Set the correct dbName if it has not been overridden
		// $c->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($c->getDbName() == Propel::getDefaultDB()) {
			$c->setDbName(self::DATABASE_NAME);
		}

		MissionLegPeer::addSelectColumns($c);
		$startcol2 = (MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionPeer::addSelectColumns($c);
		$startcol3 = $startcol2 + (MissionPeer::NUM_COLUMNS - MissionPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol4 = $startcol3 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		AirportPeer::addSelectColumns($c);
		$startcol5 = $startcol4 + (AirportPeer::NUM_COLUMNS - AirportPeer::NUM_LAZY_LOAD_COLUMNS);

		CoordinatorPeer::addSelectColumns($c);
		$startcol6 = $startcol5 + (CoordinatorPeer::NUM_COLUMNS - CoordinatorPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol7 = $startcol6 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol8 = $startcol7 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotPeer::addSelectColumns($c);
		$startcol9 = $startcol8 + (PilotPeer::NUM_COLUMNS - PilotPeer::NUM_LAZY_LOAD_COLUMNS);

		MemberPeer::addSelectColumns($c);
		$startcol10 = $startcol9 + (MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS);

		MissionReportPeer::addSelectColumns($c);
		$startcol11 = $startcol10 + (MissionReportPeer::NUM_COLUMNS - MissionReportPeer::NUM_LAZY_LOAD_COLUMNS);

		PilotAircraftPeer::addSelectColumns($c);
		$startcol12 = $startcol11 + (PilotAircraftPeer::NUM_COLUMNS - PilotAircraftPeer::NUM_LAZY_LOAD_COLUMNS);

				$c->addJoin(array(MissionLegPeer::MISSION_ID,), array(MissionPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::FROM_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::TO_AIRPORT_ID,), array(AirportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COORDINATOR_ID,), array(CoordinatorPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::BACKUP_PILOT_ID,), array(PilotPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::BACKUP_COPILOT_ID,), array(MemberPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::MISSION_REPORT_ID,), array(MissionReportPeer::ID,), $join_behavior);
				$c->addJoin(array(MissionLegPeer::PILOT_AIRCRAFT_ID,), array(PilotAircraftPeer::ID,), $join_behavior);

		$stmt = BasePeer::doSelect($c, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = MissionLegPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = MissionLegPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$omClass = MissionLegPeer::getOMClass();

				$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
				$obj1 = new $cls();
				$obj1->hydrate($row);
				MissionLegPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Mission rows

				$key2 = MissionPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = MissionPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$omClass = MissionPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					MissionPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj2 (Mission)
				$obj2->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Airport rows

				$key3 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = AirportPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					AirportPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj3 (Airport)
				$obj3->addMissionLegRelatedByFromAirportId($obj1);

			} // if joined row is not null

				// Add objects for joined Airport rows

				$key4 = AirportPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = AirportPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$omClass = AirportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					AirportPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj4 (Airport)
				$obj4->addMissionLegRelatedByToAirportId($obj1);

			} // if joined row is not null

				// Add objects for joined Coordinator rows

				$key5 = CoordinatorPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = CoordinatorPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$omClass = CoordinatorPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					CoordinatorPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj5 (Coordinator)
				$obj5->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined Pilot rows

				$key6 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = PilotPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					PilotPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj6 (Pilot)
				$obj6->addMissionLegRelatedByPilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Member rows

				$key7 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = MemberPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					MemberPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj7 (Member)
				$obj7->addMissionLegRelatedByCopilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Pilot rows

				$key8 = PilotPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = PilotPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$omClass = PilotPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					PilotPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj8 (Pilot)
				$obj8->addMissionLegRelatedByBackupPilotId($obj1);

			} // if joined row is not null

				// Add objects for joined Member rows

				$key9 = MemberPeer::getPrimaryKeyHashFromRow($row, $startcol9);
				if ($key9 !== null) {
					$obj9 = MemberPeer::getInstanceFromPool($key9);
					if (!$obj9) {
	
						$omClass = MemberPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					MemberPeer::addInstanceToPool($obj9, $key9);
				} // if $obj9 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj9 (Member)
				$obj9->addMissionLegRelatedByBackupCopilotId($obj1);

			} // if joined row is not null

				// Add objects for joined MissionReport rows

				$key10 = MissionReportPeer::getPrimaryKeyHashFromRow($row, $startcol10);
				if ($key10 !== null) {
					$obj10 = MissionReportPeer::getInstanceFromPool($key10);
					if (!$obj10) {
	
						$omClass = MissionReportPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj10 = new $cls();
					$obj10->hydrate($row, $startcol10);
					MissionReportPeer::addInstanceToPool($obj10, $key10);
				} // if $obj10 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj10 (MissionReport)
				$obj10->addMissionLeg($obj1);

			} // if joined row is not null

				// Add objects for joined PilotAircraft rows

				$key11 = PilotAircraftPeer::getPrimaryKeyHashFromRow($row, $startcol11);
				if ($key11 !== null) {
					$obj11 = PilotAircraftPeer::getInstanceFromPool($key11);
					if (!$obj11) {
	
						$omClass = PilotAircraftPeer::getOMClass();


					$cls = substr('.'.$omClass, strrpos('.'.$omClass, '.') + 1);
					$obj11 = new $cls();
					$obj11->hydrate($row, $startcol11);
					PilotAircraftPeer::addInstanceToPool($obj11, $key11);
				} // if $obj11 already loaded

				// Add the $obj1 (MissionLeg) to the collection in $obj11 (PilotAircraft)
				$obj11->addMissionLeg($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


  static public function getUniqueColumnNames()
  {
    return array(array('mission_id', 'leg_number'));
  }
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * This uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass()
	{
		return MissionLegPeer::CLASS_DEFAULT;
	}

	/**
	 * Method perform an INSERT on the database, given a MissionLeg or Criteria object.
	 *
	 * @param      mixed $values Criteria or MissionLeg object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doInsert:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseMissionLegPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from MissionLeg object
		}

		if ($criteria->containsKey(MissionLegPeer::ID) && $criteria->keyContainsValue(MissionLegPeer::ID) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.MissionLegPeer::ID.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		
    foreach (sfMixer::getCallables('BaseMissionLegPeer:doInsert:post') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $values, $con, $pk);
    }

    return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a MissionLeg or Criteria object.
	 *
	 * @param      mixed $values Criteria or MissionLeg object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doUpdate:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseMissionLegPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(MissionLegPeer::ID);
			$selectCriteria->add(MissionLegPeer::ID, $criteria->remove(MissionLegPeer::ID), $comparison);

		} else { // $values is MissionLeg object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);
	

    foreach (sfMixer::getCallables('BaseMissionLegPeer:doUpdate:post') as $callable)
    {
      call_user_func($callable, 'BaseMissionLegPeer', $values, $con, $ret);
    }

    return $ret;
  }

	/**
	 * Method to DELETE all rows from the mission_leg table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(MissionLegPeer::TABLE_NAME, $con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a MissionLeg or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or MissionLeg object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			MissionLegPeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof MissionLeg) {
			// invalidate the cache for this single object
			MissionLegPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(MissionLegPeer::ID, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				MissionLegPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);

			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given MissionLeg object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      MissionLeg $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(MissionLeg $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(MissionLegPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(MissionLegPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		$res =  BasePeer::doValidate(MissionLegPeer::DATABASE_NAME, MissionLegPeer::TABLE_NAME, $columns);
    if ($res !== true) {
        $request = sfContext::getInstance()->getRequest();
        foreach ($res as $failed) {
            $col = MissionLegPeer::translateFieldname($failed->getColumn(), BasePeer::TYPE_COLNAME, BasePeer::TYPE_PHPNAME);
        }
    }

    return $res;
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     MissionLeg
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = MissionLegPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(MissionLegPeer::DATABASE_NAME);
		$criteria->add(MissionLegPeer::ID, $pk);

		$v = MissionLegPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(MissionLegPeer::DATABASE_NAME);
			$criteria->add(MissionLegPeer::ID, $pks, Criteria::IN);
			$objs = MissionLegPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

} // BaseMissionLegPeer

// This is the static code needed to register the MapBuilder for this table with the main Propel class.
//
// NOTE: This static code cannot call methods on the MissionLegPeer class, because it is not defined yet.
// If you need to use overridden methods, you can add this code to the bottom of the MissionLegPeer class:
//
// Propel::getDatabaseMap(MissionLegPeer::DATABASE_NAME)->addTableBuilder(MissionLegPeer::TABLE_NAME, MissionLegPeer::getMapBuilder());
//
// Doing so will effectively overwrite the registration below.

Propel::getDatabaseMap(BaseMissionLegPeer::DATABASE_NAME)->addTableBuilder(BaseMissionLegPeer::TABLE_NAME, BaseMissionLegPeer::getMapBuilder());

