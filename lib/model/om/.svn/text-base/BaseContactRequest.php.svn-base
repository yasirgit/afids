<?php

/**
 * Base class that represents a row from the 'contact_request' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 01/05/11 08:19:41
 *
 * @package    lib.model.om
 */
abstract class BaseContactRequest extends BaseObject  implements Persistent {


  const PEER = 'ContactRequestPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ContactRequestPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the first_name field.
	 * @var        string
	 */
	protected $first_name;

	/**
	 * The value for the last_name field.
	 * @var        string
	 */
	protected $last_name;

	/**
	 * The value for the title field.
	 * @var        string
	 */
	protected $title;

	/**
	 * The value for the address1 field.
	 * @var        string
	 */
	protected $address1;

	/**
	 * The value for the address2 field.
	 * @var        string
	 */
	protected $address2;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the state field.
	 * @var        string
	 */
	protected $state;

	/**
	 * The value for the zipcode field.
	 * @var        string
	 */
	protected $zipcode;

	/**
	 * The value for the country field.
	 * @var        string
	 */
	protected $country;

	/**
	 * The value for the day_phone field.
	 * @var        string
	 */
	protected $day_phone;

	/**
	 * The value for the day_comment field.
	 * @var        string
	 */
	protected $day_comment;

	/**
	 * The value for the eve_phone field.
	 * @var        string
	 */
	protected $eve_phone;

	/**
	 * The value for the eve_comment field.
	 * @var        string
	 */
	protected $eve_comment;

	/**
	 * The value for the fax_phone field.
	 * @var        string
	 */
	protected $fax_phone;

	/**
	 * The value for the fax_comment field.
	 * @var        string
	 */
	protected $fax_comment;

	/**
	 * The value for the mobile_phone field.
	 * @var        string
	 */
	protected $mobile_phone;

	/**
	 * The value for the mobile_comment field.
	 * @var        string
	 */
	protected $mobile_comment;

	/**
	 * The value for the pager_phone field.
	 * @var        string
	 */
	protected $pager_phone;

	/**
	 * The value for the pager_comment field.
	 * @var        string
	 */
	protected $pager_comment;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the ref_source_id field.
	 * @var        int
	 */
	protected $ref_source_id;

	/**
	 * The value for the send_app_format field.
	 * @var        string
	 */
	protected $send_app_format;

	/**
	 * The value for the comment field.
	 * @var        string
	 */
	protected $comment;

	/**
	 * The value for the contact_type_id field.
	 * @var        int
	 */
	protected $contact_type_id;

	/**
	 * The value for the person_id field.
	 * @var        int
	 */
	protected $person_id;

	/**
	 * The value for the processed field.
	 * @var        int
	 */
	protected $processed;

	/**
	 * The value for the letter_to_send field.
	 * @var        int
	 */
	protected $letter_to_send;

	/**
	 * The value for the letter_sent_date field.
	 * @var        string
	 */
	protected $letter_sent_date;

	/**
	 * The value for the request_date field.
	 * @var        string
	 */
	protected $request_date;

	/**
	 * The value for the session_id field.
	 * @var        int
	 */
	protected $session_id;

	/**
	 * The value for the ip_address field.
	 * @var        string
	 */
	protected $ip_address;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseContactRequest object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [first_name] column value.
	 * 
	 * @return     string
	 */
	public function getFirstName()
	{
		return $this->first_name;
	}

	/**
	 * Get the [last_name] column value.
	 * 
	 * @return     string
	 */
	public function getLastName()
	{
		return $this->last_name;
	}

	/**
	 * Get the [title] column value.
	 * 
	 * @return     string
	 */
	public function getTitle()
	{
		return $this->title;
	}

	/**
	 * Get the [address1] column value.
	 * 
	 * @return     string
	 */
	public function getAddress1()
	{
		return $this->address1;
	}

	/**
	 * Get the [address2] column value.
	 * 
	 * @return     string
	 */
	public function getAddress2()
	{
		return $this->address2;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [state] column value.
	 * 
	 * @return     string
	 */
	public function getState()
	{
		return $this->state;
	}

	/**
	 * Get the [zipcode] column value.
	 * 
	 * @return     string
	 */
	public function getZipcode()
	{
		return $this->zipcode;
	}

	/**
	 * Get the [country] column value.
	 * 
	 * @return     string
	 */
	public function getCountry()
	{
		return $this->country;
	}

	/**
	 * Get the [day_phone] column value.
	 * 
	 * @return     string
	 */
	public function getDayPhone()
	{
		return $this->day_phone;
	}

	/**
	 * Get the [day_comment] column value.
	 * 
	 * @return     string
	 */
	public function getDayComment()
	{
		return $this->day_comment;
	}

	/**
	 * Get the [eve_phone] column value.
	 * 
	 * @return     string
	 */
	public function getEvePhone()
	{
		return $this->eve_phone;
	}

	/**
	 * Get the [eve_comment] column value.
	 * 
	 * @return     string
	 */
	public function getEveComment()
	{
		return $this->eve_comment;
	}

	/**
	 * Get the [fax_phone] column value.
	 * 
	 * @return     string
	 */
	public function getFaxPhone()
	{
		return $this->fax_phone;
	}

	/**
	 * Get the [fax_comment] column value.
	 * 
	 * @return     string
	 */
	public function getFaxComment()
	{
		return $this->fax_comment;
	}

	/**
	 * Get the [mobile_phone] column value.
	 * 
	 * @return     string
	 */
	public function getMobilePhone()
	{
		return $this->mobile_phone;
	}

	/**
	 * Get the [mobile_comment] column value.
	 * 
	 * @return     string
	 */
	public function getMobileComment()
	{
		return $this->mobile_comment;
	}

	/**
	 * Get the [pager_phone] column value.
	 * 
	 * @return     string
	 */
	public function getPagerPhone()
	{
		return $this->pager_phone;
	}

	/**
	 * Get the [pager_comment] column value.
	 * 
	 * @return     string
	 */
	public function getPagerComment()
	{
		return $this->pager_comment;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [ref_source_id] column value.
	 * 
	 * @return     int
	 */
	public function getRefSourceId()
	{
		return $this->ref_source_id;
	}

	/**
	 * Get the [send_app_format] column value.
	 * 
	 * @return     string
	 */
	public function getSendAppFormat()
	{
		return $this->send_app_format;
	}

	/**
	 * Get the [comment] column value.
	 * 
	 * @return     string
	 */
	public function getComment()
	{
		return $this->comment;
	}

	/**
	 * Get the [contact_type_id] column value.
	 * 
	 * @return     int
	 */
	public function getContactTypeId()
	{
		return $this->contact_type_id;
	}

	/**
	 * Get the [person_id] column value.
	 * 
	 * @return     int
	 */
	public function getPersonId()
	{
		return $this->person_id;
	}

	/**
	 * Get the [processed] column value.
	 * 
	 * @return     int
	 */
	public function getProcessed()
	{
		return $this->processed;
	}

	/**
	 * Get the [letter_to_send] column value.
	 * 
	 * @return     int
	 */
	public function getLetterToSend()
	{
		return $this->letter_to_send;
	}

	/**
	 * Get the [optionally formatted] temporal [letter_sent_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getLetterSentDate($format = 'Y-m-d H:i:s')
	{
		if ($this->letter_sent_date === null) {
			return null;
		}


		if ($this->letter_sent_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->letter_sent_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->letter_sent_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [request_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRequestDate($format = 'Y-m-d H:i:s')
	{
		if ($this->request_date === null) {
			return null;
		}


		if ($this->request_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->request_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->request_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [session_id] column value.
	 * 
	 * @return     int
	 */
	public function getSessionId()
	{
		return $this->session_id;
	}

	/**
	 * Get the [ip_address] column value.
	 * 
	 * @return     string
	 */
	public function getIpAddress()
	{
		return $this->ip_address;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ContactRequestPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [first_name] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setFirstName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->first_name !== $v) {
			$this->first_name = $v;
			$this->modifiedColumns[] = ContactRequestPeer::FIRST_NAME;
		}

		return $this;
	} // setFirstName()

	/**
	 * Set the value of [last_name] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setLastName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->last_name !== $v) {
			$this->last_name = $v;
			$this->modifiedColumns[] = ContactRequestPeer::LAST_NAME;
		}

		return $this;
	} // setLastName()

	/**
	 * Set the value of [title] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setTitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->title !== $v) {
			$this->title = $v;
			$this->modifiedColumns[] = ContactRequestPeer::TITLE;
		}

		return $this;
	} // setTitle()

	/**
	 * Set the value of [address1] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setAddress1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address1 !== $v) {
			$this->address1 = $v;
			$this->modifiedColumns[] = ContactRequestPeer::ADDRESS1;
		}

		return $this;
	} // setAddress1()

	/**
	 * Set the value of [address2] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setAddress2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address2 !== $v) {
			$this->address2 = $v;
			$this->modifiedColumns[] = ContactRequestPeer::ADDRESS2;
		}

		return $this;
	} // setAddress2()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = ContactRequestPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [state] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->state !== $v) {
			$this->state = $v;
			$this->modifiedColumns[] = ContactRequestPeer::STATE;
		}

		return $this;
	} // setState()

	/**
	 * Set the value of [zipcode] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setZipcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->zipcode !== $v) {
			$this->zipcode = $v;
			$this->modifiedColumns[] = ContactRequestPeer::ZIPCODE;
		}

		return $this;
	} // setZipcode()

	/**
	 * Set the value of [country] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setCountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->country !== $v) {
			$this->country = $v;
			$this->modifiedColumns[] = ContactRequestPeer::COUNTRY;
		}

		return $this;
	} // setCountry()

	/**
	 * Set the value of [day_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setDayPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->day_phone !== $v) {
			$this->day_phone = $v;
			$this->modifiedColumns[] = ContactRequestPeer::DAY_PHONE;
		}

		return $this;
	} // setDayPhone()

	/**
	 * Set the value of [day_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setDayComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->day_comment !== $v) {
			$this->day_comment = $v;
			$this->modifiedColumns[] = ContactRequestPeer::DAY_COMMENT;
		}

		return $this;
	} // setDayComment()

	/**
	 * Set the value of [eve_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setEvePhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->eve_phone !== $v) {
			$this->eve_phone = $v;
			$this->modifiedColumns[] = ContactRequestPeer::EVE_PHONE;
		}

		return $this;
	} // setEvePhone()

	/**
	 * Set the value of [eve_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setEveComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->eve_comment !== $v) {
			$this->eve_comment = $v;
			$this->modifiedColumns[] = ContactRequestPeer::EVE_COMMENT;
		}

		return $this;
	} // setEveComment()

	/**
	 * Set the value of [fax_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setFaxPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax_phone !== $v) {
			$this->fax_phone = $v;
			$this->modifiedColumns[] = ContactRequestPeer::FAX_PHONE;
		}

		return $this;
	} // setFaxPhone()

	/**
	 * Set the value of [fax_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setFaxComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax_comment !== $v) {
			$this->fax_comment = $v;
			$this->modifiedColumns[] = ContactRequestPeer::FAX_COMMENT;
		}

		return $this;
	} // setFaxComment()

	/**
	 * Set the value of [mobile_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setMobilePhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mobile_phone !== $v) {
			$this->mobile_phone = $v;
			$this->modifiedColumns[] = ContactRequestPeer::MOBILE_PHONE;
		}

		return $this;
	} // setMobilePhone()

	/**
	 * Set the value of [mobile_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setMobileComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mobile_comment !== $v) {
			$this->mobile_comment = $v;
			$this->modifiedColumns[] = ContactRequestPeer::MOBILE_COMMENT;
		}

		return $this;
	} // setMobileComment()

	/**
	 * Set the value of [pager_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setPagerPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pager_phone !== $v) {
			$this->pager_phone = $v;
			$this->modifiedColumns[] = ContactRequestPeer::PAGER_PHONE;
		}

		return $this;
	} // setPagerPhone()

	/**
	 * Set the value of [pager_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setPagerComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pager_comment !== $v) {
			$this->pager_comment = $v;
			$this->modifiedColumns[] = ContactRequestPeer::PAGER_COMMENT;
		}

		return $this;
	} // setPagerComment()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = ContactRequestPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [ref_source_id] column.
	 * 
	 * @param      int $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setRefSourceId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ref_source_id !== $v) {
			$this->ref_source_id = $v;
			$this->modifiedColumns[] = ContactRequestPeer::REF_SOURCE_ID;
		}

		return $this;
	} // setRefSourceId()

	/**
	 * Set the value of [send_app_format] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setSendAppFormat($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->send_app_format !== $v) {
			$this->send_app_format = $v;
			$this->modifiedColumns[] = ContactRequestPeer::SEND_APP_FORMAT;
		}

		return $this;
	} // setSendAppFormat()

	/**
	 * Set the value of [comment] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comment !== $v) {
			$this->comment = $v;
			$this->modifiedColumns[] = ContactRequestPeer::COMMENT;
		}

		return $this;
	} // setComment()

	/**
	 * Set the value of [contact_type_id] column.
	 * 
	 * @param      int $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setContactTypeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->contact_type_id !== $v) {
			$this->contact_type_id = $v;
			$this->modifiedColumns[] = ContactRequestPeer::CONTACT_TYPE_ID;
		}

		return $this;
	} // setContactTypeId()

	/**
	 * Set the value of [person_id] column.
	 * 
	 * @param      int $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setPersonId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->person_id !== $v) {
			$this->person_id = $v;
			$this->modifiedColumns[] = ContactRequestPeer::PERSON_ID;
		}

		return $this;
	} // setPersonId()

	/**
	 * Set the value of [processed] column.
	 * 
	 * @param      int $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setProcessed($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->processed !== $v) {
			$this->processed = $v;
			$this->modifiedColumns[] = ContactRequestPeer::PROCESSED;
		}

		return $this;
	} // setProcessed()

	/**
	 * Set the value of [letter_to_send] column.
	 * 
	 * @param      int $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setLetterToSend($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->letter_to_send !== $v) {
			$this->letter_to_send = $v;
			$this->modifiedColumns[] = ContactRequestPeer::LETTER_TO_SEND;
		}

		return $this;
	} // setLetterToSend()

	/**
	 * Sets the value of [letter_sent_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setLetterSentDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->letter_sent_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->letter_sent_date !== null && $tmpDt = new DateTime($this->letter_sent_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->letter_sent_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ContactRequestPeer::LETTER_SENT_DATE;
			}
		} // if either are not null

		return $this;
	} // setLetterSentDate()

	/**
	 * Sets the value of [request_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setRequestDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->request_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->request_date !== null && $tmpDt = new DateTime($this->request_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->request_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = ContactRequestPeer::REQUEST_DATE;
			}
		} // if either are not null

		return $this;
	} // setRequestDate()

	/**
	 * Set the value of [session_id] column.
	 * 
	 * @param      int $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setSessionId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->session_id !== $v) {
			$this->session_id = $v;
			$this->modifiedColumns[] = ContactRequestPeer::SESSION_ID;
		}

		return $this;
	} // setSessionId()

	/**
	 * Set the value of [ip_address] column.
	 * 
	 * @param      string $v new value
	 * @return     ContactRequest The current object (for fluent API support)
	 */
	public function setIpAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ip_address !== $v) {
			$this->ip_address = $v;
			$this->modifiedColumns[] = ContactRequestPeer::IP_ADDRESS;
		}

		return $this;
	} // setIpAddress()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->first_name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->last_name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->title = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->address1 = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->address2 = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->city = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->state = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->zipcode = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->country = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->day_phone = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->day_comment = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->eve_phone = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->eve_comment = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->fax_phone = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->fax_comment = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->mobile_phone = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->mobile_comment = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->pager_phone = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->pager_comment = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->email = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->ref_source_id = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->send_app_format = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->comment = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->contact_type_id = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
			$this->person_id = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
			$this->processed = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->letter_to_send = ($row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->letter_sent_date = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->request_date = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->session_id = ($row[$startcol + 30] !== null) ? (int) $row[$startcol + 30] : null;
			$this->ip_address = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 32; // 32 = ContactRequestPeer::NUM_COLUMNS - ContactRequestPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating ContactRequest object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ContactRequestPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ContactRequestPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseContactRequest:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ContactRequestPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			ContactRequestPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseContactRequest:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseContactRequest:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ContactRequestPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseContactRequest:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			ContactRequestPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ContactRequestPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += ContactRequestPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = ContactRequestPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ContactRequestPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getFirstName();
				break;
			case 2:
				return $this->getLastName();
				break;
			case 3:
				return $this->getTitle();
				break;
			case 4:
				return $this->getAddress1();
				break;
			case 5:
				return $this->getAddress2();
				break;
			case 6:
				return $this->getCity();
				break;
			case 7:
				return $this->getState();
				break;
			case 8:
				return $this->getZipcode();
				break;
			case 9:
				return $this->getCountry();
				break;
			case 10:
				return $this->getDayPhone();
				break;
			case 11:
				return $this->getDayComment();
				break;
			case 12:
				return $this->getEvePhone();
				break;
			case 13:
				return $this->getEveComment();
				break;
			case 14:
				return $this->getFaxPhone();
				break;
			case 15:
				return $this->getFaxComment();
				break;
			case 16:
				return $this->getMobilePhone();
				break;
			case 17:
				return $this->getMobileComment();
				break;
			case 18:
				return $this->getPagerPhone();
				break;
			case 19:
				return $this->getPagerComment();
				break;
			case 20:
				return $this->getEmail();
				break;
			case 21:
				return $this->getRefSourceId();
				break;
			case 22:
				return $this->getSendAppFormat();
				break;
			case 23:
				return $this->getComment();
				break;
			case 24:
				return $this->getContactTypeId();
				break;
			case 25:
				return $this->getPersonId();
				break;
			case 26:
				return $this->getProcessed();
				break;
			case 27:
				return $this->getLetterToSend();
				break;
			case 28:
				return $this->getLetterSentDate();
				break;
			case 29:
				return $this->getRequestDate();
				break;
			case 30:
				return $this->getSessionId();
				break;
			case 31:
				return $this->getIpAddress();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ContactRequestPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getFirstName(),
			$keys[2] => $this->getLastName(),
			$keys[3] => $this->getTitle(),
			$keys[4] => $this->getAddress1(),
			$keys[5] => $this->getAddress2(),
			$keys[6] => $this->getCity(),
			$keys[7] => $this->getState(),
			$keys[8] => $this->getZipcode(),
			$keys[9] => $this->getCountry(),
			$keys[10] => $this->getDayPhone(),
			$keys[11] => $this->getDayComment(),
			$keys[12] => $this->getEvePhone(),
			$keys[13] => $this->getEveComment(),
			$keys[14] => $this->getFaxPhone(),
			$keys[15] => $this->getFaxComment(),
			$keys[16] => $this->getMobilePhone(),
			$keys[17] => $this->getMobileComment(),
			$keys[18] => $this->getPagerPhone(),
			$keys[19] => $this->getPagerComment(),
			$keys[20] => $this->getEmail(),
			$keys[21] => $this->getRefSourceId(),
			$keys[22] => $this->getSendAppFormat(),
			$keys[23] => $this->getComment(),
			$keys[24] => $this->getContactTypeId(),
			$keys[25] => $this->getPersonId(),
			$keys[26] => $this->getProcessed(),
			$keys[27] => $this->getLetterToSend(),
			$keys[28] => $this->getLetterSentDate(),
			$keys[29] => $this->getRequestDate(),
			$keys[30] => $this->getSessionId(),
			$keys[31] => $this->getIpAddress(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ContactRequestPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setFirstName($value);
				break;
			case 2:
				$this->setLastName($value);
				break;
			case 3:
				$this->setTitle($value);
				break;
			case 4:
				$this->setAddress1($value);
				break;
			case 5:
				$this->setAddress2($value);
				break;
			case 6:
				$this->setCity($value);
				break;
			case 7:
				$this->setState($value);
				break;
			case 8:
				$this->setZipcode($value);
				break;
			case 9:
				$this->setCountry($value);
				break;
			case 10:
				$this->setDayPhone($value);
				break;
			case 11:
				$this->setDayComment($value);
				break;
			case 12:
				$this->setEvePhone($value);
				break;
			case 13:
				$this->setEveComment($value);
				break;
			case 14:
				$this->setFaxPhone($value);
				break;
			case 15:
				$this->setFaxComment($value);
				break;
			case 16:
				$this->setMobilePhone($value);
				break;
			case 17:
				$this->setMobileComment($value);
				break;
			case 18:
				$this->setPagerPhone($value);
				break;
			case 19:
				$this->setPagerComment($value);
				break;
			case 20:
				$this->setEmail($value);
				break;
			case 21:
				$this->setRefSourceId($value);
				break;
			case 22:
				$this->setSendAppFormat($value);
				break;
			case 23:
				$this->setComment($value);
				break;
			case 24:
				$this->setContactTypeId($value);
				break;
			case 25:
				$this->setPersonId($value);
				break;
			case 26:
				$this->setProcessed($value);
				break;
			case 27:
				$this->setLetterToSend($value);
				break;
			case 28:
				$this->setLetterSentDate($value);
				break;
			case 29:
				$this->setRequestDate($value);
				break;
			case 30:
				$this->setSessionId($value);
				break;
			case 31:
				$this->setIpAddress($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ContactRequestPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setFirstName($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setLastName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setTitle($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setAddress1($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAddress2($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCity($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setState($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setZipcode($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCountry($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setDayPhone($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setDayComment($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setEvePhone($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setEveComment($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setFaxPhone($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setFaxComment($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setMobilePhone($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setMobileComment($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setPagerPhone($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setPagerComment($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setEmail($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setRefSourceId($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setSendAppFormat($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setComment($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setContactTypeId($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setPersonId($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setProcessed($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setLetterToSend($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setLetterSentDate($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setRequestDate($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setSessionId($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setIpAddress($arr[$keys[31]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ContactRequestPeer::DATABASE_NAME);

		if ($this->isColumnModified(ContactRequestPeer::ID)) $criteria->add(ContactRequestPeer::ID, $this->id);
		if ($this->isColumnModified(ContactRequestPeer::FIRST_NAME)) $criteria->add(ContactRequestPeer::FIRST_NAME, $this->first_name);
		if ($this->isColumnModified(ContactRequestPeer::LAST_NAME)) $criteria->add(ContactRequestPeer::LAST_NAME, $this->last_name);
		if ($this->isColumnModified(ContactRequestPeer::TITLE)) $criteria->add(ContactRequestPeer::TITLE, $this->title);
		if ($this->isColumnModified(ContactRequestPeer::ADDRESS1)) $criteria->add(ContactRequestPeer::ADDRESS1, $this->address1);
		if ($this->isColumnModified(ContactRequestPeer::ADDRESS2)) $criteria->add(ContactRequestPeer::ADDRESS2, $this->address2);
		if ($this->isColumnModified(ContactRequestPeer::CITY)) $criteria->add(ContactRequestPeer::CITY, $this->city);
		if ($this->isColumnModified(ContactRequestPeer::STATE)) $criteria->add(ContactRequestPeer::STATE, $this->state);
		if ($this->isColumnModified(ContactRequestPeer::ZIPCODE)) $criteria->add(ContactRequestPeer::ZIPCODE, $this->zipcode);
		if ($this->isColumnModified(ContactRequestPeer::COUNTRY)) $criteria->add(ContactRequestPeer::COUNTRY, $this->country);
		if ($this->isColumnModified(ContactRequestPeer::DAY_PHONE)) $criteria->add(ContactRequestPeer::DAY_PHONE, $this->day_phone);
		if ($this->isColumnModified(ContactRequestPeer::DAY_COMMENT)) $criteria->add(ContactRequestPeer::DAY_COMMENT, $this->day_comment);
		if ($this->isColumnModified(ContactRequestPeer::EVE_PHONE)) $criteria->add(ContactRequestPeer::EVE_PHONE, $this->eve_phone);
		if ($this->isColumnModified(ContactRequestPeer::EVE_COMMENT)) $criteria->add(ContactRequestPeer::EVE_COMMENT, $this->eve_comment);
		if ($this->isColumnModified(ContactRequestPeer::FAX_PHONE)) $criteria->add(ContactRequestPeer::FAX_PHONE, $this->fax_phone);
		if ($this->isColumnModified(ContactRequestPeer::FAX_COMMENT)) $criteria->add(ContactRequestPeer::FAX_COMMENT, $this->fax_comment);
		if ($this->isColumnModified(ContactRequestPeer::MOBILE_PHONE)) $criteria->add(ContactRequestPeer::MOBILE_PHONE, $this->mobile_phone);
		if ($this->isColumnModified(ContactRequestPeer::MOBILE_COMMENT)) $criteria->add(ContactRequestPeer::MOBILE_COMMENT, $this->mobile_comment);
		if ($this->isColumnModified(ContactRequestPeer::PAGER_PHONE)) $criteria->add(ContactRequestPeer::PAGER_PHONE, $this->pager_phone);
		if ($this->isColumnModified(ContactRequestPeer::PAGER_COMMENT)) $criteria->add(ContactRequestPeer::PAGER_COMMENT, $this->pager_comment);
		if ($this->isColumnModified(ContactRequestPeer::EMAIL)) $criteria->add(ContactRequestPeer::EMAIL, $this->email);
		if ($this->isColumnModified(ContactRequestPeer::REF_SOURCE_ID)) $criteria->add(ContactRequestPeer::REF_SOURCE_ID, $this->ref_source_id);
		if ($this->isColumnModified(ContactRequestPeer::SEND_APP_FORMAT)) $criteria->add(ContactRequestPeer::SEND_APP_FORMAT, $this->send_app_format);
		if ($this->isColumnModified(ContactRequestPeer::COMMENT)) $criteria->add(ContactRequestPeer::COMMENT, $this->comment);
		if ($this->isColumnModified(ContactRequestPeer::CONTACT_TYPE_ID)) $criteria->add(ContactRequestPeer::CONTACT_TYPE_ID, $this->contact_type_id);
		if ($this->isColumnModified(ContactRequestPeer::PERSON_ID)) $criteria->add(ContactRequestPeer::PERSON_ID, $this->person_id);
		if ($this->isColumnModified(ContactRequestPeer::PROCESSED)) $criteria->add(ContactRequestPeer::PROCESSED, $this->processed);
		if ($this->isColumnModified(ContactRequestPeer::LETTER_TO_SEND)) $criteria->add(ContactRequestPeer::LETTER_TO_SEND, $this->letter_to_send);
		if ($this->isColumnModified(ContactRequestPeer::LETTER_SENT_DATE)) $criteria->add(ContactRequestPeer::LETTER_SENT_DATE, $this->letter_sent_date);
		if ($this->isColumnModified(ContactRequestPeer::REQUEST_DATE)) $criteria->add(ContactRequestPeer::REQUEST_DATE, $this->request_date);
		if ($this->isColumnModified(ContactRequestPeer::SESSION_ID)) $criteria->add(ContactRequestPeer::SESSION_ID, $this->session_id);
		if ($this->isColumnModified(ContactRequestPeer::IP_ADDRESS)) $criteria->add(ContactRequestPeer::IP_ADDRESS, $this->ip_address);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ContactRequestPeer::DATABASE_NAME);

		$criteria->add(ContactRequestPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of ContactRequest (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setId($this->id);

		$copyObj->setFirstName($this->first_name);

		$copyObj->setLastName($this->last_name);

		$copyObj->setTitle($this->title);

		$copyObj->setAddress1($this->address1);

		$copyObj->setAddress2($this->address2);

		$copyObj->setCity($this->city);

		$copyObj->setState($this->state);

		$copyObj->setZipcode($this->zipcode);

		$copyObj->setCountry($this->country);

		$copyObj->setDayPhone($this->day_phone);

		$copyObj->setDayComment($this->day_comment);

		$copyObj->setEvePhone($this->eve_phone);

		$copyObj->setEveComment($this->eve_comment);

		$copyObj->setFaxPhone($this->fax_phone);

		$copyObj->setFaxComment($this->fax_comment);

		$copyObj->setMobilePhone($this->mobile_phone);

		$copyObj->setMobileComment($this->mobile_comment);

		$copyObj->setPagerPhone($this->pager_phone);

		$copyObj->setPagerComment($this->pager_comment);

		$copyObj->setEmail($this->email);

		$copyObj->setRefSourceId($this->ref_source_id);

		$copyObj->setSendAppFormat($this->send_app_format);

		$copyObj->setComment($this->comment);

		$copyObj->setContactTypeId($this->contact_type_id);

		$copyObj->setPersonId($this->person_id);

		$copyObj->setProcessed($this->processed);

		$copyObj->setLetterToSend($this->letter_to_send);

		$copyObj->setLetterSentDate($this->letter_sent_date);

		$copyObj->setRequestDate($this->request_date);

		$copyObj->setSessionId($this->session_id);

		$copyObj->setIpAddress($this->ip_address);


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     ContactRequest Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ContactRequestPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ContactRequestPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseContactRequest:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseContactRequest::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseContactRequest
