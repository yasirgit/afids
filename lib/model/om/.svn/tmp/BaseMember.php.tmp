<?php

/**
 * Base class that represents a row from the 'member' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Fri May 20 06:58:24 2011
 *
 * @package    lib.model.om
 */
abstract class BaseMember extends BaseObject  implements Persistent {


  const PEER = 'MemberPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        MemberPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the person_id field.
	 * @var        int
	 */
	protected $person_id;

	/**
	 * The value for the external_id field.
	 * @var        int
	 */
	protected $external_id;

	/**
	 * The value for the wing_id field.
	 * @var        int
	 */
	protected $wing_id;

	/**
	 * The value for the member_class_id field.
	 * @var        int
	 */
	protected $member_class_id;

	/**
	 * The value for the master_member_id field.
	 * @var        int
	 */
	protected $master_member_id;

	/**
	 * The value for the join_date field.
	 * @var        string
	 */
	protected $join_date;

	/**
	 * The value for the active field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $active;

	/**
	 * The value for the inactive_reason field.
	 * @var        string
	 */
	protected $inactive_reason;

	/**
	 * The value for the inactive_comment field.
	 * @var        string
	 */
	protected $inactive_comment;

	/**
	 * The value for the flight_status field.
	 * @var        string
	 */
	protected $flight_status;

	/**
	 * The value for the co_pilot field.
	 * @var        int
	 */
	protected $co_pilot;

	/**
	 * The value for the contact field.
	 * @var        string
	 */
	protected $contact;

	/**
	 * The value for the date_of_birth field.
	 * @var        string
	 */
	protected $date_of_birth;

	/**
	 * The value for the weight field.
	 * @var        int
	 */
	protected $weight;

	/**
	 * The value for the spouse_name field.
	 * @var        string
	 */
	protected $spouse_name;

	/**
	 * The value for the languages field.
	 * @var        string
	 */
	protected $languages;

	/**
	 * The value for the coordinator_notes field.
	 * @var        string
	 */
	protected $coordinator_notes;

	/**
	 * The value for the renewed_date field.
	 * @var        string
	 */
	protected $renewed_date;

	/**
	 * The value for the renewal_date field.
	 * @var        string
	 */
	protected $renewal_date;

	/**
	 * The value for the renewal_notice1 field.
	 * @var        string
	 */
	protected $renewal_notice1;

	/**
	 * The value for the renewal_notice2 field.
	 * @var        string
	 */
	protected $renewal_notice2;

	/**
	 * The value for the renewal_notice3 field.
	 * @var        string
	 */
	protected $renewal_notice3;

	/**
	 * The value for the renewal_notice4 field.
	 * @var        string
	 */
	protected $renewal_notice4;

	/**
	 * The value for the review_done field.
	 * @var        string
	 */
	protected $review_done;

	/**
	 * The value for the ed_new_member_notify field.
	 * @var        string
	 */
	protected $ed_new_member_notify;

	/**
	 * The value for the wn_new_membern_ntify field.
	 * @var        string
	 */
	protected $wn_new_membern_ntify;

	/**
	 * The value for the no_wing_contact_ack field.
	 * @var        int
	 */
	protected $no_wing_contact_ack;

	/**
	 * The value for the hold_harmless_received field.
	 * @var        int
	 */
	protected $hold_harmless_received;

	/**
	 * The value for the member_welcomed field.
	 * @var        string
	 */
	protected $member_welcomed;

	/**
	 * The value for the badge_made field.
	 * @var        string
	 */
	protected $badge_made;

	/**
	 * The value for the notebook_sent field.
	 * @var        string
	 */
	protected $notebook_sent;

	/**
	 * The value for the clothing_sent field.
	 * @var        string
	 */
	protected $clothing_sent;

	/**
	 * The value for the s_mod_member_notify field.
	 * @var        string
	 */
	protected $s_mod_member_notify;

	/**
	 * The value for the w_mod_member_notify field.
	 * @var        string
	 */
	protected $w_mod_member_notify;

	/**
	 * The value for the renew_mark field.
	 * @var        int
	 */
	protected $renew_mark;

	/**
	 * The value for the renewal_sent_date field.
	 * @var        int
	 */
	protected $renewal_sent_date;

	/**
	 * The value for the s_late_renewal_notify field.
	 * @var        int
	 */
	protected $s_late_renewal_notify;

	/**
	 * The value for the w_late_renewal_notify field.
	 * @var        int
	 */
	protected $w_late_renewal_notify;

	/**
	 * The value for the s_inactive_notify field.
	 * @var        int
	 */
	protected $s_inactive_notify;

	/**
	 * The value for the w_inactive_notify field.
	 * @var        int
	 */
	protected $w_inactive_notify;

	/**
	 * The value for the w_not_oriented_notify_date1 field.
	 * @var        string
	 */
	protected $w_not_oriented_notify_date1;

	/**
	 * The value for the w_not_oriented_notify_date2 field.
	 * @var        string
	 */
	protected $w_not_oriented_notify_date2;

	/**
	 * The value for the emergency_contact_name field.
	 * @var        string
	 */
	protected $emergency_contact_name;

	/**
	 * The value for the emergency_contact_phone field.
	 * @var        string
	 */
	protected $emergency_contact_phone;

	/**
	 * The value for the drivers_license_state field.
	 * @var        string
	 */
	protected $drivers_license_state;

	/**
	 * The value for the drivers_license_number field.
	 * @var        string
	 */
	protected $drivers_license_number;

	/**
	 * The value for the height field.
	 * @var        int
	 */
	protected $height;

	/**
	 * The value for the secondary_wing_id field.
	 * @var        int
	 */
	protected $secondary_wing_id;

	/**
	 * @var        Person
	 */
	protected $aPerson;

	/**
	 * @var        Wing
	 */
	protected $aWing;

	/**
	 * @var        MemberClass
	 */
	protected $aMemberClass;

	/**
	 * @var        Member
	 */
	protected $aMemberRelatedByMasterMemberId;

	/**
	 * @var        array Application[] Collection to store aggregation of Application objects.
	 */
	protected $collApplications;

	/**
	 * @var        Criteria The criteria used to select the current contents of collApplications.
	 */
	private $lastApplicationCriteria = null;

	/**
	 * @var        array Availability[] Collection to store aggregation of Availability objects.
	 */
	protected $collAvailabilitys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAvailabilitys.
	 */
	private $lastAvailabilityCriteria = null;

	/**
	 * @var        array Coordinator[] Collection to store aggregation of Coordinator objects.
	 */
	protected $collCoordinators;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCoordinators.
	 */
	private $lastCoordinatorCriteria = null;

	/**
	 * @var        array Member[] Collection to store aggregation of Member objects.
	 */
	protected $collMembersRelatedByMasterMemberId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMembersRelatedByMasterMemberId.
	 */
	private $lastMemberRelatedByMasterMemberIdCriteria = null;

	/**
	 * @var        array MemberWingJob[] Collection to store aggregation of MemberWingJob objects.
	 */
	protected $collMemberWingJobs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMemberWingJobs.
	 */
	private $lastMemberWingJobCriteria = null;

	/**
	 * @var        array MissionLeg[] Collection to store aggregation of MissionLeg objects.
	 */
	protected $collMissionLegsRelatedByCopilotId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMissionLegsRelatedByCopilotId.
	 */
	private $lastMissionLegRelatedByCopilotIdCriteria = null;

	/**
	 * @var        array MissionLeg[] Collection to store aggregation of MissionLeg objects.
	 */
	protected $collMissionLegsRelatedByBackupCopilotId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMissionLegsRelatedByBackupCopilotId.
	 */
	private $lastMissionLegRelatedByBackupCopilotIdCriteria = null;

	/**
	 * @var        array Pilot[] Collection to store aggregation of Pilot objects.
	 */
	protected $collPilots;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPilots.
	 */
	private $lastPilotCriteria = null;

	/**
	 * @var        array PilotAircraft[] Collection to store aggregation of PilotAircraft objects.
	 */
	protected $collPilotAircrafts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPilotAircrafts.
	 */
	private $lastPilotAircraftCriteria = null;

	/**
	 * @var        array PilotDate[] Collection to store aggregation of PilotDate objects.
	 */
	protected $collPilotDates;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPilotDates.
	 */
	private $lastPilotDateCriteria = null;

	/**
	 * @var        array PilotRequest[] Collection to store aggregation of PilotRequest objects.
	 */
	protected $collPilotRequests;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPilotRequests.
	 */
	private $lastPilotRequestCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseMember object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->active = 1;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [person_id] column value.
	 * 
	 * @return     int
	 */
	public function getPersonId()
	{
		return $this->person_id;
	}

	/**
	 * Get the [external_id] column value.
	 * 
	 * @return     int
	 */
	public function getExternalId()
	{
		return $this->external_id;
	}

	/**
	 * Get the [wing_id] column value.
	 * 
	 * @return     int
	 */
	public function getWingId()
	{
		return $this->wing_id;
	}

	/**
	 * Get the [member_class_id] column value.
	 * 
	 * @return     int
	 */
	public function getMemberClassId()
	{
		return $this->member_class_id;
	}

	/**
	 * Get the [master_member_id] column value.
	 * 
	 * @return     int
	 */
	public function getMasterMemberId()
	{
		return $this->master_member_id;
	}

	/**
	 * Get the [optionally formatted] temporal [join_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getJoinDate($format = 'Y-m-d')
	{
		if ($this->join_date === null) {
			return null;
		}


		if ($this->join_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->join_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->join_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [active] column value.
	 * 
	 * @return     int
	 */
	public function getActive()
	{
		return $this->active;
	}

	/**
	 * Get the [inactive_reason] column value.
	 * 
	 * @return     string
	 */
	public function getInactiveReason()
	{
		return $this->inactive_reason;
	}

	/**
	 * Get the [inactive_comment] column value.
	 * 
	 * @return     string
	 */
	public function getInactiveComment()
	{
		return $this->inactive_comment;
	}

	/**
	 * Get the [flight_status] column value.
	 * 
	 * @return     string
	 */
	public function getFlightStatus()
	{
		return $this->flight_status;
	}

	/**
	 * Get the [co_pilot] column value.
	 * 
	 * @return     int
	 */
	public function getCoPilot()
	{
		return $this->co_pilot;
	}

	/**
	 * Get the [contact] column value.
	 * 
	 * @return     string
	 */
	public function getContact()
	{
		return $this->contact;
	}

	/**
	 * Get the [optionally formatted] temporal [date_of_birth] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDateOfBirth($format = 'Y-m-d')
	{
		if ($this->date_of_birth === null) {
			return null;
		}


		if ($this->date_of_birth === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->date_of_birth);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->date_of_birth, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [weight] column value.
	 * 
	 * @return     int
	 */
	public function getWeight()
	{
		return $this->weight;
	}

	/**
	 * Get the [spouse_name] column value.
	 * 
	 * @return     string
	 */
	public function getSpouseName()
	{
		return $this->spouse_name;
	}

	/**
	 * Get the [languages] column value.
	 * 
	 * @return     string
	 */
	public function getLanguages()
	{
		return $this->languages;
	}

	/**
	 * Get the [coordinator_notes] column value.
	 * 
	 * @return     string
	 */
	public function getCoordinatorNotes()
	{
		return $this->coordinator_notes;
	}

	/**
	 * Get the [optionally formatted] temporal [renewed_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRenewedDate($format = 'Y-m-d')
	{
		if ($this->renewed_date === null) {
			return null;
		}


		if ($this->renewed_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->renewed_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->renewed_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [renewal_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRenewalDate($format = 'Y-m-d')
	{
		if ($this->renewal_date === null) {
			return null;
		}


		if ($this->renewal_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->renewal_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->renewal_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [renewal_notice1] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRenewalNotice1($format = 'Y-m-d')
	{
		if ($this->renewal_notice1 === null) {
			return null;
		}


		if ($this->renewal_notice1 === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->renewal_notice1);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->renewal_notice1, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [renewal_notice2] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRenewalNotice2($format = 'Y-m-d')
	{
		if ($this->renewal_notice2 === null) {
			return null;
		}


		if ($this->renewal_notice2 === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->renewal_notice2);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->renewal_notice2, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [renewal_notice3] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRenewalNotice3($format = 'Y-m-d')
	{
		if ($this->renewal_notice3 === null) {
			return null;
		}


		if ($this->renewal_notice3 === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->renewal_notice3);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->renewal_notice3, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [renewal_notice4] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRenewalNotice4($format = 'Y-m-d')
	{
		if ($this->renewal_notice4 === null) {
			return null;
		}


		if ($this->renewal_notice4 === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->renewal_notice4);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->renewal_notice4, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [review_done] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getReviewDone($format = 'Y-m-d')
	{
		if ($this->review_done === null) {
			return null;
		}


		if ($this->review_done === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->review_done);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->review_done, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [ed_new_member_notify] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getEdNewMemberNotify($format = 'Y-m-d')
	{
		if ($this->ed_new_member_notify === null) {
			return null;
		}


		if ($this->ed_new_member_notify === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->ed_new_member_notify);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->ed_new_member_notify, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [wn_new_membern_ntify] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getWnNewMembernNtify($format = 'Y-m-d')
	{
		if ($this->wn_new_membern_ntify === null) {
			return null;
		}


		if ($this->wn_new_membern_ntify === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->wn_new_membern_ntify);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->wn_new_membern_ntify, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [no_wing_contact_ack] column value.
	 * 
	 * @return     int
	 */
	public function getNoWingContactAck()
	{
		return $this->no_wing_contact_ack;
	}

	/**
	 * Get the [hold_harmless_received] column value.
	 * 
	 * @return     int
	 */
	public function getHoldHarmlessReceived()
	{
		return $this->hold_harmless_received;
	}

	/**
	 * Get the [optionally formatted] temporal [member_welcomed] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getMemberWelcomed($format = 'Y-m-d')
	{
		if ($this->member_welcomed === null) {
			return null;
		}


		if ($this->member_welcomed === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->member_welcomed);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->member_welcomed, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [badge_made] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getBadgeMade($format = 'Y-m-d')
	{
		if ($this->badge_made === null) {
			return null;
		}


		if ($this->badge_made === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->badge_made);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->badge_made, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [notebook_sent] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getNotebookSent($format = 'Y-m-d')
	{
		if ($this->notebook_sent === null) {
			return null;
		}


		if ($this->notebook_sent === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->notebook_sent);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->notebook_sent, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [clothing_sent] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getClothingSent($format = 'Y-m-d')
	{
		if ($this->clothing_sent === null) {
			return null;
		}


		if ($this->clothing_sent === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->clothing_sent);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->clothing_sent, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [s_mod_member_notify] column value.
	 * 
	 * @return     string
	 */
	public function getSModMemberNotify()
	{
		return $this->s_mod_member_notify;
	}

	/**
	 * Get the [w_mod_member_notify] column value.
	 * 
	 * @return     string
	 */
	public function getWModMemberNotify()
	{
		return $this->w_mod_member_notify;
	}

	/**
	 * Get the [renew_mark] column value.
	 * 
	 * @return     int
	 */
	public function getRenewMark()
	{
		return $this->renew_mark;
	}

	/**
	 * Get the [renewal_sent_date] column value.
	 * 
	 * @return     int
	 */
	public function getRenewalSentDate()
	{
		return $this->renewal_sent_date;
	}

	/**
	 * Get the [s_late_renewal_notify] column value.
	 * 
	 * @return     int
	 */
	public function getSLateRenewalNotify()
	{
		return $this->s_late_renewal_notify;
	}

	/**
	 * Get the [w_late_renewal_notify] column value.
	 * 
	 * @return     int
	 */
	public function getWLateRenewalNotify()
	{
		return $this->w_late_renewal_notify;
	}

	/**
	 * Get the [s_inactive_notify] column value.
	 * 
	 * @return     int
	 */
	public function getSInactiveNotify()
	{
		return $this->s_inactive_notify;
	}

	/**
	 * Get the [w_inactive_notify] column value.
	 * 
	 * @return     int
	 */
	public function getWInactiveNotify()
	{
		return $this->w_inactive_notify;
	}

	/**
	 * Get the [optionally formatted] temporal [w_not_oriented_notify_date1] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getWNotOrientedNotifyDate1($format = 'Y-m-d')
	{
		if ($this->w_not_oriented_notify_date1 === null) {
			return null;
		}


		if ($this->w_not_oriented_notify_date1 === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->w_not_oriented_notify_date1);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->w_not_oriented_notify_date1, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [w_not_oriented_notify_date2] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getWNotOrientedNotifyDate2($format = 'Y-m-d')
	{
		if ($this->w_not_oriented_notify_date2 === null) {
			return null;
		}


		if ($this->w_not_oriented_notify_date2 === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->w_not_oriented_notify_date2);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->w_not_oriented_notify_date2, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [emergency_contact_name] column value.
	 * 
	 * @return     string
	 */
	public function getEmergencyContactName()
	{
		return $this->emergency_contact_name;
	}

	/**
	 * Get the [emergency_contact_phone] column value.
	 * 
	 * @return     string
	 */
	public function getEmergencyContactPhone()
	{
		return $this->emergency_contact_phone;
	}

	/**
	 * Get the [drivers_license_state] column value.
	 * 
	 * @return     string
	 */
	public function getDriversLicenseState()
	{
		return $this->drivers_license_state;
	}

	/**
	 * Get the [drivers_license_number] column value.
	 * 
	 * @return     string
	 */
	public function getDriversLicenseNumber()
	{
		return $this->drivers_license_number;
	}

	/**
	 * Get the [height] column value.
	 * 
	 * @return     int
	 */
	public function getHeight()
	{
		return $this->height;
	}

	/**
	 * Get the [secondary_wing_id] column value.
	 * 
	 * @return     int
	 */
	public function getSecondaryWingId()
	{
		return $this->secondary_wing_id;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = MemberPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [person_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setPersonId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->person_id !== $v) {
			$this->person_id = $v;
			$this->modifiedColumns[] = MemberPeer::PERSON_ID;
		}

		if ($this->aPerson !== null && $this->aPerson->getId() !== $v) {
			$this->aPerson = null;
		}

		return $this;
	} // setPersonId()

	/**
	 * Set the value of [external_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setExternalId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->external_id !== $v) {
			$this->external_id = $v;
			$this->modifiedColumns[] = MemberPeer::EXTERNAL_ID;
		}

		return $this;
	} // setExternalId()

	/**
	 * Set the value of [wing_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setWingId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->wing_id !== $v) {
			$this->wing_id = $v;
			$this->modifiedColumns[] = MemberPeer::WING_ID;
		}

		if ($this->aWing !== null && $this->aWing->getId() !== $v) {
			$this->aWing = null;
		}

		return $this;
	} // setWingId()

	/**
	 * Set the value of [member_class_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setMemberClassId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->member_class_id !== $v) {
			$this->member_class_id = $v;
			$this->modifiedColumns[] = MemberPeer::MEMBER_CLASS_ID;
		}

		if ($this->aMemberClass !== null && $this->aMemberClass->getId() !== $v) {
			$this->aMemberClass = null;
		}

		return $this;
	} // setMemberClassId()

	/**
	 * Set the value of [master_member_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setMasterMemberId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->master_member_id !== $v) {
			$this->master_member_id = $v;
			$this->modifiedColumns[] = MemberPeer::MASTER_MEMBER_ID;
		}

		if ($this->aMemberRelatedByMasterMemberId !== null && $this->aMemberRelatedByMasterMemberId->getId() !== $v) {
			$this->aMemberRelatedByMasterMemberId = null;
		}

		return $this;
	} // setMasterMemberId()

	/**
	 * Sets the value of [join_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Member The current object (for fluent API support)
	 */
	public function setJoinDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->join_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->join_date !== null && $tmpDt = new DateTime($this->join_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->join_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MemberPeer::JOIN_DATE;
			}
		} // if either are not null

		return $this;
	} // setJoinDate()

	/**
	 * Set the value of [active] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setActive($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->active !== $v || $v === 1) {
			$this->active = $v;
			$this->modifiedColumns[] = MemberPeer::ACTIVE;
		}

		return $this;
	} // setActive()

	/**
	 * Set the value of [inactive_reason] column.
	 * 
	 * @param      string $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setInactiveReason($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->inactive_reason !== $v) {
			$this->inactive_reason = $v;
			$this->modifiedColumns[] = MemberPeer::INACTIVE_REASON;
		}

		return $this;
	} // setInactiveReason()

	/**
	 * Set the value of [inactive_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setInactiveComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->inactive_comment !== $v) {
			$this->inactive_comment = $v;
			$this->modifiedColumns[] = MemberPeer::INACTIVE_COMMENT;
		}

		return $this;
	} // setInactiveComment()

	/**
	 * Set the value of [flight_status] column.
	 * 
	 * @param      string $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setFlightStatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->flight_status !== $v) {
			$this->flight_status = $v;
			$this->modifiedColumns[] = MemberPeer::FLIGHT_STATUS;
		}

		return $this;
	} // setFlightStatus()

	/**
	 * Set the value of [co_pilot] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setCoPilot($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->co_pilot !== $v) {
			$this->co_pilot = $v;
			$this->modifiedColumns[] = MemberPeer::CO_PILOT;
		}

		return $this;
	} // setCoPilot()

	/**
	 * Set the value of [contact] column.
	 * 
	 * @param      string $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setContact($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contact !== $v) {
			$this->contact = $v;
			$this->modifiedColumns[] = MemberPeer::CONTACT;
		}

		return $this;
	} // setContact()

	/**
	 * Sets the value of [date_of_birth] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Member The current object (for fluent API support)
	 */
	public function setDateOfBirth($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->date_of_birth !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->date_of_birth !== null && $tmpDt = new DateTime($this->date_of_birth)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->date_of_birth = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MemberPeer::DATE_OF_BIRTH;
			}
		} // if either are not null

		return $this;
	} // setDateOfBirth()

	/**
	 * Set the value of [weight] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setWeight($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->weight !== $v) {
			$this->weight = $v;
			$this->modifiedColumns[] = MemberPeer::WEIGHT;
		}

		return $this;
	} // setWeight()

	/**
	 * Set the value of [spouse_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setSpouseName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->spouse_name !== $v) {
			$this->spouse_name = $v;
			$this->modifiedColumns[] = MemberPeer::SPOUSE_NAME;
		}

		return $this;
	} // setSpouseName()

	/**
	 * Set the value of [languages] column.
	 * 
	 * @param      string $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setLanguages($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->languages !== $v) {
			$this->languages = $v;
			$this->modifiedColumns[] = MemberPeer::LANGUAGES;
		}

		return $this;
	} // setLanguages()

	/**
	 * Set the value of [coordinator_notes] column.
	 * 
	 * @param      string $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setCoordinatorNotes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->coordinator_notes !== $v) {
			$this->coordinator_notes = $v;
			$this->modifiedColumns[] = MemberPeer::COORDINATOR_NOTES;
		}

		return $this;
	} // setCoordinatorNotes()

	/**
	 * Sets the value of [renewed_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Member The current object (for fluent API support)
	 */
	public function setRenewedDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->renewed_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->renewed_date !== null && $tmpDt = new DateTime($this->renewed_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->renewed_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MemberPeer::RENEWED_DATE;
			}
		} // if either are not null

		return $this;
	} // setRenewedDate()

	/**
	 * Sets the value of [renewal_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Member The current object (for fluent API support)
	 */
	public function setRenewalDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->renewal_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->renewal_date !== null && $tmpDt = new DateTime($this->renewal_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->renewal_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MemberPeer::RENEWAL_DATE;
			}
		} // if either are not null

		return $this;
	} // setRenewalDate()

	/**
	 * Sets the value of [renewal_notice1] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Member The current object (for fluent API support)
	 */
	public function setRenewalNotice1($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->renewal_notice1 !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->renewal_notice1 !== null && $tmpDt = new DateTime($this->renewal_notice1)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->renewal_notice1 = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MemberPeer::RENEWAL_NOTICE1;
			}
		} // if either are not null

		return $this;
	} // setRenewalNotice1()

	/**
	 * Sets the value of [renewal_notice2] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Member The current object (for fluent API support)
	 */
	public function setRenewalNotice2($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->renewal_notice2 !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->renewal_notice2 !== null && $tmpDt = new DateTime($this->renewal_notice2)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->renewal_notice2 = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MemberPeer::RENEWAL_NOTICE2;
			}
		} // if either are not null

		return $this;
	} // setRenewalNotice2()

	/**
	 * Sets the value of [renewal_notice3] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Member The current object (for fluent API support)
	 */
	public function setRenewalNotice3($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->renewal_notice3 !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->renewal_notice3 !== null && $tmpDt = new DateTime($this->renewal_notice3)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->renewal_notice3 = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MemberPeer::RENEWAL_NOTICE3;
			}
		} // if either are not null

		return $this;
	} // setRenewalNotice3()

	/**
	 * Sets the value of [renewal_notice4] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Member The current object (for fluent API support)
	 */
	public function setRenewalNotice4($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->renewal_notice4 !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->renewal_notice4 !== null && $tmpDt = new DateTime($this->renewal_notice4)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->renewal_notice4 = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MemberPeer::RENEWAL_NOTICE4;
			}
		} // if either are not null

		return $this;
	} // setRenewalNotice4()

	/**
	 * Sets the value of [review_done] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Member The current object (for fluent API support)
	 */
	public function setReviewDone($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->review_done !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->review_done !== null && $tmpDt = new DateTime($this->review_done)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->review_done = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MemberPeer::REVIEW_DONE;
			}
		} // if either are not null

		return $this;
	} // setReviewDone()

	/**
	 * Sets the value of [ed_new_member_notify] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Member The current object (for fluent API support)
	 */
	public function setEdNewMemberNotify($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->ed_new_member_notify !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->ed_new_member_notify !== null && $tmpDt = new DateTime($this->ed_new_member_notify)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->ed_new_member_notify = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MemberPeer::ED_NEW_MEMBER_NOTIFY;
			}
		} // if either are not null

		return $this;
	} // setEdNewMemberNotify()

	/**
	 * Sets the value of [wn_new_membern_ntify] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Member The current object (for fluent API support)
	 */
	public function setWnNewMembernNtify($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->wn_new_membern_ntify !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->wn_new_membern_ntify !== null && $tmpDt = new DateTime($this->wn_new_membern_ntify)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->wn_new_membern_ntify = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MemberPeer::WN_NEW_MEMBERN_NTIFY;
			}
		} // if either are not null

		return $this;
	} // setWnNewMembernNtify()

	/**
	 * Set the value of [no_wing_contact_ack] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setNoWingContactAck($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->no_wing_contact_ack !== $v) {
			$this->no_wing_contact_ack = $v;
			$this->modifiedColumns[] = MemberPeer::NO_WING_CONTACT_ACK;
		}

		return $this;
	} // setNoWingContactAck()

	/**
	 * Set the value of [hold_harmless_received] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setHoldHarmlessReceived($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->hold_harmless_received !== $v) {
			$this->hold_harmless_received = $v;
			$this->modifiedColumns[] = MemberPeer::HOLD_HARMLESS_RECEIVED;
		}

		return $this;
	} // setHoldHarmlessReceived()

	/**
	 * Sets the value of [member_welcomed] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Member The current object (for fluent API support)
	 */
	public function setMemberWelcomed($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->member_welcomed !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->member_welcomed !== null && $tmpDt = new DateTime($this->member_welcomed)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->member_welcomed = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MemberPeer::MEMBER_WELCOMED;
			}
		} // if either are not null

		return $this;
	} // setMemberWelcomed()

	/**
	 * Sets the value of [badge_made] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Member The current object (for fluent API support)
	 */
	public function setBadgeMade($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->badge_made !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->badge_made !== null && $tmpDt = new DateTime($this->badge_made)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->badge_made = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MemberPeer::BADGE_MADE;
			}
		} // if either are not null

		return $this;
	} // setBadgeMade()

	/**
	 * Sets the value of [notebook_sent] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Member The current object (for fluent API support)
	 */
	public function setNotebookSent($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->notebook_sent !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->notebook_sent !== null && $tmpDt = new DateTime($this->notebook_sent)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->notebook_sent = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MemberPeer::NOTEBOOK_SENT;
			}
		} // if either are not null

		return $this;
	} // setNotebookSent()

	/**
	 * Sets the value of [clothing_sent] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Member The current object (for fluent API support)
	 */
	public function setClothingSent($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->clothing_sent !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->clothing_sent !== null && $tmpDt = new DateTime($this->clothing_sent)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->clothing_sent = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MemberPeer::CLOTHING_SENT;
			}
		} // if either are not null

		return $this;
	} // setClothingSent()

	/**
	 * Set the value of [s_mod_member_notify] column.
	 * 
	 * @param      string $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setSModMemberNotify($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->s_mod_member_notify !== $v) {
			$this->s_mod_member_notify = $v;
			$this->modifiedColumns[] = MemberPeer::S_MOD_MEMBER_NOTIFY;
		}

		return $this;
	} // setSModMemberNotify()

	/**
	 * Set the value of [w_mod_member_notify] column.
	 * 
	 * @param      string $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setWModMemberNotify($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->w_mod_member_notify !== $v) {
			$this->w_mod_member_notify = $v;
			$this->modifiedColumns[] = MemberPeer::W_MOD_MEMBER_NOTIFY;
		}

		return $this;
	} // setWModMemberNotify()

	/**
	 * Set the value of [renew_mark] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setRenewMark($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->renew_mark !== $v) {
			$this->renew_mark = $v;
			$this->modifiedColumns[] = MemberPeer::RENEW_MARK;
		}

		return $this;
	} // setRenewMark()

	/**
	 * Set the value of [renewal_sent_date] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setRenewalSentDate($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->renewal_sent_date !== $v) {
			$this->renewal_sent_date = $v;
			$this->modifiedColumns[] = MemberPeer::RENEWAL_SENT_DATE;
		}

		return $this;
	} // setRenewalSentDate()

	/**
	 * Set the value of [s_late_renewal_notify] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setSLateRenewalNotify($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->s_late_renewal_notify !== $v) {
			$this->s_late_renewal_notify = $v;
			$this->modifiedColumns[] = MemberPeer::S_LATE_RENEWAL_NOTIFY;
		}

		return $this;
	} // setSLateRenewalNotify()

	/**
	 * Set the value of [w_late_renewal_notify] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setWLateRenewalNotify($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->w_late_renewal_notify !== $v) {
			$this->w_late_renewal_notify = $v;
			$this->modifiedColumns[] = MemberPeer::W_LATE_RENEWAL_NOTIFY;
		}

		return $this;
	} // setWLateRenewalNotify()

	/**
	 * Set the value of [s_inactive_notify] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setSInactiveNotify($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->s_inactive_notify !== $v) {
			$this->s_inactive_notify = $v;
			$this->modifiedColumns[] = MemberPeer::S_INACTIVE_NOTIFY;
		}

		return $this;
	} // setSInactiveNotify()

	/**
	 * Set the value of [w_inactive_notify] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setWInactiveNotify($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->w_inactive_notify !== $v) {
			$this->w_inactive_notify = $v;
			$this->modifiedColumns[] = MemberPeer::W_INACTIVE_NOTIFY;
		}

		return $this;
	} // setWInactiveNotify()

	/**
	 * Sets the value of [w_not_oriented_notify_date1] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Member The current object (for fluent API support)
	 */
	public function setWNotOrientedNotifyDate1($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->w_not_oriented_notify_date1 !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->w_not_oriented_notify_date1 !== null && $tmpDt = new DateTime($this->w_not_oriented_notify_date1)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->w_not_oriented_notify_date1 = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MemberPeer::W_NOT_ORIENTED_NOTIFY_DATE1;
			}
		} // if either are not null

		return $this;
	} // setWNotOrientedNotifyDate1()

	/**
	 * Sets the value of [w_not_oriented_notify_date2] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Member The current object (for fluent API support)
	 */
	public function setWNotOrientedNotifyDate2($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->w_not_oriented_notify_date2 !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->w_not_oriented_notify_date2 !== null && $tmpDt = new DateTime($this->w_not_oriented_notify_date2)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->w_not_oriented_notify_date2 = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = MemberPeer::W_NOT_ORIENTED_NOTIFY_DATE2;
			}
		} // if either are not null

		return $this;
	} // setWNotOrientedNotifyDate2()

	/**
	 * Set the value of [emergency_contact_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setEmergencyContactName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emergency_contact_name !== $v) {
			$this->emergency_contact_name = $v;
			$this->modifiedColumns[] = MemberPeer::EMERGENCY_CONTACT_NAME;
		}

		return $this;
	} // setEmergencyContactName()

	/**
	 * Set the value of [emergency_contact_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setEmergencyContactPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->emergency_contact_phone !== $v) {
			$this->emergency_contact_phone = $v;
			$this->modifiedColumns[] = MemberPeer::EMERGENCY_CONTACT_PHONE;
		}

		return $this;
	} // setEmergencyContactPhone()

	/**
	 * Set the value of [drivers_license_state] column.
	 * 
	 * @param      string $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setDriversLicenseState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->drivers_license_state !== $v) {
			$this->drivers_license_state = $v;
			$this->modifiedColumns[] = MemberPeer::DRIVERS_LICENSE_STATE;
		}

		return $this;
	} // setDriversLicenseState()

	/**
	 * Set the value of [drivers_license_number] column.
	 * 
	 * @param      string $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setDriversLicenseNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->drivers_license_number !== $v) {
			$this->drivers_license_number = $v;
			$this->modifiedColumns[] = MemberPeer::DRIVERS_LICENSE_NUMBER;
		}

		return $this;
	} // setDriversLicenseNumber()

	/**
	 * Set the value of [height] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setHeight($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->height !== $v) {
			$this->height = $v;
			$this->modifiedColumns[] = MemberPeer::HEIGHT;
		}

		return $this;
	} // setHeight()

	/**
	 * Set the value of [secondary_wing_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Member The current object (for fluent API support)
	 */
	public function setSecondaryWingId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->secondary_wing_id !== $v) {
			$this->secondary_wing_id = $v;
			$this->modifiedColumns[] = MemberPeer::SECONDARY_WING_ID;
		}

		return $this;
	} // setSecondaryWingId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(MemberPeer::ACTIVE))) {
				return false;
			}

			if ($this->active !== 1) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->person_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->external_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->wing_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->member_class_id = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->master_member_id = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->join_date = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->active = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->inactive_reason = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->inactive_comment = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->flight_status = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->co_pilot = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->contact = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->date_of_birth = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->weight = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->spouse_name = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->languages = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->coordinator_notes = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->renewed_date = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->renewal_date = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->renewal_notice1 = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->renewal_notice2 = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->renewal_notice3 = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->renewal_notice4 = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->review_done = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->ed_new_member_notify = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->wn_new_membern_ntify = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->no_wing_contact_ack = ($row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->hold_harmless_received = ($row[$startcol + 28] !== null) ? (int) $row[$startcol + 28] : null;
			$this->member_welcomed = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->badge_made = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->notebook_sent = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->clothing_sent = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->s_mod_member_notify = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->w_mod_member_notify = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->renew_mark = ($row[$startcol + 35] !== null) ? (int) $row[$startcol + 35] : null;
			$this->renewal_sent_date = ($row[$startcol + 36] !== null) ? (int) $row[$startcol + 36] : null;
			$this->s_late_renewal_notify = ($row[$startcol + 37] !== null) ? (int) $row[$startcol + 37] : null;
			$this->w_late_renewal_notify = ($row[$startcol + 38] !== null) ? (int) $row[$startcol + 38] : null;
			$this->s_inactive_notify = ($row[$startcol + 39] !== null) ? (int) $row[$startcol + 39] : null;
			$this->w_inactive_notify = ($row[$startcol + 40] !== null) ? (int) $row[$startcol + 40] : null;
			$this->w_not_oriented_notify_date1 = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->w_not_oriented_notify_date2 = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
			$this->emergency_contact_name = ($row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
			$this->emergency_contact_phone = ($row[$startcol + 44] !== null) ? (string) $row[$startcol + 44] : null;
			$this->drivers_license_state = ($row[$startcol + 45] !== null) ? (string) $row[$startcol + 45] : null;
			$this->drivers_license_number = ($row[$startcol + 46] !== null) ? (string) $row[$startcol + 46] : null;
			$this->height = ($row[$startcol + 47] !== null) ? (int) $row[$startcol + 47] : null;
			$this->secondary_wing_id = ($row[$startcol + 48] !== null) ? (int) $row[$startcol + 48] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 49; // 49 = MemberPeer::NUM_COLUMNS - MemberPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Member object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aPerson !== null && $this->person_id !== $this->aPerson->getId()) {
			$this->aPerson = null;
		}
		if ($this->aWing !== null && $this->wing_id !== $this->aWing->getId()) {
			$this->aWing = null;
		}
		if ($this->aMemberClass !== null && $this->member_class_id !== $this->aMemberClass->getId()) {
			$this->aMemberClass = null;
		}
		if ($this->aMemberRelatedByMasterMemberId !== null && $this->master_member_id !== $this->aMemberRelatedByMasterMemberId->getId()) {
			$this->aMemberRelatedByMasterMemberId = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = MemberPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aPerson = null;
			$this->aWing = null;
			$this->aMemberClass = null;
			$this->aMemberRelatedByMasterMemberId = null;
			$this->collApplications = null;
			$this->lastApplicationCriteria = null;

			$this->collAvailabilitys = null;
			$this->lastAvailabilityCriteria = null;

			$this->collCoordinators = null;
			$this->lastCoordinatorCriteria = null;

			$this->collMembersRelatedByMasterMemberId = null;
			$this->lastMemberRelatedByMasterMemberIdCriteria = null;

			$this->collMemberWingJobs = null;
			$this->lastMemberWingJobCriteria = null;

			$this->collMissionLegsRelatedByCopilotId = null;
			$this->lastMissionLegRelatedByCopilotIdCriteria = null;

			$this->collMissionLegsRelatedByBackupCopilotId = null;
			$this->lastMissionLegRelatedByBackupCopilotIdCriteria = null;

			$this->collPilots = null;
			$this->lastPilotCriteria = null;

			$this->collPilotAircrafts = null;
			$this->lastPilotAircraftCriteria = null;

			$this->collPilotDates = null;
			$this->lastPilotDateCriteria = null;

			$this->collPilotRequests = null;
			$this->lastPilotRequestCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMember:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			MemberPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseMember:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMember:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MemberPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseMember:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			MemberPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aPerson !== null) {
				if ($this->aPerson->isModified() || $this->aPerson->isNew()) {
					$affectedRows += $this->aPerson->save($con);
				}
				$this->setPerson($this->aPerson);
			}

			if ($this->aWing !== null) {
				if ($this->aWing->isModified() || $this->aWing->isNew()) {
					$affectedRows += $this->aWing->save($con);
				}
				$this->setWing($this->aWing);
			}

			if ($this->aMemberClass !== null) {
				if ($this->aMemberClass->isModified() || $this->aMemberClass->isNew()) {
					$affectedRows += $this->aMemberClass->save($con);
				}
				$this->setMemberClass($this->aMemberClass);
			}

			if ($this->aMemberRelatedByMasterMemberId !== null) {
				if ($this->aMemberRelatedByMasterMemberId->isModified() || $this->aMemberRelatedByMasterMemberId->isNew()) {
					$affectedRows += $this->aMemberRelatedByMasterMemberId->save($con);
				}
				$this->setMemberRelatedByMasterMemberId($this->aMemberRelatedByMasterMemberId);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = MemberPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = MemberPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += MemberPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collApplications !== null) {
				foreach ($this->collApplications as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAvailabilitys !== null) {
				foreach ($this->collAvailabilitys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCoordinators !== null) {
				foreach ($this->collCoordinators as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMembersRelatedByMasterMemberId !== null) {
				foreach ($this->collMembersRelatedByMasterMemberId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMemberWingJobs !== null) {
				foreach ($this->collMemberWingJobs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMissionLegsRelatedByCopilotId !== null) {
				foreach ($this->collMissionLegsRelatedByCopilotId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMissionLegsRelatedByBackupCopilotId !== null) {
				foreach ($this->collMissionLegsRelatedByBackupCopilotId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPilots !== null) {
				foreach ($this->collPilots as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPilotAircrafts !== null) {
				foreach ($this->collPilotAircrafts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPilotDates !== null) {
				foreach ($this->collPilotDates as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPilotRequests !== null) {
				foreach ($this->collPilotRequests as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aPerson !== null) {
				if (!$this->aPerson->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPerson->getValidationFailures());
				}
			}

			if ($this->aWing !== null) {
				if (!$this->aWing->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aWing->getValidationFailures());
				}
			}

			if ($this->aMemberClass !== null) {
				if (!$this->aMemberClass->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMemberClass->getValidationFailures());
				}
			}

			if ($this->aMemberRelatedByMasterMemberId !== null) {
				if (!$this->aMemberRelatedByMasterMemberId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMemberRelatedByMasterMemberId->getValidationFailures());
				}
			}


			if (($retval = MemberPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collApplications !== null) {
					foreach ($this->collApplications as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAvailabilitys !== null) {
					foreach ($this->collAvailabilitys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCoordinators !== null) {
					foreach ($this->collCoordinators as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMembersRelatedByMasterMemberId !== null) {
					foreach ($this->collMembersRelatedByMasterMemberId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMemberWingJobs !== null) {
					foreach ($this->collMemberWingJobs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMissionLegsRelatedByCopilotId !== null) {
					foreach ($this->collMissionLegsRelatedByCopilotId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMissionLegsRelatedByBackupCopilotId !== null) {
					foreach ($this->collMissionLegsRelatedByBackupCopilotId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPilots !== null) {
					foreach ($this->collPilots as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPilotAircrafts !== null) {
					foreach ($this->collPilotAircrafts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPilotDates !== null) {
					foreach ($this->collPilotDates as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPilotRequests !== null) {
					foreach ($this->collPilotRequests as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MemberPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getPersonId();
				break;
			case 2:
				return $this->getExternalId();
				break;
			case 3:
				return $this->getWingId();
				break;
			case 4:
				return $this->getMemberClassId();
				break;
			case 5:
				return $this->getMasterMemberId();
				break;
			case 6:
				return $this->getJoinDate();
				break;
			case 7:
				return $this->getActive();
				break;
			case 8:
				return $this->getInactiveReason();
				break;
			case 9:
				return $this->getInactiveComment();
				break;
			case 10:
				return $this->getFlightStatus();
				break;
			case 11:
				return $this->getCoPilot();
				break;
			case 12:
				return $this->getContact();
				break;
			case 13:
				return $this->getDateOfBirth();
				break;
			case 14:
				return $this->getWeight();
				break;
			case 15:
				return $this->getSpouseName();
				break;
			case 16:
				return $this->getLanguages();
				break;
			case 17:
				return $this->getCoordinatorNotes();
				break;
			case 18:
				return $this->getRenewedDate();
				break;
			case 19:
				return $this->getRenewalDate();
				break;
			case 20:
				return $this->getRenewalNotice1();
				break;
			case 21:
				return $this->getRenewalNotice2();
				break;
			case 22:
				return $this->getRenewalNotice3();
				break;
			case 23:
				return $this->getRenewalNotice4();
				break;
			case 24:
				return $this->getReviewDone();
				break;
			case 25:
				return $this->getEdNewMemberNotify();
				break;
			case 26:
				return $this->getWnNewMembernNtify();
				break;
			case 27:
				return $this->getNoWingContactAck();
				break;
			case 28:
				return $this->getHoldHarmlessReceived();
				break;
			case 29:
				return $this->getMemberWelcomed();
				break;
			case 30:
				return $this->getBadgeMade();
				break;
			case 31:
				return $this->getNotebookSent();
				break;
			case 32:
				return $this->getClothingSent();
				break;
			case 33:
				return $this->getSModMemberNotify();
				break;
			case 34:
				return $this->getWModMemberNotify();
				break;
			case 35:
				return $this->getRenewMark();
				break;
			case 36:
				return $this->getRenewalSentDate();
				break;
			case 37:
				return $this->getSLateRenewalNotify();
				break;
			case 38:
				return $this->getWLateRenewalNotify();
				break;
			case 39:
				return $this->getSInactiveNotify();
				break;
			case 40:
				return $this->getWInactiveNotify();
				break;
			case 41:
				return $this->getWNotOrientedNotifyDate1();
				break;
			case 42:
				return $this->getWNotOrientedNotifyDate2();
				break;
			case 43:
				return $this->getEmergencyContactName();
				break;
			case 44:
				return $this->getEmergencyContactPhone();
				break;
			case 45:
				return $this->getDriversLicenseState();
				break;
			case 46:
				return $this->getDriversLicenseNumber();
				break;
			case 47:
				return $this->getHeight();
				break;
			case 48:
				return $this->getSecondaryWingId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = MemberPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getPersonId(),
			$keys[2] => $this->getExternalId(),
			$keys[3] => $this->getWingId(),
			$keys[4] => $this->getMemberClassId(),
			$keys[5] => $this->getMasterMemberId(),
			$keys[6] => $this->getJoinDate(),
			$keys[7] => $this->getActive(),
			$keys[8] => $this->getInactiveReason(),
			$keys[9] => $this->getInactiveComment(),
			$keys[10] => $this->getFlightStatus(),
			$keys[11] => $this->getCoPilot(),
			$keys[12] => $this->getContact(),
			$keys[13] => $this->getDateOfBirth(),
			$keys[14] => $this->getWeight(),
			$keys[15] => $this->getSpouseName(),
			$keys[16] => $this->getLanguages(),
			$keys[17] => $this->getCoordinatorNotes(),
			$keys[18] => $this->getRenewedDate(),
			$keys[19] => $this->getRenewalDate(),
			$keys[20] => $this->getRenewalNotice1(),
			$keys[21] => $this->getRenewalNotice2(),
			$keys[22] => $this->getRenewalNotice3(),
			$keys[23] => $this->getRenewalNotice4(),
			$keys[24] => $this->getReviewDone(),
			$keys[25] => $this->getEdNewMemberNotify(),
			$keys[26] => $this->getWnNewMembernNtify(),
			$keys[27] => $this->getNoWingContactAck(),
			$keys[28] => $this->getHoldHarmlessReceived(),
			$keys[29] => $this->getMemberWelcomed(),
			$keys[30] => $this->getBadgeMade(),
			$keys[31] => $this->getNotebookSent(),
			$keys[32] => $this->getClothingSent(),
			$keys[33] => $this->getSModMemberNotify(),
			$keys[34] => $this->getWModMemberNotify(),
			$keys[35] => $this->getRenewMark(),
			$keys[36] => $this->getRenewalSentDate(),
			$keys[37] => $this->getSLateRenewalNotify(),
			$keys[38] => $this->getWLateRenewalNotify(),
			$keys[39] => $this->getSInactiveNotify(),
			$keys[40] => $this->getWInactiveNotify(),
			$keys[41] => $this->getWNotOrientedNotifyDate1(),
			$keys[42] => $this->getWNotOrientedNotifyDate2(),
			$keys[43] => $this->getEmergencyContactName(),
			$keys[44] => $this->getEmergencyContactPhone(),
			$keys[45] => $this->getDriversLicenseState(),
			$keys[46] => $this->getDriversLicenseNumber(),
			$keys[47] => $this->getHeight(),
			$keys[48] => $this->getSecondaryWingId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MemberPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setPersonId($value);
				break;
			case 2:
				$this->setExternalId($value);
				break;
			case 3:
				$this->setWingId($value);
				break;
			case 4:
				$this->setMemberClassId($value);
				break;
			case 5:
				$this->setMasterMemberId($value);
				break;
			case 6:
				$this->setJoinDate($value);
				break;
			case 7:
				$this->setActive($value);
				break;
			case 8:
				$this->setInactiveReason($value);
				break;
			case 9:
				$this->setInactiveComment($value);
				break;
			case 10:
				$this->setFlightStatus($value);
				break;
			case 11:
				$this->setCoPilot($value);
				break;
			case 12:
				$this->setContact($value);
				break;
			case 13:
				$this->setDateOfBirth($value);
				break;
			case 14:
				$this->setWeight($value);
				break;
			case 15:
				$this->setSpouseName($value);
				break;
			case 16:
				$this->setLanguages($value);
				break;
			case 17:
				$this->setCoordinatorNotes($value);
				break;
			case 18:
				$this->setRenewedDate($value);
				break;
			case 19:
				$this->setRenewalDate($value);
				break;
			case 20:
				$this->setRenewalNotice1($value);
				break;
			case 21:
				$this->setRenewalNotice2($value);
				break;
			case 22:
				$this->setRenewalNotice3($value);
				break;
			case 23:
				$this->setRenewalNotice4($value);
				break;
			case 24:
				$this->setReviewDone($value);
				break;
			case 25:
				$this->setEdNewMemberNotify($value);
				break;
			case 26:
				$this->setWnNewMembernNtify($value);
				break;
			case 27:
				$this->setNoWingContactAck($value);
				break;
			case 28:
				$this->setHoldHarmlessReceived($value);
				break;
			case 29:
				$this->setMemberWelcomed($value);
				break;
			case 30:
				$this->setBadgeMade($value);
				break;
			case 31:
				$this->setNotebookSent($value);
				break;
			case 32:
				$this->setClothingSent($value);
				break;
			case 33:
				$this->setSModMemberNotify($value);
				break;
			case 34:
				$this->setWModMemberNotify($value);
				break;
			case 35:
				$this->setRenewMark($value);
				break;
			case 36:
				$this->setRenewalSentDate($value);
				break;
			case 37:
				$this->setSLateRenewalNotify($value);
				break;
			case 38:
				$this->setWLateRenewalNotify($value);
				break;
			case 39:
				$this->setSInactiveNotify($value);
				break;
			case 40:
				$this->setWInactiveNotify($value);
				break;
			case 41:
				$this->setWNotOrientedNotifyDate1($value);
				break;
			case 42:
				$this->setWNotOrientedNotifyDate2($value);
				break;
			case 43:
				$this->setEmergencyContactName($value);
				break;
			case 44:
				$this->setEmergencyContactPhone($value);
				break;
			case 45:
				$this->setDriversLicenseState($value);
				break;
			case 46:
				$this->setDriversLicenseNumber($value);
				break;
			case 47:
				$this->setHeight($value);
				break;
			case 48:
				$this->setSecondaryWingId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = MemberPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setPersonId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setExternalId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setWingId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setMemberClassId($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setMasterMemberId($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setJoinDate($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setActive($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setInactiveReason($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setInactiveComment($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setFlightStatus($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCoPilot($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setContact($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setDateOfBirth($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setWeight($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setSpouseName($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setLanguages($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCoordinatorNotes($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setRenewedDate($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setRenewalDate($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setRenewalNotice1($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setRenewalNotice2($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setRenewalNotice3($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setRenewalNotice4($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setReviewDone($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setEdNewMemberNotify($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setWnNewMembernNtify($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setNoWingContactAck($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setHoldHarmlessReceived($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setMemberWelcomed($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setBadgeMade($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setNotebookSent($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setClothingSent($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setSModMemberNotify($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setWModMemberNotify($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setRenewMark($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setRenewalSentDate($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setSLateRenewalNotify($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setWLateRenewalNotify($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setSInactiveNotify($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setWInactiveNotify($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setWNotOrientedNotifyDate1($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setWNotOrientedNotifyDate2($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setEmergencyContactName($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setEmergencyContactPhone($arr[$keys[44]]);
		if (array_key_exists($keys[45], $arr)) $this->setDriversLicenseState($arr[$keys[45]]);
		if (array_key_exists($keys[46], $arr)) $this->setDriversLicenseNumber($arr[$keys[46]]);
		if (array_key_exists($keys[47], $arr)) $this->setHeight($arr[$keys[47]]);
		if (array_key_exists($keys[48], $arr)) $this->setSecondaryWingId($arr[$keys[48]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(MemberPeer::DATABASE_NAME);

		if ($this->isColumnModified(MemberPeer::ID)) $criteria->add(MemberPeer::ID, $this->id);
		if ($this->isColumnModified(MemberPeer::PERSON_ID)) $criteria->add(MemberPeer::PERSON_ID, $this->person_id);
		if ($this->isColumnModified(MemberPeer::EXTERNAL_ID)) $criteria->add(MemberPeer::EXTERNAL_ID, $this->external_id);
		if ($this->isColumnModified(MemberPeer::WING_ID)) $criteria->add(MemberPeer::WING_ID, $this->wing_id);
		if ($this->isColumnModified(MemberPeer::MEMBER_CLASS_ID)) $criteria->add(MemberPeer::MEMBER_CLASS_ID, $this->member_class_id);
		if ($this->isColumnModified(MemberPeer::MASTER_MEMBER_ID)) $criteria->add(MemberPeer::MASTER_MEMBER_ID, $this->master_member_id);
		if ($this->isColumnModified(MemberPeer::JOIN_DATE)) $criteria->add(MemberPeer::JOIN_DATE, $this->join_date);
		if ($this->isColumnModified(MemberPeer::ACTIVE)) $criteria->add(MemberPeer::ACTIVE, $this->active);
		if ($this->isColumnModified(MemberPeer::INACTIVE_REASON)) $criteria->add(MemberPeer::INACTIVE_REASON, $this->inactive_reason);
		if ($this->isColumnModified(MemberPeer::INACTIVE_COMMENT)) $criteria->add(MemberPeer::INACTIVE_COMMENT, $this->inactive_comment);
		if ($this->isColumnModified(MemberPeer::FLIGHT_STATUS)) $criteria->add(MemberPeer::FLIGHT_STATUS, $this->flight_status);
		if ($this->isColumnModified(MemberPeer::CO_PILOT)) $criteria->add(MemberPeer::CO_PILOT, $this->co_pilot);
		if ($this->isColumnModified(MemberPeer::CONTACT)) $criteria->add(MemberPeer::CONTACT, $this->contact);
		if ($this->isColumnModified(MemberPeer::DATE_OF_BIRTH)) $criteria->add(MemberPeer::DATE_OF_BIRTH, $this->date_of_birth);
		if ($this->isColumnModified(MemberPeer::WEIGHT)) $criteria->add(MemberPeer::WEIGHT, $this->weight);
		if ($this->isColumnModified(MemberPeer::SPOUSE_NAME)) $criteria->add(MemberPeer::SPOUSE_NAME, $this->spouse_name);
		if ($this->isColumnModified(MemberPeer::LANGUAGES)) $criteria->add(MemberPeer::LANGUAGES, $this->languages);
		if ($this->isColumnModified(MemberPeer::COORDINATOR_NOTES)) $criteria->add(MemberPeer::COORDINATOR_NOTES, $this->coordinator_notes);
		if ($this->isColumnModified(MemberPeer::RENEWED_DATE)) $criteria->add(MemberPeer::RENEWED_DATE, $this->renewed_date);
		if ($this->isColumnModified(MemberPeer::RENEWAL_DATE)) $criteria->add(MemberPeer::RENEWAL_DATE, $this->renewal_date);
		if ($this->isColumnModified(MemberPeer::RENEWAL_NOTICE1)) $criteria->add(MemberPeer::RENEWAL_NOTICE1, $this->renewal_notice1);
		if ($this->isColumnModified(MemberPeer::RENEWAL_NOTICE2)) $criteria->add(MemberPeer::RENEWAL_NOTICE2, $this->renewal_notice2);
		if ($this->isColumnModified(MemberPeer::RENEWAL_NOTICE3)) $criteria->add(MemberPeer::RENEWAL_NOTICE3, $this->renewal_notice3);
		if ($this->isColumnModified(MemberPeer::RENEWAL_NOTICE4)) $criteria->add(MemberPeer::RENEWAL_NOTICE4, $this->renewal_notice4);
		if ($this->isColumnModified(MemberPeer::REVIEW_DONE)) $criteria->add(MemberPeer::REVIEW_DONE, $this->review_done);
		if ($this->isColumnModified(MemberPeer::ED_NEW_MEMBER_NOTIFY)) $criteria->add(MemberPeer::ED_NEW_MEMBER_NOTIFY, $this->ed_new_member_notify);
		if ($this->isColumnModified(MemberPeer::WN_NEW_MEMBERN_NTIFY)) $criteria->add(MemberPeer::WN_NEW_MEMBERN_NTIFY, $this->wn_new_membern_ntify);
		if ($this->isColumnModified(MemberPeer::NO_WING_CONTACT_ACK)) $criteria->add(MemberPeer::NO_WING_CONTACT_ACK, $this->no_wing_contact_ack);
		if ($this->isColumnModified(MemberPeer::HOLD_HARMLESS_RECEIVED)) $criteria->add(MemberPeer::HOLD_HARMLESS_RECEIVED, $this->hold_harmless_received);
		if ($this->isColumnModified(MemberPeer::MEMBER_WELCOMED)) $criteria->add(MemberPeer::MEMBER_WELCOMED, $this->member_welcomed);
		if ($this->isColumnModified(MemberPeer::BADGE_MADE)) $criteria->add(MemberPeer::BADGE_MADE, $this->badge_made);
		if ($this->isColumnModified(MemberPeer::NOTEBOOK_SENT)) $criteria->add(MemberPeer::NOTEBOOK_SENT, $this->notebook_sent);
		if ($this->isColumnModified(MemberPeer::CLOTHING_SENT)) $criteria->add(MemberPeer::CLOTHING_SENT, $this->clothing_sent);
		if ($this->isColumnModified(MemberPeer::S_MOD_MEMBER_NOTIFY)) $criteria->add(MemberPeer::S_MOD_MEMBER_NOTIFY, $this->s_mod_member_notify);
		if ($this->isColumnModified(MemberPeer::W_MOD_MEMBER_NOTIFY)) $criteria->add(MemberPeer::W_MOD_MEMBER_NOTIFY, $this->w_mod_member_notify);
		if ($this->isColumnModified(MemberPeer::RENEW_MARK)) $criteria->add(MemberPeer::RENEW_MARK, $this->renew_mark);
		if ($this->isColumnModified(MemberPeer::RENEWAL_SENT_DATE)) $criteria->add(MemberPeer::RENEWAL_SENT_DATE, $this->renewal_sent_date);
		if ($this->isColumnModified(MemberPeer::S_LATE_RENEWAL_NOTIFY)) $criteria->add(MemberPeer::S_LATE_RENEWAL_NOTIFY, $this->s_late_renewal_notify);
		if ($this->isColumnModified(MemberPeer::W_LATE_RENEWAL_NOTIFY)) $criteria->add(MemberPeer::W_LATE_RENEWAL_NOTIFY, $this->w_late_renewal_notify);
		if ($this->isColumnModified(MemberPeer::S_INACTIVE_NOTIFY)) $criteria->add(MemberPeer::S_INACTIVE_NOTIFY, $this->s_inactive_notify);
		if ($this->isColumnModified(MemberPeer::W_INACTIVE_NOTIFY)) $criteria->add(MemberPeer::W_INACTIVE_NOTIFY, $this->w_inactive_notify);
		if ($this->isColumnModified(MemberPeer::W_NOT_ORIENTED_NOTIFY_DATE1)) $criteria->add(MemberPeer::W_NOT_ORIENTED_NOTIFY_DATE1, $this->w_not_oriented_notify_date1);
		if ($this->isColumnModified(MemberPeer::W_NOT_ORIENTED_NOTIFY_DATE2)) $criteria->add(MemberPeer::W_NOT_ORIENTED_NOTIFY_DATE2, $this->w_not_oriented_notify_date2);
		if ($this->isColumnModified(MemberPeer::EMERGENCY_CONTACT_NAME)) $criteria->add(MemberPeer::EMERGENCY_CONTACT_NAME, $this->emergency_contact_name);
		if ($this->isColumnModified(MemberPeer::EMERGENCY_CONTACT_PHONE)) $criteria->add(MemberPeer::EMERGENCY_CONTACT_PHONE, $this->emergency_contact_phone);
		if ($this->isColumnModified(MemberPeer::DRIVERS_LICENSE_STATE)) $criteria->add(MemberPeer::DRIVERS_LICENSE_STATE, $this->drivers_license_state);
		if ($this->isColumnModified(MemberPeer::DRIVERS_LICENSE_NUMBER)) $criteria->add(MemberPeer::DRIVERS_LICENSE_NUMBER, $this->drivers_license_number);
		if ($this->isColumnModified(MemberPeer::HEIGHT)) $criteria->add(MemberPeer::HEIGHT, $this->height);
		if ($this->isColumnModified(MemberPeer::SECONDARY_WING_ID)) $criteria->add(MemberPeer::SECONDARY_WING_ID, $this->secondary_wing_id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(MemberPeer::DATABASE_NAME);

		$criteria->add(MemberPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Member (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setPersonId($this->person_id);

		$copyObj->setExternalId($this->external_id);

		$copyObj->setWingId($this->wing_id);

		$copyObj->setMemberClassId($this->member_class_id);

		$copyObj->setMasterMemberId($this->master_member_id);

		$copyObj->setJoinDate($this->join_date);

		$copyObj->setActive($this->active);

		$copyObj->setInactiveReason($this->inactive_reason);

		$copyObj->setInactiveComment($this->inactive_comment);

		$copyObj->setFlightStatus($this->flight_status);

		$copyObj->setCoPilot($this->co_pilot);

		$copyObj->setContact($this->contact);

		$copyObj->setDateOfBirth($this->date_of_birth);

		$copyObj->setWeight($this->weight);

		$copyObj->setSpouseName($this->spouse_name);

		$copyObj->setLanguages($this->languages);

		$copyObj->setCoordinatorNotes($this->coordinator_notes);

		$copyObj->setRenewedDate($this->renewed_date);

		$copyObj->setRenewalDate($this->renewal_date);

		$copyObj->setRenewalNotice1($this->renewal_notice1);

		$copyObj->setRenewalNotice2($this->renewal_notice2);

		$copyObj->setRenewalNotice3($this->renewal_notice3);

		$copyObj->setRenewalNotice4($this->renewal_notice4);

		$copyObj->setReviewDone($this->review_done);

		$copyObj->setEdNewMemberNotify($this->ed_new_member_notify);

		$copyObj->setWnNewMembernNtify($this->wn_new_membern_ntify);

		$copyObj->setNoWingContactAck($this->no_wing_contact_ack);

		$copyObj->setHoldHarmlessReceived($this->hold_harmless_received);

		$copyObj->setMemberWelcomed($this->member_welcomed);

		$copyObj->setBadgeMade($this->badge_made);

		$copyObj->setNotebookSent($this->notebook_sent);

		$copyObj->setClothingSent($this->clothing_sent);

		$copyObj->setSModMemberNotify($this->s_mod_member_notify);

		$copyObj->setWModMemberNotify($this->w_mod_member_notify);

		$copyObj->setRenewMark($this->renew_mark);

		$copyObj->setRenewalSentDate($this->renewal_sent_date);

		$copyObj->setSLateRenewalNotify($this->s_late_renewal_notify);

		$copyObj->setWLateRenewalNotify($this->w_late_renewal_notify);

		$copyObj->setSInactiveNotify($this->s_inactive_notify);

		$copyObj->setWInactiveNotify($this->w_inactive_notify);

		$copyObj->setWNotOrientedNotifyDate1($this->w_not_oriented_notify_date1);

		$copyObj->setWNotOrientedNotifyDate2($this->w_not_oriented_notify_date2);

		$copyObj->setEmergencyContactName($this->emergency_contact_name);

		$copyObj->setEmergencyContactPhone($this->emergency_contact_phone);

		$copyObj->setDriversLicenseState($this->drivers_license_state);

		$copyObj->setDriversLicenseNumber($this->drivers_license_number);

		$copyObj->setHeight($this->height);

		$copyObj->setSecondaryWingId($this->secondary_wing_id);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getApplications() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addApplication($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAvailabilitys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAvailability($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCoordinators() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCoordinator($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMembersRelatedByMasterMemberId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMemberRelatedByMasterMemberId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMemberWingJobs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMemberWingJob($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMissionLegsRelatedByCopilotId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMissionLegRelatedByCopilotId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMissionLegsRelatedByBackupCopilotId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMissionLegRelatedByBackupCopilotId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPilots() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPilot($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPilotAircrafts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPilotAircraft($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPilotDates() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPilotDate($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPilotRequests() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPilotRequest($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Member Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     MemberPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new MemberPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Person object.
	 *
	 * @param      Person $v
	 * @return     Member The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPerson(Person $v = null)
	{
		if ($v === null) {
			$this->setPersonId(NULL);
		} else {
			$this->setPersonId($v->getId());
		}

		$this->aPerson = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Person object, it will not be re-added.
		if ($v !== null) {
			$v->addMember($this);
		}

		return $this;
	}


	/**
	 * Get the associated Person object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Person The associated Person object.
	 * @throws     PropelException
	 */
	public function getPerson(PropelPDO $con = null)
	{
		if ($this->aPerson === null && ($this->person_id !== null)) {
			$c = new Criteria(PersonPeer::DATABASE_NAME);
			$c->add(PersonPeer::ID, $this->person_id);
			$this->aPerson = PersonPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPerson->addMembers($this);
			 */
		}
		return $this->aPerson;
	}

	/**
	 * Declares an association between this object and a Wing object.
	 *
	 * @param      Wing $v
	 * @return     Member The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setWing(Wing $v = null)
	{
		if ($v === null) {
			$this->setWingId(NULL);
		} else {
			$this->setWingId($v->getId());
		}

		$this->aWing = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Wing object, it will not be re-added.
		if ($v !== null) {
			$v->addMember($this);
		}

		return $this;
	}


	/**
	 * Get the associated Wing object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Wing The associated Wing object.edit
	 * @throws     PropelException
	 */
	public function getWing(PropelPDO $con = null)
	{
		if ($this->aWing === null && ($this->wing_id !== null)) {
			$c = new Criteria(WingPeer::DATABASE_NAME);
			$c->add(WingPeer::ID, $this->wing_id);
			$this->aWing = WingPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aWing->addMembers($this);
			 */
		}
		return $this->aWing;
	}

	/**
	 * Declares an association between this object and a MemberClass object.
	 *
	 * @param      MemberClass $v
	 * @return     Member The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMemberClass(MemberClass $v = null)
	{
		if ($v === null) {
			$this->setMemberClassId(NULL);
		} else {
			$this->setMemberClassId($v->getId());
		}

		$this->aMemberClass = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the MemberClass object, it will not be re-added.
		if ($v !== null) {
			$v->addMember($this);
		}

		return $this;
	}


	/**
	 * Get the associated MemberClass object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     MemberClass The associated MemberClass object.
	 * @throws     PropelException
	 */
	public function getMemberClass(PropelPDO $con = null)
	{
		if ($this->aMemberClass === null && ($this->member_class_id !== null)) {
			$c = new Criteria(MemberClassPeer::DATABASE_NAME);
			$c->add(MemberClassPeer::ID, $this->member_class_id);
			$this->aMemberClass = MemberClassPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMemberClass->addMembers($this);
			 */
		}
		return $this->aMemberClass;
	}

	/**
	 * Declares an association between this object and a Member object.
	 *
	 * @param      Member $v
	 * @return     Member The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMemberRelatedByMasterMemberId(Member $v = null)
	{
		if ($v === null) {
			$this->setMasterMemberId(NULL);
		} else {
			$this->setMasterMemberId($v->getId());
		}

		$this->aMemberRelatedByMasterMemberId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Member object, it will not be re-added.
		if ($v !== null) {
			$v->addMemberRelatedByMasterMemberId($this);
		}

		return $this;
	}


	/**
	 * Get the associated Member object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Member The associated Member object.
	 * @throws     PropelException
	 */
	public function getMemberRelatedByMasterMemberId(PropelPDO $con = null)
	{
		if ($this->aMemberRelatedByMasterMemberId === null && ($this->master_member_id !== null)) {
			$c = new Criteria(MemberPeer::DATABASE_NAME);
			$c->add(MemberPeer::ID, $this->master_member_id);
			$this->aMemberRelatedByMasterMemberId = MemberPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMemberRelatedByMasterMemberId->addMembersRelatedByMasterMemberId($this);
			 */
		}
		return $this->aMemberRelatedByMasterMemberId;
	}

	/**
	 * Clears out the collApplications collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addApplications()
	 */
	public function clearApplications()
	{
		$this->collApplications = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collApplications collection (array).
	 *
	 * By default this just sets the collApplications collection to an empty array (like clearcollApplications());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initApplications()
	{
		$this->collApplications = array();
	}

	/**
	 * Gets an array of Application objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Member has previously been saved, it will retrieve
	 * related Applications from storage. If this Member is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Application[]
	 * @throws     PropelException
	 */
	public function getApplications($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collApplications === null) {
			if ($this->isNew()) {
			   $this->collApplications = array();
			} else {

				$criteria->add(ApplicationPeer::MEMBER_ID, $this->id);

				ApplicationPeer::addSelectColumns($criteria);
				$this->collApplications = ApplicationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ApplicationPeer::MEMBER_ID, $this->id);

				ApplicationPeer::addSelectColumns($criteria);
				if (!isset($this->lastApplicationCriteria) || !$this->lastApplicationCriteria->equals($criteria)) {
					$this->collApplications = ApplicationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastApplicationCriteria = $criteria;
		return $this->collApplications;
	}

	/**
	 * Returns the number of related Application objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Application objects.
	 * @throws     PropelException
	 */
	public function countApplications(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collApplications === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ApplicationPeer::MEMBER_ID, $this->id);

				$count = ApplicationPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ApplicationPeer::MEMBER_ID, $this->id);

				if (!isset($this->lastApplicationCriteria) || !$this->lastApplicationCriteria->equals($criteria)) {
					$count = ApplicationPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collApplications);
				}
			} else {
				$count = count($this->collApplications);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Application object to this object
	 * through the Application foreign key attribute.
	 *
	 * @param      Application $l Application
	 * @return     void
	 * @throws     PropelException
	 */
	public function addApplication(Application $l)
	{
		if ($this->collApplications === null) {
			$this->initApplications();
		}
		if (!in_array($l, $this->collApplications, true)) { // only add it if the **same** object is not already associated
			array_push($this->collApplications, $l);
			$l->setMember($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related Applications from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getApplicationsJoinVocationClass($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collApplications === null) {
			if ($this->isNew()) {
				$this->collApplications = array();
			} else {

				$criteria->add(ApplicationPeer::MEMBER_ID, $this->id);

				$this->collApplications = ApplicationPeer::doSelectJoinVocationClass($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ApplicationPeer::MEMBER_ID, $this->id);

			if (!isset($this->lastApplicationCriteria) || !$this->lastApplicationCriteria->equals($criteria)) {
				$this->collApplications = ApplicationPeer::doSelectJoinVocationClass($criteria, $con, $join_behavior);
			}
		}
		$this->lastApplicationCriteria = $criteria;

		return $this->collApplications;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related Applications from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getApplicationsJoinRefSource($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collApplications === null) {
			if ($this->isNew()) {
				$this->collApplications = array();
			} else {

				$criteria->add(ApplicationPeer::MEMBER_ID, $this->id);

				$this->collApplications = ApplicationPeer::doSelectJoinRefSource($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ApplicationPeer::MEMBER_ID, $this->id);

			if (!isset($this->lastApplicationCriteria) || !$this->lastApplicationCriteria->equals($criteria)) {
				$this->collApplications = ApplicationPeer::doSelectJoinRefSource($criteria, $con, $join_behavior);
			}
		}
		$this->lastApplicationCriteria = $criteria;

		return $this->collApplications;
	}

	/**
	 * Clears out the collAvailabilitys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAvailabilitys()
	 */
	public function clearAvailabilitys()
	{
		$this->collAvailabilitys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAvailabilitys collection (array).
	 *
	 * By default this just sets the collAvailabilitys collection to an empty array (like clearcollAvailabilitys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAvailabilitys()
	{
		$this->collAvailabilitys = array();
	}

	/**
	 * Gets an array of Availability objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Member has previously been saved, it will retrieve
	 * related Availabilitys from storage. If this Member is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Availability[]
	 * @throws     PropelException
	 */
	public function getAvailabilitys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAvailabilitys === null) {
			if ($this->isNew()) {
			   $this->collAvailabilitys = array();
			} else {

				$criteria->add(AvailabilityPeer::MEMBER_ID, $this->id);

				AvailabilityPeer::addSelectColumns($criteria);
				$this->collAvailabilitys = AvailabilityPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AvailabilityPeer::MEMBER_ID, $this->id);

				AvailabilityPeer::addSelectColumns($criteria);
				if (!isset($this->lastAvailabilityCriteria) || !$this->lastAvailabilityCriteria->equals($criteria)) {
					$this->collAvailabilitys = AvailabilityPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAvailabilityCriteria = $criteria;
		return $this->collAvailabilitys;
	}

	/**
	 * Returns the number of related Availability objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Availability objects.
	 * @throws     PropelException
	 */
	public function countAvailabilitys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAvailabilitys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AvailabilityPeer::MEMBER_ID, $this->id);

				$count = AvailabilityPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AvailabilityPeer::MEMBER_ID, $this->id);

				if (!isset($this->lastAvailabilityCriteria) || !$this->lastAvailabilityCriteria->equals($criteria)) {
					$count = AvailabilityPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAvailabilitys);
				}
			} else {
				$count = count($this->collAvailabilitys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Availability object to this object
	 * through the Availability foreign key attribute.
	 *
	 * @param      Availability $l Availability
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAvailability(Availability $l)
	{
		if ($this->collAvailabilitys === null) {
			$this->initAvailabilitys();
		}
		if (!in_array($l, $this->collAvailabilitys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAvailabilitys, $l);
			$l->setMember($this);
		}
	}

	/**
	 * Clears out the collCoordinators collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCoordinators()
	 */
	public function clearCoordinators()
	{
		$this->collCoordinators = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCoordinators collection (array).
	 *
	 * By default this just sets the collCoordinators collection to an empty array (like clearcollCoordinators());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCoordinators()
	{
		$this->collCoordinators = array();
	}

	/**
	 * Gets an array of Coordinator objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Member has previously been saved, it will retrieve
	 * related Coordinators from storage. If this Member is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Coordinator[]
	 * @throws     PropelException
	 */
	public function getCoordinators($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCoordinators === null) {
			if ($this->isNew()) {
			   $this->collCoordinators = array();
			} else {

				$criteria->add(CoordinatorPeer::MEMBER_ID, $this->id);

				CoordinatorPeer::addSelectColumns($criteria);
				$this->collCoordinators = CoordinatorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CoordinatorPeer::MEMBER_ID, $this->id);

				CoordinatorPeer::addSelectColumns($criteria);
				if (!isset($this->lastCoordinatorCriteria) || !$this->lastCoordinatorCriteria->equals($criteria)) {
					$this->collCoordinators = CoordinatorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCoordinatorCriteria = $criteria;
		return $this->collCoordinators;
	}

	/**
	 * Returns the number of related Coordinator objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Coordinator objects.
	 * @throws     PropelException
	 */
	public function countCoordinators(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCoordinators === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CoordinatorPeer::MEMBER_ID, $this->id);

				$count = CoordinatorPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CoordinatorPeer::MEMBER_ID, $this->id);

				if (!isset($this->lastCoordinatorCriteria) || !$this->lastCoordinatorCriteria->equals($criteria)) {
					$count = CoordinatorPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCoordinators);
				}
			} else {
				$count = count($this->collCoordinators);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Coordinator object to this object
	 * through the Coordinator foreign key attribute.
	 *
	 * @param      Coordinator $l Coordinator
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCoordinator(Coordinator $l)
	{
		if ($this->collCoordinators === null) {
			$this->initCoordinators();
		}
		if (!in_array($l, $this->collCoordinators, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCoordinators, $l);
			$l->setMember($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related Coordinators from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getCoordinatorsJoinCoordinatorRelatedByLeadId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCoordinators === null) {
			if ($this->isNew()) {
				$this->collCoordinators = array();
			} else {

				$criteria->add(CoordinatorPeer::MEMBER_ID, $this->id);

				$this->collCoordinators = CoordinatorPeer::doSelectJoinCoordinatorRelatedByLeadId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CoordinatorPeer::MEMBER_ID, $this->id);

			if (!isset($this->lastCoordinatorCriteria) || !$this->lastCoordinatorCriteria->equals($criteria)) {
				$this->collCoordinators = CoordinatorPeer::doSelectJoinCoordinatorRelatedByLeadId($criteria, $con, $join_behavior);
			}
		}
		$this->lastCoordinatorCriteria = $criteria;

		return $this->collCoordinators;
	}

	/**
	 * Clears out the collMembersRelatedByMasterMemberId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMembersRelatedByMasterMemberId()
	 */
	public function clearMembersRelatedByMasterMemberId()
	{
		$this->collMembersRelatedByMasterMemberId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMembersRelatedByMasterMemberId collection (array).
	 *
	 * By default this just sets the collMembersRelatedByMasterMemberId collection to an empty array (like clearcollMembersRelatedByMasterMemberId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMembersRelatedByMasterMemberId()
	{
		$this->collMembersRelatedByMasterMemberId = array();
	}

	/**
	 * Gets an array of Member objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Member has previously been saved, it will retrieve
	 * related MembersRelatedByMasterMemberId from storage. If this Member is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Member[]
	 * @throws     PropelException
	 */
	public function getMembersRelatedByMasterMemberId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMembersRelatedByMasterMemberId === null) {
			if ($this->isNew()) {
			   $this->collMembersRelatedByMasterMemberId = array();
			} else {

				$criteria->add(MemberPeer::MASTER_MEMBER_ID, $this->id);

				MemberPeer::addSelectColumns($criteria);
				$this->collMembersRelatedByMasterMemberId = MemberPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MemberPeer::MASTER_MEMBER_ID, $this->id);

				MemberPeer::addSelectColumns($criteria);
				if (!isset($this->lastMemberRelatedByMasterMemberIdCriteria) || !$this->lastMemberRelatedByMasterMemberIdCriteria->equals($criteria)) {
					$this->collMembersRelatedByMasterMemberId = MemberPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMemberRelatedByMasterMemberIdCriteria = $criteria;
		return $this->collMembersRelatedByMasterMemberId;
	}

	/**
	 * Returns the number of related Member objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Member objects.
	 * @throws     PropelException
	 */
	public function countMembersRelatedByMasterMemberId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMembersRelatedByMasterMemberId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MemberPeer::MASTER_MEMBER_ID, $this->id);

				$count = MemberPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MemberPeer::MASTER_MEMBER_ID, $this->id);

				if (!isset($this->lastMemberRelatedByMasterMemberIdCriteria) || !$this->lastMemberRelatedByMasterMemberIdCriteria->equals($criteria)) {
					$count = MemberPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMembersRelatedByMasterMemberId);
				}
			} else {
				$count = count($this->collMembersRelatedByMasterMemberId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Member object to this object
	 * through the Member foreign key attribute.
	 *
	 * @param      Member $l Member
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMemberRelatedByMasterMemberId(Member $l)
	{
		if ($this->collMembersRelatedByMasterMemberId === null) {
			$this->initMembersRelatedByMasterMemberId();
		}
		if (!in_array($l, $this->collMembersRelatedByMasterMemberId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMembersRelatedByMasterMemberId, $l);
			$l->setMemberRelatedByMasterMemberId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MembersRelatedByMasterMemberId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMembersRelatedByMasterMemberIdJoinPerson($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMembersRelatedByMasterMemberId === null) {
			if ($this->isNew()) {
				$this->collMembersRelatedByMasterMemberId = array();
			} else {

				$criteria->add(MemberPeer::MASTER_MEMBER_ID, $this->id);

				$this->collMembersRelatedByMasterMemberId = MemberPeer::doSelectJoinPerson($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MemberPeer::MASTER_MEMBER_ID, $this->id);

			if (!isset($this->lastMemberRelatedByMasterMemberIdCriteria) || !$this->lastMemberRelatedByMasterMemberIdCriteria->equals($criteria)) {
				$this->collMembersRelatedByMasterMemberId = MemberPeer::doSelectJoinPerson($criteria, $con, $join_behavior);
			}
		}
		$this->lastMemberRelatedByMasterMemberIdCriteria = $criteria;

		return $this->collMembersRelatedByMasterMemberId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MembersRelatedByMasterMemberId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMembersRelatedByMasterMemberIdJoinWing($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMembersRelatedByMasterMemberId === null) {
			if ($this->isNew()) {
				$this->collMembersRelatedByMasterMemberId = array();
			} else {

				$criteria->add(MemberPeer::MASTER_MEMBER_ID, $this->id);

				$this->collMembersRelatedByMasterMemberId = MemberPeer::doSelectJoinWing($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MemberPeer::MASTER_MEMBER_ID, $this->id);

			if (!isset($this->lastMemberRelatedByMasterMemberIdCriteria) || !$this->lastMemberRelatedByMasterMemberIdCriteria->equals($criteria)) {
				$this->collMembersRelatedByMasterMemberId = MemberPeer::doSelectJoinWing($criteria, $con, $join_behavior);
			}
		}
		$this->lastMemberRelatedByMasterMemberIdCriteria = $criteria;

		return $this->collMembersRelatedByMasterMemberId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MembersRelatedByMasterMemberId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMembersRelatedByMasterMemberIdJoinMemberClass($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMembersRelatedByMasterMemberId === null) {
			if ($this->isNew()) {
				$this->collMembersRelatedByMasterMemberId = array();
			} else {

				$criteria->add(MemberPeer::MASTER_MEMBER_ID, $this->id);

				$this->collMembersRelatedByMasterMemberId = MemberPeer::doSelectJoinMemberClass($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MemberPeer::MASTER_MEMBER_ID, $this->id);

			if (!isset($this->lastMemberRelatedByMasterMemberIdCriteria) || !$this->lastMemberRelatedByMasterMemberIdCriteria->equals($criteria)) {
				$this->collMembersRelatedByMasterMemberId = MemberPeer::doSelectJoinMemberClass($criteria, $con, $join_behavior);
			}
		}
		$this->lastMemberRelatedByMasterMemberIdCriteria = $criteria;

		return $this->collMembersRelatedByMasterMemberId;
	}

	/**
	 * Clears out the collMemberWingJobs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMemberWingJobs()
	 */
	public function clearMemberWingJobs()
	{
		$this->collMemberWingJobs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMemberWingJobs collection (array).
	 *
	 * By default this just sets the collMemberWingJobs collection to an empty array (like clearcollMemberWingJobs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMemberWingJobs()
	{
		$this->collMemberWingJobs = array();
	}

	/**
	 * Gets an array of MemberWingJob objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Member has previously been saved, it will retrieve
	 * related MemberWingJobs from storage. If this Member is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MemberWingJob[]
	 * @throws     PropelException
	 */
	public function getMemberWingJobs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMemberWingJobs === null) {
			if ($this->isNew()) {
			   $this->collMemberWingJobs = array();
			} else {

				$criteria->add(MemberWingJobPeer::MEMBER_ID, $this->id);

				MemberWingJobPeer::addSelectColumns($criteria);
				$this->collMemberWingJobs = MemberWingJobPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MemberWingJobPeer::MEMBER_ID, $this->id);

				MemberWingJobPeer::addSelectColumns($criteria);
				if (!isset($this->lastMemberWingJobCriteria) || !$this->lastMemberWingJobCriteria->equals($criteria)) {
					$this->collMemberWingJobs = MemberWingJobPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMemberWingJobCriteria = $criteria;
		return $this->collMemberWingJobs;
	}

	/**
	 * Returns the number of related MemberWingJob objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MemberWingJob objects.
	 * @throws     PropelException
	 */
	public function countMemberWingJobs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMemberWingJobs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MemberWingJobPeer::MEMBER_ID, $this->id);

				$count = MemberWingJobPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MemberWingJobPeer::MEMBER_ID, $this->id);

				if (!isset($this->lastMemberWingJobCriteria) || !$this->lastMemberWingJobCriteria->equals($criteria)) {
					$count = MemberWingJobPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMemberWingJobs);
				}
			} else {
				$count = count($this->collMemberWingJobs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MemberWingJob object to this object
	 * through the MemberWingJob foreign key attribute.
	 *
	 * @param      MemberWingJob $l MemberWingJob
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMemberWingJob(MemberWingJob $l)
	{
		if ($this->collMemberWingJobs === null) {
			$this->initMemberWingJobs();
		}
		if (!in_array($l, $this->collMemberWingJobs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMemberWingJobs, $l);
			$l->setMember($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MemberWingJobs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMemberWingJobsJoinWingJob($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMemberWingJobs === null) {
			if ($this->isNew()) {
				$this->collMemberWingJobs = array();
			} else {

				$criteria->add(MemberWingJobPeer::MEMBER_ID, $this->id);

				$this->collMemberWingJobs = MemberWingJobPeer::doSelectJoinWingJob($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MemberWingJobPeer::MEMBER_ID, $this->id);

			if (!isset($this->lastMemberWingJobCriteria) || !$this->lastMemberWingJobCriteria->equals($criteria)) {
				$this->collMemberWingJobs = MemberWingJobPeer::doSelectJoinWingJob($criteria, $con, $join_behavior);
			}
		}
		$this->lastMemberWingJobCriteria = $criteria;

		return $this->collMemberWingJobs;
	}

	/**
	 * Clears out the collMissionLegsRelatedByCopilotId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMissionLegsRelatedByCopilotId()
	 */
	public function clearMissionLegsRelatedByCopilotId()
	{
		$this->collMissionLegsRelatedByCopilotId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMissionLegsRelatedByCopilotId collection (array).
	 *
	 * By default this just sets the collMissionLegsRelatedByCopilotId collection to an empty array (like clearcollMissionLegsRelatedByCopilotId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMissionLegsRelatedByCopilotId()
	{
		$this->collMissionLegsRelatedByCopilotId = array();
	}

	/**
	 * Gets an array of MissionLeg objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Member has previously been saved, it will retrieve
	 * related MissionLegsRelatedByCopilotId from storage. If this Member is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MissionLeg[]
	 * @throws     PropelException
	 */
	public function getMissionLegsRelatedByCopilotId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByCopilotId === null) {
			if ($this->isNew()) {
			   $this->collMissionLegsRelatedByCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

				MissionLegPeer::addSelectColumns($criteria);
				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

				MissionLegPeer::addSelectColumns($criteria);
				if (!isset($this->lastMissionLegRelatedByCopilotIdCriteria) || !$this->lastMissionLegRelatedByCopilotIdCriteria->equals($criteria)) {
					$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMissionLegRelatedByCopilotIdCriteria = $criteria;
		return $this->collMissionLegsRelatedByCopilotId;
	}

	/**
	 * Returns the number of related MissionLeg objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MissionLeg objects.
	 * @throws     PropelException
	 */
	public function countMissionLegsRelatedByCopilotId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMissionLegsRelatedByCopilotId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

				$count = MissionLegPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

				if (!isset($this->lastMissionLegRelatedByCopilotIdCriteria) || !$this->lastMissionLegRelatedByCopilotIdCriteria->equals($criteria)) {
					$count = MissionLegPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMissionLegsRelatedByCopilotId);
				}
			} else {
				$count = count($this->collMissionLegsRelatedByCopilotId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MissionLeg object to this object
	 * through the MissionLeg foreign key attribute.
	 *
	 * @param      MissionLeg $l MissionLeg
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMissionLegRelatedByCopilotId(MissionLeg $l)
	{
		if ($this->collMissionLegsRelatedByCopilotId === null) {
			$this->initMissionLegsRelatedByCopilotId();
		}
		if (!in_array($l, $this->collMissionLegsRelatedByCopilotId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMissionLegsRelatedByCopilotId, $l);
			$l->setMemberRelatedByCopilotId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MissionLegsRelatedByCopilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMissionLegsRelatedByCopilotIdJoinMission($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByCopilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelectJoinMission($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByCopilotIdCriteria) || !$this->lastMissionLegRelatedByCopilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelectJoinMission($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByCopilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByCopilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MissionLegsRelatedByCopilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMissionLegsRelatedByCopilotIdJoinAirportRelatedByFromAirportId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByCopilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelectJoinAirportRelatedByFromAirportId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByCopilotIdCriteria) || !$this->lastMissionLegRelatedByCopilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelectJoinAirportRelatedByFromAirportId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByCopilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByCopilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MissionLegsRelatedByCopilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMissionLegsRelatedByCopilotIdJoinAirportRelatedByToAirportId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByCopilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelectJoinAirportRelatedByToAirportId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByCopilotIdCriteria) || !$this->lastMissionLegRelatedByCopilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelectJoinAirportRelatedByToAirportId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByCopilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByCopilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MissionLegsRelatedByCopilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMissionLegsRelatedByCopilotIdJoinCoordinator($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByCopilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelectJoinCoordinator($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByCopilotIdCriteria) || !$this->lastMissionLegRelatedByCopilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelectJoinCoordinator($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByCopilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByCopilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MissionLegsRelatedByCopilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMissionLegsRelatedByCopilotIdJoinPilotRelatedByPilotId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByCopilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelectJoinPilotRelatedByPilotId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByCopilotIdCriteria) || !$this->lastMissionLegRelatedByCopilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelectJoinPilotRelatedByPilotId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByCopilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByCopilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MissionLegsRelatedByCopilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMissionLegsRelatedByCopilotIdJoinPilotRelatedByBackupPilotId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByCopilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelectJoinPilotRelatedByBackupPilotId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByCopilotIdCriteria) || !$this->lastMissionLegRelatedByCopilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelectJoinPilotRelatedByBackupPilotId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByCopilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByCopilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MissionLegsRelatedByCopilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMissionLegsRelatedByCopilotIdJoinMissionReport($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByCopilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelectJoinMissionReport($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByCopilotIdCriteria) || !$this->lastMissionLegRelatedByCopilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelectJoinMissionReport($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByCopilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByCopilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MissionLegsRelatedByCopilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMissionLegsRelatedByCopilotIdJoinPilotAircraft($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByCopilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelectJoinPilotAircraft($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByCopilotIdCriteria) || !$this->lastMissionLegRelatedByCopilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelectJoinPilotAircraft($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByCopilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByCopilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MissionLegsRelatedByCopilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMissionLegsRelatedByCopilotIdJoinFbo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByCopilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelectJoinFbo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::COPILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByCopilotIdCriteria) || !$this->lastMissionLegRelatedByCopilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByCopilotId = MissionLegPeer::doSelectJoinFbo($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByCopilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByCopilotId;
	}

	/**
	 * Clears out the collMissionLegsRelatedByBackupCopilotId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMissionLegsRelatedByBackupCopilotId()
	 */
	public function clearMissionLegsRelatedByBackupCopilotId()
	{
		$this->collMissionLegsRelatedByBackupCopilotId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMissionLegsRelatedByBackupCopilotId collection (array).
	 *
	 * By default this just sets the collMissionLegsRelatedByBackupCopilotId collection to an empty array (like clearcollMissionLegsRelatedByBackupCopilotId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMissionLegsRelatedByBackupCopilotId()
	{
		$this->collMissionLegsRelatedByBackupCopilotId = array();
	}

	/**
	 * Gets an array of MissionLeg objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Member has previously been saved, it will retrieve
	 * related MissionLegsRelatedByBackupCopilotId from storage. If this Member is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MissionLeg[]
	 * @throws     PropelException
	 */
	public function getMissionLegsRelatedByBackupCopilotId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupCopilotId === null) {
			if ($this->isNew()) {
			   $this->collMissionLegsRelatedByBackupCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

				MissionLegPeer::addSelectColumns($criteria);
				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

				MissionLegPeer::addSelectColumns($criteria);
				if (!isset($this->lastMissionLegRelatedByBackupCopilotIdCriteria) || !$this->lastMissionLegRelatedByBackupCopilotIdCriteria->equals($criteria)) {
					$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMissionLegRelatedByBackupCopilotIdCriteria = $criteria;
		return $this->collMissionLegsRelatedByBackupCopilotId;
	}

	/**
	 * Returns the number of related MissionLeg objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MissionLeg objects.
	 * @throws     PropelException
	 */
	public function countMissionLegsRelatedByBackupCopilotId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMissionLegsRelatedByBackupCopilotId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

				$count = MissionLegPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

				if (!isset($this->lastMissionLegRelatedByBackupCopilotIdCriteria) || !$this->lastMissionLegRelatedByBackupCopilotIdCriteria->equals($criteria)) {
					$count = MissionLegPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMissionLegsRelatedByBackupCopilotId);
				}
			} else {
				$count = count($this->collMissionLegsRelatedByBackupCopilotId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MissionLeg object to this object
	 * through the MissionLeg foreign key attribute.
	 *
	 * @param      MissionLeg $l MissionLeg
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMissionLegRelatedByBackupCopilotId(MissionLeg $l)
	{
		if ($this->collMissionLegsRelatedByBackupCopilotId === null) {
			$this->initMissionLegsRelatedByBackupCopilotId();
		}
		if (!in_array($l, $this->collMissionLegsRelatedByBackupCopilotId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMissionLegsRelatedByBackupCopilotId, $l);
			$l->setMemberRelatedByBackupCopilotId($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupCopilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMissionLegsRelatedByBackupCopilotIdJoinMission($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupCopilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelectJoinMission($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupCopilotIdCriteria) || !$this->lastMissionLegRelatedByBackupCopilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelectJoinMission($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupCopilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupCopilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupCopilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMissionLegsRelatedByBackupCopilotIdJoinAirportRelatedByFromAirportId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupCopilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelectJoinAirportRelatedByFromAirportId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupCopilotIdCriteria) || !$this->lastMissionLegRelatedByBackupCopilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelectJoinAirportRelatedByFromAirportId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupCopilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupCopilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupCopilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMissionLegsRelatedByBackupCopilotIdJoinAirportRelatedByToAirportId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupCopilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelectJoinAirportRelatedByToAirportId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupCopilotIdCriteria) || !$this->lastMissionLegRelatedByBackupCopilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelectJoinAirportRelatedByToAirportId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupCopilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupCopilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupCopilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMissionLegsRelatedByBackupCopilotIdJoinCoordinator($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupCopilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelectJoinCoordinator($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupCopilotIdCriteria) || !$this->lastMissionLegRelatedByBackupCopilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelectJoinCoordinator($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupCopilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupCopilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupCopilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMissionLegsRelatedByBackupCopilotIdJoinPilotRelatedByPilotId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupCopilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelectJoinPilotRelatedByPilotId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupCopilotIdCriteria) || !$this->lastMissionLegRelatedByBackupCopilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelectJoinPilotRelatedByPilotId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupCopilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupCopilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupCopilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMissionLegsRelatedByBackupCopilotIdJoinPilotRelatedByBackupPilotId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupCopilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelectJoinPilotRelatedByBackupPilotId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupCopilotIdCriteria) || !$this->lastMissionLegRelatedByBackupCopilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelectJoinPilotRelatedByBackupPilotId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupCopilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupCopilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupCopilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMissionLegsRelatedByBackupCopilotIdJoinMissionReport($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupCopilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelectJoinMissionReport($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupCopilotIdCriteria) || !$this->lastMissionLegRelatedByBackupCopilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelectJoinMissionReport($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupCopilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupCopilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupCopilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMissionLegsRelatedByBackupCopilotIdJoinPilotAircraft($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupCopilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelectJoinPilotAircraft($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupCopilotIdCriteria) || !$this->lastMissionLegRelatedByBackupCopilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelectJoinPilotAircraft($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupCopilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupCopilotId;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related MissionLegsRelatedByBackupCopilotId from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getMissionLegsRelatedByBackupCopilotIdJoinFbo($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegsRelatedByBackupCopilotId === null) {
			if ($this->isNew()) {
				$this->collMissionLegsRelatedByBackupCopilotId = array();
			} else {

				$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelectJoinFbo($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->id);

			if (!isset($this->lastMissionLegRelatedByBackupCopilotIdCriteria) || !$this->lastMissionLegRelatedByBackupCopilotIdCriteria->equals($criteria)) {
				$this->collMissionLegsRelatedByBackupCopilotId = MissionLegPeer::doSelectJoinFbo($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegRelatedByBackupCopilotIdCriteria = $criteria;

		return $this->collMissionLegsRelatedByBackupCopilotId;
	}

	/**
	 * Clears out the collPilots collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPilots()
	 */
	public function clearPilots()
	{
		$this->collPilots = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPilots collection (array).
	 *
	 * By default this just sets the collPilots collection to an empty array (like clearcollPilots());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPilots()
	{
		$this->collPilots = array();
	}

	/**
	 * Gets an array of Pilot objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Member has previously been saved, it will retrieve
	 * related Pilots from storage. If this Member is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Pilot[]
	 * @throws     PropelException
	 */
	public function getPilots($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilots === null) {
			if ($this->isNew()) {
			   $this->collPilots = array();
			} else {

				$criteria->add(PilotPeer::MEMBER_ID, $this->id);

				PilotPeer::addSelectColumns($criteria);
				$this->collPilots = PilotPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PilotPeer::MEMBER_ID, $this->id);

				PilotPeer::addSelectColumns($criteria);
				if (!isset($this->lastPilotCriteria) || !$this->lastPilotCriteria->equals($criteria)) {
					$this->collPilots = PilotPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPilotCriteria = $criteria;
		return $this->collPilots;
	}

	/**
	 * Returns the number of related Pilot objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Pilot objects.
	 * @throws     PropelException
	 */
	public function countPilots(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPilots === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PilotPeer::MEMBER_ID, $this->id);

				$count = PilotPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PilotPeer::MEMBER_ID, $this->id);

				if (!isset($this->lastPilotCriteria) || !$this->lastPilotCriteria->equals($criteria)) {
					$count = PilotPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPilots);
				}
			} else {
				$count = count($this->collPilots);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Pilot object to this object
	 * through the Pilot foreign key attribute.
	 *
	 * @param      Pilot $l Pilot
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPilot(Pilot $l)
	{
		if ($this->collPilots === null) {
			$this->initPilots();
		}
		if (!in_array($l, $this->collPilots, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPilots, $l);
			$l->setMember($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related Pilots from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getPilotsJoinAirport($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilots === null) {
			if ($this->isNew()) {
				$this->collPilots = array();
			} else {

				$criteria->add(PilotPeer::MEMBER_ID, $this->id);

				$this->collPilots = PilotPeer::doSelectJoinAirport($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PilotPeer::MEMBER_ID, $this->id);

			if (!isset($this->lastPilotCriteria) || !$this->lastPilotCriteria->equals($criteria)) {
				$this->collPilots = PilotPeer::doSelectJoinAirport($criteria, $con, $join_behavior);
			}
		}
		$this->lastPilotCriteria = $criteria;

		return $this->collPilots;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related Pilots from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getPilotsJoinPilotRelatedByOrientedMemberId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilots === null) {
			if ($this->isNew()) {
				$this->collPilots = array();
			} else {

				$criteria->add(PilotPeer::MEMBER_ID, $this->id);

				$this->collPilots = PilotPeer::doSelectJoinPilotRelatedByOrientedMemberId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PilotPeer::MEMBER_ID, $this->id);

			if (!isset($this->lastPilotCriteria) || !$this->lastPilotCriteria->equals($criteria)) {
				$this->collPilots = PilotPeer::doSelectJoinPilotRelatedByOrientedMemberId($criteria, $con, $join_behavior);
			}
		}
		$this->lastPilotCriteria = $criteria;

		return $this->collPilots;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related Pilots from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getPilotsJoinPilotRelatedByMopOrientedMemberId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilots === null) {
			if ($this->isNew()) {
				$this->collPilots = array();
			} else {

				$criteria->add(PilotPeer::MEMBER_ID, $this->id);

				$this->collPilots = PilotPeer::doSelectJoinPilotRelatedByMopOrientedMemberId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PilotPeer::MEMBER_ID, $this->id);

			if (!isset($this->lastPilotCriteria) || !$this->lastPilotCriteria->equals($criteria)) {
				$this->collPilots = PilotPeer::doSelectJoinPilotRelatedByMopOrientedMemberId($criteria, $con, $join_behavior);
			}
		}
		$this->lastPilotCriteria = $criteria;

		return $this->collPilots;
	}

	/**
	 * Clears out the collPilotAircrafts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPilotAircrafts()
	 */
	public function clearPilotAircrafts()
	{
		$this->collPilotAircrafts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPilotAircrafts collection (array).
	 *
	 * By default this just sets the collPilotAircrafts collection to an empty array (like clearcollPilotAircrafts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPilotAircrafts()
	{
		$this->collPilotAircrafts = array();
	}

	/**
	 * Gets an array of PilotAircraft objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Member has previously been saved, it will retrieve
	 * related PilotAircrafts from storage. If this Member is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PilotAircraft[]
	 * @throws     PropelException
	 */
	public function getPilotAircrafts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilotAircrafts === null) {
			if ($this->isNew()) {
			   $this->collPilotAircrafts = array();
			} else {

				$criteria->add(PilotAircraftPeer::MEMBER_ID, $this->id);

				PilotAircraftPeer::addSelectColumns($criteria);
				$this->collPilotAircrafts = PilotAircraftPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PilotAircraftPeer::MEMBER_ID, $this->id);

				PilotAircraftPeer::addSelectColumns($criteria);
				if (!isset($this->lastPilotAircraftCriteria) || !$this->lastPilotAircraftCriteria->equals($criteria)) {
					$this->collPilotAircrafts = PilotAircraftPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPilotAircraftCriteria = $criteria;
		return $this->collPilotAircrafts;
	}

	/**
	 * Returns the number of related PilotAircraft objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PilotAircraft objects.
	 * @throws     PropelException
	 */
	public function countPilotAircrafts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPilotAircrafts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PilotAircraftPeer::MEMBER_ID, $this->id);

				$count = PilotAircraftPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PilotAircraftPeer::MEMBER_ID, $this->id);

				if (!isset($this->lastPilotAircraftCriteria) || !$this->lastPilotAircraftCriteria->equals($criteria)) {
					$count = PilotAircraftPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPilotAircrafts);
				}
			} else {
				$count = count($this->collPilotAircrafts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PilotAircraft object to this object
	 * through the PilotAircraft foreign key attribute.
	 *
	 * @param      PilotAircraft $l PilotAircraft
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPilotAircraft(PilotAircraft $l)
	{
		if ($this->collPilotAircrafts === null) {
			$this->initPilotAircrafts();
		}
		if (!in_array($l, $this->collPilotAircrafts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPilotAircrafts, $l);
			$l->setMember($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related PilotAircrafts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getPilotAircraftsJoinAircraft($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilotAircrafts === null) {
			if ($this->isNew()) {
				$this->collPilotAircrafts = array();
			} else {

				$criteria->add(PilotAircraftPeer::MEMBER_ID, $this->id);

				$this->collPilotAircrafts = PilotAircraftPeer::doSelectJoinAircraft($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PilotAircraftPeer::MEMBER_ID, $this->id);

			if (!isset($this->lastPilotAircraftCriteria) || !$this->lastPilotAircraftCriteria->equals($criteria)) {
				$this->collPilotAircrafts = PilotAircraftPeer::doSelectJoinAircraft($criteria, $con, $join_behavior);
			}
		}
		$this->lastPilotAircraftCriteria = $criteria;

		return $this->collPilotAircrafts;
	}

	/**
	 * Clears out the collPilotDates collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPilotDates()
	 */
	public function clearPilotDates()
	{
		$this->collPilotDates = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPilotDates collection (array).
	 *
	 * By default this just sets the collPilotDates collection to an empty array (like clearcollPilotDates());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPilotDates()
	{
		$this->collPilotDates = array();
	}

	/**
	 * Gets an array of PilotDate objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Member has previously been saved, it will retrieve
	 * related PilotDates from storage. If this Member is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PilotDate[]
	 * @throws     PropelException
	 */
	public function getPilotDates($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilotDates === null) {
			if ($this->isNew()) {
			   $this->collPilotDates = array();
			} else {

				$criteria->add(PilotDatePeer::MEMBER_ID, $this->id);

				PilotDatePeer::addSelectColumns($criteria);
				$this->collPilotDates = PilotDatePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PilotDatePeer::MEMBER_ID, $this->id);

				PilotDatePeer::addSelectColumns($criteria);
				if (!isset($this->lastPilotDateCriteria) || !$this->lastPilotDateCriteria->equals($criteria)) {
					$this->collPilotDates = PilotDatePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPilotDateCriteria = $criteria;
		return $this->collPilotDates;
	}

	/**
	 * Returns the number of related PilotDate objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PilotDate objects.
	 * @throws     PropelException
	 */
	public function countPilotDates(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPilotDates === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PilotDatePeer::MEMBER_ID, $this->id);

				$count = PilotDatePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PilotDatePeer::MEMBER_ID, $this->id);

				if (!isset($this->lastPilotDateCriteria) || !$this->lastPilotDateCriteria->equals($criteria)) {
					$count = PilotDatePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPilotDates);
				}
			} else {
				$count = count($this->collPilotDates);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PilotDate object to this object
	 * through the PilotDate foreign key attribute.
	 *
	 * @param      PilotDate $l PilotDate
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPilotDate(PilotDate $l)
	{
		if ($this->collPilotDates === null) {
			$this->initPilotDates();
		}
		if (!in_array($l, $this->collPilotDates, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPilotDates, $l);
			$l->setMember($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related PilotDates from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getPilotDatesJoinPilotRequest($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilotDates === null) {
			if ($this->isNew()) {
				$this->collPilotDates = array();
			} else {

				$criteria->add(PilotDatePeer::MEMBER_ID, $this->id);

				$this->collPilotDates = PilotDatePeer::doSelectJoinPilotRequest($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PilotDatePeer::MEMBER_ID, $this->id);

			if (!isset($this->lastPilotDateCriteria) || !$this->lastPilotDateCriteria->equals($criteria)) {
				$this->collPilotDates = PilotDatePeer::doSelectJoinPilotRequest($criteria, $con, $join_behavior);
			}
		}
		$this->lastPilotDateCriteria = $criteria;

		return $this->collPilotDates;
	}

	/**
	 * Clears out the collPilotRequests collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPilotRequests()
	 */
	public function clearPilotRequests()
	{
		$this->collPilotRequests = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPilotRequests collection (array).
	 *
	 * By default this just sets the collPilotRequests collection to an empty array (like clearcollPilotRequests());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPilotRequests()
	{
		$this->collPilotRequests = array();
	}

	/**
	 * Gets an array of PilotRequest objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Member has previously been saved, it will retrieve
	 * related PilotRequests from storage. If this Member is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PilotRequest[]
	 * @throws     PropelException
	 */
	public function getPilotRequests($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilotRequests === null) {
			if ($this->isNew()) {
			   $this->collPilotRequests = array();
			} else {

				$criteria->add(PilotRequestPeer::MEMBER_ID, $this->id);

				PilotRequestPeer::addSelectColumns($criteria);
				$this->collPilotRequests = PilotRequestPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PilotRequestPeer::MEMBER_ID, $this->id);

				PilotRequestPeer::addSelectColumns($criteria);
				if (!isset($this->lastPilotRequestCriteria) || !$this->lastPilotRequestCriteria->equals($criteria)) {
					$this->collPilotRequests = PilotRequestPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPilotRequestCriteria = $criteria;
		return $this->collPilotRequests;
	}

	/**
	 * Returns the number of related PilotRequest objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PilotRequest objects.
	 * @throws     PropelException
	 */
	public function countPilotRequests(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPilotRequests === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PilotRequestPeer::MEMBER_ID, $this->id);

				$count = PilotRequestPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PilotRequestPeer::MEMBER_ID, $this->id);

				if (!isset($this->lastPilotRequestCriteria) || !$this->lastPilotRequestCriteria->equals($criteria)) {
					$count = PilotRequestPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPilotRequests);
				}
			} else {
				$count = count($this->collPilotRequests);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PilotRequest object to this object
	 * through the PilotRequest foreign key attribute.
	 *
	 * @param      PilotRequest $l PilotRequest
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPilotRequest(PilotRequest $l)
	{
		if ($this->collPilotRequests === null) {
			$this->initPilotRequests();
		}
		if (!in_array($l, $this->collPilotRequests, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPilotRequests, $l);
			$l->setMember($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related PilotRequests from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getPilotRequestsJoinCamp($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilotRequests === null) {
			if ($this->isNew()) {
				$this->collPilotRequests = array();
			} else {

				$criteria->add(PilotRequestPeer::MEMBER_ID, $this->id);

				$this->collPilotRequests = PilotRequestPeer::doSelectJoinCamp($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PilotRequestPeer::MEMBER_ID, $this->id);

			if (!isset($this->lastPilotRequestCriteria) || !$this->lastPilotRequestCriteria->equals($criteria)) {
				$this->collPilotRequests = PilotRequestPeer::doSelectJoinCamp($criteria, $con, $join_behavior);
			}
		}
		$this->lastPilotRequestCriteria = $criteria;

		return $this->collPilotRequests;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Member is new, it will return
	 * an empty collection; or if this Member has previously
	 * been saved, it will retrieve related PilotRequests from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Member.
	 */
	public function getPilotRequestsJoinMissionLeg($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MemberPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilotRequests === null) {
			if ($this->isNew()) {
				$this->collPilotRequests = array();
			} else {

				$criteria->add(PilotRequestPeer::MEMBER_ID, $this->id);

				$this->collPilotRequests = PilotRequestPeer::doSelectJoinMissionLeg($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PilotRequestPeer::MEMBER_ID, $this->id);

			if (!isset($this->lastPilotRequestCriteria) || !$this->lastPilotRequestCriteria->equals($criteria)) {
				$this->collPilotRequests = PilotRequestPeer::doSelectJoinMissionLeg($criteria, $con, $join_behavior);
			}
		}
		$this->lastPilotRequestCriteria = $criteria;

		return $this->collPilotRequests;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collApplications) {
				foreach ((array) $this->collApplications as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAvailabilitys) {
				foreach ((array) $this->collAvailabilitys as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCoordinators) {
				foreach ((array) $this->collCoordinators as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMembersRelatedByMasterMemberId) {
				foreach ((array) $this->collMembersRelatedByMasterMemberId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMemberWingJobs) {
				foreach ((array) $this->collMemberWingJobs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMissionLegsRelatedByCopilotId) {
				foreach ((array) $this->collMissionLegsRelatedByCopilotId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMissionLegsRelatedByBackupCopilotId) {
				foreach ((array) $this->collMissionLegsRelatedByBackupCopilotId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPilots) {
				foreach ((array) $this->collPilots as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPilotAircrafts) {
				foreach ((array) $this->collPilotAircrafts as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPilotDates) {
				foreach ((array) $this->collPilotDates as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPilotRequests) {
				foreach ((array) $this->collPilotRequests as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collApplications = null;
		$this->collAvailabilitys = null;
		$this->collCoordinators = null;
		$this->collMembersRelatedByMasterMemberId = null;
		$this->collMemberWingJobs = null;
		$this->collMissionLegsRelatedByCopilotId = null;
		$this->collMissionLegsRelatedByBackupCopilotId = null;
		$this->collPilots = null;
		$this->collPilotAircrafts = null;
		$this->collPilotDates = null;
		$this->collPilotRequests = null;
			$this->aPerson = null;
			$this->aWing = null;
			$this->aMemberClass = null;
			$this->aMemberRelatedByMasterMemberId = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseMember:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseMember::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseMember
