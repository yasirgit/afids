<?php

/**
 * Base class that represents a row from the 'pilot_request' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
<<<<<<< .mine
 * Mon May 23 05:47:21 2011
=======
 * 05/23/11 05:17:59
>>>>>>> .r1203
 *
 * @package    lib.model.om
 */
abstract class BasePilotRequest extends BaseObject  implements Persistent {


  const PEER = 'PilotRequestPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PilotRequestPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the member_id field.
	 * @var        int
	 */
	protected $member_id;

	/**
	 * The value for the group_camp_id field.
	 * @var        int
	 */
	protected $group_camp_id;

	/**
	 * The value for the home_base field.
	 * @var        string
	 */
	protected $home_base;

	/**
	 * The value for the number_seats field.
	 * @var        int
	 */
	protected $number_seats;

	/**
	 * The value for the total_weight field.
	 * @var        int
	 */
	protected $total_weight;

	/**
	 * The value for the multiple_pick field.
	 * @var        int
	 */
	protected $multiple_pick;

	/**
	 * The value for the leg_id field.
	 * @var        int
	 */
	protected $leg_id;

	/**
	 * The value for the date field.
	 * @var        string
	 */
	protected $date;

	/**
	 * The value for the pilot_type field.
	 * @var        string
	 */
	protected $pilot_type;

	/**
	 * The value for the comment field.
	 * @var        string
	 */
	protected $comment;

	/**
	 * The value for the accepted field.
	 * @var        int
	 */
	protected $accepted;

	/**
	 * The value for the processed field.
	 * @var        int
	 */
	protected $processed;

	/**
	 * The value for the pilot_status field.
	 * @var        int
	 */
	protected $pilot_status;

	/**
	 * The value for the on_hold field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $on_hold;

	/**
	 * The value for the mission_assistant_wanted field.
	 * @var        int
	 */
	protected $mission_assistant_wanted;

	/**
	 * The value for the miss_assis_id field.
	 * @var        int
	 */
	protected $miss_assis_id;

	/**
	 * The value for the mission_assistant_name field.
	 * @var        string
	 */
	protected $mission_assistant_name;

	/**
	 * The value for the ifr_backup_wanted field.
	 * @var        int
	 */
	protected $ifr_backup_wanted;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the number_date_assign field.
	 * @var        int
	 */
	protected $number_date_assign;

	/**
	 * The value for the aircraft_id field.
	 * @var        int
	 */
	protected $aircraft_id;

	/**
	 * The value for the tail field.
	 * @var        string
	 */
	protected $tail;

	/**
	 * @var        Member
	 */
	protected $aMember;

	/**
	 * @var        Camp
	 */
	protected $aCamp;

	/**
	 * @var        MissionLeg
	 */
	protected $aMissionLeg;

	/**
	 * @var        array PilotDate[] Collection to store aggregation of PilotDate objects.
	 */
	protected $collPilotDates;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPilotDates.
	 */
	private $lastPilotDateCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BasePilotRequest object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->on_hold = 0;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [member_id] column value.
	 * 
	 * @return     int
	 */
	public function getMemberId()
	{
		return $this->member_id;
	}

	/**
	 * Get the [group_camp_id] column value.
	 * 
	 * @return     int
	 */
	public function getGroupCampId()
	{
		return $this->group_camp_id;
	}

	/**
	 * Get the [home_base] column value.
	 * 
	 * @return     string
	 */
	public function getHomeBase()
	{
		return $this->home_base;
	}

	/**
	 * Get the [number_seats] column value.
	 * 
	 * @return     int
	 */
	public function getNumberSeats()
	{
		return $this->number_seats;
	}

	/**
	 * Get the [total_weight] column value.
	 * 
	 * @return     int
	 */
	public function getTotalWeight()
	{
		return $this->total_weight;
	}

	/**
	 * Get the [multiple_pick] column value.
	 * 
	 * @return     int
	 */
	public function getMultiplePick()
	{
		return $this->multiple_pick;
	}

	/**
	 * Get the [leg_id] column value.
	 * 
	 * @return     int
	 */
	public function getLegId()
	{
		return $this->leg_id;
	}

	/**
	 * Get the [date] column value.
	 * 
	 * @return     string
	 */
	public function getDate()
	{
		return $this->date;
	}

	/**
	 * Get the [pilot_type] column value.
	 * 
	 * @return     string
	 */
	public function getPilotType()
	{
		return $this->pilot_type;
	}

	/**
	 * Get the [comment] column value.
	 * 
	 * @return     string
	 */
	public function getComment()
	{
		return $this->comment;
	}

	/**
	 * Get the [accepted] column value.
	 * 
	 * @return     int
	 */
	public function getAccepted()
	{
		return $this->accepted;
	}

	/**
	 * Get the [processed] column value.
	 * 
	 * @return     int
	 */
	public function getProcessed()
	{
		return $this->processed;
	}

	/**
	 * Get the [pilot_status] column value.
	 * 
	 * @return     int
	 */
	public function getPilotStatus()
	{
		return $this->pilot_status;
	}

	/**
	 * Get the [on_hold] column value.
	 * 
	 * @return     int
	 */
	public function getOnHold()
	{
		return $this->on_hold;
	}

	/**
	 * Get the [mission_assistant_wanted] column value.
	 * 
	 * @return     int
	 */
	public function getMissionAssistantWanted()
	{
		return $this->mission_assistant_wanted;
	}

	/**
	 * Get the [miss_assis_id] column value.
	 * 
	 * @return     int
	 */
	public function getMissAssisId()
	{
		return $this->miss_assis_id;
	}

	/**
	 * Get the [mission_assistant_name] column value.
	 * 
	 * @return     string
	 */
	public function getMissionAssistantName()
	{
		return $this->mission_assistant_name;
	}

	/**
	 * Get the [ifr_backup_wanted] column value.
	 * 
	 * @return     int
	 */
	public function getIfrBackupWanted()
	{
		return $this->ifr_backup_wanted;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [number_date_assign] column value.
	 * 
	 * @return     int
	 */
	public function getNumberDateAssign()
	{
		return $this->number_date_assign;
	}

	/**
	 * Get the [aircraft_id] column value.
	 * 
	 * @return     int
	 */
	public function getAircraftId()
	{
		return $this->aircraft_id;
	}

	/**
	 * Get the [tail] column value.
	 * 
	 * @return     string
	 */
	public function getTail()
	{
		return $this->tail;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = PilotRequestPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [member_id] column.
	 * 
	 * @param      int $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setMemberId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->member_id !== $v) {
			$this->member_id = $v;
			$this->modifiedColumns[] = PilotRequestPeer::MEMBER_ID;
		}

		if ($this->aMember !== null && $this->aMember->getId() !== $v) {
			$this->aMember = null;
		}

		return $this;
	} // setMemberId()

	/**
	 * Set the value of [group_camp_id] column.
	 * 
	 * @param      int $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setGroupCampId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->group_camp_id !== $v) {
			$this->group_camp_id = $v;
			$this->modifiedColumns[] = PilotRequestPeer::GROUP_CAMP_ID;
		}

		if ($this->aCamp !== null && $this->aCamp->getId() !== $v) {
			$this->aCamp = null;
		}

		return $this;
	} // setGroupCampId()

	/**
	 * Set the value of [home_base] column.
	 * 
	 * @param      string $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setHomeBase($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->home_base !== $v) {
			$this->home_base = $v;
			$this->modifiedColumns[] = PilotRequestPeer::HOME_BASE;
		}

		return $this;
	} // setHomeBase()

	/**
	 * Set the value of [number_seats] column.
	 * 
	 * @param      int $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setNumberSeats($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->number_seats !== $v) {
			$this->number_seats = $v;
			$this->modifiedColumns[] = PilotRequestPeer::NUMBER_SEATS;
		}

		return $this;
	} // setNumberSeats()

	/**
	 * Set the value of [total_weight] column.
	 * 
	 * @param      int $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setTotalWeight($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->total_weight !== $v) {
			$this->total_weight = $v;
			$this->modifiedColumns[] = PilotRequestPeer::TOTAL_WEIGHT;
		}

		return $this;
	} // setTotalWeight()

	/**
	 * Set the value of [multiple_pick] column.
	 * 
	 * @param      int $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setMultiplePick($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->multiple_pick !== $v) {
			$this->multiple_pick = $v;
			$this->modifiedColumns[] = PilotRequestPeer::MULTIPLE_PICK;
		}

		return $this;
	} // setMultiplePick()

	/**
	 * Set the value of [leg_id] column.
	 * 
	 * @param      int $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setLegId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->leg_id !== $v) {
			$this->leg_id = $v;
			$this->modifiedColumns[] = PilotRequestPeer::LEG_ID;
		}

		if ($this->aMissionLeg !== null && $this->aMissionLeg->getId() !== $v) {
			$this->aMissionLeg = null;
		}

		return $this;
	} // setLegId()

	/**
	 * Set the value of [date] column.
	 * 
	 * @param      string $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setDate($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->date !== $v) {
			$this->date = $v;
			$this->modifiedColumns[] = PilotRequestPeer::DATE;
		}

		return $this;
	} // setDate()

	/**
	 * Set the value of [pilot_type] column.
	 * 
	 * @param      string $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setPilotType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pilot_type !== $v) {
			$this->pilot_type = $v;
			$this->modifiedColumns[] = PilotRequestPeer::PILOT_TYPE;
		}

		return $this;
	} // setPilotType()

	/**
	 * Set the value of [comment] column.
	 * 
	 * @param      string $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comment !== $v) {
			$this->comment = $v;
			$this->modifiedColumns[] = PilotRequestPeer::COMMENT;
		}

		return $this;
	} // setComment()

	/**
	 * Set the value of [accepted] column.
	 * 
	 * @param      int $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setAccepted($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->accepted !== $v) {
			$this->accepted = $v;
			$this->modifiedColumns[] = PilotRequestPeer::ACCEPTED;
		}

		return $this;
	} // setAccepted()

	/**
	 * Set the value of [processed] column.
	 * 
	 * @param      int $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setProcessed($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->processed !== $v) {
			$this->processed = $v;
			$this->modifiedColumns[] = PilotRequestPeer::PROCESSED;
		}

		return $this;
	} // setProcessed()

	/**
	 * Set the value of [pilot_status] column.
	 * 
	 * @param      int $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setPilotStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->pilot_status !== $v) {
			$this->pilot_status = $v;
			$this->modifiedColumns[] = PilotRequestPeer::PILOT_STATUS;
		}

		return $this;
	} // setPilotStatus()

	/**
	 * Set the value of [on_hold] column.
	 * 
	 * @param      int $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setOnHold($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->on_hold !== $v || $v === 0) {
			$this->on_hold = $v;
			$this->modifiedColumns[] = PilotRequestPeer::ON_HOLD;
		}

		return $this;
	} // setOnHold()

	/**
	 * Set the value of [mission_assistant_wanted] column.
	 * 
	 * @param      int $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setMissionAssistantWanted($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->mission_assistant_wanted !== $v) {
			$this->mission_assistant_wanted = $v;
			$this->modifiedColumns[] = PilotRequestPeer::MISSION_ASSISTANT_WANTED;
		}

		return $this;
	} // setMissionAssistantWanted()

	/**
	 * Set the value of [miss_assis_id] column.
	 * 
	 * @param      int $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setMissAssisId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->miss_assis_id !== $v) {
			$this->miss_assis_id = $v;
			$this->modifiedColumns[] = PilotRequestPeer::MISS_ASSIS_ID;
		}

		return $this;
	} // setMissAssisId()

	/**
	 * Set the value of [mission_assistant_name] column.
	 * 
	 * @param      string $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setMissionAssistantName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mission_assistant_name !== $v) {
			$this->mission_assistant_name = $v;
			$this->modifiedColumns[] = PilotRequestPeer::MISSION_ASSISTANT_NAME;
		}

		return $this;
	} // setMissionAssistantName()

	/**
	 * Set the value of [ifr_backup_wanted] column.
	 * 
	 * @param      int $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setIfrBackupWanted($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ifr_backup_wanted !== $v) {
			$this->ifr_backup_wanted = $v;
			$this->modifiedColumns[] = PilotRequestPeer::IFR_BACKUP_WANTED;
		}

		return $this;
	} // setIfrBackupWanted()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = PilotRequestPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Set the value of [number_date_assign] column.
	 * 
	 * @param      int $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setNumberDateAssign($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->number_date_assign !== $v) {
			$this->number_date_assign = $v;
			$this->modifiedColumns[] = PilotRequestPeer::NUMBER_DATE_ASSIGN;
		}

		return $this;
	} // setNumberDateAssign()

	/**
	 * Set the value of [aircraft_id] column.
	 * 
	 * @param      int $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setAircraftId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->aircraft_id !== $v) {
			$this->aircraft_id = $v;
			$this->modifiedColumns[] = PilotRequestPeer::AIRCRAFT_ID;
		}

		return $this;
	} // setAircraftId()

	/**
	 * Set the value of [tail] column.
	 * 
	 * @param      string $v new value
	 * @return     PilotRequest The current object (for fluent API support)
	 */
	public function setTail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tail !== $v) {
			$this->tail = $v;
			$this->modifiedColumns[] = PilotRequestPeer::TAIL;
		}

		return $this;
	} // setTail()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(PilotRequestPeer::ON_HOLD))) {
				return false;
			}

			if ($this->on_hold !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->member_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->group_camp_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->home_base = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->number_seats = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->total_weight = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->multiple_pick = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->leg_id = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->date = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->pilot_type = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->comment = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->accepted = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->processed = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->pilot_status = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->on_hold = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->mission_assistant_wanted = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->miss_assis_id = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->mission_assistant_name = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->ifr_backup_wanted = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->created_at = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->number_date_assign = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->aircraft_id = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->tail = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 23; // 23 = PilotRequestPeer::NUM_COLUMNS - PilotRequestPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating PilotRequest object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aMember !== null && $this->member_id !== $this->aMember->getId()) {
			$this->aMember = null;
		}
		if ($this->aCamp !== null && $this->group_camp_id !== $this->aCamp->getId()) {
			$this->aCamp = null;
		}
		if ($this->aMissionLeg !== null && $this->leg_id !== $this->aMissionLeg->getId()) {
			$this->aMissionLeg = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PilotRequestPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PilotRequestPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aMember = null;
			$this->aCamp = null;
			$this->aMissionLeg = null;
			$this->collPilotDates = null;
			$this->lastPilotDateCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasePilotRequest:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PilotRequestPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			PilotRequestPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BasePilotRequest:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BasePilotRequest:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(PilotRequestPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PilotRequestPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BasePilotRequest:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			PilotRequestPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aMember !== null) {
				if ($this->aMember->isModified() || $this->aMember->isNew()) {
					$affectedRows += $this->aMember->save($con);
				}
				$this->setMember($this->aMember);
			}

			if ($this->aCamp !== null) {
				if ($this->aCamp->isModified() || $this->aCamp->isNew()) {
					$affectedRows += $this->aCamp->save($con);
				}
				$this->setCamp($this->aCamp);
			}

			if ($this->aMissionLeg !== null) {
				if ($this->aMissionLeg->isModified() || $this->aMissionLeg->isNew()) {
					$affectedRows += $this->aMissionLeg->save($con);
				}
				$this->setMissionLeg($this->aMissionLeg);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PilotRequestPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PilotRequestPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PilotRequestPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collPilotDates !== null) {
				foreach ($this->collPilotDates as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aMember !== null) {
				if (!$this->aMember->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMember->getValidationFailures());
				}
			}

			if ($this->aCamp !== null) {
				if (!$this->aCamp->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCamp->getValidationFailures());
				}
			}

			if ($this->aMissionLeg !== null) {
				if (!$this->aMissionLeg->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMissionLeg->getValidationFailures());
				}
			}


			if (($retval = PilotRequestPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collPilotDates !== null) {
					foreach ($this->collPilotDates as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PilotRequestPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getMemberId();
				break;
			case 2:
				return $this->getGroupCampId();
				break;
			case 3:
				return $this->getHomeBase();
				break;
			case 4:
				return $this->getNumberSeats();
				break;
			case 5:
				return $this->getTotalWeight();
				break;
			case 6:
				return $this->getMultiplePick();
				break;
			case 7:
				return $this->getLegId();
				break;
			case 8:
				return $this->getDate();
				break;
			case 9:
				return $this->getPilotType();
				break;
			case 10:
				return $this->getComment();
				break;
			case 11:
				return $this->getAccepted();
				break;
			case 12:
				return $this->getProcessed();
				break;
			case 13:
				return $this->getPilotStatus();
				break;
			case 14:
				return $this->getOnHold();
				break;
			case 15:
				return $this->getMissionAssistantWanted();
				break;
			case 16:
				return $this->getMissAssisId();
				break;
			case 17:
				return $this->getMissionAssistantName();
				break;
			case 18:
				return $this->getIfrBackupWanted();
				break;
			case 19:
				return $this->getCreatedAt();
				break;
			case 20:
				return $this->getNumberDateAssign();
				break;
			case 21:
				return $this->getAircraftId();
				break;
			case 22:
				return $this->getTail();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PilotRequestPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getMemberId(),
			$keys[2] => $this->getGroupCampId(),
			$keys[3] => $this->getHomeBase(),
			$keys[4] => $this->getNumberSeats(),
			$keys[5] => $this->getTotalWeight(),
			$keys[6] => $this->getMultiplePick(),
			$keys[7] => $this->getLegId(),
			$keys[8] => $this->getDate(),
			$keys[9] => $this->getPilotType(),
			$keys[10] => $this->getComment(),
			$keys[11] => $this->getAccepted(),
			$keys[12] => $this->getProcessed(),
			$keys[13] => $this->getPilotStatus(),
			$keys[14] => $this->getOnHold(),
			$keys[15] => $this->getMissionAssistantWanted(),
			$keys[16] => $this->getMissAssisId(),
			$keys[17] => $this->getMissionAssistantName(),
			$keys[18] => $this->getIfrBackupWanted(),
			$keys[19] => $this->getCreatedAt(),
			$keys[20] => $this->getNumberDateAssign(),
			$keys[21] => $this->getAircraftId(),
			$keys[22] => $this->getTail(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PilotRequestPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setMemberId($value);
				break;
			case 2:
				$this->setGroupCampId($value);
				break;
			case 3:
				$this->setHomeBase($value);
				break;
			case 4:
				$this->setNumberSeats($value);
				break;
			case 5:
				$this->setTotalWeight($value);
				break;
			case 6:
				$this->setMultiplePick($value);
				break;
			case 7:
				$this->setLegId($value);
				break;
			case 8:
				$this->setDate($value);
				break;
			case 9:
				$this->setPilotType($value);
				break;
			case 10:
				$this->setComment($value);
				break;
			case 11:
				$this->setAccepted($value);
				break;
			case 12:
				$this->setProcessed($value);
				break;
			case 13:
				$this->setPilotStatus($value);
				break;
			case 14:
				$this->setOnHold($value);
				break;
			case 15:
				$this->setMissionAssistantWanted($value);
				break;
			case 16:
				$this->setMissAssisId($value);
				break;
			case 17:
				$this->setMissionAssistantName($value);
				break;
			case 18:
				$this->setIfrBackupWanted($value);
				break;
			case 19:
				$this->setCreatedAt($value);
				break;
			case 20:
				$this->setNumberDateAssign($value);
				break;
			case 21:
				$this->setAircraftId($value);
				break;
			case 22:
				$this->setTail($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PilotRequestPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setMemberId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setGroupCampId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setHomeBase($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setNumberSeats($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setTotalWeight($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setMultiplePick($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setLegId($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setDate($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPilotType($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setComment($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setAccepted($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setProcessed($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setPilotStatus($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setOnHold($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setMissionAssistantWanted($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setMissAssisId($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setMissionAssistantName($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setIfrBackupWanted($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setCreatedAt($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setNumberDateAssign($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setAircraftId($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setTail($arr[$keys[22]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PilotRequestPeer::DATABASE_NAME);

		if ($this->isColumnModified(PilotRequestPeer::ID)) $criteria->add(PilotRequestPeer::ID, $this->id);
		if ($this->isColumnModified(PilotRequestPeer::MEMBER_ID)) $criteria->add(PilotRequestPeer::MEMBER_ID, $this->member_id);
		if ($this->isColumnModified(PilotRequestPeer::GROUP_CAMP_ID)) $criteria->add(PilotRequestPeer::GROUP_CAMP_ID, $this->group_camp_id);
		if ($this->isColumnModified(PilotRequestPeer::HOME_BASE)) $criteria->add(PilotRequestPeer::HOME_BASE, $this->home_base);
		if ($this->isColumnModified(PilotRequestPeer::NUMBER_SEATS)) $criteria->add(PilotRequestPeer::NUMBER_SEATS, $this->number_seats);
		if ($this->isColumnModified(PilotRequestPeer::TOTAL_WEIGHT)) $criteria->add(PilotRequestPeer::TOTAL_WEIGHT, $this->total_weight);
		if ($this->isColumnModified(PilotRequestPeer::MULTIPLE_PICK)) $criteria->add(PilotRequestPeer::MULTIPLE_PICK, $this->multiple_pick);
		if ($this->isColumnModified(PilotRequestPeer::LEG_ID)) $criteria->add(PilotRequestPeer::LEG_ID, $this->leg_id);
		if ($this->isColumnModified(PilotRequestPeer::DATE)) $criteria->add(PilotRequestPeer::DATE, $this->date);
		if ($this->isColumnModified(PilotRequestPeer::PILOT_TYPE)) $criteria->add(PilotRequestPeer::PILOT_TYPE, $this->pilot_type);
		if ($this->isColumnModified(PilotRequestPeer::COMMENT)) $criteria->add(PilotRequestPeer::COMMENT, $this->comment);
		if ($this->isColumnModified(PilotRequestPeer::ACCEPTED)) $criteria->add(PilotRequestPeer::ACCEPTED, $this->accepted);
		if ($this->isColumnModified(PilotRequestPeer::PROCESSED)) $criteria->add(PilotRequestPeer::PROCESSED, $this->processed);
		if ($this->isColumnModified(PilotRequestPeer::PILOT_STATUS)) $criteria->add(PilotRequestPeer::PILOT_STATUS, $this->pilot_status);
		if ($this->isColumnModified(PilotRequestPeer::ON_HOLD)) $criteria->add(PilotRequestPeer::ON_HOLD, $this->on_hold);
		if ($this->isColumnModified(PilotRequestPeer::MISSION_ASSISTANT_WANTED)) $criteria->add(PilotRequestPeer::MISSION_ASSISTANT_WANTED, $this->mission_assistant_wanted);
		if ($this->isColumnModified(PilotRequestPeer::MISS_ASSIS_ID)) $criteria->add(PilotRequestPeer::MISS_ASSIS_ID, $this->miss_assis_id);
		if ($this->isColumnModified(PilotRequestPeer::MISSION_ASSISTANT_NAME)) $criteria->add(PilotRequestPeer::MISSION_ASSISTANT_NAME, $this->mission_assistant_name);
		if ($this->isColumnModified(PilotRequestPeer::IFR_BACKUP_WANTED)) $criteria->add(PilotRequestPeer::IFR_BACKUP_WANTED, $this->ifr_backup_wanted);
		if ($this->isColumnModified(PilotRequestPeer::CREATED_AT)) $criteria->add(PilotRequestPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(PilotRequestPeer::NUMBER_DATE_ASSIGN)) $criteria->add(PilotRequestPeer::NUMBER_DATE_ASSIGN, $this->number_date_assign);
		if ($this->isColumnModified(PilotRequestPeer::AIRCRAFT_ID)) $criteria->add(PilotRequestPeer::AIRCRAFT_ID, $this->aircraft_id);
		if ($this->isColumnModified(PilotRequestPeer::TAIL)) $criteria->add(PilotRequestPeer::TAIL, $this->tail);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PilotRequestPeer::DATABASE_NAME);

		$criteria->add(PilotRequestPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of PilotRequest (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setMemberId($this->member_id);

		$copyObj->setGroupCampId($this->group_camp_id);

		$copyObj->setHomeBase($this->home_base);

		$copyObj->setNumberSeats($this->number_seats);

		$copyObj->setTotalWeight($this->total_weight);

		$copyObj->setMultiplePick($this->multiple_pick);

		$copyObj->setLegId($this->leg_id);

		$copyObj->setDate($this->date);

		$copyObj->setPilotType($this->pilot_type);

		$copyObj->setComment($this->comment);

		$copyObj->setAccepted($this->accepted);

		$copyObj->setProcessed($this->processed);

		$copyObj->setPilotStatus($this->pilot_status);

		$copyObj->setOnHold($this->on_hold);

		$copyObj->setMissionAssistantWanted($this->mission_assistant_wanted);

		$copyObj->setMissAssisId($this->miss_assis_id);

		$copyObj->setMissionAssistantName($this->mission_assistant_name);

		$copyObj->setIfrBackupWanted($this->ifr_backup_wanted);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setNumberDateAssign($this->number_date_assign);

		$copyObj->setAircraftId($this->aircraft_id);

		$copyObj->setTail($this->tail);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getPilotDates() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPilotDate($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     PilotRequest Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PilotRequestPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PilotRequestPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Member object.
	 *
	 * @param      Member $v
	 * @return     PilotRequest The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMember(Member $v = null)
	{
		if ($v === null) {
			$this->setMemberId(NULL);
		} else {
			$this->setMemberId($v->getId());
		}

		$this->aMember = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Member object, it will not be re-added.
		if ($v !== null) {
			$v->addPilotRequest($this);
		}

		return $this;
	}


	/**
	 * Get the associated Member object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Member The associated Member object.
	 * @throws     PropelException
	 */
	public function getMember(PropelPDO $con = null)
	{
		if ($this->aMember === null && ($this->member_id !== null)) {
			$c = new Criteria(MemberPeer::DATABASE_NAME);
			$c->add(MemberPeer::ID, $this->member_id);
			$this->aMember = MemberPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMember->addPilotRequests($this);
			 */
		}
		return $this->aMember;
	}

	/**
	 * Declares an association between this object and a Camp object.
	 *
	 * @param      Camp $v
	 * @return     PilotRequest The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCamp(Camp $v = null)
	{
		if ($v === null) {
			$this->setGroupCampId(NULL);
		} else {
			$this->setGroupCampId($v->getId());
		}

		$this->aCamp = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Camp object, it will not be re-added.
		if ($v !== null) {
			$v->addPilotRequest($this);
		}

		return $this;
	}


	/**
	 * Get the associated Camp object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Camp The associated Camp object.
	 * @throws     PropelException
	 */
	public function getCamp(PropelPDO $con = null)
	{
		if ($this->aCamp === null && ($this->group_camp_id !== null)) {
			$c = new Criteria(CampPeer::DATABASE_NAME);
			$c->add(CampPeer::ID, $this->group_camp_id);
			$this->aCamp = CampPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCamp->addPilotRequests($this);
			 */
		}
		return $this->aCamp;
	}

	/**
	 * Declares an association between this object and a MissionLeg object.
	 *
	 * @param      MissionLeg $v
	 * @return     PilotRequest The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMissionLeg(MissionLeg $v = null)
	{
		if ($v === null) {
			$this->setLegId(NULL);
		} else {
			$this->setLegId($v->getId());
		}

		$this->aMissionLeg = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the MissionLeg object, it will not be re-added.
		if ($v !== null) {
			$v->addPilotRequest($this);
		}

		return $this;
	}


	/**
	 * Get the associated MissionLeg object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     MissionLeg The associated MissionLeg object.
	 * @throws     PropelException
	 */
	public function getMissionLeg(PropelPDO $con = null)
	{
		if ($this->aMissionLeg === null && ($this->leg_id !== null)) {
			$c = new Criteria(MissionLegPeer::DATABASE_NAME);
			$c->add(MissionLegPeer::ID, $this->leg_id);
			$this->aMissionLeg = MissionLegPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMissionLeg->addPilotRequests($this);
			 */
		}
		return $this->aMissionLeg;
	}

	/**
	 * Clears out the collPilotDates collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPilotDates()
	 */
	public function clearPilotDates()
	{
		$this->collPilotDates = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPilotDates collection (array).
	 *
	 * By default this just sets the collPilotDates collection to an empty array (like clearcollPilotDates());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPilotDates()
	{
		$this->collPilotDates = array();
	}

	/**
	 * Gets an array of PilotDate objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PilotRequest has previously been saved, it will retrieve
	 * related PilotDates from storage. If this PilotRequest is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PilotDate[]
	 * @throws     PropelException
	 */
	public function getPilotDates($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotRequestPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilotDates === null) {
			if ($this->isNew()) {
			   $this->collPilotDates = array();
			} else {

				$criteria->add(PilotDatePeer::PILOT_REQUEST_ID, $this->id);

				PilotDatePeer::addSelectColumns($criteria);
				$this->collPilotDates = PilotDatePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PilotDatePeer::PILOT_REQUEST_ID, $this->id);

				PilotDatePeer::addSelectColumns($criteria);
				if (!isset($this->lastPilotDateCriteria) || !$this->lastPilotDateCriteria->equals($criteria)) {
					$this->collPilotDates = PilotDatePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPilotDateCriteria = $criteria;
		return $this->collPilotDates;
	}

	/**
	 * Returns the number of related PilotDate objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PilotDate objects.
	 * @throws     PropelException
	 */
	public function countPilotDates(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotRequestPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPilotDates === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PilotDatePeer::PILOT_REQUEST_ID, $this->id);

				$count = PilotDatePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PilotDatePeer::PILOT_REQUEST_ID, $this->id);

				if (!isset($this->lastPilotDateCriteria) || !$this->lastPilotDateCriteria->equals($criteria)) {
					$count = PilotDatePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPilotDates);
				}
			} else {
				$count = count($this->collPilotDates);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PilotDate object to this object
	 * through the PilotDate foreign key attribute.
	 *
	 * @param      PilotDate $l PilotDate
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPilotDate(PilotDate $l)
	{
		if ($this->collPilotDates === null) {
			$this->initPilotDates();
		}
		if (!in_array($l, $this->collPilotDates, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPilotDates, $l);
			$l->setPilotRequest($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PilotRequest is new, it will return
	 * an empty collection; or if this PilotRequest has previously
	 * been saved, it will retrieve related PilotDates from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PilotRequest.
	 */
	public function getPilotDatesJoinMember($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PilotRequestPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilotDates === null) {
			if ($this->isNew()) {
				$this->collPilotDates = array();
			} else {

				$criteria->add(PilotDatePeer::PILOT_REQUEST_ID, $this->id);

				$this->collPilotDates = PilotDatePeer::doSelectJoinMember($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PilotDatePeer::PILOT_REQUEST_ID, $this->id);

			if (!isset($this->lastPilotDateCriteria) || !$this->lastPilotDateCriteria->equals($criteria)) {
				$this->collPilotDates = PilotDatePeer::doSelectJoinMember($criteria, $con, $join_behavior);
			}
		}
		$this->lastPilotDateCriteria = $criteria;

		return $this->collPilotDates;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collPilotDates) {
				foreach ((array) $this->collPilotDates as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collPilotDates = null;
			$this->aMember = null;
			$this->aCamp = null;
			$this->aMissionLeg = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BasePilotRequest:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BasePilotRequest::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BasePilotRequest
