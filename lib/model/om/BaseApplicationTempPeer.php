<?php

/**
 * Base static class for performing query and update operations on the 'application_temp' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue May 24 06:33:25 2011
 *
 * @package    lib.model.om
 */
abstract class BaseApplicationTempPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'application_temp';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.ApplicationTemp';

	/** The total number of columns. */
	const NUM_COLUMNS = 143;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** the column name for the ID field */
	const ID = 'application_temp.ID';

	/** the column name for the APPLICATION_DATE field */
	const APPLICATION_DATE = 'application_temp.APPLICATION_DATE';

	/** the column name for the RENEWAL field */
	const RENEWAL = 'application_temp.RENEWAL';

	/** the column name for the TITLE field */
	const TITLE = 'application_temp.TITLE';

	/** the column name for the FIRST_NAME field */
	const FIRST_NAME = 'application_temp.FIRST_NAME';

	/** the column name for the LAST_NAME field */
	const LAST_NAME = 'application_temp.LAST_NAME';

	/** the column name for the ADDRESS1 field */
	const ADDRESS1 = 'application_temp.ADDRESS1';

	/** the column name for the ADDRESS2 field */
	const ADDRESS2 = 'application_temp.ADDRESS2';

	/** the column name for the CITY field */
	const CITY = 'application_temp.CITY';

	/** the column name for the STATE field */
	const STATE = 'application_temp.STATE';

	/** the column name for the ZIPCODE field */
	const ZIPCODE = 'application_temp.ZIPCODE';

	/** the column name for the DAY_PHONE field */
	const DAY_PHONE = 'application_temp.DAY_PHONE';

	/** the column name for the DAY_COMMENT field */
	const DAY_COMMENT = 'application_temp.DAY_COMMENT';

	/** the column name for the EVE_PHONE field */
	const EVE_PHONE = 'application_temp.EVE_PHONE';

	/** the column name for the EVE_COMMENT field */
	const EVE_COMMENT = 'application_temp.EVE_COMMENT';

	/** the column name for the MOBILE_PHONE field */
	const MOBILE_PHONE = 'application_temp.MOBILE_PHONE';

	/** the column name for the MOBILE_COMMENT field */
	const MOBILE_COMMENT = 'application_temp.MOBILE_COMMENT';

	/** the column name for the PAGER_PHONE field */
	const PAGER_PHONE = 'application_temp.PAGER_PHONE';

	/** the column name for the PAGER_COMMENT field */
	const PAGER_COMMENT = 'application_temp.PAGER_COMMENT';

	/** the column name for the FAX_PHONE1 field */
	const FAX_PHONE1 = 'application_temp.FAX_PHONE1';

	/** the column name for the FAX_COMMENT1 field */
	const FAX_COMMENT1 = 'application_temp.FAX_COMMENT1';

	/** the column name for the FAX_PHONE2 field */
	const FAX_PHONE2 = 'application_temp.FAX_PHONE2';

	/** the column name for the FAX_COMMENT2 field */
	const FAX_COMMENT2 = 'application_temp.FAX_COMMENT2';

	/** the column name for the OTHER_PHONE field */
	const OTHER_PHONE = 'application_temp.OTHER_PHONE';

	/** the column name for the OTHER_COMMENT field */
	const OTHER_COMMENT = 'application_temp.OTHER_COMMENT';

	/** the column name for the EMAIL field */
	const EMAIL = 'application_temp.EMAIL';

	/** the column name for the SPOUSE_FIRST_NAME field */
	const SPOUSE_FIRST_NAME = 'application_temp.SPOUSE_FIRST_NAME';

	/** the column name for the SPOUSE_LAST_NAME field */
	const SPOUSE_LAST_NAME = 'application_temp.SPOUSE_LAST_NAME';

	/** the column name for the APPLICANT_PILOT field */
	const APPLICANT_PILOT = 'application_temp.APPLICANT_PILOT';

	/** the column name for the SPOUSE_PILOT field */
	const SPOUSE_PILOT = 'application_temp.SPOUSE_PILOT';

	/** the column name for the APPLICANT_COPILOT field */
	const APPLICANT_COPILOT = 'application_temp.APPLICANT_COPILOT';

	/** the column name for the LANGUAGES_SPOKEN field */
	const LANGUAGES_SPOKEN = 'application_temp.LANGUAGES_SPOKEN';

	/** the column name for the HOME_BASE field */
	const HOME_BASE = 'application_temp.HOME_BASE';

	/** the column name for the FBO_NAME field */
	const FBO_NAME = 'application_temp.FBO_NAME';

	/** the column name for the AIRCRAFT_PRIMARY_ID field */
	const AIRCRAFT_PRIMARY_ID = 'application_temp.AIRCRAFT_PRIMARY_ID';

	/** the column name for the AIRCRAFT_PRIMARY_OWN field */
	const AIRCRAFT_PRIMARY_OWN = 'application_temp.AIRCRAFT_PRIMARY_OWN';

	/** the column name for the AIRCRAFT_PRIMARY_ICE field */
	const AIRCRAFT_PRIMARY_ICE = 'application_temp.AIRCRAFT_PRIMARY_ICE';

	/** the column name for the AIRCRAFT_PRIMARY_SEATS field */
	const AIRCRAFT_PRIMARY_SEATS = 'application_temp.AIRCRAFT_PRIMARY_SEATS';

	/** the column name for the AIRCRAFT_PRIMARY_N_NUMBER field */
	const AIRCRAFT_PRIMARY_N_NUMBER = 'application_temp.AIRCRAFT_PRIMARY_N_NUMBER';

	/** the column name for the AIRCRAFT_SECONDARY_ID field */
	const AIRCRAFT_SECONDARY_ID = 'application_temp.AIRCRAFT_SECONDARY_ID';

	/** the column name for the AIRCRAFT_SECONDARY_OWN field */
	const AIRCRAFT_SECONDARY_OWN = 'application_temp.AIRCRAFT_SECONDARY_OWN';

	/** the column name for the AIRCRAFT_SECONDARY_ICE field */
	const AIRCRAFT_SECONDARY_ICE = 'application_temp.AIRCRAFT_SECONDARY_ICE';

	/** the column name for the AIRCRAFT_SECONDARY_SEATS field */
	const AIRCRAFT_SECONDARY_SEATS = 'application_temp.AIRCRAFT_SECONDARY_SEATS';

	/** the column name for the AIRCRAFT_SECONDARY_N_NUMBER field */
	const AIRCRAFT_SECONDARY_N_NUMBER = 'application_temp.AIRCRAFT_SECONDARY_N_NUMBER';

	/** the column name for the PILOT_CERTIFICATE field */
	const PILOT_CERTIFICATE = 'application_temp.PILOT_CERTIFICATE';

	/** the column name for the RATINGS field */
	const RATINGS = 'application_temp.RATINGS';

	/** the column name for the MEDICAL_CLASS field */
	const MEDICAL_CLASS = 'application_temp.MEDICAL_CLASS';

	/** the column name for the LICENSE_TYPE field */
	const LICENSE_TYPE = 'application_temp.LICENSE_TYPE';

	/** the column name for the TOTAL_HOURS field */
	const TOTAL_HOURS = 'application_temp.TOTAL_HOURS';

	/** the column name for the IFR_HOURS field */
	const IFR_HOURS = 'application_temp.IFR_HOURS';

	/** the column name for the MULTI_HOURS field */
	const MULTI_HOURS = 'application_temp.MULTI_HOURS';

	/** the column name for the OTHER_HOURS field */
	const OTHER_HOURS = 'application_temp.OTHER_HOURS';

	/** the column name for the DATE_OF_BIRTH field */
	const DATE_OF_BIRTH = 'application_temp.DATE_OF_BIRTH';

	/** the column name for the HEIGHT field */
	const HEIGHT = 'application_temp.HEIGHT';

	/** the column name for the WEIGHT field */
	const WEIGHT = 'application_temp.WEIGHT';

	/** the column name for the AVAILABILITY_WEEKDAYS field */
	const AVAILABILITY_WEEKDAYS = 'application_temp.AVAILABILITY_WEEKDAYS';

	/** the column name for the AVAILABILITY_WEEKNIGHTS field */
	const AVAILABILITY_WEEKNIGHTS = 'application_temp.AVAILABILITY_WEEKNIGHTS';

	/** the column name for the AVAILABILITY_WEEKENDS field */
	const AVAILABILITY_WEEKENDS = 'application_temp.AVAILABILITY_WEEKENDS';

	/** the column name for the AVAILABILITY_NOTICE field */
	const AVAILABILITY_NOTICE = 'application_temp.AVAILABILITY_NOTICE';

	/** the column name for the AVAILABILITY_LAST_MINUTE field */
	const AVAILABILITY_LAST_MINUTE = 'application_temp.AVAILABILITY_LAST_MINUTE';

	/** the column name for the AVAILABILITY_COPILOT field */
	const AVAILABILITY_COPILOT = 'application_temp.AVAILABILITY_COPILOT';

	/** the column name for the AFFIRMATION_AGREED field */
	const AFFIRMATION_AGREED = 'application_temp.AFFIRMATION_AGREED';

	/** the column name for the INSURANCE_AGREED field */
	const INSURANCE_AGREED = 'application_temp.INSURANCE_AGREED';

	/** the column name for the VOLUNTEER_INTEREST field */
	const VOLUNTEER_INTEREST = 'application_temp.VOLUNTEER_INTEREST';

	/** the column name for the COMPANY_NAME field */
	const COMPANY_NAME = 'application_temp.COMPANY_NAME';

	/** the column name for the COMPANY_POSITION field */
	const COMPANY_POSITION = 'application_temp.COMPANY_POSITION';

	/** the column name for the COMPANY_MATCH_FUNDS field */
	const COMPANY_MATCH_FUNDS = 'application_temp.COMPANY_MATCH_FUNDS';

	/** the column name for the COMPANY_BUSINESS_CATEGORY_ID field */
	const COMPANY_BUSINESS_CATEGORY_ID = 'application_temp.COMPANY_BUSINESS_CATEGORY_ID';

	/** the column name for the REFERRAL_SOURCE field */
	const REFERRAL_SOURCE = 'application_temp.REFERRAL_SOURCE';

	/** the column name for the PREMIUM_CHOICE field */
	const PREMIUM_CHOICE = 'application_temp.PREMIUM_CHOICE';

	/** the column name for the PREMIUM_SIZE field */
	const PREMIUM_SIZE = 'application_temp.PREMIUM_SIZE';

	/** the column name for the DUES_AMOUNT_PAID field */
	const DUES_AMOUNT_PAID = 'application_temp.DUES_AMOUNT_PAID';

	/** the column name for the DONATION_AMOUNT_PAID field */
	const DONATION_AMOUNT_PAID = 'application_temp.DONATION_AMOUNT_PAID';

	/** the column name for the METHOD_OF_PAYMENT_ID field */
	const METHOD_OF_PAYMENT_ID = 'application_temp.METHOD_OF_PAYMENT_ID';

	/** the column name for the CCARD_APPROVAL_NUMBER field */
	const CCARD_APPROVAL_NUMBER = 'application_temp.CCARD_APPROVAL_NUMBER';

	/** the column name for the CCARD_ERROR_CODE field */
	const CCARD_ERROR_CODE = 'application_temp.CCARD_ERROR_CODE';

	/** the column name for the CCARD_AVS_RESULT field */
	const CCARD_AVS_RESULT = 'application_temp.CCARD_AVS_RESULT';

	/** the column name for the PROCESSED_DATE field */
	const PROCESSED_DATE = 'application_temp.PROCESSED_DATE';

	/** the column name for the MEMBER_ID field */
	const MEMBER_ID = 'application_temp.MEMBER_ID';

	/** the column name for the MISSION_ORIENTATION field */
	const MISSION_ORIENTATION = 'application_temp.MISSION_ORIENTATION';

	/** the column name for the MISSION_COORDINATION field */
	const MISSION_COORDINATION = 'application_temp.MISSION_COORDINATION';

	/** the column name for the PILOT_RECRUITMENT field */
	const PILOT_RECRUITMENT = 'application_temp.PILOT_RECRUITMENT';

	/** the column name for the FUND_RAISING field */
	const FUND_RAISING = 'application_temp.FUND_RAISING';

	/** the column name for the CELEBRITY_CONTACTS field */
	const CELEBRITY_CONTACTS = 'application_temp.CELEBRITY_CONTACTS';

	/** the column name for the HOSPITAL_OUTREACH field */
	const HOSPITAL_OUTREACH = 'application_temp.HOSPITAL_OUTREACH';

	/** the column name for the MEDIA_RELATIONS field */
	const MEDIA_RELATIONS = 'application_temp.MEDIA_RELATIONS';

	/** the column name for the TELEPHONE_WORK field */
	const TELEPHONE_WORK = 'application_temp.TELEPHONE_WORK';

	/** the column name for the COMPUTERS field */
	const COMPUTERS = 'application_temp.COMPUTERS';

	/** the column name for the CLERICAL field */
	const CLERICAL = 'application_temp.CLERICAL';

	/** the column name for the PUBLICITY field */
	const PUBLICITY = 'application_temp.PUBLICITY';

	/** the column name for the WRITING field */
	const WRITING = 'application_temp.WRITING';

	/** the column name for the SPEAKERS_BUREAU field */
	const SPEAKERS_BUREAU = 'application_temp.SPEAKERS_BUREAU';

	/** the column name for the WING_TEAM field */
	const WING_TEAM = 'application_temp.WING_TEAM';

	/** the column name for the GRAPHIC_ARTS field */
	const GRAPHIC_ARTS = 'application_temp.GRAPHIC_ARTS';

	/** the column name for the EVENT_PLANNING field */
	const EVENT_PLANNING = 'application_temp.EVENT_PLANNING';

	/** the column name for the WEB_INTERNET field */
	const WEB_INTERNET = 'application_temp.WEB_INTERNET';

	/** the column name for the FOUNDATION_CONTACTS field */
	const FOUNDATION_CONTACTS = 'application_temp.FOUNDATION_CONTACTS';

	/** the column name for the AVIATION_CONTACTS field */
	const AVIATION_CONTACTS = 'application_temp.AVIATION_CONTACTS';

	/** the column name for the PRINTING field */
	const PRINTING = 'application_temp.PRINTING';

	/** the column name for the MEMBER_AOPA field */
	const MEMBER_AOPA = 'application_temp.MEMBER_AOPA';

	/** the column name for the MEMBER_KIWANIS field */
	const MEMBER_KIWANIS = 'application_temp.MEMBER_KIWANIS';

	/** the column name for the MEMBER_ROTARY field */
	const MEMBER_ROTARY = 'application_temp.MEMBER_ROTARY';

	/** the column name for the MEMBER_LIONS field */
	const MEMBER_LIONS = 'application_temp.MEMBER_LIONS';

	/** the column name for the PERSON_ID field */
	const PERSON_ID = 'application_temp.PERSON_ID';

	/** the column name for the NOVAPOINTE_ID field */
	const NOVAPOINTE_ID = 'application_temp.NOVAPOINTE_ID';

	/** the column name for the PREMIUM_SHIP_DATE field */
	const PREMIUM_SHIP_DATE = 'application_temp.PREMIUM_SHIP_DATE';

	/** the column name for the PREMIUM_SHIP_METHOD field */
	const PREMIUM_SHIP_METHOD = 'application_temp.PREMIUM_SHIP_METHOD';

	/** the column name for the PREMIUM_SHIP_COST field */
	const PREMIUM_SHIP_COST = 'application_temp.PREMIUM_SHIP_COST';

	/** the column name for the PREMIUM_SHIP_TRACKING_NUMBER field */
	const PREMIUM_SHIP_TRACKING_NUMBER = 'application_temp.PREMIUM_SHIP_TRACKING_NUMBER';

	/** the column name for the REFERER_NAME field */
	const REFERER_NAME = 'application_temp.REFERER_NAME';

	/** the column name for the REFERRAL_SESSION_ID field */
	const REFERRAL_SESSION_ID = 'application_temp.REFERRAL_SESSION_ID';

	/** the column name for the AIRCRAFT_THIRD_ID field */
	const AIRCRAFT_THIRD_ID = 'application_temp.AIRCRAFT_THIRD_ID';

	/** the column name for the AIRCRAFT_THIRD_OWN field */
	const AIRCRAFT_THIRD_OWN = 'application_temp.AIRCRAFT_THIRD_OWN';

	/** the column name for the AIRCRAFT_THIRD_ICE field */
	const AIRCRAFT_THIRD_ICE = 'application_temp.AIRCRAFT_THIRD_ICE';

	/** the column name for the AIRCRAFT_THIRD_SEATS field */
	const AIRCRAFT_THIRD_SEATS = 'application_temp.AIRCRAFT_THIRD_SEATS';

	/** the column name for the AIRCRAFT_THIRD_N_NUMBER field */
	const AIRCRAFT_THIRD_N_NUMBER = 'application_temp.AIRCRAFT_THIRD_N_NUMBER';

	/** the column name for the IP_ADDRESS field */
	const IP_ADDRESS = 'application_temp.IP_ADDRESS';

	/** the column name for the PAGER_EMAIL field */
	const PAGER_EMAIL = 'application_temp.PAGER_EMAIL';

	/** the column name for the MEMBER_99S field */
	const MEMBER_99S = 'application_temp.MEMBER_99S';

	/** the column name for the MEMBER_WIA field */
	const MEMBER_WIA = 'application_temp.MEMBER_WIA';

	/** the column name for the MISSION_EMAIL_OPTIN field */
	const MISSION_EMAIL_OPTIN = 'application_temp.MISSION_EMAIL_OPTIN';

	/** the column name for the HSEATS_INTEREST field */
	const HSEATS_INTEREST = 'application_temp.HSEATS_INTEREST';

	/** the column name for the MASTER_APPLICATION_ID field */
	const MASTER_APPLICATION_ID = 'application_temp.MASTER_APPLICATION_ID';

	/** the column name for the MASTER_MEMBER_ID field */
	const MASTER_MEMBER_ID = 'application_temp.MASTER_MEMBER_ID';

	/** the column name for the REFERRAL_SOURCE_OTHER field */
	const REFERRAL_SOURCE_OTHER = 'application_temp.REFERRAL_SOURCE_OTHER';

	/** the column name for the SECONDARY_EMAIL field */
	const SECONDARY_EMAIL = 'application_temp.SECONDARY_EMAIL';

	/** the column name for the PAYMENT_TRANSACTION_ID field */
	const PAYMENT_TRANSACTION_ID = 'application_temp.PAYMENT_TRANSACTION_ID';

	/** the column name for the MIDDLE_NAME field */
	const MIDDLE_NAME = 'application_temp.MIDDLE_NAME';

	/** the column name for the SUFFIX field */
	const SUFFIX = 'application_temp.SUFFIX';

	/** the column name for the NICKNAME field */
	const NICKNAME = 'application_temp.NICKNAME';

	/** the column name for the VETERAN field */
	const VETERAN = 'application_temp.VETERAN';

	/** the column name for the GENDER field */
	const GENDER = 'application_temp.GENDER';

	/** the column name for the EMERGENCY_CONTACT_NAME field */
	const EMERGENCY_CONTACT_NAME = 'application_temp.EMERGENCY_CONTACT_NAME';

	/** the column name for the EMERGENCY_CONTACT_PHONE field */
	const EMERGENCY_CONTACT_PHONE = 'application_temp.EMERGENCY_CONTACT_PHONE';

	/** the column name for the COUNTRY field */
	const COUNTRY = 'application_temp.COUNTRY';

	/** the column name for the DRIVERS_LICENSE_STATE field */
	const DRIVERS_LICENSE_STATE = 'application_temp.DRIVERS_LICENSE_STATE';

	/** the column name for the DRIVERS_LICENSE_NUMBER field */
	const DRIVERS_LICENSE_NUMBER = 'application_temp.DRIVERS_LICENSE_NUMBER';

	/** the column name for the CCARD_NUMBER field */
	const CCARD_NUMBER = 'application_temp.CCARD_NUMBER';

	/** the column name for the CCARD_CODE field */
	const CCARD_CODE = 'application_temp.CCARD_CODE';

	/** the column name for the CCARD_EXPIRE field */
	const CCARD_EXPIRE = 'application_temp.CCARD_EXPIRE';

	/** the column name for the IS_COMPLETE field */
	const IS_COMPLETE = 'application_temp.IS_COMPLETE';

	/** the column name for the MEMBER_CLASS_ID field */
	const MEMBER_CLASS_ID = 'application_temp.MEMBER_CLASS_ID';

	/** the column name for the WING_ID field */
	const WING_ID = 'application_temp.WING_ID';

	/**
	 * An identiy map to hold any loaded instances of ApplicationTemp objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array ApplicationTemp[]
	 */
	public static $instances = array();

	/**
	 * The MapBuilder instance for this peer.
	 * @var        MapBuilder
	 */
	private static $mapBuilder = null;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	private static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('Id', 'ApplicationDate', 'Renewal', 'Title', 'FirstName', 'LastName', 'Address1', 'Address2', 'City', 'State', 'Zipcode', 'DayPhone', 'DayComment', 'EvePhone', 'EveComment', 'MobilePhone', 'MobileComment', 'PagerPhone', 'PagerComment', 'FaxPhone1', 'FaxComment1', 'FaxPhone2', 'FaxComment2', 'OtherPhone', 'OtherComment', 'Email', 'SpouseFirstName', 'SpouseLastName', 'ApplicantPilot', 'SpousePilot', 'ApplicantCopilot', 'LanguagesSpoken', 'HomeBase', 'FboName', 'AircraftPrimaryId', 'AircraftPrimaryOwn', 'AircraftPrimaryIce', 'AircraftPrimarySeats', 'AircraftPrimaryNNumber', 'AircraftSecondaryId', 'AircraftSecondaryOwn', 'AircraftSecondaryIce', 'AircraftSecondarySeats', 'AircraftSecondaryNNumber', 'PilotCertificate', 'Ratings', 'MedicalClass', 'LicenseType', 'TotalHours', 'IfrHours', 'MultiHours', 'OtherHours', 'DateOfBirth', 'Height', 'Weight', 'AvailabilityWeekdays', 'AvailabilityWeeknights', 'AvailabilityWeekends', 'AvailabilityNotice', 'AvailabilityLastMinute', 'AvailabilityCopilot', 'AffirmationAgreed', 'InsuranceAgreed', 'VolunteerInterest', 'CompanyName', 'CompanyPosition', 'CompanyMatchFunds', 'CompanyBusinessCategoryId', 'ReferralSource', 'PremiumChoice', 'PremiumSize', 'DuesAmountPaid', 'DonationAmountPaid', 'MethodOfPaymentId', 'CcardApprovalNumber', 'CcardErrorCode', 'CcardAvsResult', 'ProcessedDate', 'MemberId', 'MissionOrientation', 'MissionCoordination', 'PilotRecruitment', 'FundRaising', 'CelebrityContacts', 'HospitalOutreach', 'MediaRelations', 'TelephoneWork', 'Computers', 'Clerical', 'Publicity', 'Writing', 'SpeakersBureau', 'WingTeam', 'GraphicArts', 'EventPlanning', 'WebInternet', 'FoundationContacts', 'AviationContacts', 'Printing', 'MemberAopa', 'MemberKiwanis', 'MemberRotary', 'MemberLions', 'PersonId', 'NovapointeId', 'PremiumShipDate', 'PremiumShipMethod', 'PremiumShipCost', 'PremiumShipTrackingNumber', 'RefererName', 'ReferralSessionId', 'AircraftThirdId', 'AircraftThirdOwn', 'AircraftThirdIce', 'AircraftThirdSeats', 'AircraftThirdNNumber', 'IpAddress', 'PagerEmail', 'Member99s', 'MemberWia', 'MissionEmailOptin', 'HseatsInterest', 'MasterApplicationId', 'MasterMemberId', 'ReferralSourceOther', 'SecondaryEmail', 'PaymentTransactionId', 'MiddleName', 'Suffix', 'Nickname', 'Veteran', 'Gender', 'EmergencyContactName', 'EmergencyContactPhone', 'Country', 'DriversLicenseState', 'DriversLicenseNumber', 'CcardNumber', 'CcardCode', 'CcardExpire', 'IsComplete', 'MemberClassId', 'WingId', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id', 'applicationDate', 'renewal', 'title', 'firstName', 'lastName', 'address1', 'address2', 'city', 'state', 'zipcode', 'dayPhone', 'dayComment', 'evePhone', 'eveComment', 'mobilePhone', 'mobileComment', 'pagerPhone', 'pagerComment', 'faxPhone1', 'faxComment1', 'faxPhone2', 'faxComment2', 'otherPhone', 'otherComment', 'email', 'spouseFirstName', 'spouseLastName', 'applicantPilot', 'spousePilot', 'applicantCopilot', 'languagesSpoken', 'homeBase', 'fboName', 'aircraftPrimaryId', 'aircraftPrimaryOwn', 'aircraftPrimaryIce', 'aircraftPrimarySeats', 'aircraftPrimaryNNumber', 'aircraftSecondaryId', 'aircraftSecondaryOwn', 'aircraftSecondaryIce', 'aircraftSecondarySeats', 'aircraftSecondaryNNumber', 'pilotCertificate', 'ratings', 'medicalClass', 'licenseType', 'totalHours', 'ifrHours', 'multiHours', 'otherHours', 'dateOfBirth', 'height', 'weight', 'availabilityWeekdays', 'availabilityWeeknights', 'availabilityWeekends', 'availabilityNotice', 'availabilityLastMinute', 'availabilityCopilot', 'affirmationAgreed', 'insuranceAgreed', 'volunteerInterest', 'companyName', 'companyPosition', 'companyMatchFunds', 'companyBusinessCategoryId', 'referralSource', 'premiumChoice', 'premiumSize', 'duesAmountPaid', 'donationAmountPaid', 'methodOfPaymentId', 'ccardApprovalNumber', 'ccardErrorCode', 'ccardAvsResult', 'processedDate', 'memberId', 'missionOrientation', 'missionCoordination', 'pilotRecruitment', 'fundRaising', 'celebrityContacts', 'hospitalOutreach', 'mediaRelations', 'telephoneWork', 'computers', 'clerical', 'publicity', 'writing', 'speakersBureau', 'wingTeam', 'graphicArts', 'eventPlanning', 'webInternet', 'foundationContacts', 'aviationContacts', 'printing', 'memberAopa', 'memberKiwanis', 'memberRotary', 'memberLions', 'personId', 'novapointeId', 'premiumShipDate', 'premiumShipMethod', 'premiumShipCost', 'premiumShipTrackingNumber', 'refererName', 'referralSessionId', 'aircraftThirdId', 'aircraftThirdOwn', 'aircraftThirdIce', 'aircraftThirdSeats', 'aircraftThirdNNumber', 'ipAddress', 'pagerEmail', 'member99s', 'memberWia', 'missionEmailOptin', 'hseatsInterest', 'masterApplicationId', 'masterMemberId', 'referralSourceOther', 'secondaryEmail', 'paymentTransactionId', 'middleName', 'suffix', 'nickname', 'veteran', 'gender', 'emergencyContactName', 'emergencyContactPhone', 'country', 'driversLicenseState', 'driversLicenseNumber', 'ccardNumber', 'ccardCode', 'ccardExpire', 'isComplete', 'memberClassId', 'wingId', ),
		BasePeer::TYPE_COLNAME => array (self::ID, self::APPLICATION_DATE, self::RENEWAL, self::TITLE, self::FIRST_NAME, self::LAST_NAME, self::ADDRESS1, self::ADDRESS2, self::CITY, self::STATE, self::ZIPCODE, self::DAY_PHONE, self::DAY_COMMENT, self::EVE_PHONE, self::EVE_COMMENT, self::MOBILE_PHONE, self::MOBILE_COMMENT, self::PAGER_PHONE, self::PAGER_COMMENT, self::FAX_PHONE1, self::FAX_COMMENT1, self::FAX_PHONE2, self::FAX_COMMENT2, self::OTHER_PHONE, self::OTHER_COMMENT, self::EMAIL, self::SPOUSE_FIRST_NAME, self::SPOUSE_LAST_NAME, self::APPLICANT_PILOT, self::SPOUSE_PILOT, self::APPLICANT_COPILOT, self::LANGUAGES_SPOKEN, self::HOME_BASE, self::FBO_NAME, self::AIRCRAFT_PRIMARY_ID, self::AIRCRAFT_PRIMARY_OWN, self::AIRCRAFT_PRIMARY_ICE, self::AIRCRAFT_PRIMARY_SEATS, self::AIRCRAFT_PRIMARY_N_NUMBER, self::AIRCRAFT_SECONDARY_ID, self::AIRCRAFT_SECONDARY_OWN, self::AIRCRAFT_SECONDARY_ICE, self::AIRCRAFT_SECONDARY_SEATS, self::AIRCRAFT_SECONDARY_N_NUMBER, self::PILOT_CERTIFICATE, self::RATINGS, self::MEDICAL_CLASS, self::LICENSE_TYPE, self::TOTAL_HOURS, self::IFR_HOURS, self::MULTI_HOURS, self::OTHER_HOURS, self::DATE_OF_BIRTH, self::HEIGHT, self::WEIGHT, self::AVAILABILITY_WEEKDAYS, self::AVAILABILITY_WEEKNIGHTS, self::AVAILABILITY_WEEKENDS, self::AVAILABILITY_NOTICE, self::AVAILABILITY_LAST_MINUTE, self::AVAILABILITY_COPILOT, self::AFFIRMATION_AGREED, self::INSURANCE_AGREED, self::VOLUNTEER_INTEREST, self::COMPANY_NAME, self::COMPANY_POSITION, self::COMPANY_MATCH_FUNDS, self::COMPANY_BUSINESS_CATEGORY_ID, self::REFERRAL_SOURCE, self::PREMIUM_CHOICE, self::PREMIUM_SIZE, self::DUES_AMOUNT_PAID, self::DONATION_AMOUNT_PAID, self::METHOD_OF_PAYMENT_ID, self::CCARD_APPROVAL_NUMBER, self::CCARD_ERROR_CODE, self::CCARD_AVS_RESULT, self::PROCESSED_DATE, self::MEMBER_ID, self::MISSION_ORIENTATION, self::MISSION_COORDINATION, self::PILOT_RECRUITMENT, self::FUND_RAISING, self::CELEBRITY_CONTACTS, self::HOSPITAL_OUTREACH, self::MEDIA_RELATIONS, self::TELEPHONE_WORK, self::COMPUTERS, self::CLERICAL, self::PUBLICITY, self::WRITING, self::SPEAKERS_BUREAU, self::WING_TEAM, self::GRAPHIC_ARTS, self::EVENT_PLANNING, self::WEB_INTERNET, self::FOUNDATION_CONTACTS, self::AVIATION_CONTACTS, self::PRINTING, self::MEMBER_AOPA, self::MEMBER_KIWANIS, self::MEMBER_ROTARY, self::MEMBER_LIONS, self::PERSON_ID, self::NOVAPOINTE_ID, self::PREMIUM_SHIP_DATE, self::PREMIUM_SHIP_METHOD, self::PREMIUM_SHIP_COST, self::PREMIUM_SHIP_TRACKING_NUMBER, self::REFERER_NAME, self::REFERRAL_SESSION_ID, self::AIRCRAFT_THIRD_ID, self::AIRCRAFT_THIRD_OWN, self::AIRCRAFT_THIRD_ICE, self::AIRCRAFT_THIRD_SEATS, self::AIRCRAFT_THIRD_N_NUMBER, self::IP_ADDRESS, self::PAGER_EMAIL, self::MEMBER_99S, self::MEMBER_WIA, self::MISSION_EMAIL_OPTIN, self::HSEATS_INTEREST, self::MASTER_APPLICATION_ID, self::MASTER_MEMBER_ID, self::REFERRAL_SOURCE_OTHER, self::SECONDARY_EMAIL, self::PAYMENT_TRANSACTION_ID, self::MIDDLE_NAME, self::SUFFIX, self::NICKNAME, self::VETERAN, self::GENDER, self::EMERGENCY_CONTACT_NAME, self::EMERGENCY_CONTACT_PHONE, self::COUNTRY, self::DRIVERS_LICENSE_STATE, self::DRIVERS_LICENSE_NUMBER, self::CCARD_NUMBER, self::CCARD_CODE, self::CCARD_EXPIRE, self::IS_COMPLETE, self::MEMBER_CLASS_ID, self::WING_ID, ),
		BasePeer::TYPE_FIELDNAME => array ('id', 'application_date', 'renewal', 'title', 'first_name', 'last_name', 'address1', 'address2', 'city', 'state', 'zipcode', 'day_phone', 'day_comment', 'eve_phone', 'eve_comment', 'mobile_phone', 'mobile_comment', 'pager_phone', 'pager_comment', 'fax_phone1', 'fax_comment1', 'fax_phone2', 'fax_comment2', 'other_phone', 'other_comment', 'email', 'spouse_first_name', 'spouse_last_name', 'applicant_pilot', 'spouse_pilot', 'applicant_copilot', 'languages_spoken', 'home_base', 'fbo_name', 'aircraft_primary_id', 'aircraft_primary_own', 'aircraft_primary_ice', 'aircraft_primary_seats', 'aircraft_primary_n_number', 'aircraft_secondary_id', 'aircraft_secondary_own', 'aircraft_secondary_ice', 'aircraft_secondary_seats', 'aircraft_secondary_n_number', 'pilot_certificate', 'ratings', 'medical_class', 'license_type', 'total_hours', 'ifr_hours', 'multi_hours', 'other_hours', 'date_of_birth', 'height', 'weight', 'availability_weekdays', 'availability_weeknights', 'availability_weekends', 'availability_notice', 'availability_last_minute', 'availability_copilot', 'affirmation_agreed', 'insurance_agreed', 'volunteer_interest', 'company_name', 'company_position', 'company_match_funds', 'company_business_category_id', 'referral_source', 'premium_choice', 'premium_size', 'dues_amount_paid', 'donation_amount_paid', 'method_of_payment_id', 'ccard_approval_number', 'ccard_error_code', 'ccard_avs_result', 'processed_date', 'member_id', 'mission_orientation', 'mission_coordination', 'pilot_recruitment', 'fund_raising', 'celebrity_contacts', 'hospital_outreach', 'media_relations', 'telephone_work', 'computers', 'clerical', 'publicity', 'writing', 'speakers_bureau', 'wing_team', 'graphic_arts', 'event_planning', 'web_internet', 'foundation_contacts', 'aviation_contacts', 'printing', 'member_aopa', 'member_kiwanis', 'member_rotary', 'member_lions', 'person_id', 'novapointe_id', 'premium_ship_date', 'premium_ship_method', 'premium_ship_cost', 'premium_ship_tracking_number', 'referer_name', 'referral_session_id', 'aircraft_third_id', 'aircraft_third_own', 'aircraft_third_ice', 'aircraft_third_seats', 'aircraft_third_n_number', 'ip_address', 'pager_email', 'member_99s', 'member_wia', 'mission_email_optin', 'hseats_interest', 'master_application_id', 'master_member_id', 'referral_source_other', 'secondary_email', 'payment_transaction_id', 'middle_name', 'suffix', 'nickname', 'veteran', 'gender', 'emergency_contact_name', 'emergency_contact_phone', 'country', 'drivers_license_state', 'drivers_license_number', 'ccard_number', 'ccard_code', 'ccard_expire', 'is_complete', 'member_class_id', 'wing_id', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	private static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('Id' => 0, 'ApplicationDate' => 1, 'Renewal' => 2, 'Title' => 3, 'FirstName' => 4, 'LastName' => 5, 'Address1' => 6, 'Address2' => 7, 'City' => 8, 'State' => 9, 'Zipcode' => 10, 'DayPhone' => 11, 'DayComment' => 12, 'EvePhone' => 13, 'EveComment' => 14, 'MobilePhone' => 15, 'MobileComment' => 16, 'PagerPhone' => 17, 'PagerComment' => 18, 'FaxPhone1' => 19, 'FaxComment1' => 20, 'FaxPhone2' => 21, 'FaxComment2' => 22, 'OtherPhone' => 23, 'OtherComment' => 24, 'Email' => 25, 'SpouseFirstName' => 26, 'SpouseLastName' => 27, 'ApplicantPilot' => 28, 'SpousePilot' => 29, 'ApplicantCopilot' => 30, 'LanguagesSpoken' => 31, 'HomeBase' => 32, 'FboName' => 33, 'AircraftPrimaryId' => 34, 'AircraftPrimaryOwn' => 35, 'AircraftPrimaryIce' => 36, 'AircraftPrimarySeats' => 37, 'AircraftPrimaryNNumber' => 38, 'AircraftSecondaryId' => 39, 'AircraftSecondaryOwn' => 40, 'AircraftSecondaryIce' => 41, 'AircraftSecondarySeats' => 42, 'AircraftSecondaryNNumber' => 43, 'PilotCertificate' => 44, 'Ratings' => 45, 'MedicalClass' => 46, 'LicenseType' => 47, 'TotalHours' => 48, 'IfrHours' => 49, 'MultiHours' => 50, 'OtherHours' => 51, 'DateOfBirth' => 52, 'Height' => 53, 'Weight' => 54, 'AvailabilityWeekdays' => 55, 'AvailabilityWeeknights' => 56, 'AvailabilityWeekends' => 57, 'AvailabilityNotice' => 58, 'AvailabilityLastMinute' => 59, 'AvailabilityCopilot' => 60, 'AffirmationAgreed' => 61, 'InsuranceAgreed' => 62, 'VolunteerInterest' => 63, 'CompanyName' => 64, 'CompanyPosition' => 65, 'CompanyMatchFunds' => 66, 'CompanyBusinessCategoryId' => 67, 'ReferralSource' => 68, 'PremiumChoice' => 69, 'PremiumSize' => 70, 'DuesAmountPaid' => 71, 'DonationAmountPaid' => 72, 'MethodOfPaymentId' => 73, 'CcardApprovalNumber' => 74, 'CcardErrorCode' => 75, 'CcardAvsResult' => 76, 'ProcessedDate' => 77, 'MemberId' => 78, 'MissionOrientation' => 79, 'MissionCoordination' => 80, 'PilotRecruitment' => 81, 'FundRaising' => 82, 'CelebrityContacts' => 83, 'HospitalOutreach' => 84, 'MediaRelations' => 85, 'TelephoneWork' => 86, 'Computers' => 87, 'Clerical' => 88, 'Publicity' => 89, 'Writing' => 90, 'SpeakersBureau' => 91, 'WingTeam' => 92, 'GraphicArts' => 93, 'EventPlanning' => 94, 'WebInternet' => 95, 'FoundationContacts' => 96, 'AviationContacts' => 97, 'Printing' => 98, 'MemberAopa' => 99, 'MemberKiwanis' => 100, 'MemberRotary' => 101, 'MemberLions' => 102, 'PersonId' => 103, 'NovapointeId' => 104, 'PremiumShipDate' => 105, 'PremiumShipMethod' => 106, 'PremiumShipCost' => 107, 'PremiumShipTrackingNumber' => 108, 'RefererName' => 109, 'ReferralSessionId' => 110, 'AircraftThirdId' => 111, 'AircraftThirdOwn' => 112, 'AircraftThirdIce' => 113, 'AircraftThirdSeats' => 114, 'AircraftThirdNNumber' => 115, 'IpAddress' => 116, 'PagerEmail' => 117, 'Member99s' => 118, 'MemberWia' => 119, 'MissionEmailOptin' => 120, 'HseatsInterest' => 121, 'MasterApplicationId' => 122, 'MasterMemberId' => 123, 'ReferralSourceOther' => 124, 'SecondaryEmail' => 125, 'PaymentTransactionId' => 126, 'MiddleName' => 127, 'Suffix' => 128, 'Nickname' => 129, 'Veteran' => 130, 'Gender' => 131, 'EmergencyContactName' => 132, 'EmergencyContactPhone' => 133, 'Country' => 134, 'DriversLicenseState' => 135, 'DriversLicenseNumber' => 136, 'CcardNumber' => 137, 'CcardCode' => 138, 'CcardExpire' => 139, 'IsComplete' => 140, 'MemberClassId' => 141, 'WingId' => 142, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id' => 0, 'applicationDate' => 1, 'renewal' => 2, 'title' => 3, 'firstName' => 4, 'lastName' => 5, 'address1' => 6, 'address2' => 7, 'city' => 8, 'state' => 9, 'zipcode' => 10, 'dayPhone' => 11, 'dayComment' => 12, 'evePhone' => 13, 'eveComment' => 14, 'mobilePhone' => 15, 'mobileComment' => 16, 'pagerPhone' => 17, 'pagerComment' => 18, 'faxPhone1' => 19, 'faxComment1' => 20, 'faxPhone2' => 21, 'faxComment2' => 22, 'otherPhone' => 23, 'otherComment' => 24, 'email' => 25, 'spouseFirstName' => 26, 'spouseLastName' => 27, 'applicantPilot' => 28, 'spousePilot' => 29, 'applicantCopilot' => 30, 'languagesSpoken' => 31, 'homeBase' => 32, 'fboName' => 33, 'aircraftPrimaryId' => 34, 'aircraftPrimaryOwn' => 35, 'aircraftPrimaryIce' => 36, 'aircraftPrimarySeats' => 37, 'aircraftPrimaryNNumber' => 38, 'aircraftSecondaryId' => 39, 'aircraftSecondaryOwn' => 40, 'aircraftSecondaryIce' => 41, 'aircraftSecondarySeats' => 42, 'aircraftSecondaryNNumber' => 43, 'pilotCertificate' => 44, 'ratings' => 45, 'medicalClass' => 46, 'licenseType' => 47, 'totalHours' => 48, 'ifrHours' => 49, 'multiHours' => 50, 'otherHours' => 51, 'dateOfBirth' => 52, 'height' => 53, 'weight' => 54, 'availabilityWeekdays' => 55, 'availabilityWeeknights' => 56, 'availabilityWeekends' => 57, 'availabilityNotice' => 58, 'availabilityLastMinute' => 59, 'availabilityCopilot' => 60, 'affirmationAgreed' => 61, 'insuranceAgreed' => 62, 'volunteerInterest' => 63, 'companyName' => 64, 'companyPosition' => 65, 'companyMatchFunds' => 66, 'companyBusinessCategoryId' => 67, 'referralSource' => 68, 'premiumChoice' => 69, 'premiumSize' => 70, 'duesAmountPaid' => 71, 'donationAmountPaid' => 72, 'methodOfPaymentId' => 73, 'ccardApprovalNumber' => 74, 'ccardErrorCode' => 75, 'ccardAvsResult' => 76, 'processedDate' => 77, 'memberId' => 78, 'missionOrientation' => 79, 'missionCoordination' => 80, 'pilotRecruitment' => 81, 'fundRaising' => 82, 'celebrityContacts' => 83, 'hospitalOutreach' => 84, 'mediaRelations' => 85, 'telephoneWork' => 86, 'computers' => 87, 'clerical' => 88, 'publicity' => 89, 'writing' => 90, 'speakersBureau' => 91, 'wingTeam' => 92, 'graphicArts' => 93, 'eventPlanning' => 94, 'webInternet' => 95, 'foundationContacts' => 96, 'aviationContacts' => 97, 'printing' => 98, 'memberAopa' => 99, 'memberKiwanis' => 100, 'memberRotary' => 101, 'memberLions' => 102, 'personId' => 103, 'novapointeId' => 104, 'premiumShipDate' => 105, 'premiumShipMethod' => 106, 'premiumShipCost' => 107, 'premiumShipTrackingNumber' => 108, 'refererName' => 109, 'referralSessionId' => 110, 'aircraftThirdId' => 111, 'aircraftThirdOwn' => 112, 'aircraftThirdIce' => 113, 'aircraftThirdSeats' => 114, 'aircraftThirdNNumber' => 115, 'ipAddress' => 116, 'pagerEmail' => 117, 'member99s' => 118, 'memberWia' => 119, 'missionEmailOptin' => 120, 'hseatsInterest' => 121, 'masterApplicationId' => 122, 'masterMemberId' => 123, 'referralSourceOther' => 124, 'secondaryEmail' => 125, 'paymentTransactionId' => 126, 'middleName' => 127, 'suffix' => 128, 'nickname' => 129, 'veteran' => 130, 'gender' => 131, 'emergencyContactName' => 132, 'emergencyContactPhone' => 133, 'country' => 134, 'driversLicenseState' => 135, 'driversLicenseNumber' => 136, 'ccardNumber' => 137, 'ccardCode' => 138, 'ccardExpire' => 139, 'isComplete' => 140, 'memberClassId' => 141, 'wingId' => 142, ),
		BasePeer::TYPE_COLNAME => array (self::ID => 0, self::APPLICATION_DATE => 1, self::RENEWAL => 2, self::TITLE => 3, self::FIRST_NAME => 4, self::LAST_NAME => 5, self::ADDRESS1 => 6, self::ADDRESS2 => 7, self::CITY => 8, self::STATE => 9, self::ZIPCODE => 10, self::DAY_PHONE => 11, self::DAY_COMMENT => 12, self::EVE_PHONE => 13, self::EVE_COMMENT => 14, self::MOBILE_PHONE => 15, self::MOBILE_COMMENT => 16, self::PAGER_PHONE => 17, self::PAGER_COMMENT => 18, self::FAX_PHONE1 => 19, self::FAX_COMMENT1 => 20, self::FAX_PHONE2 => 21, self::FAX_COMMENT2 => 22, self::OTHER_PHONE => 23, self::OTHER_COMMENT => 24, self::EMAIL => 25, self::SPOUSE_FIRST_NAME => 26, self::SPOUSE_LAST_NAME => 27, self::APPLICANT_PILOT => 28, self::SPOUSE_PILOT => 29, self::APPLICANT_COPILOT => 30, self::LANGUAGES_SPOKEN => 31, self::HOME_BASE => 32, self::FBO_NAME => 33, self::AIRCRAFT_PRIMARY_ID => 34, self::AIRCRAFT_PRIMARY_OWN => 35, self::AIRCRAFT_PRIMARY_ICE => 36, self::AIRCRAFT_PRIMARY_SEATS => 37, self::AIRCRAFT_PRIMARY_N_NUMBER => 38, self::AIRCRAFT_SECONDARY_ID => 39, self::AIRCRAFT_SECONDARY_OWN => 40, self::AIRCRAFT_SECONDARY_ICE => 41, self::AIRCRAFT_SECONDARY_SEATS => 42, self::AIRCRAFT_SECONDARY_N_NUMBER => 43, self::PILOT_CERTIFICATE => 44, self::RATINGS => 45, self::MEDICAL_CLASS => 46, self::LICENSE_TYPE => 47, self::TOTAL_HOURS => 48, self::IFR_HOURS => 49, self::MULTI_HOURS => 50, self::OTHER_HOURS => 51, self::DATE_OF_BIRTH => 52, self::HEIGHT => 53, self::WEIGHT => 54, self::AVAILABILITY_WEEKDAYS => 55, self::AVAILABILITY_WEEKNIGHTS => 56, self::AVAILABILITY_WEEKENDS => 57, self::AVAILABILITY_NOTICE => 58, self::AVAILABILITY_LAST_MINUTE => 59, self::AVAILABILITY_COPILOT => 60, self::AFFIRMATION_AGREED => 61, self::INSURANCE_AGREED => 62, self::VOLUNTEER_INTEREST => 63, self::COMPANY_NAME => 64, self::COMPANY_POSITION => 65, self::COMPANY_MATCH_FUNDS => 66, self::COMPANY_BUSINESS_CATEGORY_ID => 67, self::REFERRAL_SOURCE => 68, self::PREMIUM_CHOICE => 69, self::PREMIUM_SIZE => 70, self::DUES_AMOUNT_PAID => 71, self::DONATION_AMOUNT_PAID => 72, self::METHOD_OF_PAYMENT_ID => 73, self::CCARD_APPROVAL_NUMBER => 74, self::CCARD_ERROR_CODE => 75, self::CCARD_AVS_RESULT => 76, self::PROCESSED_DATE => 77, self::MEMBER_ID => 78, self::MISSION_ORIENTATION => 79, self::MISSION_COORDINATION => 80, self::PILOT_RECRUITMENT => 81, self::FUND_RAISING => 82, self::CELEBRITY_CONTACTS => 83, self::HOSPITAL_OUTREACH => 84, self::MEDIA_RELATIONS => 85, self::TELEPHONE_WORK => 86, self::COMPUTERS => 87, self::CLERICAL => 88, self::PUBLICITY => 89, self::WRITING => 90, self::SPEAKERS_BUREAU => 91, self::WING_TEAM => 92, self::GRAPHIC_ARTS => 93, self::EVENT_PLANNING => 94, self::WEB_INTERNET => 95, self::FOUNDATION_CONTACTS => 96, self::AVIATION_CONTACTS => 97, self::PRINTING => 98, self::MEMBER_AOPA => 99, self::MEMBER_KIWANIS => 100, self::MEMBER_ROTARY => 101, self::MEMBER_LIONS => 102, self::PERSON_ID => 103, self::NOVAPOINTE_ID => 104, self::PREMIUM_SHIP_DATE => 105, self::PREMIUM_SHIP_METHOD => 106, self::PREMIUM_SHIP_COST => 107, self::PREMIUM_SHIP_TRACKING_NUMBER => 108, self::REFERER_NAME => 109, self::REFERRAL_SESSION_ID => 110, self::AIRCRAFT_THIRD_ID => 111, self::AIRCRAFT_THIRD_OWN => 112, self::AIRCRAFT_THIRD_ICE => 113, self::AIRCRAFT_THIRD_SEATS => 114, self::AIRCRAFT_THIRD_N_NUMBER => 115, self::IP_ADDRESS => 116, self::PAGER_EMAIL => 117, self::MEMBER_99S => 118, self::MEMBER_WIA => 119, self::MISSION_EMAIL_OPTIN => 120, self::HSEATS_INTEREST => 121, self::MASTER_APPLICATION_ID => 122, self::MASTER_MEMBER_ID => 123, self::REFERRAL_SOURCE_OTHER => 124, self::SECONDARY_EMAIL => 125, self::PAYMENT_TRANSACTION_ID => 126, self::MIDDLE_NAME => 127, self::SUFFIX => 128, self::NICKNAME => 129, self::VETERAN => 130, self::GENDER => 131, self::EMERGENCY_CONTACT_NAME => 132, self::EMERGENCY_CONTACT_PHONE => 133, self::COUNTRY => 134, self::DRIVERS_LICENSE_STATE => 135, self::DRIVERS_LICENSE_NUMBER => 136, self::CCARD_NUMBER => 137, self::CCARD_CODE => 138, self::CCARD_EXPIRE => 139, self::IS_COMPLETE => 140, self::MEMBER_CLASS_ID => 141, self::WING_ID => 142, ),
		BasePeer::TYPE_FIELDNAME => array ('id' => 0, 'application_date' => 1, 'renewal' => 2, 'title' => 3, 'first_name' => 4, 'last_name' => 5, 'address1' => 6, 'address2' => 7, 'city' => 8, 'state' => 9, 'zipcode' => 10, 'day_phone' => 11, 'day_comment' => 12, 'eve_phone' => 13, 'eve_comment' => 14, 'mobile_phone' => 15, 'mobile_comment' => 16, 'pager_phone' => 17, 'pager_comment' => 18, 'fax_phone1' => 19, 'fax_comment1' => 20, 'fax_phone2' => 21, 'fax_comment2' => 22, 'other_phone' => 23, 'other_comment' => 24, 'email' => 25, 'spouse_first_name' => 26, 'spouse_last_name' => 27, 'applicant_pilot' => 28, 'spouse_pilot' => 29, 'applicant_copilot' => 30, 'languages_spoken' => 31, 'home_base' => 32, 'fbo_name' => 33, 'aircraft_primary_id' => 34, 'aircraft_primary_own' => 35, 'aircraft_primary_ice' => 36, 'aircraft_primary_seats' => 37, 'aircraft_primary_n_number' => 38, 'aircraft_secondary_id' => 39, 'aircraft_secondary_own' => 40, 'aircraft_secondary_ice' => 41, 'aircraft_secondary_seats' => 42, 'aircraft_secondary_n_number' => 43, 'pilot_certificate' => 44, 'ratings' => 45, 'medical_class' => 46, 'license_type' => 47, 'total_hours' => 48, 'ifr_hours' => 49, 'multi_hours' => 50, 'other_hours' => 51, 'date_of_birth' => 52, 'height' => 53, 'weight' => 54, 'availability_weekdays' => 55, 'availability_weeknights' => 56, 'availability_weekends' => 57, 'availability_notice' => 58, 'availability_last_minute' => 59, 'availability_copilot' => 60, 'affirmation_agreed' => 61, 'insurance_agreed' => 62, 'volunteer_interest' => 63, 'company_name' => 64, 'company_position' => 65, 'company_match_funds' => 66, 'company_business_category_id' => 67, 'referral_source' => 68, 'premium_choice' => 69, 'premium_size' => 70, 'dues_amount_paid' => 71, 'donation_amount_paid' => 72, 'method_of_payment_id' => 73, 'ccard_approval_number' => 74, 'ccard_error_code' => 75, 'ccard_avs_result' => 76, 'processed_date' => 77, 'member_id' => 78, 'mission_orientation' => 79, 'mission_coordination' => 80, 'pilot_recruitment' => 81, 'fund_raising' => 82, 'celebrity_contacts' => 83, 'hospital_outreach' => 84, 'media_relations' => 85, 'telephone_work' => 86, 'computers' => 87, 'clerical' => 88, 'publicity' => 89, 'writing' => 90, 'speakers_bureau' => 91, 'wing_team' => 92, 'graphic_arts' => 93, 'event_planning' => 94, 'web_internet' => 95, 'foundation_contacts' => 96, 'aviation_contacts' => 97, 'printing' => 98, 'member_aopa' => 99, 'member_kiwanis' => 100, 'member_rotary' => 101, 'member_lions' => 102, 'person_id' => 103, 'novapointe_id' => 104, 'premium_ship_date' => 105, 'premium_ship_method' => 106, 'premium_ship_cost' => 107, 'premium_ship_tracking_number' => 108, 'referer_name' => 109, 'referral_session_id' => 110, 'aircraft_third_id' => 111, 'aircraft_third_own' => 112, 'aircraft_third_ice' => 113, 'aircraft_third_seats' => 114, 'aircraft_third_n_number' => 115, 'ip_address' => 116, 'pager_email' => 117, 'member_99s' => 118, 'member_wia' => 119, 'mission_email_optin' => 120, 'hseats_interest' => 121, 'master_application_id' => 122, 'master_member_id' => 123, 'referral_source_other' => 124, 'secondary_email' => 125, 'payment_transaction_id' => 126, 'middle_name' => 127, 'suffix' => 128, 'nickname' => 129, 'veteran' => 130, 'gender' => 131, 'emergency_contact_name' => 132, 'emergency_contact_phone' => 133, 'country' => 134, 'drivers_license_state' => 135, 'drivers_license_number' => 136, 'ccard_number' => 137, 'ccard_code' => 138, 'ccard_expire' => 139, 'is_complete' => 140, 'member_class_id' => 141, 'wing_id' => 142, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, )
	);

	/**
	 * Get a (singleton) instance of the MapBuilder for this peer class.
	 * @return     MapBuilder The map builder for this peer
	 */
	public static function getMapBuilder()
	{
		if (self::$mapBuilder === null) {
			self::$mapBuilder = new ApplicationTempMapBuilder();
		}
		return self::$mapBuilder;
	}
	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. ApplicationTempPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(ApplicationTempPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      criteria object containing the columns to add.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria)
	{

		$criteria->addSelectColumn(ApplicationTempPeer::ID);

		$criteria->addSelectColumn(ApplicationTempPeer::APPLICATION_DATE);

		$criteria->addSelectColumn(ApplicationTempPeer::RENEWAL);

		$criteria->addSelectColumn(ApplicationTempPeer::TITLE);

		$criteria->addSelectColumn(ApplicationTempPeer::FIRST_NAME);

		$criteria->addSelectColumn(ApplicationTempPeer::LAST_NAME);

		$criteria->addSelectColumn(ApplicationTempPeer::ADDRESS1);

		$criteria->addSelectColumn(ApplicationTempPeer::ADDRESS2);

		$criteria->addSelectColumn(ApplicationTempPeer::CITY);

		$criteria->addSelectColumn(ApplicationTempPeer::STATE);

		$criteria->addSelectColumn(ApplicationTempPeer::ZIPCODE);

		$criteria->addSelectColumn(ApplicationTempPeer::DAY_PHONE);

		$criteria->addSelectColumn(ApplicationTempPeer::DAY_COMMENT);

		$criteria->addSelectColumn(ApplicationTempPeer::EVE_PHONE);

		$criteria->addSelectColumn(ApplicationTempPeer::EVE_COMMENT);

		$criteria->addSelectColumn(ApplicationTempPeer::MOBILE_PHONE);

		$criteria->addSelectColumn(ApplicationTempPeer::MOBILE_COMMENT);

		$criteria->addSelectColumn(ApplicationTempPeer::PAGER_PHONE);

		$criteria->addSelectColumn(ApplicationTempPeer::PAGER_COMMENT);

		$criteria->addSelectColumn(ApplicationTempPeer::FAX_PHONE1);

		$criteria->addSelectColumn(ApplicationTempPeer::FAX_COMMENT1);

		$criteria->addSelectColumn(ApplicationTempPeer::FAX_PHONE2);

		$criteria->addSelectColumn(ApplicationTempPeer::FAX_COMMENT2);

		$criteria->addSelectColumn(ApplicationTempPeer::OTHER_PHONE);

		$criteria->addSelectColumn(ApplicationTempPeer::OTHER_COMMENT);

		$criteria->addSelectColumn(ApplicationTempPeer::EMAIL);

		$criteria->addSelectColumn(ApplicationTempPeer::SPOUSE_FIRST_NAME);

		$criteria->addSelectColumn(ApplicationTempPeer::SPOUSE_LAST_NAME);

		$criteria->addSelectColumn(ApplicationTempPeer::APPLICANT_PILOT);

		$criteria->addSelectColumn(ApplicationTempPeer::SPOUSE_PILOT);

		$criteria->addSelectColumn(ApplicationTempPeer::APPLICANT_COPILOT);

		$criteria->addSelectColumn(ApplicationTempPeer::LANGUAGES_SPOKEN);

		$criteria->addSelectColumn(ApplicationTempPeer::HOME_BASE);

		$criteria->addSelectColumn(ApplicationTempPeer::FBO_NAME);

		$criteria->addSelectColumn(ApplicationTempPeer::AIRCRAFT_PRIMARY_ID);

		$criteria->addSelectColumn(ApplicationTempPeer::AIRCRAFT_PRIMARY_OWN);

		$criteria->addSelectColumn(ApplicationTempPeer::AIRCRAFT_PRIMARY_ICE);

		$criteria->addSelectColumn(ApplicationTempPeer::AIRCRAFT_PRIMARY_SEATS);

		$criteria->addSelectColumn(ApplicationTempPeer::AIRCRAFT_PRIMARY_N_NUMBER);

		$criteria->addSelectColumn(ApplicationTempPeer::AIRCRAFT_SECONDARY_ID);

		$criteria->addSelectColumn(ApplicationTempPeer::AIRCRAFT_SECONDARY_OWN);

		$criteria->addSelectColumn(ApplicationTempPeer::AIRCRAFT_SECONDARY_ICE);

		$criteria->addSelectColumn(ApplicationTempPeer::AIRCRAFT_SECONDARY_SEATS);

		$criteria->addSelectColumn(ApplicationTempPeer::AIRCRAFT_SECONDARY_N_NUMBER);

		$criteria->addSelectColumn(ApplicationTempPeer::PILOT_CERTIFICATE);

		$criteria->addSelectColumn(ApplicationTempPeer::RATINGS);

		$criteria->addSelectColumn(ApplicationTempPeer::MEDICAL_CLASS);

		$criteria->addSelectColumn(ApplicationTempPeer::LICENSE_TYPE);

		$criteria->addSelectColumn(ApplicationTempPeer::TOTAL_HOURS);

		$criteria->addSelectColumn(ApplicationTempPeer::IFR_HOURS);

		$criteria->addSelectColumn(ApplicationTempPeer::MULTI_HOURS);

		$criteria->addSelectColumn(ApplicationTempPeer::OTHER_HOURS);

		$criteria->addSelectColumn(ApplicationTempPeer::DATE_OF_BIRTH);

		$criteria->addSelectColumn(ApplicationTempPeer::HEIGHT);

		$criteria->addSelectColumn(ApplicationTempPeer::WEIGHT);

		$criteria->addSelectColumn(ApplicationTempPeer::AVAILABILITY_WEEKDAYS);

		$criteria->addSelectColumn(ApplicationTempPeer::AVAILABILITY_WEEKNIGHTS);

		$criteria->addSelectColumn(ApplicationTempPeer::AVAILABILITY_WEEKENDS);

		$criteria->addSelectColumn(ApplicationTempPeer::AVAILABILITY_NOTICE);

		$criteria->addSelectColumn(ApplicationTempPeer::AVAILABILITY_LAST_MINUTE);

		$criteria->addSelectColumn(ApplicationTempPeer::AVAILABILITY_COPILOT);

		$criteria->addSelectColumn(ApplicationTempPeer::AFFIRMATION_AGREED);

		$criteria->addSelectColumn(ApplicationTempPeer::INSURANCE_AGREED);

		$criteria->addSelectColumn(ApplicationTempPeer::VOLUNTEER_INTEREST);

		$criteria->addSelectColumn(ApplicationTempPeer::COMPANY_NAME);

		$criteria->addSelectColumn(ApplicationTempPeer::COMPANY_POSITION);

		$criteria->addSelectColumn(ApplicationTempPeer::COMPANY_MATCH_FUNDS);

		$criteria->addSelectColumn(ApplicationTempPeer::COMPANY_BUSINESS_CATEGORY_ID);

		$criteria->addSelectColumn(ApplicationTempPeer::REFERRAL_SOURCE);

		$criteria->addSelectColumn(ApplicationTempPeer::PREMIUM_CHOICE);

		$criteria->addSelectColumn(ApplicationTempPeer::PREMIUM_SIZE);

		$criteria->addSelectColumn(ApplicationTempPeer::DUES_AMOUNT_PAID);

		$criteria->addSelectColumn(ApplicationTempPeer::DONATION_AMOUNT_PAID);

		$criteria->addSelectColumn(ApplicationTempPeer::METHOD_OF_PAYMENT_ID);

		$criteria->addSelectColumn(ApplicationTempPeer::CCARD_APPROVAL_NUMBER);

		$criteria->addSelectColumn(ApplicationTempPeer::CCARD_ERROR_CODE);

		$criteria->addSelectColumn(ApplicationTempPeer::CCARD_AVS_RESULT);

		$criteria->addSelectColumn(ApplicationTempPeer::PROCESSED_DATE);

		$criteria->addSelectColumn(ApplicationTempPeer::MEMBER_ID);

		$criteria->addSelectColumn(ApplicationTempPeer::MISSION_ORIENTATION);

		$criteria->addSelectColumn(ApplicationTempPeer::MISSION_COORDINATION);

		$criteria->addSelectColumn(ApplicationTempPeer::PILOT_RECRUITMENT);

		$criteria->addSelectColumn(ApplicationTempPeer::FUND_RAISING);

		$criteria->addSelectColumn(ApplicationTempPeer::CELEBRITY_CONTACTS);

		$criteria->addSelectColumn(ApplicationTempPeer::HOSPITAL_OUTREACH);

		$criteria->addSelectColumn(ApplicationTempPeer::MEDIA_RELATIONS);

		$criteria->addSelectColumn(ApplicationTempPeer::TELEPHONE_WORK);

		$criteria->addSelectColumn(ApplicationTempPeer::COMPUTERS);

		$criteria->addSelectColumn(ApplicationTempPeer::CLERICAL);

		$criteria->addSelectColumn(ApplicationTempPeer::PUBLICITY);

		$criteria->addSelectColumn(ApplicationTempPeer::WRITING);

		$criteria->addSelectColumn(ApplicationTempPeer::SPEAKERS_BUREAU);

		$criteria->addSelectColumn(ApplicationTempPeer::WING_TEAM);

		$criteria->addSelectColumn(ApplicationTempPeer::GRAPHIC_ARTS);

		$criteria->addSelectColumn(ApplicationTempPeer::EVENT_PLANNING);

		$criteria->addSelectColumn(ApplicationTempPeer::WEB_INTERNET);

		$criteria->addSelectColumn(ApplicationTempPeer::FOUNDATION_CONTACTS);

		$criteria->addSelectColumn(ApplicationTempPeer::AVIATION_CONTACTS);

		$criteria->addSelectColumn(ApplicationTempPeer::PRINTING);

		$criteria->addSelectColumn(ApplicationTempPeer::MEMBER_AOPA);

		$criteria->addSelectColumn(ApplicationTempPeer::MEMBER_KIWANIS);

		$criteria->addSelectColumn(ApplicationTempPeer::MEMBER_ROTARY);

		$criteria->addSelectColumn(ApplicationTempPeer::MEMBER_LIONS);

		$criteria->addSelectColumn(ApplicationTempPeer::PERSON_ID);

		$criteria->addSelectColumn(ApplicationTempPeer::NOVAPOINTE_ID);

		$criteria->addSelectColumn(ApplicationTempPeer::PREMIUM_SHIP_DATE);

		$criteria->addSelectColumn(ApplicationTempPeer::PREMIUM_SHIP_METHOD);

		$criteria->addSelectColumn(ApplicationTempPeer::PREMIUM_SHIP_COST);

		$criteria->addSelectColumn(ApplicationTempPeer::PREMIUM_SHIP_TRACKING_NUMBER);

		$criteria->addSelectColumn(ApplicationTempPeer::REFERER_NAME);

		$criteria->addSelectColumn(ApplicationTempPeer::REFERRAL_SESSION_ID);

		$criteria->addSelectColumn(ApplicationTempPeer::AIRCRAFT_THIRD_ID);

		$criteria->addSelectColumn(ApplicationTempPeer::AIRCRAFT_THIRD_OWN);

		$criteria->addSelectColumn(ApplicationTempPeer::AIRCRAFT_THIRD_ICE);

		$criteria->addSelectColumn(ApplicationTempPeer::AIRCRAFT_THIRD_SEATS);

		$criteria->addSelectColumn(ApplicationTempPeer::AIRCRAFT_THIRD_N_NUMBER);

		$criteria->addSelectColumn(ApplicationTempPeer::IP_ADDRESS);

		$criteria->addSelectColumn(ApplicationTempPeer::PAGER_EMAIL);

		$criteria->addSelectColumn(ApplicationTempPeer::MEMBER_99S);

		$criteria->addSelectColumn(ApplicationTempPeer::MEMBER_WIA);

		$criteria->addSelectColumn(ApplicationTempPeer::MISSION_EMAIL_OPTIN);

		$criteria->addSelectColumn(ApplicationTempPeer::HSEATS_INTEREST);

		$criteria->addSelectColumn(ApplicationTempPeer::MASTER_APPLICATION_ID);

		$criteria->addSelectColumn(ApplicationTempPeer::MASTER_MEMBER_ID);

		$criteria->addSelectColumn(ApplicationTempPeer::REFERRAL_SOURCE_OTHER);

		$criteria->addSelectColumn(ApplicationTempPeer::SECONDARY_EMAIL);

		$criteria->addSelectColumn(ApplicationTempPeer::PAYMENT_TRANSACTION_ID);

		$criteria->addSelectColumn(ApplicationTempPeer::MIDDLE_NAME);

		$criteria->addSelectColumn(ApplicationTempPeer::SUFFIX);

		$criteria->addSelectColumn(ApplicationTempPeer::NICKNAME);

		$criteria->addSelectColumn(ApplicationTempPeer::VETERAN);

		$criteria->addSelectColumn(ApplicationTempPeer::GENDER);

		$criteria->addSelectColumn(ApplicationTempPeer::EMERGENCY_CONTACT_NAME);

		$criteria->addSelectColumn(ApplicationTempPeer::EMERGENCY_CONTACT_PHONE);

		$criteria->addSelectColumn(ApplicationTempPeer::COUNTRY);

		$criteria->addSelectColumn(ApplicationTempPeer::DRIVERS_LICENSE_STATE);

		$criteria->addSelectColumn(ApplicationTempPeer::DRIVERS_LICENSE_NUMBER);

		$criteria->addSelectColumn(ApplicationTempPeer::CCARD_NUMBER);

		$criteria->addSelectColumn(ApplicationTempPeer::CCARD_CODE);

		$criteria->addSelectColumn(ApplicationTempPeer::CCARD_EXPIRE);

		$criteria->addSelectColumn(ApplicationTempPeer::IS_COMPLETE);

		$criteria->addSelectColumn(ApplicationTempPeer::MEMBER_CLASS_ID);

		$criteria->addSelectColumn(ApplicationTempPeer::WING_ID);

	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ApplicationTempPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ApplicationTempPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(ApplicationTempPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}


    foreach (sfMixer::getCallables('BaseApplicationTempPeer:doCount:doCount') as $callable)
    {
      call_user_func($callable, 'BaseApplicationTempPeer', $criteria, $con);
    }


		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Method to select one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     ApplicationTemp
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = ApplicationTempPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Method to do selects.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return ApplicationTempPeer::populateObjects(ApplicationTempPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseApplicationTempPeer:doSelectStmt:doSelectStmt') as $callable)
    {
      call_user_func($callable, 'BaseApplicationTempPeer', $criteria, $con);
    }


		if ($con === null) {
			$con = Propel::getConnection(ApplicationTempPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			ApplicationTempPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      ApplicationTemp $value A ApplicationTemp object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool(ApplicationTemp $obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getId();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A ApplicationTemp object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof ApplicationTemp) {
				$key = (string) $value->getId();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or ApplicationTemp object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     ApplicationTemp Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol + 0] === null) {
			return null;
		}
		return (string) $row[$startcol + 0];
	}

	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = ApplicationTempPeer::getOMClass();
		$cls = substr('.'.$cls, strrpos('.'.$cls, '.') + 1);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = ApplicationTempPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = ApplicationTempPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://propel.phpdb.org/trac/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
		
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				ApplicationTempPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}

  static public function getUniqueColumnNames()
  {
    return array();
  }
	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * This uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass()
	{
		return ApplicationTempPeer::CLASS_DEFAULT;
	}

	/**
	 * Method perform an INSERT on the database, given a ApplicationTemp or Criteria object.
	 *
	 * @param      mixed $values Criteria or ApplicationTemp object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseApplicationTempPeer:doInsert:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseApplicationTempPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(ApplicationTempPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from ApplicationTemp object
		}

		if ($criteria->containsKey(ApplicationTempPeer::ID) && $criteria->keyContainsValue(ApplicationTempPeer::ID) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.ApplicationTempPeer::ID.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		
    foreach (sfMixer::getCallables('BaseApplicationTempPeer:doInsert:post') as $callable)
    {
      call_user_func($callable, 'BaseApplicationTempPeer', $values, $con, $pk);
    }

    return $pk;
	}

	/**
	 * Method perform an UPDATE on the database, given a ApplicationTemp or Criteria object.
	 *
	 * @param      mixed $values Criteria or ApplicationTemp object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseApplicationTempPeer:doUpdate:pre') as $callable)
    {
      $ret = call_user_func($callable, 'BaseApplicationTempPeer', $values, $con);
      if (false !== $ret)
      {
        return $ret;
      }
    }


		if ($con === null) {
			$con = Propel::getConnection(ApplicationTempPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(ApplicationTempPeer::ID);
			$selectCriteria->add(ApplicationTempPeer::ID, $criteria->remove(ApplicationTempPeer::ID), $comparison);

		} else { // $values is ApplicationTemp object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$ret = BasePeer::doUpdate($selectCriteria, $criteria, $con);
	

    foreach (sfMixer::getCallables('BaseApplicationTempPeer:doUpdate:post') as $callable)
    {
      call_user_func($callable, 'BaseApplicationTempPeer', $values, $con, $ret);
    }

    return $ret;
  }

	/**
	 * Method to DELETE all rows from the application_temp table.
	 *
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll($con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(ApplicationTempPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += BasePeer::doDeleteAll(ApplicationTempPeer::TABLE_NAME, $con);
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Method perform a DELETE on the database, given a ApplicationTemp or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or ApplicationTemp object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(ApplicationTempPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// invalidate the cache for all objects of this type, since we have no
			// way of knowing (without running a query) what objects should be invalidated
			// from the cache based on this Criteria.
			ApplicationTempPeer::clearInstancePool();

			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof ApplicationTemp) {
			// invalidate the cache for this single object
			ApplicationTempPeer::removeInstanceFromPool($values);
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else {
			// it must be the primary key



			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(ApplicationTempPeer::ID, (array) $values, Criteria::IN);

			foreach ((array) $values as $singleval) {
				// we can invalidate the cache for this single object
				ApplicationTempPeer::removeInstanceFromPool($singleval);
			}
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			$affectedRows += BasePeer::doDelete($criteria, $con);

			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Validates all modified columns of given ApplicationTemp object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      ApplicationTemp $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate(ApplicationTemp $obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(ApplicationTempPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(ApplicationTempPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		$res =  BasePeer::doValidate(ApplicationTempPeer::DATABASE_NAME, ApplicationTempPeer::TABLE_NAME, $columns);
    if ($res !== true) {
        $request = sfContext::getInstance()->getRequest();
        foreach ($res as $failed) {
            $col = ApplicationTempPeer::translateFieldname($failed->getColumn(), BasePeer::TYPE_COLNAME, BasePeer::TYPE_PHPNAME);
        }
    }

    return $res;
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      int $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     ApplicationTemp
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = ApplicationTempPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(ApplicationTempPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(ApplicationTempPeer::DATABASE_NAME);
		$criteria->add(ApplicationTempPeer::ID, $pk);

		$v = ApplicationTempPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(ApplicationTempPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(ApplicationTempPeer::DATABASE_NAME);
			$criteria->add(ApplicationTempPeer::ID, $pks, Criteria::IN);
			$objs = ApplicationTempPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

} // BaseApplicationTempPeer

// This is the static code needed to register the MapBuilder for this table with the main Propel class.
//
// NOTE: This static code cannot call methods on the ApplicationTempPeer class, because it is not defined yet.
// If you need to use overridden methods, you can add this code to the bottom of the ApplicationTempPeer class:
//
// Propel::getDatabaseMap(ApplicationTempPeer::DATABASE_NAME)->addTableBuilder(ApplicationTempPeer::TABLE_NAME, ApplicationTempPeer::getMapBuilder());
//
// Doing so will effectively overwrite the registration below.

Propel::getDatabaseMap(BaseApplicationTempPeer::DATABASE_NAME)->addTableBuilder(BaseApplicationTempPeer::TABLE_NAME, BaseApplicationTempPeer::getMapBuilder());

