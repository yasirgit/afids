<?php

/**
 * Base class that represents a row from the 'rp_application_search' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue May 24 06:33:31 2011
 *
 * @package    lib.model.om
 */
abstract class BaseRpApplicationSearch extends BaseObject  implements Persistent {


  const PEER = 'RpApplicationSearchPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        RpApplicationSearchPeer
	 */
	protected static $peer;

	/**
	 * The value for the applicationid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $applicationid;

	/**
	 * The value for the applicationdate field.
	 * @var        string
	 */
	protected $applicationdate;

	/**
	 * The value for the personid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $personid;

	/**
	 * The value for the firstname field.
	 * @var        string
	 */
	protected $firstname;

	/**
	 * The value for the lastname field.
	 * @var        string
	 */
	protected $lastname;

	/**
	 * The value for the address1 field.
	 * @var        string
	 */
	protected $address1;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the state field.
	 * @var        string
	 */
	protected $state;

	/**
	 * The value for the zipcode field.
	 * @var        string
	 */
	protected $zipcode;

	/**
	 * The value for the county field.
	 * @var        string
	 */
	protected $county;

	/**
	 * The value for the areacode field.
	 * @var        string
	 */
	protected $areacode;

	/**
	 * The value for the dayphone field.
	 * @var        string
	 */
	protected $dayphone;

	/**
	 * The value for the daycomment field.
	 * @var        string
	 */
	protected $daycomment;

	/**
	 * The value for the eveningphone field.
	 * @var        string
	 */
	protected $eveningphone;

	/**
	 * The value for the evecomment field.
	 * @var        string
	 */
	protected $evecomment;

	/**
	 * The value for the mobilephone field.
	 * @var        string
	 */
	protected $mobilephone;

	/**
	 * The value for the mobilecomment field.
	 * @var        string
	 */
	protected $mobilecomment;

	/**
	 * The value for the otherphone field.
	 * @var        string
	 */
	protected $otherphone;

	/**
	 * The value for the othercomment field.
	 * @var        string
	 */
	protected $othercomment;

	/**
	 * The value for the pagerphone field.
	 * @var        string
	 */
	protected $pagerphone;

	/**
	 * The value for the pagercomment field.
	 * @var        string
	 */
	protected $pagercomment;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the spousepilot field.
	 * @var        int
	 */
	protected $spousepilot;

	/**
	 * The value for the wingid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $wingid;

	/**
	 * The value for the wingname field.
	 * @var        string
	 */
	protected $wingname;

	/**
	 * The value for the renewaldate field.
	 * @var        string
	 */
	protected $renewaldate;

	/**
	 * The value for the joindate field.
	 * @var        string
	 */
	protected $joindate;

	/**
	 * The value for the joinyear field.
	 * @var        int
	 */
	protected $joinyear;

	/**
	 * The value for the refsourceid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $refsourceid;

	/**
	 * The value for the refsourcename field.
	 * @var        string
	 */
	protected $refsourcename;

	/**
	 * The value for the companymatchfunds field.
	 * @var        int
	 */
	protected $companymatchfunds;

	/**
	 * The value for the companyname field.
	 * @var        string
	 */
	protected $companyname;

	/**
	 * The value for the companyposition field.
	 * @var        string
	 */
	protected $companyposition;

	/**
	 * The value for the vocationclassid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $vocationclassid;

	/**
	 * The value for the vocationclassname field.
	 * @var        string
	 */
	protected $vocationclassname;

	/**
	 * The value for the memberaopa field.
	 * @var        int
	 */
	protected $memberaopa;

	/**
	 * The value for the memberkiwanis field.
	 * @var        int
	 */
	protected $memberkiwanis;

	/**
	 * The value for the memberrotary field.
	 * @var        int
	 */
	protected $memberrotary;

	/**
	 * The value for the memberlions field.
	 * @var        int
	 */
	protected $memberlions;

	/**
	 * The value for the member99s field.
	 * @var        int
	 */
	protected $member99s;

	/**
	 * The value for the memberwia field.
	 * @var        int
	 */
	protected $memberwia;

	/**
	 * The value for the missionorientation field.
	 * @var        int
	 */
	protected $missionorientation;

	/**
	 * The value for the missioncoordination field.
	 * @var        int
	 */
	protected $missioncoordination;

	/**
	 * The value for the pilotrecruitment field.
	 * @var        int
	 */
	protected $pilotrecruitment;

	/**
	 * The value for the fundraising field.
	 * @var        int
	 */
	protected $fundraising;

	/**
	 * The value for the celebritycontacts field.
	 * @var        int
	 */
	protected $celebritycontacts;

	/**
	 * The value for the graphicarts field.
	 * @var        int
	 */
	protected $graphicarts;

	/**
	 * The value for the hospitaloutreach field.
	 * @var        int
	 */
	protected $hospitaloutreach;

	/**
	 * The value for the eventplanning field.
	 * @var        int
	 */
	protected $eventplanning;

	/**
	 * The value for the mediarelations field.
	 * @var        int
	 */
	protected $mediarelations;

	/**
	 * The value for the telephonework field.
	 * @var        int
	 */
	protected $telephonework;

	/**
	 * The value for the computers field.
	 * @var        int
	 */
	protected $computers;

	/**
	 * The value for the printing field.
	 * @var        int
	 */
	protected $printing;

	/**
	 * The value for the writing field.
	 * @var        int
	 */
	protected $writing;

	/**
	 * The value for the speakersbureau field.
	 * @var        int
	 */
	protected $speakersbureau;

	/**
	 * The value for the wingteam field.
	 * @var        int
	 */
	protected $wingteam;

	/**
	 * The value for the webinternet field.
	 * @var        int
	 */
	protected $webinternet;

	/**
	 * The value for the foundationcontacts field.
	 * @var        int
	 */
	protected $foundationcontacts;

	/**
	 * The value for the aviationcontacts field.
	 * @var        int
	 */
	protected $aviationcontacts;

	/**
	 * The value for the disasterresponseinterest field.
	 * @var        int
	 */
	protected $disasterresponseinterest;

	/**
	 * The value for the active field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $active;

	/**
	 * The value for the primary_airport_id field.
	 * @var        int
	 */
	protected $primary_airport_id;

	/**
	 * The value for the homebase field.
	 * @var        string
	 */
	protected $homebase;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseRpApplicationSearch object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->applicationid = 0;
		$this->personid = 0;
		$this->wingid = 0;
		$this->refsourceid = 0;
		$this->vocationclassid = 0;
		$this->active = 1;
	}

	/**
	 * Get the [applicationid] column value.
	 * 
	 * @return     int
	 */
	public function getApplicationid()
	{
		return $this->applicationid;
	}

	/**
	 * Get the [optionally formatted] temporal [applicationdate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getApplicationdate($format = 'Y-m-d H:i:s')
	{
		if ($this->applicationdate === null) {
			return null;
		}


		if ($this->applicationdate === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->applicationdate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->applicationdate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [personid] column value.
	 * 
	 * @return     int
	 */
	public function getPersonid()
	{
		return $this->personid;
	}

	/**
	 * Get the [firstname] column value.
	 * 
	 * @return     string
	 */
	public function getFirstname()
	{
		return $this->firstname;
	}

	/**
	 * Get the [lastname] column value.
	 * 
	 * @return     string
	 */
	public function getLastname()
	{
		return $this->lastname;
	}

	/**
	 * Get the [address1] column value.
	 * 
	 * @return     string
	 */
	public function getAddress1()
	{
		return $this->address1;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [state] column value.
	 * 
	 * @return     string
	 */
	public function getState()
	{
		return $this->state;
	}

	/**
	 * Get the [zipcode] column value.
	 * 
	 * @return     string
	 */
	public function getZipcode()
	{
		return $this->zipcode;
	}

	/**
	 * Get the [county] column value.
	 * 
	 * @return     string
	 */
	public function getCounty()
	{
		return $this->county;
	}

	/**
	 * Get the [areacode] column value.
	 * 
	 * @return     string
	 */
	public function getAreacode()
	{
		return $this->areacode;
	}

	/**
	 * Get the [dayphone] column value.
	 * 
	 * @return     string
	 */
	public function getDayphone()
	{
		return $this->dayphone;
	}

	/**
	 * Get the [daycomment] column value.
	 * 
	 * @return     string
	 */
	public function getDaycomment()
	{
		return $this->daycomment;
	}

	/**
	 * Get the [eveningphone] column value.
	 * 
	 * @return     string
	 */
	public function getEveningphone()
	{
		return $this->eveningphone;
	}

	/**
	 * Get the [evecomment] column value.
	 * 
	 * @return     string
	 */
	public function getEvecomment()
	{
		return $this->evecomment;
	}

	/**
	 * Get the [mobilephone] column value.
	 * 
	 * @return     string
	 */
	public function getMobilephone()
	{
		return $this->mobilephone;
	}

	/**
	 * Get the [mobilecomment] column value.
	 * 
	 * @return     string
	 */
	public function getMobilecomment()
	{
		return $this->mobilecomment;
	}

	/**
	 * Get the [otherphone] column value.
	 * 
	 * @return     string
	 */
	public function getOtherphone()
	{
		return $this->otherphone;
	}

	/**
	 * Get the [othercomment] column value.
	 * 
	 * @return     string
	 */
	public function getOthercomment()
	{
		return $this->othercomment;
	}

	/**
	 * Get the [pagerphone] column value.
	 * 
	 * @return     string
	 */
	public function getPagerphone()
	{
		return $this->pagerphone;
	}

	/**
	 * Get the [pagercomment] column value.
	 * 
	 * @return     string
	 */
	public function getPagercomment()
	{
		return $this->pagercomment;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [spousepilot] column value.
	 * 
	 * @return     int
	 */
	public function getSpousepilot()
	{
		return $this->spousepilot;
	}

	/**
	 * Get the [wingid] column value.
	 * 
	 * @return     int
	 */
	public function getWingid()
	{
		return $this->wingid;
	}

	/**
	 * Get the [wingname] column value.
	 * 
	 * @return     string
	 */
	public function getWingname()
	{
		return $this->wingname;
	}

	/**
	 * Get the [optionally formatted] temporal [renewaldate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRenewaldate($format = 'Y-m-d')
	{
		if ($this->renewaldate === null) {
			return null;
		}


		if ($this->renewaldate === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->renewaldate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->renewaldate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [joindate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getJoindate($format = 'Y-m-d')
	{
		if ($this->joindate === null) {
			return null;
		}


		if ($this->joindate === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->joindate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->joindate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [joinyear] column value.
	 * 
	 * @return     int
	 */
	public function getJoinyear()
	{
		return $this->joinyear;
	}

	/**
	 * Get the [refsourceid] column value.
	 * 
	 * @return     int
	 */
	public function getRefsourceid()
	{
		return $this->refsourceid;
	}

	/**
	 * Get the [refsourcename] column value.
	 * 
	 * @return     string
	 */
	public function getRefsourcename()
	{
		return $this->refsourcename;
	}

	/**
	 * Get the [companymatchfunds] column value.
	 * 
	 * @return     int
	 */
	public function getCompanymatchfunds()
	{
		return $this->companymatchfunds;
	}

	/**
	 * Get the [companyname] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyname()
	{
		return $this->companyname;
	}

	/**
	 * Get the [companyposition] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyposition()
	{
		return $this->companyposition;
	}

	/**
	 * Get the [vocationclassid] column value.
	 * 
	 * @return     int
	 */
	public function getVocationclassid()
	{
		return $this->vocationclassid;
	}

	/**
	 * Get the [vocationclassname] column value.
	 * 
	 * @return     string
	 */
	public function getVocationclassname()
	{
		return $this->vocationclassname;
	}

	/**
	 * Get the [memberaopa] column value.
	 * 
	 * @return     int
	 */
	public function getMemberaopa()
	{
		return $this->memberaopa;
	}

	/**
	 * Get the [memberkiwanis] column value.
	 * 
	 * @return     int
	 */
	public function getMemberkiwanis()
	{
		return $this->memberkiwanis;
	}

	/**
	 * Get the [memberrotary] column value.
	 * 
	 * @return     int
	 */
	public function getMemberrotary()
	{
		return $this->memberrotary;
	}

	/**
	 * Get the [memberlions] column value.
	 * 
	 * @return     int
	 */
	public function getMemberlions()
	{
		return $this->memberlions;
	}

	/**
	 * Get the [member99s] column value.
	 * 
	 * @return     int
	 */
	public function getMember99s()
	{
		return $this->member99s;
	}

	/**
	 * Get the [memberwia] column value.
	 * 
	 * @return     int
	 */
	public function getMemberwia()
	{
		return $this->memberwia;
	}

	/**
	 * Get the [missionorientation] column value.
	 * 
	 * @return     int
	 */
	public function getMissionorientation()
	{
		return $this->missionorientation;
	}

	/**
	 * Get the [missioncoordination] column value.
	 * 
	 * @return     int
	 */
	public function getMissioncoordination()
	{
		return $this->missioncoordination;
	}

	/**
	 * Get the [pilotrecruitment] column value.
	 * 
	 * @return     int
	 */
	public function getPilotrecruitment()
	{
		return $this->pilotrecruitment;
	}

	/**
	 * Get the [fundraising] column value.
	 * 
	 * @return     int
	 */
	public function getFundraising()
	{
		return $this->fundraising;
	}

	/**
	 * Get the [celebritycontacts] column value.
	 * 
	 * @return     int
	 */
	public function getCelebritycontacts()
	{
		return $this->celebritycontacts;
	}

	/**
	 * Get the [graphicarts] column value.
	 * 
	 * @return     int
	 */
	public function getGraphicarts()
	{
		return $this->graphicarts;
	}

	/**
	 * Get the [hospitaloutreach] column value.
	 * 
	 * @return     int
	 */
	public function getHospitaloutreach()
	{
		return $this->hospitaloutreach;
	}

	/**
	 * Get the [eventplanning] column value.
	 * 
	 * @return     int
	 */
	public function getEventplanning()
	{
		return $this->eventplanning;
	}

	/**
	 * Get the [mediarelations] column value.
	 * 
	 * @return     int
	 */
	public function getMediarelations()
	{
		return $this->mediarelations;
	}

	/**
	 * Get the [telephonework] column value.
	 * 
	 * @return     int
	 */
	public function getTelephonework()
	{
		return $this->telephonework;
	}

	/**
	 * Get the [computers] column value.
	 * 
	 * @return     int
	 */
	public function getComputers()
	{
		return $this->computers;
	}

	/**
	 * Get the [printing] column value.
	 * 
	 * @return     int
	 */
	public function getPrinting()
	{
		return $this->printing;
	}

	/**
	 * Get the [writing] column value.
	 * 
	 * @return     int
	 */
	public function getWriting()
	{
		return $this->writing;
	}

	/**
	 * Get the [speakersbureau] column value.
	 * 
	 * @return     int
	 */
	public function getSpeakersbureau()
	{
		return $this->speakersbureau;
	}

	/**
	 * Get the [wingteam] column value.
	 * 
	 * @return     int
	 */
	public function getWingteam()
	{
		return $this->wingteam;
	}

	/**
	 * Get the [webinternet] column value.
	 * 
	 * @return     int
	 */
	public function getWebinternet()
	{
		return $this->webinternet;
	}

	/**
	 * Get the [foundationcontacts] column value.
	 * 
	 * @return     int
	 */
	public function getFoundationcontacts()
	{
		return $this->foundationcontacts;
	}

	/**
	 * Get the [aviationcontacts] column value.
	 * 
	 * @return     int
	 */
	public function getAviationcontacts()
	{
		return $this->aviationcontacts;
	}

	/**
	 * Get the [disasterresponseinterest] column value.
	 * 
	 * @return     int
	 */
	public function getDisasterresponseinterest()
	{
		return $this->disasterresponseinterest;
	}

	/**
	 * Get the [active] column value.
	 * 
	 * @return     int
	 */
	public function getActive()
	{
		return $this->active;
	}

	/**
	 * Get the [primary_airport_id] column value.
	 * 
	 * @return     int
	 */
	public function getPrimaryAirportId()
	{
		return $this->primary_airport_id;
	}

	/**
	 * Get the [homebase] column value.
	 * 
	 * @return     string
	 */
	public function getHomebase()
	{
		return $this->homebase;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Set the value of [applicationid] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setApplicationid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->applicationid !== $v || $v === 0) {
			$this->applicationid = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::APPLICATIONID;
		}

		return $this;
	} // setApplicationid()

	/**
	 * Sets the value of [applicationdate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setApplicationdate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->applicationdate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->applicationdate !== null && $tmpDt = new DateTime($this->applicationdate)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->applicationdate = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = RpApplicationSearchPeer::APPLICATIONDATE;
			}
		} // if either are not null

		return $this;
	} // setApplicationdate()

	/**
	 * Set the value of [personid] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setPersonid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->personid !== $v || $v === 0) {
			$this->personid = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::PERSONID;
		}

		return $this;
	} // setPersonid()

	/**
	 * Set the value of [firstname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setFirstname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->firstname !== $v) {
			$this->firstname = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::FIRSTNAME;
		}

		return $this;
	} // setFirstname()

	/**
	 * Set the value of [lastname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setLastname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lastname !== $v) {
			$this->lastname = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::LASTNAME;
		}

		return $this;
	} // setLastname()

	/**
	 * Set the value of [address1] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setAddress1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address1 !== $v) {
			$this->address1 = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::ADDRESS1;
		}

		return $this;
	} // setAddress1()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [state] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->state !== $v) {
			$this->state = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::STATE;
		}

		return $this;
	} // setState()

	/**
	 * Set the value of [zipcode] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setZipcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->zipcode !== $v) {
			$this->zipcode = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::ZIPCODE;
		}

		return $this;
	} // setZipcode()

	/**
	 * Set the value of [county] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setCounty($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->county !== $v) {
			$this->county = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::COUNTY;
		}

		return $this;
	} // setCounty()

	/**
	 * Set the value of [areacode] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setAreacode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->areacode !== $v) {
			$this->areacode = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::AREACODE;
		}

		return $this;
	} // setAreacode()

	/**
	 * Set the value of [dayphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setDayphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dayphone !== $v) {
			$this->dayphone = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::DAYPHONE;
		}

		return $this;
	} // setDayphone()

	/**
	 * Set the value of [daycomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setDaycomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->daycomment !== $v) {
			$this->daycomment = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::DAYCOMMENT;
		}

		return $this;
	} // setDaycomment()

	/**
	 * Set the value of [eveningphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setEveningphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->eveningphone !== $v) {
			$this->eveningphone = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::EVENINGPHONE;
		}

		return $this;
	} // setEveningphone()

	/**
	 * Set the value of [evecomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setEvecomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->evecomment !== $v) {
			$this->evecomment = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::EVECOMMENT;
		}

		return $this;
	} // setEvecomment()

	/**
	 * Set the value of [mobilephone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setMobilephone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mobilephone !== $v) {
			$this->mobilephone = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::MOBILEPHONE;
		}

		return $this;
	} // setMobilephone()

	/**
	 * Set the value of [mobilecomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setMobilecomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mobilecomment !== $v) {
			$this->mobilecomment = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::MOBILECOMMENT;
		}

		return $this;
	} // setMobilecomment()

	/**
	 * Set the value of [otherphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setOtherphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->otherphone !== $v) {
			$this->otherphone = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::OTHERPHONE;
		}

		return $this;
	} // setOtherphone()

	/**
	 * Set the value of [othercomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setOthercomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->othercomment !== $v) {
			$this->othercomment = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::OTHERCOMMENT;
		}

		return $this;
	} // setOthercomment()

	/**
	 * Set the value of [pagerphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setPagerphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pagerphone !== $v) {
			$this->pagerphone = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::PAGERPHONE;
		}

		return $this;
	} // setPagerphone()

	/**
	 * Set the value of [pagercomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setPagercomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pagercomment !== $v) {
			$this->pagercomment = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::PAGERCOMMENT;
		}

		return $this;
	} // setPagercomment()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [spousepilot] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setSpousepilot($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->spousepilot !== $v) {
			$this->spousepilot = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::SPOUSEPILOT;
		}

		return $this;
	} // setSpousepilot()

	/**
	 * Set the value of [wingid] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setWingid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->wingid !== $v || $v === 0) {
			$this->wingid = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::WINGID;
		}

		return $this;
	} // setWingid()

	/**
	 * Set the value of [wingname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setWingname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->wingname !== $v) {
			$this->wingname = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::WINGNAME;
		}

		return $this;
	} // setWingname()

	/**
	 * Sets the value of [renewaldate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setRenewaldate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->renewaldate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->renewaldate !== null && $tmpDt = new DateTime($this->renewaldate)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->renewaldate = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = RpApplicationSearchPeer::RENEWALDATE;
			}
		} // if either are not null

		return $this;
	} // setRenewaldate()

	/**
	 * Sets the value of [joindate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setJoindate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->joindate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->joindate !== null && $tmpDt = new DateTime($this->joindate)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->joindate = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = RpApplicationSearchPeer::JOINDATE;
			}
		} // if either are not null

		return $this;
	} // setJoindate()

	/**
	 * Set the value of [joinyear] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setJoinyear($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->joinyear !== $v) {
			$this->joinyear = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::JOINYEAR;
		}

		return $this;
	} // setJoinyear()

	/**
	 * Set the value of [refsourceid] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setRefsourceid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->refsourceid !== $v || $v === 0) {
			$this->refsourceid = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::REFSOURCEID;
		}

		return $this;
	} // setRefsourceid()

	/**
	 * Set the value of [refsourcename] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setRefsourcename($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->refsourcename !== $v) {
			$this->refsourcename = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::REFSOURCENAME;
		}

		return $this;
	} // setRefsourcename()

	/**
	 * Set the value of [companymatchfunds] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setCompanymatchfunds($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->companymatchfunds !== $v) {
			$this->companymatchfunds = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::COMPANYMATCHFUNDS;
		}

		return $this;
	} // setCompanymatchfunds()

	/**
	 * Set the value of [companyname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setCompanyname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->companyname !== $v) {
			$this->companyname = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::COMPANYNAME;
		}

		return $this;
	} // setCompanyname()

	/**
	 * Set the value of [companyposition] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setCompanyposition($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->companyposition !== $v) {
			$this->companyposition = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::COMPANYPOSITION;
		}

		return $this;
	} // setCompanyposition()

	/**
	 * Set the value of [vocationclassid] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setVocationclassid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->vocationclassid !== $v || $v === 0) {
			$this->vocationclassid = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::VOCATIONCLASSID;
		}

		return $this;
	} // setVocationclassid()

	/**
	 * Set the value of [vocationclassname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setVocationclassname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vocationclassname !== $v) {
			$this->vocationclassname = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::VOCATIONCLASSNAME;
		}

		return $this;
	} // setVocationclassname()

	/**
	 * Set the value of [memberaopa] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setMemberaopa($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->memberaopa !== $v) {
			$this->memberaopa = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::MEMBERAOPA;
		}

		return $this;
	} // setMemberaopa()

	/**
	 * Set the value of [memberkiwanis] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setMemberkiwanis($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->memberkiwanis !== $v) {
			$this->memberkiwanis = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::MEMBERKIWANIS;
		}

		return $this;
	} // setMemberkiwanis()

	/**
	 * Set the value of [memberrotary] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setMemberrotary($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->memberrotary !== $v) {
			$this->memberrotary = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::MEMBERROTARY;
		}

		return $this;
	} // setMemberrotary()

	/**
	 * Set the value of [memberlions] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setMemberlions($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->memberlions !== $v) {
			$this->memberlions = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::MEMBERLIONS;
		}

		return $this;
	} // setMemberlions()

	/**
	 * Set the value of [member99s] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setMember99s($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->member99s !== $v) {
			$this->member99s = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::MEMBER99S;
		}

		return $this;
	} // setMember99s()

	/**
	 * Set the value of [memberwia] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setMemberwia($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->memberwia !== $v) {
			$this->memberwia = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::MEMBERWIA;
		}

		return $this;
	} // setMemberwia()

	/**
	 * Set the value of [missionorientation] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setMissionorientation($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->missionorientation !== $v) {
			$this->missionorientation = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::MISSIONORIENTATION;
		}

		return $this;
	} // setMissionorientation()

	/**
	 * Set the value of [missioncoordination] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setMissioncoordination($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->missioncoordination !== $v) {
			$this->missioncoordination = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::MISSIONCOORDINATION;
		}

		return $this;
	} // setMissioncoordination()

	/**
	 * Set the value of [pilotrecruitment] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setPilotrecruitment($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->pilotrecruitment !== $v) {
			$this->pilotrecruitment = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::PILOTRECRUITMENT;
		}

		return $this;
	} // setPilotrecruitment()

	/**
	 * Set the value of [fundraising] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setFundraising($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fundraising !== $v) {
			$this->fundraising = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::FUNDRAISING;
		}

		return $this;
	} // setFundraising()

	/**
	 * Set the value of [celebritycontacts] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setCelebritycontacts($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->celebritycontacts !== $v) {
			$this->celebritycontacts = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::CELEBRITYCONTACTS;
		}

		return $this;
	} // setCelebritycontacts()

	/**
	 * Set the value of [graphicarts] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setGraphicarts($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->graphicarts !== $v) {
			$this->graphicarts = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::GRAPHICARTS;
		}

		return $this;
	} // setGraphicarts()

	/**
	 * Set the value of [hospitaloutreach] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setHospitaloutreach($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->hospitaloutreach !== $v) {
			$this->hospitaloutreach = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::HOSPITALOUTREACH;
		}

		return $this;
	} // setHospitaloutreach()

	/**
	 * Set the value of [eventplanning] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setEventplanning($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->eventplanning !== $v) {
			$this->eventplanning = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::EVENTPLANNING;
		}

		return $this;
	} // setEventplanning()

	/**
	 * Set the value of [mediarelations] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setMediarelations($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->mediarelations !== $v) {
			$this->mediarelations = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::MEDIARELATIONS;
		}

		return $this;
	} // setMediarelations()

	/**
	 * Set the value of [telephonework] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setTelephonework($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->telephonework !== $v) {
			$this->telephonework = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::TELEPHONEWORK;
		}

		return $this;
	} // setTelephonework()

	/**
	 * Set the value of [computers] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setComputers($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->computers !== $v) {
			$this->computers = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::COMPUTERS;
		}

		return $this;
	} // setComputers()

	/**
	 * Set the value of [printing] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setPrinting($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->printing !== $v) {
			$this->printing = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::PRINTING;
		}

		return $this;
	} // setPrinting()

	/**
	 * Set the value of [writing] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setWriting($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->writing !== $v) {
			$this->writing = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::WRITING;
		}

		return $this;
	} // setWriting()

	/**
	 * Set the value of [speakersbureau] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setSpeakersbureau($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->speakersbureau !== $v) {
			$this->speakersbureau = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::SPEAKERSBUREAU;
		}

		return $this;
	} // setSpeakersbureau()

	/**
	 * Set the value of [wingteam] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setWingteam($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->wingteam !== $v) {
			$this->wingteam = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::WINGTEAM;
		}

		return $this;
	} // setWingteam()

	/**
	 * Set the value of [webinternet] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setWebinternet($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->webinternet !== $v) {
			$this->webinternet = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::WEBINTERNET;
		}

		return $this;
	} // setWebinternet()

	/**
	 * Set the value of [foundationcontacts] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setFoundationcontacts($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->foundationcontacts !== $v) {
			$this->foundationcontacts = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::FOUNDATIONCONTACTS;
		}

		return $this;
	} // setFoundationcontacts()

	/**
	 * Set the value of [aviationcontacts] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setAviationcontacts($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->aviationcontacts !== $v) {
			$this->aviationcontacts = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::AVIATIONCONTACTS;
		}

		return $this;
	} // setAviationcontacts()

	/**
	 * Set the value of [disasterresponseinterest] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setDisasterresponseinterest($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->disasterresponseinterest !== $v) {
			$this->disasterresponseinterest = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::DISASTERRESPONSEINTEREST;
		}

		return $this;
	} // setDisasterresponseinterest()

	/**
	 * Set the value of [active] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setActive($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->active !== $v || $v === 1) {
			$this->active = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::ACTIVE;
		}

		return $this;
	} // setActive()

	/**
	 * Set the value of [primary_airport_id] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setPrimaryAirportId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->primary_airport_id !== $v) {
			$this->primary_airport_id = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::PRIMARY_AIRPORT_ID;
		}

		return $this;
	} // setPrimaryAirportId()

	/**
	 * Set the value of [homebase] column.
	 * 
	 * @param      string $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setHomebase($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->homebase !== $v) {
			$this->homebase = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::HOMEBASE;
		}

		return $this;
	} // setHomebase()

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     RpApplicationSearch The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = RpApplicationSearchPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(RpApplicationSearchPeer::APPLICATIONID,RpApplicationSearchPeer::PERSONID,RpApplicationSearchPeer::WINGID,RpApplicationSearchPeer::REFSOURCEID,RpApplicationSearchPeer::VOCATIONCLASSID,RpApplicationSearchPeer::ACTIVE))) {
				return false;
			}

			if ($this->applicationid !== 0) {
				return false;
			}

			if ($this->personid !== 0) {
				return false;
			}

			if ($this->wingid !== 0) {
				return false;
			}

			if ($this->refsourceid !== 0) {
				return false;
			}

			if ($this->vocationclassid !== 0) {
				return false;
			}

			if ($this->active !== 1) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->applicationid = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->applicationdate = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->personid = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->firstname = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->lastname = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->address1 = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->city = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->state = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->zipcode = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->county = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->areacode = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->dayphone = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->daycomment = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->eveningphone = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->evecomment = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->mobilephone = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->mobilecomment = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->otherphone = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->othercomment = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->pagerphone = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->pagercomment = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->email = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->spousepilot = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->wingid = ($row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
			$this->wingname = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->renewaldate = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->joindate = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->joinyear = ($row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->refsourceid = ($row[$startcol + 28] !== null) ? (int) $row[$startcol + 28] : null;
			$this->refsourcename = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->companymatchfunds = ($row[$startcol + 30] !== null) ? (int) $row[$startcol + 30] : null;
			$this->companyname = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->companyposition = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->vocationclassid = ($row[$startcol + 33] !== null) ? (int) $row[$startcol + 33] : null;
			$this->vocationclassname = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->memberaopa = ($row[$startcol + 35] !== null) ? (int) $row[$startcol + 35] : null;
			$this->memberkiwanis = ($row[$startcol + 36] !== null) ? (int) $row[$startcol + 36] : null;
			$this->memberrotary = ($row[$startcol + 37] !== null) ? (int) $row[$startcol + 37] : null;
			$this->memberlions = ($row[$startcol + 38] !== null) ? (int) $row[$startcol + 38] : null;
			$this->member99s = ($row[$startcol + 39] !== null) ? (int) $row[$startcol + 39] : null;
			$this->memberwia = ($row[$startcol + 40] !== null) ? (int) $row[$startcol + 40] : null;
			$this->missionorientation = ($row[$startcol + 41] !== null) ? (int) $row[$startcol + 41] : null;
			$this->missioncoordination = ($row[$startcol + 42] !== null) ? (int) $row[$startcol + 42] : null;
			$this->pilotrecruitment = ($row[$startcol + 43] !== null) ? (int) $row[$startcol + 43] : null;
			$this->fundraising = ($row[$startcol + 44] !== null) ? (int) $row[$startcol + 44] : null;
			$this->celebritycontacts = ($row[$startcol + 45] !== null) ? (int) $row[$startcol + 45] : null;
			$this->graphicarts = ($row[$startcol + 46] !== null) ? (int) $row[$startcol + 46] : null;
			$this->hospitaloutreach = ($row[$startcol + 47] !== null) ? (int) $row[$startcol + 47] : null;
			$this->eventplanning = ($row[$startcol + 48] !== null) ? (int) $row[$startcol + 48] : null;
			$this->mediarelations = ($row[$startcol + 49] !== null) ? (int) $row[$startcol + 49] : null;
			$this->telephonework = ($row[$startcol + 50] !== null) ? (int) $row[$startcol + 50] : null;
			$this->computers = ($row[$startcol + 51] !== null) ? (int) $row[$startcol + 51] : null;
			$this->printing = ($row[$startcol + 52] !== null) ? (int) $row[$startcol + 52] : null;
			$this->writing = ($row[$startcol + 53] !== null) ? (int) $row[$startcol + 53] : null;
			$this->speakersbureau = ($row[$startcol + 54] !== null) ? (int) $row[$startcol + 54] : null;
			$this->wingteam = ($row[$startcol + 55] !== null) ? (int) $row[$startcol + 55] : null;
			$this->webinternet = ($row[$startcol + 56] !== null) ? (int) $row[$startcol + 56] : null;
			$this->foundationcontacts = ($row[$startcol + 57] !== null) ? (int) $row[$startcol + 57] : null;
			$this->aviationcontacts = ($row[$startcol + 58] !== null) ? (int) $row[$startcol + 58] : null;
			$this->disasterresponseinterest = ($row[$startcol + 59] !== null) ? (int) $row[$startcol + 59] : null;
			$this->active = ($row[$startcol + 60] !== null) ? (int) $row[$startcol + 60] : null;
			$this->primary_airport_id = ($row[$startcol + 61] !== null) ? (int) $row[$startcol + 61] : null;
			$this->homebase = ($row[$startcol + 62] !== null) ? (string) $row[$startcol + 62] : null;
			$this->id = ($row[$startcol + 63] !== null) ? (int) $row[$startcol + 63] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 64; // 64 = RpApplicationSearchPeer::NUM_COLUMNS - RpApplicationSearchPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating RpApplicationSearch object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RpApplicationSearchPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = RpApplicationSearchPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRpApplicationSearch:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RpApplicationSearchPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			RpApplicationSearchPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseRpApplicationSearch:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRpApplicationSearch:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RpApplicationSearchPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseRpApplicationSearch:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			RpApplicationSearchPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = RpApplicationSearchPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = RpApplicationSearchPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += RpApplicationSearchPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = RpApplicationSearchPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RpApplicationSearchPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getApplicationid();
				break;
			case 1:
				return $this->getApplicationdate();
				break;
			case 2:
				return $this->getPersonid();
				break;
			case 3:
				return $this->getFirstname();
				break;
			case 4:
				return $this->getLastname();
				break;
			case 5:
				return $this->getAddress1();
				break;
			case 6:
				return $this->getCity();
				break;
			case 7:
				return $this->getState();
				break;
			case 8:
				return $this->getZipcode();
				break;
			case 9:
				return $this->getCounty();
				break;
			case 10:
				return $this->getAreacode();
				break;
			case 11:
				return $this->getDayphone();
				break;
			case 12:
				return $this->getDaycomment();
				break;
			case 13:
				return $this->getEveningphone();
				break;
			case 14:
				return $this->getEvecomment();
				break;
			case 15:
				return $this->getMobilephone();
				break;
			case 16:
				return $this->getMobilecomment();
				break;
			case 17:
				return $this->getOtherphone();
				break;
			case 18:
				return $this->getOthercomment();
				break;
			case 19:
				return $this->getPagerphone();
				break;
			case 20:
				return $this->getPagercomment();
				break;
			case 21:
				return $this->getEmail();
				break;
			case 22:
				return $this->getSpousepilot();
				break;
			case 23:
				return $this->getWingid();
				break;
			case 24:
				return $this->getWingname();
				break;
			case 25:
				return $this->getRenewaldate();
				break;
			case 26:
				return $this->getJoindate();
				break;
			case 27:
				return $this->getJoinyear();
				break;
			case 28:
				return $this->getRefsourceid();
				break;
			case 29:
				return $this->getRefsourcename();
				break;
			case 30:
				return $this->getCompanymatchfunds();
				break;
			case 31:
				return $this->getCompanyname();
				break;
			case 32:
				return $this->getCompanyposition();
				break;
			case 33:
				return $this->getVocationclassid();
				break;
			case 34:
				return $this->getVocationclassname();
				break;
			case 35:
				return $this->getMemberaopa();
				break;
			case 36:
				return $this->getMemberkiwanis();
				break;
			case 37:
				return $this->getMemberrotary();
				break;
			case 38:
				return $this->getMemberlions();
				break;
			case 39:
				return $this->getMember99s();
				break;
			case 40:
				return $this->getMemberwia();
				break;
			case 41:
				return $this->getMissionorientation();
				break;
			case 42:
				return $this->getMissioncoordination();
				break;
			case 43:
				return $this->getPilotrecruitment();
				break;
			case 44:
				return $this->getFundraising();
				break;
			case 45:
				return $this->getCelebritycontacts();
				break;
			case 46:
				return $this->getGraphicarts();
				break;
			case 47:
				return $this->getHospitaloutreach();
				break;
			case 48:
				return $this->getEventplanning();
				break;
			case 49:
				return $this->getMediarelations();
				break;
			case 50:
				return $this->getTelephonework();
				break;
			case 51:
				return $this->getComputers();
				break;
			case 52:
				return $this->getPrinting();
				break;
			case 53:
				return $this->getWriting();
				break;
			case 54:
				return $this->getSpeakersbureau();
				break;
			case 55:
				return $this->getWingteam();
				break;
			case 56:
				return $this->getWebinternet();
				break;
			case 57:
				return $this->getFoundationcontacts();
				break;
			case 58:
				return $this->getAviationcontacts();
				break;
			case 59:
				return $this->getDisasterresponseinterest();
				break;
			case 60:
				return $this->getActive();
				break;
			case 61:
				return $this->getPrimaryAirportId();
				break;
			case 62:
				return $this->getHomebase();
				break;
			case 63:
				return $this->getId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = RpApplicationSearchPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getApplicationid(),
			$keys[1] => $this->getApplicationdate(),
			$keys[2] => $this->getPersonid(),
			$keys[3] => $this->getFirstname(),
			$keys[4] => $this->getLastname(),
			$keys[5] => $this->getAddress1(),
			$keys[6] => $this->getCity(),
			$keys[7] => $this->getState(),
			$keys[8] => $this->getZipcode(),
			$keys[9] => $this->getCounty(),
			$keys[10] => $this->getAreacode(),
			$keys[11] => $this->getDayphone(),
			$keys[12] => $this->getDaycomment(),
			$keys[13] => $this->getEveningphone(),
			$keys[14] => $this->getEvecomment(),
			$keys[15] => $this->getMobilephone(),
			$keys[16] => $this->getMobilecomment(),
			$keys[17] => $this->getOtherphone(),
			$keys[18] => $this->getOthercomment(),
			$keys[19] => $this->getPagerphone(),
			$keys[20] => $this->getPagercomment(),
			$keys[21] => $this->getEmail(),
			$keys[22] => $this->getSpousepilot(),
			$keys[23] => $this->getWingid(),
			$keys[24] => $this->getWingname(),
			$keys[25] => $this->getRenewaldate(),
			$keys[26] => $this->getJoindate(),
			$keys[27] => $this->getJoinyear(),
			$keys[28] => $this->getRefsourceid(),
			$keys[29] => $this->getRefsourcename(),
			$keys[30] => $this->getCompanymatchfunds(),
			$keys[31] => $this->getCompanyname(),
			$keys[32] => $this->getCompanyposition(),
			$keys[33] => $this->getVocationclassid(),
			$keys[34] => $this->getVocationclassname(),
			$keys[35] => $this->getMemberaopa(),
			$keys[36] => $this->getMemberkiwanis(),
			$keys[37] => $this->getMemberrotary(),
			$keys[38] => $this->getMemberlions(),
			$keys[39] => $this->getMember99s(),
			$keys[40] => $this->getMemberwia(),
			$keys[41] => $this->getMissionorientation(),
			$keys[42] => $this->getMissioncoordination(),
			$keys[43] => $this->getPilotrecruitment(),
			$keys[44] => $this->getFundraising(),
			$keys[45] => $this->getCelebritycontacts(),
			$keys[46] => $this->getGraphicarts(),
			$keys[47] => $this->getHospitaloutreach(),
			$keys[48] => $this->getEventplanning(),
			$keys[49] => $this->getMediarelations(),
			$keys[50] => $this->getTelephonework(),
			$keys[51] => $this->getComputers(),
			$keys[52] => $this->getPrinting(),
			$keys[53] => $this->getWriting(),
			$keys[54] => $this->getSpeakersbureau(),
			$keys[55] => $this->getWingteam(),
			$keys[56] => $this->getWebinternet(),
			$keys[57] => $this->getFoundationcontacts(),
			$keys[58] => $this->getAviationcontacts(),
			$keys[59] => $this->getDisasterresponseinterest(),
			$keys[60] => $this->getActive(),
			$keys[61] => $this->getPrimaryAirportId(),
			$keys[62] => $this->getHomebase(),
			$keys[63] => $this->getId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RpApplicationSearchPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setApplicationid($value);
				break;
			case 1:
				$this->setApplicationdate($value);
				break;
			case 2:
				$this->setPersonid($value);
				break;
			case 3:
				$this->setFirstname($value);
				break;
			case 4:
				$this->setLastname($value);
				break;
			case 5:
				$this->setAddress1($value);
				break;
			case 6:
				$this->setCity($value);
				break;
			case 7:
				$this->setState($value);
				break;
			case 8:
				$this->setZipcode($value);
				break;
			case 9:
				$this->setCounty($value);
				break;
			case 10:
				$this->setAreacode($value);
				break;
			case 11:
				$this->setDayphone($value);
				break;
			case 12:
				$this->setDaycomment($value);
				break;
			case 13:
				$this->setEveningphone($value);
				break;
			case 14:
				$this->setEvecomment($value);
				break;
			case 15:
				$this->setMobilephone($value);
				break;
			case 16:
				$this->setMobilecomment($value);
				break;
			case 17:
				$this->setOtherphone($value);
				break;
			case 18:
				$this->setOthercomment($value);
				break;
			case 19:
				$this->setPagerphone($value);
				break;
			case 20:
				$this->setPagercomment($value);
				break;
			case 21:
				$this->setEmail($value);
				break;
			case 22:
				$this->setSpousepilot($value);
				break;
			case 23:
				$this->setWingid($value);
				break;
			case 24:
				$this->setWingname($value);
				break;
			case 25:
				$this->setRenewaldate($value);
				break;
			case 26:
				$this->setJoindate($value);
				break;
			case 27:
				$this->setJoinyear($value);
				break;
			case 28:
				$this->setRefsourceid($value);
				break;
			case 29:
				$this->setRefsourcename($value);
				break;
			case 30:
				$this->setCompanymatchfunds($value);
				break;
			case 31:
				$this->setCompanyname($value);
				break;
			case 32:
				$this->setCompanyposition($value);
				break;
			case 33:
				$this->setVocationclassid($value);
				break;
			case 34:
				$this->setVocationclassname($value);
				break;
			case 35:
				$this->setMemberaopa($value);
				break;
			case 36:
				$this->setMemberkiwanis($value);
				break;
			case 37:
				$this->setMemberrotary($value);
				break;
			case 38:
				$this->setMemberlions($value);
				break;
			case 39:
				$this->setMember99s($value);
				break;
			case 40:
				$this->setMemberwia($value);
				break;
			case 41:
				$this->setMissionorientation($value);
				break;
			case 42:
				$this->setMissioncoordination($value);
				break;
			case 43:
				$this->setPilotrecruitment($value);
				break;
			case 44:
				$this->setFundraising($value);
				break;
			case 45:
				$this->setCelebritycontacts($value);
				break;
			case 46:
				$this->setGraphicarts($value);
				break;
			case 47:
				$this->setHospitaloutreach($value);
				break;
			case 48:
				$this->setEventplanning($value);
				break;
			case 49:
				$this->setMediarelations($value);
				break;
			case 50:
				$this->setTelephonework($value);
				break;
			case 51:
				$this->setComputers($value);
				break;
			case 52:
				$this->setPrinting($value);
				break;
			case 53:
				$this->setWriting($value);
				break;
			case 54:
				$this->setSpeakersbureau($value);
				break;
			case 55:
				$this->setWingteam($value);
				break;
			case 56:
				$this->setWebinternet($value);
				break;
			case 57:
				$this->setFoundationcontacts($value);
				break;
			case 58:
				$this->setAviationcontacts($value);
				break;
			case 59:
				$this->setDisasterresponseinterest($value);
				break;
			case 60:
				$this->setActive($value);
				break;
			case 61:
				$this->setPrimaryAirportId($value);
				break;
			case 62:
				$this->setHomebase($value);
				break;
			case 63:
				$this->setId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = RpApplicationSearchPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setApplicationid($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setApplicationdate($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setPersonid($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setFirstname($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setLastname($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAddress1($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCity($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setState($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setZipcode($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCounty($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setAreacode($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setDayphone($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setDaycomment($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setEveningphone($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setEvecomment($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setMobilephone($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setMobilecomment($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setOtherphone($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setOthercomment($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setPagerphone($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setPagercomment($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setEmail($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setSpousepilot($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setWingid($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setWingname($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setRenewaldate($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setJoindate($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setJoinyear($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setRefsourceid($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setRefsourcename($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setCompanymatchfunds($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setCompanyname($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setCompanyposition($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setVocationclassid($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setVocationclassname($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setMemberaopa($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setMemberkiwanis($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setMemberrotary($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setMemberlions($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setMember99s($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setMemberwia($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setMissionorientation($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setMissioncoordination($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setPilotrecruitment($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setFundraising($arr[$keys[44]]);
		if (array_key_exists($keys[45], $arr)) $this->setCelebritycontacts($arr[$keys[45]]);
		if (array_key_exists($keys[46], $arr)) $this->setGraphicarts($arr[$keys[46]]);
		if (array_key_exists($keys[47], $arr)) $this->setHospitaloutreach($arr[$keys[47]]);
		if (array_key_exists($keys[48], $arr)) $this->setEventplanning($arr[$keys[48]]);
		if (array_key_exists($keys[49], $arr)) $this->setMediarelations($arr[$keys[49]]);
		if (array_key_exists($keys[50], $arr)) $this->setTelephonework($arr[$keys[50]]);
		if (array_key_exists($keys[51], $arr)) $this->setComputers($arr[$keys[51]]);
		if (array_key_exists($keys[52], $arr)) $this->setPrinting($arr[$keys[52]]);
		if (array_key_exists($keys[53], $arr)) $this->setWriting($arr[$keys[53]]);
		if (array_key_exists($keys[54], $arr)) $this->setSpeakersbureau($arr[$keys[54]]);
		if (array_key_exists($keys[55], $arr)) $this->setWingteam($arr[$keys[55]]);
		if (array_key_exists($keys[56], $arr)) $this->setWebinternet($arr[$keys[56]]);
		if (array_key_exists($keys[57], $arr)) $this->setFoundationcontacts($arr[$keys[57]]);
		if (array_key_exists($keys[58], $arr)) $this->setAviationcontacts($arr[$keys[58]]);
		if (array_key_exists($keys[59], $arr)) $this->setDisasterresponseinterest($arr[$keys[59]]);
		if (array_key_exists($keys[60], $arr)) $this->setActive($arr[$keys[60]]);
		if (array_key_exists($keys[61], $arr)) $this->setPrimaryAirportId($arr[$keys[61]]);
		if (array_key_exists($keys[62], $arr)) $this->setHomebase($arr[$keys[62]]);
		if (array_key_exists($keys[63], $arr)) $this->setId($arr[$keys[63]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(RpApplicationSearchPeer::DATABASE_NAME);

		if ($this->isColumnModified(RpApplicationSearchPeer::APPLICATIONID)) $criteria->add(RpApplicationSearchPeer::APPLICATIONID, $this->applicationid);
		if ($this->isColumnModified(RpApplicationSearchPeer::APPLICATIONDATE)) $criteria->add(RpApplicationSearchPeer::APPLICATIONDATE, $this->applicationdate);
		if ($this->isColumnModified(RpApplicationSearchPeer::PERSONID)) $criteria->add(RpApplicationSearchPeer::PERSONID, $this->personid);
		if ($this->isColumnModified(RpApplicationSearchPeer::FIRSTNAME)) $criteria->add(RpApplicationSearchPeer::FIRSTNAME, $this->firstname);
		if ($this->isColumnModified(RpApplicationSearchPeer::LASTNAME)) $criteria->add(RpApplicationSearchPeer::LASTNAME, $this->lastname);
		if ($this->isColumnModified(RpApplicationSearchPeer::ADDRESS1)) $criteria->add(RpApplicationSearchPeer::ADDRESS1, $this->address1);
		if ($this->isColumnModified(RpApplicationSearchPeer::CITY)) $criteria->add(RpApplicationSearchPeer::CITY, $this->city);
		if ($this->isColumnModified(RpApplicationSearchPeer::STATE)) $criteria->add(RpApplicationSearchPeer::STATE, $this->state);
		if ($this->isColumnModified(RpApplicationSearchPeer::ZIPCODE)) $criteria->add(RpApplicationSearchPeer::ZIPCODE, $this->zipcode);
		if ($this->isColumnModified(RpApplicationSearchPeer::COUNTY)) $criteria->add(RpApplicationSearchPeer::COUNTY, $this->county);
		if ($this->isColumnModified(RpApplicationSearchPeer::AREACODE)) $criteria->add(RpApplicationSearchPeer::AREACODE, $this->areacode);
		if ($this->isColumnModified(RpApplicationSearchPeer::DAYPHONE)) $criteria->add(RpApplicationSearchPeer::DAYPHONE, $this->dayphone);
		if ($this->isColumnModified(RpApplicationSearchPeer::DAYCOMMENT)) $criteria->add(RpApplicationSearchPeer::DAYCOMMENT, $this->daycomment);
		if ($this->isColumnModified(RpApplicationSearchPeer::EVENINGPHONE)) $criteria->add(RpApplicationSearchPeer::EVENINGPHONE, $this->eveningphone);
		if ($this->isColumnModified(RpApplicationSearchPeer::EVECOMMENT)) $criteria->add(RpApplicationSearchPeer::EVECOMMENT, $this->evecomment);
		if ($this->isColumnModified(RpApplicationSearchPeer::MOBILEPHONE)) $criteria->add(RpApplicationSearchPeer::MOBILEPHONE, $this->mobilephone);
		if ($this->isColumnModified(RpApplicationSearchPeer::MOBILECOMMENT)) $criteria->add(RpApplicationSearchPeer::MOBILECOMMENT, $this->mobilecomment);
		if ($this->isColumnModified(RpApplicationSearchPeer::OTHERPHONE)) $criteria->add(RpApplicationSearchPeer::OTHERPHONE, $this->otherphone);
		if ($this->isColumnModified(RpApplicationSearchPeer::OTHERCOMMENT)) $criteria->add(RpApplicationSearchPeer::OTHERCOMMENT, $this->othercomment);
		if ($this->isColumnModified(RpApplicationSearchPeer::PAGERPHONE)) $criteria->add(RpApplicationSearchPeer::PAGERPHONE, $this->pagerphone);
		if ($this->isColumnModified(RpApplicationSearchPeer::PAGERCOMMENT)) $criteria->add(RpApplicationSearchPeer::PAGERCOMMENT, $this->pagercomment);
		if ($this->isColumnModified(RpApplicationSearchPeer::EMAIL)) $criteria->add(RpApplicationSearchPeer::EMAIL, $this->email);
		if ($this->isColumnModified(RpApplicationSearchPeer::SPOUSEPILOT)) $criteria->add(RpApplicationSearchPeer::SPOUSEPILOT, $this->spousepilot);
		if ($this->isColumnModified(RpApplicationSearchPeer::WINGID)) $criteria->add(RpApplicationSearchPeer::WINGID, $this->wingid);
		if ($this->isColumnModified(RpApplicationSearchPeer::WINGNAME)) $criteria->add(RpApplicationSearchPeer::WINGNAME, $this->wingname);
		if ($this->isColumnModified(RpApplicationSearchPeer::RENEWALDATE)) $criteria->add(RpApplicationSearchPeer::RENEWALDATE, $this->renewaldate);
		if ($this->isColumnModified(RpApplicationSearchPeer::JOINDATE)) $criteria->add(RpApplicationSearchPeer::JOINDATE, $this->joindate);
		if ($this->isColumnModified(RpApplicationSearchPeer::JOINYEAR)) $criteria->add(RpApplicationSearchPeer::JOINYEAR, $this->joinyear);
		if ($this->isColumnModified(RpApplicationSearchPeer::REFSOURCEID)) $criteria->add(RpApplicationSearchPeer::REFSOURCEID, $this->refsourceid);
		if ($this->isColumnModified(RpApplicationSearchPeer::REFSOURCENAME)) $criteria->add(RpApplicationSearchPeer::REFSOURCENAME, $this->refsourcename);
		if ($this->isColumnModified(RpApplicationSearchPeer::COMPANYMATCHFUNDS)) $criteria->add(RpApplicationSearchPeer::COMPANYMATCHFUNDS, $this->companymatchfunds);
		if ($this->isColumnModified(RpApplicationSearchPeer::COMPANYNAME)) $criteria->add(RpApplicationSearchPeer::COMPANYNAME, $this->companyname);
		if ($this->isColumnModified(RpApplicationSearchPeer::COMPANYPOSITION)) $criteria->add(RpApplicationSearchPeer::COMPANYPOSITION, $this->companyposition);
		if ($this->isColumnModified(RpApplicationSearchPeer::VOCATIONCLASSID)) $criteria->add(RpApplicationSearchPeer::VOCATIONCLASSID, $this->vocationclassid);
		if ($this->isColumnModified(RpApplicationSearchPeer::VOCATIONCLASSNAME)) $criteria->add(RpApplicationSearchPeer::VOCATIONCLASSNAME, $this->vocationclassname);
		if ($this->isColumnModified(RpApplicationSearchPeer::MEMBERAOPA)) $criteria->add(RpApplicationSearchPeer::MEMBERAOPA, $this->memberaopa);
		if ($this->isColumnModified(RpApplicationSearchPeer::MEMBERKIWANIS)) $criteria->add(RpApplicationSearchPeer::MEMBERKIWANIS, $this->memberkiwanis);
		if ($this->isColumnModified(RpApplicationSearchPeer::MEMBERROTARY)) $criteria->add(RpApplicationSearchPeer::MEMBERROTARY, $this->memberrotary);
		if ($this->isColumnModified(RpApplicationSearchPeer::MEMBERLIONS)) $criteria->add(RpApplicationSearchPeer::MEMBERLIONS, $this->memberlions);
		if ($this->isColumnModified(RpApplicationSearchPeer::MEMBER99S)) $criteria->add(RpApplicationSearchPeer::MEMBER99S, $this->member99s);
		if ($this->isColumnModified(RpApplicationSearchPeer::MEMBERWIA)) $criteria->add(RpApplicationSearchPeer::MEMBERWIA, $this->memberwia);
		if ($this->isColumnModified(RpApplicationSearchPeer::MISSIONORIENTATION)) $criteria->add(RpApplicationSearchPeer::MISSIONORIENTATION, $this->missionorientation);
		if ($this->isColumnModified(RpApplicationSearchPeer::MISSIONCOORDINATION)) $criteria->add(RpApplicationSearchPeer::MISSIONCOORDINATION, $this->missioncoordination);
		if ($this->isColumnModified(RpApplicationSearchPeer::PILOTRECRUITMENT)) $criteria->add(RpApplicationSearchPeer::PILOTRECRUITMENT, $this->pilotrecruitment);
		if ($this->isColumnModified(RpApplicationSearchPeer::FUNDRAISING)) $criteria->add(RpApplicationSearchPeer::FUNDRAISING, $this->fundraising);
		if ($this->isColumnModified(RpApplicationSearchPeer::CELEBRITYCONTACTS)) $criteria->add(RpApplicationSearchPeer::CELEBRITYCONTACTS, $this->celebritycontacts);
		if ($this->isColumnModified(RpApplicationSearchPeer::GRAPHICARTS)) $criteria->add(RpApplicationSearchPeer::GRAPHICARTS, $this->graphicarts);
		if ($this->isColumnModified(RpApplicationSearchPeer::HOSPITALOUTREACH)) $criteria->add(RpApplicationSearchPeer::HOSPITALOUTREACH, $this->hospitaloutreach);
		if ($this->isColumnModified(RpApplicationSearchPeer::EVENTPLANNING)) $criteria->add(RpApplicationSearchPeer::EVENTPLANNING, $this->eventplanning);
		if ($this->isColumnModified(RpApplicationSearchPeer::MEDIARELATIONS)) $criteria->add(RpApplicationSearchPeer::MEDIARELATIONS, $this->mediarelations);
		if ($this->isColumnModified(RpApplicationSearchPeer::TELEPHONEWORK)) $criteria->add(RpApplicationSearchPeer::TELEPHONEWORK, $this->telephonework);
		if ($this->isColumnModified(RpApplicationSearchPeer::COMPUTERS)) $criteria->add(RpApplicationSearchPeer::COMPUTERS, $this->computers);
		if ($this->isColumnModified(RpApplicationSearchPeer::PRINTING)) $criteria->add(RpApplicationSearchPeer::PRINTING, $this->printing);
		if ($this->isColumnModified(RpApplicationSearchPeer::WRITING)) $criteria->add(RpApplicationSearchPeer::WRITING, $this->writing);
		if ($this->isColumnModified(RpApplicationSearchPeer::SPEAKERSBUREAU)) $criteria->add(RpApplicationSearchPeer::SPEAKERSBUREAU, $this->speakersbureau);
		if ($this->isColumnModified(RpApplicationSearchPeer::WINGTEAM)) $criteria->add(RpApplicationSearchPeer::WINGTEAM, $this->wingteam);
		if ($this->isColumnModified(RpApplicationSearchPeer::WEBINTERNET)) $criteria->add(RpApplicationSearchPeer::WEBINTERNET, $this->webinternet);
		if ($this->isColumnModified(RpApplicationSearchPeer::FOUNDATIONCONTACTS)) $criteria->add(RpApplicationSearchPeer::FOUNDATIONCONTACTS, $this->foundationcontacts);
		if ($this->isColumnModified(RpApplicationSearchPeer::AVIATIONCONTACTS)) $criteria->add(RpApplicationSearchPeer::AVIATIONCONTACTS, $this->aviationcontacts);
		if ($this->isColumnModified(RpApplicationSearchPeer::DISASTERRESPONSEINTEREST)) $criteria->add(RpApplicationSearchPeer::DISASTERRESPONSEINTEREST, $this->disasterresponseinterest);
		if ($this->isColumnModified(RpApplicationSearchPeer::ACTIVE)) $criteria->add(RpApplicationSearchPeer::ACTIVE, $this->active);
		if ($this->isColumnModified(RpApplicationSearchPeer::PRIMARY_AIRPORT_ID)) $criteria->add(RpApplicationSearchPeer::PRIMARY_AIRPORT_ID, $this->primary_airport_id);
		if ($this->isColumnModified(RpApplicationSearchPeer::HOMEBASE)) $criteria->add(RpApplicationSearchPeer::HOMEBASE, $this->homebase);
		if ($this->isColumnModified(RpApplicationSearchPeer::ID)) $criteria->add(RpApplicationSearchPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(RpApplicationSearchPeer::DATABASE_NAME);

		$criteria->add(RpApplicationSearchPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of RpApplicationSearch (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setApplicationid($this->applicationid);

		$copyObj->setApplicationdate($this->applicationdate);

		$copyObj->setPersonid($this->personid);

		$copyObj->setFirstname($this->firstname);

		$copyObj->setLastname($this->lastname);

		$copyObj->setAddress1($this->address1);

		$copyObj->setCity($this->city);

		$copyObj->setState($this->state);

		$copyObj->setZipcode($this->zipcode);

		$copyObj->setCounty($this->county);

		$copyObj->setAreacode($this->areacode);

		$copyObj->setDayphone($this->dayphone);

		$copyObj->setDaycomment($this->daycomment);

		$copyObj->setEveningphone($this->eveningphone);

		$copyObj->setEvecomment($this->evecomment);

		$copyObj->setMobilephone($this->mobilephone);

		$copyObj->setMobilecomment($this->mobilecomment);

		$copyObj->setOtherphone($this->otherphone);

		$copyObj->setOthercomment($this->othercomment);

		$copyObj->setPagerphone($this->pagerphone);

		$copyObj->setPagercomment($this->pagercomment);

		$copyObj->setEmail($this->email);

		$copyObj->setSpousepilot($this->spousepilot);

		$copyObj->setWingid($this->wingid);

		$copyObj->setWingname($this->wingname);

		$copyObj->setRenewaldate($this->renewaldate);

		$copyObj->setJoindate($this->joindate);

		$copyObj->setJoinyear($this->joinyear);

		$copyObj->setRefsourceid($this->refsourceid);

		$copyObj->setRefsourcename($this->refsourcename);

		$copyObj->setCompanymatchfunds($this->companymatchfunds);

		$copyObj->setCompanyname($this->companyname);

		$copyObj->setCompanyposition($this->companyposition);

		$copyObj->setVocationclassid($this->vocationclassid);

		$copyObj->setVocationclassname($this->vocationclassname);

		$copyObj->setMemberaopa($this->memberaopa);

		$copyObj->setMemberkiwanis($this->memberkiwanis);

		$copyObj->setMemberrotary($this->memberrotary);

		$copyObj->setMemberlions($this->memberlions);

		$copyObj->setMember99s($this->member99s);

		$copyObj->setMemberwia($this->memberwia);

		$copyObj->setMissionorientation($this->missionorientation);

		$copyObj->setMissioncoordination($this->missioncoordination);

		$copyObj->setPilotrecruitment($this->pilotrecruitment);

		$copyObj->setFundraising($this->fundraising);

		$copyObj->setCelebritycontacts($this->celebritycontacts);

		$copyObj->setGraphicarts($this->graphicarts);

		$copyObj->setHospitaloutreach($this->hospitaloutreach);

		$copyObj->setEventplanning($this->eventplanning);

		$copyObj->setMediarelations($this->mediarelations);

		$copyObj->setTelephonework($this->telephonework);

		$copyObj->setComputers($this->computers);

		$copyObj->setPrinting($this->printing);

		$copyObj->setWriting($this->writing);

		$copyObj->setSpeakersbureau($this->speakersbureau);

		$copyObj->setWingteam($this->wingteam);

		$copyObj->setWebinternet($this->webinternet);

		$copyObj->setFoundationcontacts($this->foundationcontacts);

		$copyObj->setAviationcontacts($this->aviationcontacts);

		$copyObj->setDisasterresponseinterest($this->disasterresponseinterest);

		$copyObj->setActive($this->active);

		$copyObj->setPrimaryAirportId($this->primary_airport_id);

		$copyObj->setHomebase($this->homebase);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     RpApplicationSearch Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     RpApplicationSearchPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new RpApplicationSearchPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseRpApplicationSearch:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseRpApplicationSearch::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseRpApplicationSearch
