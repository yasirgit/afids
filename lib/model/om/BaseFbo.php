<?php

/**
 * Base class that represents a row from the 'fbo' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue May 24 06:33:26 2011
 *
 * @package    lib.model.om
 */
abstract class BaseFbo extends BaseObject  implements Persistent {


  const PEER = 'FboPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        FboPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the airport_id field.
	 * @var        int
	 */
	protected $airport_id;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the voice_phone field.
	 * @var        string
	 */
	protected $voice_phone;

	/**
	 * The value for the fax_phone field.
	 * @var        string
	 */
	protected $fax_phone;

	/**
	 * The value for the discount_amount field.
	 * @var        int
	 */
	protected $discount_amount;

	/**
	 * The value for the fuel_discount field.
	 * @var        double
	 */
	protected $fuel_discount;

	/**
	 * The value for the default_fbo field.
	 * @var        int
	 */
	protected $default_fbo;

	/**
	 * The value for the address field.
	 * @var        string
	 */
	protected $address;

	/**
	 * @var        Airport
	 */
	protected $aAirport;

	/**
	 * @var        array Camp[] Collection to store aggregation of Camp objects.
	 */
	protected $collCamps;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCamps.
	 */
	private $lastCampCriteria = null;

	/**
	 * @var        array MissionLeg[] Collection to store aggregation of MissionLeg objects.
	 */
	protected $collMissionLegs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMissionLegs.
	 */
	private $lastMissionLegCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseFbo object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [airport_id] column value.
	 * 
	 * @return     int
	 */
	public function getAirportId()
	{
		return $this->airport_id;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [voice_phone] column value.
	 * 
	 * @return     string
	 */
	public function getVoicePhone()
	{
		return $this->voice_phone;
	}

	/**
	 * Get the [fax_phone] column value.
	 * 
	 * @return     string
	 */
	public function getFaxPhone()
	{
		return $this->fax_phone;
	}

	/**
	 * Get the [discount_amount] column value.
	 * 
	 * @return     int
	 */
	public function getDiscountAmount()
	{
		return $this->discount_amount;
	}

	/**
	 * Get the [fuel_discount] column value.
	 * 
	 * @return     double
	 */
	public function getFuelDiscount()
	{
		return $this->fuel_discount;
	}

	/**
	 * Get the [default_fbo] column value.
	 * 
	 * @return     int
	 */
	public function getDefaultFbo()
	{
		return $this->default_fbo;
	}

	/**
	 * Get the [address] column value.
	 * 
	 * @return     string
	 */
	public function getAddress()
	{
		return $this->address;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Fbo The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = FboPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [airport_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Fbo The current object (for fluent API support)
	 */
	public function setAirportId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->airport_id !== $v) {
			$this->airport_id = $v;
			$this->modifiedColumns[] = FboPeer::AIRPORT_ID;
		}

		if ($this->aAirport !== null && $this->aAirport->getId() !== $v) {
			$this->aAirport = null;
		}

		return $this;
	} // setAirportId()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     Fbo The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = FboPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [voice_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Fbo The current object (for fluent API support)
	 */
	public function setVoicePhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->voice_phone !== $v) {
			$this->voice_phone = $v;
			$this->modifiedColumns[] = FboPeer::VOICE_PHONE;
		}

		return $this;
	} // setVoicePhone()

	/**
	 * Set the value of [fax_phone] column.
	 * 
	 * @param      string $v new value
	 * @return     Fbo The current object (for fluent API support)
	 */
	public function setFaxPhone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax_phone !== $v) {
			$this->fax_phone = $v;
			$this->modifiedColumns[] = FboPeer::FAX_PHONE;
		}

		return $this;
	} // setFaxPhone()

	/**
	 * Set the value of [discount_amount] column.
	 * 
	 * @param      int $v new value
	 * @return     Fbo The current object (for fluent API support)
	 */
	public function setDiscountAmount($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->discount_amount !== $v) {
			$this->discount_amount = $v;
			$this->modifiedColumns[] = FboPeer::DISCOUNT_AMOUNT;
		}

		return $this;
	} // setDiscountAmount()

	/**
	 * Set the value of [fuel_discount] column.
	 * 
	 * @param      double $v new value
	 * @return     Fbo The current object (for fluent API support)
	 */
	public function setFuelDiscount($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->fuel_discount !== $v) {
			$this->fuel_discount = $v;
			$this->modifiedColumns[] = FboPeer::FUEL_DISCOUNT;
		}

		return $this;
	} // setFuelDiscount()

	/**
	 * Set the value of [default_fbo] column.
	 * 
	 * @param      int $v new value
	 * @return     Fbo The current object (for fluent API support)
	 */
	public function setDefaultFbo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->default_fbo !== $v) {
			$this->default_fbo = $v;
			$this->modifiedColumns[] = FboPeer::DEFAULT_FBO;
		}

		return $this;
	} // setDefaultFbo()

	/**
	 * Set the value of [address] column.
	 * 
	 * @param      string $v new value
	 * @return     Fbo The current object (for fluent API support)
	 */
	public function setAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address !== $v) {
			$this->address = $v;
			$this->modifiedColumns[] = FboPeer::ADDRESS;
		}

		return $this;
	} // setAddress()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->airport_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->voice_phone = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->fax_phone = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->discount_amount = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->fuel_discount = ($row[$startcol + 6] !== null) ? (double) $row[$startcol + 6] : null;
			$this->default_fbo = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->address = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 9; // 9 = FboPeer::NUM_COLUMNS - FboPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Fbo object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aAirport !== null && $this->airport_id !== $this->aAirport->getId()) {
			$this->aAirport = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FboPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = FboPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aAirport = null;
			$this->collCamps = null;
			$this->lastCampCriteria = null;

			$this->collMissionLegs = null;
			$this->lastMissionLegCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseFbo:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FboPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			FboPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseFbo:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseFbo:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FboPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseFbo:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			FboPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAirport !== null) {
				if ($this->aAirport->isModified() || $this->aAirport->isNew()) {
					$affectedRows += $this->aAirport->save($con);
				}
				$this->setAirport($this->aAirport);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = FboPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = FboPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += FboPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collCamps !== null) {
				foreach ($this->collCamps as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collMissionLegs !== null) {
				foreach ($this->collMissionLegs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aAirport !== null) {
				if (!$this->aAirport->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAirport->getValidationFailures());
				}
			}


			if (($retval = FboPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collCamps !== null) {
					foreach ($this->collCamps as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collMissionLegs !== null) {
					foreach ($this->collMissionLegs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = FboPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getAirportId();
				break;
			case 2:
				return $this->getName();
				break;
			case 3:
				return $this->getVoicePhone();
				break;
			case 4:
				return $this->getFaxPhone();
				break;
			case 5:
				return $this->getDiscountAmount();
				break;
			case 6:
				return $this->getFuelDiscount();
				break;
			case 7:
				return $this->getDefaultFbo();
				break;
			case 8:
				return $this->getAddress();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = FboPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getAirportId(),
			$keys[2] => $this->getName(),
			$keys[3] => $this->getVoicePhone(),
			$keys[4] => $this->getFaxPhone(),
			$keys[5] => $this->getDiscountAmount(),
			$keys[6] => $this->getFuelDiscount(),
			$keys[7] => $this->getDefaultFbo(),
			$keys[8] => $this->getAddress(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = FboPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setAirportId($value);
				break;
			case 2:
				$this->setName($value);
				break;
			case 3:
				$this->setVoicePhone($value);
				break;
			case 4:
				$this->setFaxPhone($value);
				break;
			case 5:
				$this->setDiscountAmount($value);
				break;
			case 6:
				$this->setFuelDiscount($value);
				break;
			case 7:
				$this->setDefaultFbo($value);
				break;
			case 8:
				$this->setAddress($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = FboPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setAirportId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setVoicePhone($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setFaxPhone($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setDiscountAmount($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setFuelDiscount($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setDefaultFbo($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setAddress($arr[$keys[8]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(FboPeer::DATABASE_NAME);

		if ($this->isColumnModified(FboPeer::ID)) $criteria->add(FboPeer::ID, $this->id);
		if ($this->isColumnModified(FboPeer::AIRPORT_ID)) $criteria->add(FboPeer::AIRPORT_ID, $this->airport_id);
		if ($this->isColumnModified(FboPeer::NAME)) $criteria->add(FboPeer::NAME, $this->name);
		if ($this->isColumnModified(FboPeer::VOICE_PHONE)) $criteria->add(FboPeer::VOICE_PHONE, $this->voice_phone);
		if ($this->isColumnModified(FboPeer::FAX_PHONE)) $criteria->add(FboPeer::FAX_PHONE, $this->fax_phone);
		if ($this->isColumnModified(FboPeer::DISCOUNT_AMOUNT)) $criteria->add(FboPeer::DISCOUNT_AMOUNT, $this->discount_amount);
		if ($this->isColumnModified(FboPeer::FUEL_DISCOUNT)) $criteria->add(FboPeer::FUEL_DISCOUNT, $this->fuel_discount);
		if ($this->isColumnModified(FboPeer::DEFAULT_FBO)) $criteria->add(FboPeer::DEFAULT_FBO, $this->default_fbo);
		if ($this->isColumnModified(FboPeer::ADDRESS)) $criteria->add(FboPeer::ADDRESS, $this->address);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(FboPeer::DATABASE_NAME);

		$criteria->add(FboPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Fbo (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setAirportId($this->airport_id);

		$copyObj->setName($this->name);

		$copyObj->setVoicePhone($this->voice_phone);

		$copyObj->setFaxPhone($this->fax_phone);

		$copyObj->setDiscountAmount($this->discount_amount);

		$copyObj->setFuelDiscount($this->fuel_discount);

		$copyObj->setDefaultFbo($this->default_fbo);

		$copyObj->setAddress($this->address);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getCamps() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCamp($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getMissionLegs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMissionLeg($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Fbo Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     FboPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new FboPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Airport object.
	 *
	 * @param      Airport $v
	 * @return     Fbo The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAirport(Airport $v = null)
	{
		if ($v === null) {
			$this->setAirportId(NULL);
		} else {
			$this->setAirportId($v->getId());
		}

		$this->aAirport = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Airport object, it will not be re-added.
		if ($v !== null) {
			$v->addFbo($this);
		}

		return $this;
	}


	/**
	 * Get the associated Airport object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Airport The associated Airport object.
	 * @throws     PropelException
	 */
	public function getAirport(PropelPDO $con = null)
	{
		if ($this->aAirport === null && ($this->airport_id !== null)) {
			$c = new Criteria(AirportPeer::DATABASE_NAME);
			$c->add(AirportPeer::ID, $this->airport_id);
			$this->aAirport = AirportPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAirport->addFbos($this);
			 */
		}
		return $this->aAirport;
	}

	/**
	 * Clears out the collCamps collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCamps()
	 */
	public function clearCamps()
	{
		$this->collCamps = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCamps collection (array).
	 *
	 * By default this just sets the collCamps collection to an empty array (like clearcollCamps());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCamps()
	{
		$this->collCamps = array();
	}

	/**
	 * Gets an array of Camp objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Fbo has previously been saved, it will retrieve
	 * related Camps from storage. If this Fbo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Camp[]
	 * @throws     PropelException
	 */
	public function getCamps($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FboPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCamps === null) {
			if ($this->isNew()) {
			   $this->collCamps = array();
			} else {

				$criteria->add(CampPeer::FBO_ID, $this->id);

				CampPeer::addSelectColumns($criteria);
				$this->collCamps = CampPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CampPeer::FBO_ID, $this->id);

				CampPeer::addSelectColumns($criteria);
				if (!isset($this->lastCampCriteria) || !$this->lastCampCriteria->equals($criteria)) {
					$this->collCamps = CampPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCampCriteria = $criteria;
		return $this->collCamps;
	}

	/**
	 * Returns the number of related Camp objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Camp objects.
	 * @throws     PropelException
	 */
	public function countCamps(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FboPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCamps === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CampPeer::FBO_ID, $this->id);

				$count = CampPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CampPeer::FBO_ID, $this->id);

				if (!isset($this->lastCampCriteria) || !$this->lastCampCriteria->equals($criteria)) {
					$count = CampPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCamps);
				}
			} else {
				$count = count($this->collCamps);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Camp object to this object
	 * through the Camp foreign key attribute.
	 *
	 * @param      Camp $l Camp
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCamp(Camp $l)
	{
		if ($this->collCamps === null) {
			$this->initCamps();
		}
		if (!in_array($l, $this->collCamps, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCamps, $l);
			$l->setFbo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Fbo is new, it will return
	 * an empty collection; or if this Fbo has previously
	 * been saved, it will retrieve related Camps from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Fbo.
	 */
	public function getCampsJoinAgency($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FboPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCamps === null) {
			if ($this->isNew()) {
				$this->collCamps = array();
			} else {

				$criteria->add(CampPeer::FBO_ID, $this->id);

				$this->collCamps = CampPeer::doSelectJoinAgency($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CampPeer::FBO_ID, $this->id);

			if (!isset($this->lastCampCriteria) || !$this->lastCampCriteria->equals($criteria)) {
				$this->collCamps = CampPeer::doSelectJoinAgency($criteria, $con, $join_behavior);
			}
		}
		$this->lastCampCriteria = $criteria;

		return $this->collCamps;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Fbo is new, it will return
	 * an empty collection; or if this Fbo has previously
	 * been saved, it will retrieve related Camps from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Fbo.
	 */
	public function getCampsJoinAirport($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FboPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCamps === null) {
			if ($this->isNew()) {
				$this->collCamps = array();
			} else {

				$criteria->add(CampPeer::FBO_ID, $this->id);

				$this->collCamps = CampPeer::doSelectJoinAirport($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CampPeer::FBO_ID, $this->id);

			if (!isset($this->lastCampCriteria) || !$this->lastCampCriteria->equals($criteria)) {
				$this->collCamps = CampPeer::doSelectJoinAirport($criteria, $con, $join_behavior);
			}
		}
		$this->lastCampCriteria = $criteria;

		return $this->collCamps;
	}

	/**
	 * Clears out the collMissionLegs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMissionLegs()
	 */
	public function clearMissionLegs()
	{
		$this->collMissionLegs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMissionLegs collection (array).
	 *
	 * By default this just sets the collMissionLegs collection to an empty array (like clearcollMissionLegs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMissionLegs()
	{
		$this->collMissionLegs = array();
	}

	/**
	 * Gets an array of MissionLeg objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Fbo has previously been saved, it will retrieve
	 * related MissionLegs from storage. If this Fbo is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MissionLeg[]
	 * @throws     PropelException
	 */
	public function getMissionLegs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FboPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
			   $this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::FBO_ID, $this->id);

				MissionLegPeer::addSelectColumns($criteria);
				$this->collMissionLegs = MissionLegPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MissionLegPeer::FBO_ID, $this->id);

				MissionLegPeer::addSelectColumns($criteria);
				if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
					$this->collMissionLegs = MissionLegPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMissionLegCriteria = $criteria;
		return $this->collMissionLegs;
	}

	/**
	 * Returns the number of related MissionLeg objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MissionLeg objects.
	 * @throws     PropelException
	 */
	public function countMissionLegs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FboPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MissionLegPeer::FBO_ID, $this->id);

				$count = MissionLegPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MissionLegPeer::FBO_ID, $this->id);

				if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
					$count = MissionLegPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMissionLegs);
				}
			} else {
				$count = count($this->collMissionLegs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MissionLeg object to this object
	 * through the MissionLeg foreign key attribute.
	 *
	 * @param      MissionLeg $l MissionLeg
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMissionLeg(MissionLeg $l)
	{
		if ($this->collMissionLegs === null) {
			$this->initMissionLegs();
		}
		if (!in_array($l, $this->collMissionLegs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMissionLegs, $l);
			$l->setFbo($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Fbo is new, it will return
	 * an empty collection; or if this Fbo has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Fbo.
	 */
	public function getMissionLegsJoinMission($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FboPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::FBO_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinMission($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::FBO_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinMission($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Fbo is new, it will return
	 * an empty collection; or if this Fbo has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Fbo.
	 */
	public function getMissionLegsJoinAirportRelatedByFromAirportId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FboPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::FBO_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinAirportRelatedByFromAirportId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::FBO_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinAirportRelatedByFromAirportId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Fbo is new, it will return
	 * an empty collection; or if this Fbo has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Fbo.
	 */
	public function getMissionLegsJoinAirportRelatedByToAirportId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FboPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::FBO_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinAirportRelatedByToAirportId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::FBO_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinAirportRelatedByToAirportId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Fbo is new, it will return
	 * an empty collection; or if this Fbo has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Fbo.
	 */
	public function getMissionLegsJoinCoordinator($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FboPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::FBO_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinCoordinator($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::FBO_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinCoordinator($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Fbo is new, it will return
	 * an empty collection; or if this Fbo has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Fbo.
	 */
	public function getMissionLegsJoinPilotRelatedByPilotId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FboPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::FBO_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinPilotRelatedByPilotId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::FBO_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinPilotRelatedByPilotId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Fbo is new, it will return
	 * an empty collection; or if this Fbo has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Fbo.
	 */
	public function getMissionLegsJoinMemberRelatedByCopilotId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FboPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::FBO_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinMemberRelatedByCopilotId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::FBO_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinMemberRelatedByCopilotId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Fbo is new, it will return
	 * an empty collection; or if this Fbo has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Fbo.
	 */
	public function getMissionLegsJoinPilotRelatedByBackupPilotId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FboPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::FBO_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinPilotRelatedByBackupPilotId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::FBO_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinPilotRelatedByBackupPilotId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Fbo is new, it will return
	 * an empty collection; or if this Fbo has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Fbo.
	 */
	public function getMissionLegsJoinMemberRelatedByBackupCopilotId($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FboPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::FBO_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinMemberRelatedByBackupCopilotId($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::FBO_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinMemberRelatedByBackupCopilotId($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Fbo is new, it will return
	 * an empty collection; or if this Fbo has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Fbo.
	 */
	public function getMissionLegsJoinMissionReport($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FboPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::FBO_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinMissionReport($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::FBO_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinMissionReport($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Fbo is new, it will return
	 * an empty collection; or if this Fbo has previously
	 * been saved, it will retrieve related MissionLegs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Fbo.
	 */
	public function getMissionLegsJoinPilotAircraft($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(FboPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionLegs === null) {
			if ($this->isNew()) {
				$this->collMissionLegs = array();
			} else {

				$criteria->add(MissionLegPeer::FBO_ID, $this->id);

				$this->collMissionLegs = MissionLegPeer::doSelectJoinPilotAircraft($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionLegPeer::FBO_ID, $this->id);

			if (!isset($this->lastMissionLegCriteria) || !$this->lastMissionLegCriteria->equals($criteria)) {
				$this->collMissionLegs = MissionLegPeer::doSelectJoinPilotAircraft($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionLegCriteria = $criteria;

		return $this->collMissionLegs;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collCamps) {
				foreach ((array) $this->collCamps as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collMissionLegs) {
				foreach ((array) $this->collMissionLegs as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collCamps = null;
		$this->collMissionLegs = null;
			$this->aAirport = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseFbo:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseFbo::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseFbo
