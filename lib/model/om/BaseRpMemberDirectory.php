<?php

/**
 * Base class that represents a row from the 'rp_member_directory' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue May 24 06:33:32 2011
 *
 * @package    lib.model.om
 */
abstract class BaseRpMemberDirectory extends BaseObject  implements Persistent {


  const PEER = 'RpMemberDirectoryPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        RpMemberDirectoryPeer
	 */
	protected static $peer;

	/**
	 * The value for the external_id field.
	 * @var        int
	 */
	protected $external_id;

	/**
	 * The value for the personid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $personid;

	/**
	 * The value for the firstname field.
	 * @var        string
	 */
	protected $firstname;

	/**
	 * The value for the lastname field.
	 * @var        string
	 */
	protected $lastname;

	/**
	 * The value for the address_one field.
	 * @var        string
	 */
	protected $address_one;

	/**
	 * The value for the address_two field.
	 * @var        string
	 */
	protected $address_two;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the state field.
	 * @var        string
	 */
	protected $state;

	/**
	 * The value for the zipcode field.
	 * @var        string
	 */
	protected $zipcode;

	/**
	 * The value for the deceased field.
	 * @var        int
	 */
	protected $deceased;

	/**
	 * The value for the emailblocked field.
	 * @var        int
	 */
	protected $emailblocked;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the secondaryemail field.
	 * @var        string
	 */
	protected $secondaryemail;

	/**
	 * The value for the pageremail field.
	 * @var        string
	 */
	protected $pageremail;

	/**
	 * The value for the countyname field.
	 * @var        string
	 */
	protected $countyname;

	/**
	 * The value for the areacode field.
	 * @var        string
	 */
	protected $areacode;

	/**
	 * The value for the dayphone field.
	 * @var        string
	 */
	protected $dayphone;

	/**
	 * The value for the day_comment field.
	 * @var        string
	 */
	protected $day_comment;

	/**
	 * The value for the evephone field.
	 * @var        string
	 */
	protected $evephone;

	/**
	 * The value for the evening_comment field.
	 * @var        string
	 */
	protected $evening_comment;

	/**
	 * The value for the mobilephone field.
	 * @var        string
	 */
	protected $mobilephone;

	/**
	 * The value for the mobile_comment field.
	 * @var        string
	 */
	protected $mobile_comment;

	/**
	 * The value for the pagerphone field.
	 * @var        string
	 */
	protected $pagerphone;

	/**
	 * The value for the pager_comment field.
	 * @var        string
	 */
	protected $pager_comment;

	/**
	 * The value for the faxphone1 field.
	 * @var        string
	 */
	protected $faxphone1;

	/**
	 * The value for the fax_comment1 field.
	 * @var        string
	 */
	protected $fax_comment1;

	/**
	 * The value for the faxphone2 field.
	 * @var        string
	 */
	protected $faxphone2;

	/**
	 * The value for the fax_comment2 field.
	 * @var        string
	 */
	protected $fax_comment2;

	/**
	 * The value for the otherphone field.
	 * @var        string
	 */
	protected $otherphone;

	/**
	 * The value for the other_comment field.
	 * @var        string
	 */
	protected $other_comment;

	/**
	 * The value for the license_type field.
	 * @var        string
	 */
	protected $license_type;

	/**
	 * The value for the ifr field.
	 * @var        int
	 */
	protected $ifr;

	/**
	 * The value for the multiengine field.
	 * @var        int
	 */
	protected $multiengine;

	/**
	 * The value for the se_instructor field.
	 * @var        string
	 */
	protected $se_instructor;

	/**
	 * The value for the hseats field.
	 * @var        string
	 */
	protected $hseats;

	/**
	 * The value for the transplant field.
	 * @var        int
	 */
	protected $transplant;

	/**
	 * The value for the me_instructor field.
	 * @var        string
	 */
	protected $me_instructor;

	/**
	 * The value for the mop_regions_served field.
	 * @var        string
	 */
	protected $mop_regions_served;

	/**
	 * The value for the mop field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $mop;

	/**
	 * The value for the insurance_received field.
	 * @var        string
	 */
	protected $insurance_received;

	/**
	 * The value for the cfi field.
	 * @var        int
	 */
	protected $cfi;

	/**
	 * The value for the insuranceexpired field.
	 * @var        int
	 */
	protected $insuranceexpired;

	/**
	 * The value for the memberid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $memberid;

	/**
	 * The value for the flight_status field.
	 * @var        string
	 */
	protected $flight_status;

	/**
	 * The value for the renewal_date field.
	 * @var        string
	 */
	protected $renewal_date;

	/**
	 * The value for the date_of_birth field.
	 * @var        string
	 */
	protected $date_of_birth;

	/**
	 * The value for the birthdaymonth field.
	 * @var        int
	 */
	protected $birthdaymonth;

	/**
	 * The value for the disasterresponsestatus field.
	 * @var        string
	 */
	protected $disasterresponsestatus;

	/**
	 * The value for the coordinator_notes field.
	 * @var        string
	 */
	protected $coordinator_notes;

	/**
	 * The value for the wingname field.
	 * @var        string
	 */
	protected $wingname;

	/**
	 * The value for the wing_id field.
	 * @var        int
	 */
	protected $wing_id;

	/**
	 * The value for the active field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $active;

	/**
	 * The value for the member_class_id field.
	 * @var        int
	 */
	protected $member_class_id;

	/**
	 * The value for the homebase field.
	 * @var        string
	 */
	protected $homebase;

	/**
	 * The value for the wingjobid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $wingjobid;

	/**
	 * The value for the wingjob field.
	 * @var        string
	 */
	protected $wingjob;

	/**
	 * The value for the coordinator field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $coordinator;

	/**
	 * The value for the coordinatorid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $coordinatorid;

	/**
	 * The value for the boardmember field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $boardmember;

	/**
	 * The value for the boardmemberid field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $boardmemberid;

	/**
	 * The value for the notavailable field.
	 * @var        int
	 */
	protected $notavailable;

	/**
	 * The value for the noweekday field.
	 * @var        int
	 */
	protected $noweekday;

	/**
	 * The value for the nonight field.
	 * @var        int
	 */
	protected $nonight;

	/**
	 * The value for the noweekend field.
	 * @var        int
	 */
	protected $noweekend;

	/**
	 * The value for the lastminute field.
	 * @var        int
	 */
	protected $lastminute;

	/**
	 * The value for the firstdate field.
	 * @var        string
	 */
	protected $firstdate;

	/**
	 * The value for the lastdate field.
	 * @var        string
	 */
	protected $lastdate;

	/**
	 * The value for the availabilitycomment field.
	 * @var        string
	 */
	protected $availabilitycomment;

	/**
	 * The value for the aircraftowner field.
	 * @var        int
	 */
	protected $aircraftowner;

	/**
	 * The value for the fastestaircraft field.
	 * @var        string
	 */
	protected $fastestaircraft;

	/**
	 * The value for the longestrangeaircraft field.
	 * @var        string
	 */
	protected $longestrangeaircraft;

	/**
	 * The value for the mostseatsaircraft field.
	 * @var        int
	 */
	protected $mostseatsaircraft;

	/**
	 * The value for the maxloadaircraft field.
	 * @var        string
	 */
	protected $maxloadaircraft;

	/**
	 * The value for the missioncountthisyear field.
	 * @var        string
	 */
	protected $missioncountthisyear;

	/**
	 * The value for the missioncounttotal field.
	 * @var        string
	 */
	protected $missioncounttotal;

	/**
	 * The value for the lastmissionflown field.
	 * @var        string
	 */
	protected $lastmissionflown;

	/**
	 * The value for the nextpendingmission field.
	 * @var        string
	 */
	protected $nextpendingmission;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseRpMemberDirectory object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->personid = 0;
		$this->mop = 0;
		$this->memberid = 0;
		$this->active = 1;
		$this->wingjobid = 0;
		$this->coordinator = 0;
		$this->coordinatorid = 0;
		$this->boardmember = 0;
		$this->boardmemberid = 0;
	}

	/**
	 * Get the [external_id] column value.
	 * 
	 * @return     int
	 */
	public function getExternalId()
	{
		return $this->external_id;
	}

	/**
	 * Get the [personid] column value.
	 * 
	 * @return     int
	 */
	public function getPersonid()
	{
		return $this->personid;
	}

	/**
	 * Get the [firstname] column value.
	 * 
	 * @return     string
	 */
	public function getFirstname()
	{
		return $this->firstname;
	}

	/**
	 * Get the [lastname] column value.
	 * 
	 * @return     string
	 */
	public function getLastname()
	{
		return $this->lastname;
	}

	/**
	 * Get the [address_one] column value.
	 * 
	 * @return     string
	 */
	public function getAddressOne()
	{
		return $this->address_one;
	}

	/**
	 * Get the [address_two] column value.
	 * 
	 * @return     string
	 */
	public function getAddressTwo()
	{
		return $this->address_two;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [state] column value.
	 * 
	 * @return     string
	 */
	public function getState()
	{
		return $this->state;
	}

	/**
	 * Get the [zipcode] column value.
	 * 
	 * @return     string
	 */
	public function getZipcode()
	{
		return $this->zipcode;
	}

	/**
	 * Get the [deceased] column value.
	 * 
	 * @return     int
	 */
	public function getDeceased()
	{
		return $this->deceased;
	}

	/**
	 * Get the [emailblocked] column value.
	 * 
	 * @return     int
	 */
	public function getEmailblocked()
	{
		return $this->emailblocked;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [secondaryemail] column value.
	 * 
	 * @return     string
	 */
	public function getSecondaryemail()
	{
		return $this->secondaryemail;
	}

	/**
	 * Get the [pageremail] column value.
	 * 
	 * @return     string
	 */
	public function getPageremail()
	{
		return $this->pageremail;
	}

	/**
	 * Get the [countyname] column value.
	 * 
	 * @return     string
	 */
	public function getCountyname()
	{
		return $this->countyname;
	}

	/**
	 * Get the [areacode] column value.
	 * 
	 * @return     string
	 */
	public function getAreacode()
	{
		return $this->areacode;
	}

	/**
	 * Get the [dayphone] column value.
	 * 
	 * @return     string
	 */
	public function getDayphone()
	{
		return $this->dayphone;
	}

	/**
	 * Get the [day_comment] column value.
	 * 
	 * @return     string
	 */
	public function getDayComment()
	{
		return $this->day_comment;
	}

	/**
	 * Get the [evephone] column value.
	 * 
	 * @return     string
	 */
	public function getEvephone()
	{
		return $this->evephone;
	}

	/**
	 * Get the [evening_comment] column value.
	 * 
	 * @return     string
	 */
	public function getEveningComment()
	{
		return $this->evening_comment;
	}

	/**
	 * Get the [mobilephone] column value.
	 * 
	 * @return     string
	 */
	public function getMobilephone()
	{
		return $this->mobilephone;
	}

	/**
	 * Get the [mobile_comment] column value.
	 * 
	 * @return     string
	 */
	public function getMobileComment()
	{
		return $this->mobile_comment;
	}

	/**
	 * Get the [pagerphone] column value.
	 * 
	 * @return     string
	 */
	public function getPagerphone()
	{
		return $this->pagerphone;
	}

	/**
	 * Get the [pager_comment] column value.
	 * 
	 * @return     string
	 */
	public function getPagerComment()
	{
		return $this->pager_comment;
	}

	/**
	 * Get the [faxphone1] column value.
	 * 
	 * @return     string
	 */
	public function getFaxphone1()
	{
		return $this->faxphone1;
	}

	/**
	 * Get the [fax_comment1] column value.
	 * 
	 * @return     string
	 */
	public function getFaxComment1()
	{
		return $this->fax_comment1;
	}

	/**
	 * Get the [faxphone2] column value.
	 * 
	 * @return     string
	 */
	public function getFaxphone2()
	{
		return $this->faxphone2;
	}

	/**
	 * Get the [fax_comment2] column value.
	 * 
	 * @return     string
	 */
	public function getFaxComment2()
	{
		return $this->fax_comment2;
	}

	/**
	 * Get the [otherphone] column value.
	 * 
	 * @return     string
	 */
	public function getOtherphone()
	{
		return $this->otherphone;
	}

	/**
	 * Get the [other_comment] column value.
	 * 
	 * @return     string
	 */
	public function getOtherComment()
	{
		return $this->other_comment;
	}

	/**
	 * Get the [license_type] column value.
	 * 
	 * @return     string
	 */
	public function getLicenseType()
	{
		return $this->license_type;
	}

	/**
	 * Get the [ifr] column value.
	 * 
	 * @return     int
	 */
	public function getIfr()
	{
		return $this->ifr;
	}

	/**
	 * Get the [multiengine] column value.
	 * 
	 * @return     int
	 */
	public function getMultiengine()
	{
		return $this->multiengine;
	}

	/**
	 * Get the [se_instructor] column value.
	 * 
	 * @return     string
	 */
	public function getSeInstructor()
	{
		return $this->se_instructor;
	}

	/**
	 * Get the [hseats] column value.
	 * 
	 * @return     string
	 */
	public function getHseats()
	{
		return $this->hseats;
	}

	/**
	 * Get the [transplant] column value.
	 * 
	 * @return     int
	 */
	public function getTransplant()
	{
		return $this->transplant;
	}

	/**
	 * Get the [me_instructor] column value.
	 * 
	 * @return     string
	 */
	public function getMeInstructor()
	{
		return $this->me_instructor;
	}

	/**
	 * Get the [mop_regions_served] column value.
	 * 
	 * @return     string
	 */
	public function getMopRegionsServed()
	{
		return $this->mop_regions_served;
	}

	/**
	 * Get the [mop] column value.
	 * 
	 * @return     int
	 */
	public function getMop()
	{
		return $this->mop;
	}

	/**
	 * Get the [optionally formatted] temporal [insurance_received] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getInsuranceReceived($format = 'Y-m-d H:i:s')
	{
		if ($this->insurance_received === null) {
			return null;
		}


		if ($this->insurance_received === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->insurance_received);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->insurance_received, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [cfi] column value.
	 * 
	 * @return     int
	 */
	public function getCfi()
	{
		return $this->cfi;
	}

	/**
	 * Get the [insuranceexpired] column value.
	 * 
	 * @return     int
	 */
	public function getInsuranceexpired()
	{
		return $this->insuranceexpired;
	}

	/**
	 * Get the [memberid] column value.
	 * 
	 * @return     int
	 */
	public function getMemberid()
	{
		return $this->memberid;
	}

	/**
	 * Get the [flight_status] column value.
	 * 
	 * @return     string
	 */
	public function getFlightStatus()
	{
		return $this->flight_status;
	}

	/**
	 * Get the [optionally formatted] temporal [renewal_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRenewalDate($format = 'Y-m-d')
	{
		if ($this->renewal_date === null) {
			return null;
		}


		if ($this->renewal_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->renewal_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->renewal_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [date_of_birth] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDateOfBirth($format = 'Y-m-d')
	{
		if ($this->date_of_birth === null) {
			return null;
		}


		if ($this->date_of_birth === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->date_of_birth);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->date_of_birth, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [birthdaymonth] column value.
	 * 
	 * @return     int
	 */
	public function getBirthdaymonth()
	{
		return $this->birthdaymonth;
	}

	/**
	 * Get the [disasterresponsestatus] column value.
	 * 
	 * @return     string
	 */
	public function getDisasterresponsestatus()
	{
		return $this->disasterresponsestatus;
	}

	/**
	 * Get the [coordinator_notes] column value.
	 * 
	 * @return     string
	 */
	public function getCoordinatorNotes()
	{
		return $this->coordinator_notes;
	}

	/**
	 * Get the [wingname] column value.
	 * 
	 * @return     string
	 */
	public function getWingname()
	{
		return $this->wingname;
	}

	/**
	 * Get the [wing_id] column value.
	 * 
	 * @return     int
	 */
	public function getWingId()
	{
		return $this->wing_id;
	}

	/**
	 * Get the [active] column value.
	 * 
	 * @return     int
	 */
	public function getActive()
	{
		return $this->active;
	}

	/**
	 * Get the [member_class_id] column value.
	 * 
	 * @return     int
	 */
	public function getMemberClassId()
	{
		return $this->member_class_id;
	}

	/**
	 * Get the [homebase] column value.
	 * 
	 * @return     string
	 */
	public function getHomebase()
	{
		return $this->homebase;
	}

	/**
	 * Get the [wingjobid] column value.
	 * 
	 * @return     int
	 */
	public function getWingjobid()
	{
		return $this->wingjobid;
	}

	/**
	 * Get the [wingjob] column value.
	 * 
	 * @return     string
	 */
	public function getWingjob()
	{
		return $this->wingjob;
	}

	/**
	 * Get the [coordinator] column value.
	 * 
	 * @return     int
	 */
	public function getCoordinator()
	{
		return $this->coordinator;
	}

	/**
	 * Get the [coordinatorid] column value.
	 * 
	 * @return     int
	 */
	public function getCoordinatorid()
	{
		return $this->coordinatorid;
	}

	/**
	 * Get the [boardmember] column value.
	 * 
	 * @return     int
	 */
	public function getBoardmember()
	{
		return $this->boardmember;
	}

	/**
	 * Get the [boardmemberid] column value.
	 * 
	 * @return     int
	 */
	public function getBoardmemberid()
	{
		return $this->boardmemberid;
	}

	/**
	 * Get the [notavailable] column value.
	 * 
	 * @return     int
	 */
	public function getNotavailable()
	{
		return $this->notavailable;
	}

	/**
	 * Get the [noweekday] column value.
	 * 
	 * @return     int
	 */
	public function getNoweekday()
	{
		return $this->noweekday;
	}

	/**
	 * Get the [nonight] column value.
	 * 
	 * @return     int
	 */
	public function getNonight()
	{
		return $this->nonight;
	}

	/**
	 * Get the [noweekend] column value.
	 * 
	 * @return     int
	 */
	public function getNoweekend()
	{
		return $this->noweekend;
	}

	/**
	 * Get the [lastminute] column value.
	 * 
	 * @return     int
	 */
	public function getLastminute()
	{
		return $this->lastminute;
	}

	/**
	 * Get the [optionally formatted] temporal [firstdate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFirstdate($format = 'Y-m-d')
	{
		if ($this->firstdate === null) {
			return null;
		}


		if ($this->firstdate === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->firstdate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->firstdate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [lastdate] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getLastdate($format = 'Y-m-d')
	{
		if ($this->lastdate === null) {
			return null;
		}


		if ($this->lastdate === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->lastdate);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->lastdate, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [availabilitycomment] column value.
	 * 
	 * @return     string
	 */
	public function getAvailabilitycomment()
	{
		return $this->availabilitycomment;
	}

	/**
	 * Get the [aircraftowner] column value.
	 * 
	 * @return     int
	 */
	public function getAircraftowner()
	{
		return $this->aircraftowner;
	}

	/**
	 * Get the [fastestaircraft] column value.
	 * 
	 * @return     string
	 */
	public function getFastestaircraft()
	{
		return $this->fastestaircraft;
	}

	/**
	 * Get the [longestrangeaircraft] column value.
	 * 
	 * @return     string
	 */
	public function getLongestrangeaircraft()
	{
		return $this->longestrangeaircraft;
	}

	/**
	 * Get the [mostseatsaircraft] column value.
	 * 
	 * @return     int
	 */
	public function getMostseatsaircraft()
	{
		return $this->mostseatsaircraft;
	}

	/**
	 * Get the [maxloadaircraft] column value.
	 * 
	 * @return     string
	 */
	public function getMaxloadaircraft()
	{
		return $this->maxloadaircraft;
	}

	/**
	 * Get the [missioncountthisyear] column value.
	 * 
	 * @return     string
	 */
	public function getMissioncountthisyear()
	{
		return $this->missioncountthisyear;
	}

	/**
	 * Get the [missioncounttotal] column value.
	 * 
	 * @return     string
	 */
	public function getMissioncounttotal()
	{
		return $this->missioncounttotal;
	}

	/**
	 * Get the [lastmissionflown] column value.
	 * 
	 * @return     string
	 */
	public function getLastmissionflown()
	{
		return $this->lastmissionflown;
	}

	/**
	 * Get the [nextpendingmission] column value.
	 * 
	 * @return     string
	 */
	public function getNextpendingmission()
	{
		return $this->nextpendingmission;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Set the value of [external_id] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setExternalId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->external_id !== $v) {
			$this->external_id = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::EXTERNAL_ID;
		}

		return $this;
	} // setExternalId()

	/**
	 * Set the value of [personid] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setPersonid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->personid !== $v || $v === 0) {
			$this->personid = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::PERSONID;
		}

		return $this;
	} // setPersonid()

	/**
	 * Set the value of [firstname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setFirstname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->firstname !== $v) {
			$this->firstname = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::FIRSTNAME;
		}

		return $this;
	} // setFirstname()

	/**
	 * Set the value of [lastname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setLastname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lastname !== $v) {
			$this->lastname = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::LASTNAME;
		}

		return $this;
	} // setLastname()

	/**
	 * Set the value of [address_one] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setAddressOne($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address_one !== $v) {
			$this->address_one = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::ADDRESS_ONE;
		}

		return $this;
	} // setAddressOne()

	/**
	 * Set the value of [address_two] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setAddressTwo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address_two !== $v) {
			$this->address_two = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::ADDRESS_TWO;
		}

		return $this;
	} // setAddressTwo()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [state] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setState($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->state !== $v) {
			$this->state = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::STATE;
		}

		return $this;
	} // setState()

	/**
	 * Set the value of [zipcode] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setZipcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->zipcode !== $v) {
			$this->zipcode = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::ZIPCODE;
		}

		return $this;
	} // setZipcode()

	/**
	 * Set the value of [deceased] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setDeceased($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->deceased !== $v) {
			$this->deceased = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::DECEASED;
		}

		return $this;
	} // setDeceased()

	/**
	 * Set the value of [emailblocked] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setEmailblocked($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->emailblocked !== $v) {
			$this->emailblocked = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::EMAILBLOCKED;
		}

		return $this;
	} // setEmailblocked()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [secondaryemail] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setSecondaryemail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->secondaryemail !== $v) {
			$this->secondaryemail = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::SECONDARYEMAIL;
		}

		return $this;
	} // setSecondaryemail()

	/**
	 * Set the value of [pageremail] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setPageremail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pageremail !== $v) {
			$this->pageremail = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::PAGEREMAIL;
		}

		return $this;
	} // setPageremail()

	/**
	 * Set the value of [countyname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setCountyname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->countyname !== $v) {
			$this->countyname = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::COUNTYNAME;
		}

		return $this;
	} // setCountyname()

	/**
	 * Set the value of [areacode] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setAreacode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->areacode !== $v) {
			$this->areacode = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::AREACODE;
		}

		return $this;
	} // setAreacode()

	/**
	 * Set the value of [dayphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setDayphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dayphone !== $v) {
			$this->dayphone = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::DAYPHONE;
		}

		return $this;
	} // setDayphone()

	/**
	 * Set the value of [day_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setDayComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->day_comment !== $v) {
			$this->day_comment = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::DAY_COMMENT;
		}

		return $this;
	} // setDayComment()

	/**
	 * Set the value of [evephone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setEvephone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->evephone !== $v) {
			$this->evephone = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::EVEPHONE;
		}

		return $this;
	} // setEvephone()

	/**
	 * Set the value of [evening_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setEveningComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->evening_comment !== $v) {
			$this->evening_comment = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::EVENING_COMMENT;
		}

		return $this;
	} // setEveningComment()

	/**
	 * Set the value of [mobilephone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setMobilephone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mobilephone !== $v) {
			$this->mobilephone = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::MOBILEPHONE;
		}

		return $this;
	} // setMobilephone()

	/**
	 * Set the value of [mobile_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setMobileComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mobile_comment !== $v) {
			$this->mobile_comment = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::MOBILE_COMMENT;
		}

		return $this;
	} // setMobileComment()

	/**
	 * Set the value of [pagerphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setPagerphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pagerphone !== $v) {
			$this->pagerphone = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::PAGERPHONE;
		}

		return $this;
	} // setPagerphone()

	/**
	 * Set the value of [pager_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setPagerComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->pager_comment !== $v) {
			$this->pager_comment = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::PAGER_COMMENT;
		}

		return $this;
	} // setPagerComment()

	/**
	 * Set the value of [faxphone1] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setFaxphone1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->faxphone1 !== $v) {
			$this->faxphone1 = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::FAXPHONE1;
		}

		return $this;
	} // setFaxphone1()

	/**
	 * Set the value of [fax_comment1] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setFaxComment1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax_comment1 !== $v) {
			$this->fax_comment1 = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::FAX_COMMENT1;
		}

		return $this;
	} // setFaxComment1()

	/**
	 * Set the value of [faxphone2] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setFaxphone2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->faxphone2 !== $v) {
			$this->faxphone2 = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::FAXPHONE2;
		}

		return $this;
	} // setFaxphone2()

	/**
	 * Set the value of [fax_comment2] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setFaxComment2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax_comment2 !== $v) {
			$this->fax_comment2 = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::FAX_COMMENT2;
		}

		return $this;
	} // setFaxComment2()

	/**
	 * Set the value of [otherphone] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setOtherphone($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->otherphone !== $v) {
			$this->otherphone = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::OTHERPHONE;
		}

		return $this;
	} // setOtherphone()

	/**
	 * Set the value of [other_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setOtherComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other_comment !== $v) {
			$this->other_comment = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::OTHER_COMMENT;
		}

		return $this;
	} // setOtherComment()

	/**
	 * Set the value of [license_type] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setLicenseType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->license_type !== $v) {
			$this->license_type = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::LICENSE_TYPE;
		}

		return $this;
	} // setLicenseType()

	/**
	 * Set the value of [ifr] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setIfr($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ifr !== $v) {
			$this->ifr = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::IFR;
		}

		return $this;
	} // setIfr()

	/**
	 * Set the value of [multiengine] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setMultiengine($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->multiengine !== $v) {
			$this->multiengine = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::MULTIENGINE;
		}

		return $this;
	} // setMultiengine()

	/**
	 * Set the value of [se_instructor] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setSeInstructor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->se_instructor !== $v) {
			$this->se_instructor = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::SE_INSTRUCTOR;
		}

		return $this;
	} // setSeInstructor()

	/**
	 * Set the value of [hseats] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setHseats($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->hseats !== $v) {
			$this->hseats = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::HSEATS;
		}

		return $this;
	} // setHseats()

	/**
	 * Set the value of [transplant] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setTransplant($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->transplant !== $v) {
			$this->transplant = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::TRANSPLANT;
		}

		return $this;
	} // setTransplant()

	/**
	 * Set the value of [me_instructor] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setMeInstructor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->me_instructor !== $v) {
			$this->me_instructor = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::ME_INSTRUCTOR;
		}

		return $this;
	} // setMeInstructor()

	/**
	 * Set the value of [mop_regions_served] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setMopRegionsServed($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mop_regions_served !== $v) {
			$this->mop_regions_served = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::MOP_REGIONS_SERVED;
		}

		return $this;
	} // setMopRegionsServed()

	/**
	 * Set the value of [mop] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setMop($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->mop !== $v || $v === 0) {
			$this->mop = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::MOP;
		}

		return $this;
	} // setMop()

	/**
	 * Sets the value of [insurance_received] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setInsuranceReceived($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->insurance_received !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->insurance_received !== null && $tmpDt = new DateTime($this->insurance_received)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->insurance_received = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = RpMemberDirectoryPeer::INSURANCE_RECEIVED;
			}
		} // if either are not null

		return $this;
	} // setInsuranceReceived()

	/**
	 * Set the value of [cfi] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setCfi($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cfi !== $v) {
			$this->cfi = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::CFI;
		}

		return $this;
	} // setCfi()

	/**
	 * Set the value of [insuranceexpired] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setInsuranceexpired($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->insuranceexpired !== $v) {
			$this->insuranceexpired = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::INSURANCEEXPIRED;
		}

		return $this;
	} // setInsuranceexpired()

	/**
	 * Set the value of [memberid] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setMemberid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->memberid !== $v || $v === 0) {
			$this->memberid = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::MEMBERID;
		}

		return $this;
	} // setMemberid()

	/**
	 * Set the value of [flight_status] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setFlightStatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->flight_status !== $v) {
			$this->flight_status = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::FLIGHT_STATUS;
		}

		return $this;
	} // setFlightStatus()

	/**
	 * Sets the value of [renewal_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setRenewalDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->renewal_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->renewal_date !== null && $tmpDt = new DateTime($this->renewal_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->renewal_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = RpMemberDirectoryPeer::RENEWAL_DATE;
			}
		} // if either are not null

		return $this;
	} // setRenewalDate()

	/**
	 * Sets the value of [date_of_birth] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setDateOfBirth($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->date_of_birth !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->date_of_birth !== null && $tmpDt = new DateTime($this->date_of_birth)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->date_of_birth = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = RpMemberDirectoryPeer::DATE_OF_BIRTH;
			}
		} // if either are not null

		return $this;
	} // setDateOfBirth()

	/**
	 * Set the value of [birthdaymonth] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setBirthdaymonth($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->birthdaymonth !== $v) {
			$this->birthdaymonth = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::BIRTHDAYMONTH;
		}

		return $this;
	} // setBirthdaymonth()

	/**
	 * Set the value of [disasterresponsestatus] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setDisasterresponsestatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->disasterresponsestatus !== $v) {
			$this->disasterresponsestatus = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::DISASTERRESPONSESTATUS;
		}

		return $this;
	} // setDisasterresponsestatus()

	/**
	 * Set the value of [coordinator_notes] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setCoordinatorNotes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->coordinator_notes !== $v) {
			$this->coordinator_notes = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::COORDINATOR_NOTES;
		}

		return $this;
	} // setCoordinatorNotes()

	/**
	 * Set the value of [wingname] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setWingname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->wingname !== $v) {
			$this->wingname = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::WINGNAME;
		}

		return $this;
	} // setWingname()

	/**
	 * Set the value of [wing_id] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setWingId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->wing_id !== $v) {
			$this->wing_id = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::WING_ID;
		}

		return $this;
	} // setWingId()

	/**
	 * Set the value of [active] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setActive($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->active !== $v || $v === 1) {
			$this->active = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::ACTIVE;
		}

		return $this;
	} // setActive()

	/**
	 * Set the value of [member_class_id] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setMemberClassId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->member_class_id !== $v) {
			$this->member_class_id = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::MEMBER_CLASS_ID;
		}

		return $this;
	} // setMemberClassId()

	/**
	 * Set the value of [homebase] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setHomebase($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->homebase !== $v) {
			$this->homebase = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::HOMEBASE;
		}

		return $this;
	} // setHomebase()

	/**
	 * Set the value of [wingjobid] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setWingjobid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->wingjobid !== $v || $v === 0) {
			$this->wingjobid = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::WINGJOBID;
		}

		return $this;
	} // setWingjobid()

	/**
	 * Set the value of [wingjob] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setWingjob($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->wingjob !== $v) {
			$this->wingjob = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::WINGJOB;
		}

		return $this;
	} // setWingjob()

	/**
	 * Set the value of [coordinator] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setCoordinator($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->coordinator !== $v || $v === 0) {
			$this->coordinator = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::COORDINATOR;
		}

		return $this;
	} // setCoordinator()

	/**
	 * Set the value of [coordinatorid] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setCoordinatorid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->coordinatorid !== $v || $v === 0) {
			$this->coordinatorid = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::COORDINATORID;
		}

		return $this;
	} // setCoordinatorid()

	/**
	 * Set the value of [boardmember] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setBoardmember($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->boardmember !== $v || $v === 0) {
			$this->boardmember = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::BOARDMEMBER;
		}

		return $this;
	} // setBoardmember()

	/**
	 * Set the value of [boardmemberid] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setBoardmemberid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->boardmemberid !== $v || $v === 0) {
			$this->boardmemberid = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::BOARDMEMBERID;
		}

		return $this;
	} // setBoardmemberid()

	/**
	 * Set the value of [notavailable] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setNotavailable($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->notavailable !== $v) {
			$this->notavailable = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::NOTAVAILABLE;
		}

		return $this;
	} // setNotavailable()

	/**
	 * Set the value of [noweekday] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setNoweekday($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->noweekday !== $v) {
			$this->noweekday = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::NOWEEKDAY;
		}

		return $this;
	} // setNoweekday()

	/**
	 * Set the value of [nonight] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setNonight($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->nonight !== $v) {
			$this->nonight = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::NONIGHT;
		}

		return $this;
	} // setNonight()

	/**
	 * Set the value of [noweekend] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setNoweekend($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->noweekend !== $v) {
			$this->noweekend = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::NOWEEKEND;
		}

		return $this;
	} // setNoweekend()

	/**
	 * Set the value of [lastminute] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setLastminute($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->lastminute !== $v) {
			$this->lastminute = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::LASTMINUTE;
		}

		return $this;
	} // setLastminute()

	/**
	 * Sets the value of [firstdate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setFirstdate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->firstdate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->firstdate !== null && $tmpDt = new DateTime($this->firstdate)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->firstdate = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = RpMemberDirectoryPeer::FIRSTDATE;
			}
		} // if either are not null

		return $this;
	} // setFirstdate()

	/**
	 * Sets the value of [lastdate] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setLastdate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->lastdate !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->lastdate !== null && $tmpDt = new DateTime($this->lastdate)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->lastdate = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = RpMemberDirectoryPeer::LASTDATE;
			}
		} // if either are not null

		return $this;
	} // setLastdate()

	/**
	 * Set the value of [availabilitycomment] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setAvailabilitycomment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->availabilitycomment !== $v) {
			$this->availabilitycomment = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::AVAILABILITYCOMMENT;
		}

		return $this;
	} // setAvailabilitycomment()

	/**
	 * Set the value of [aircraftowner] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setAircraftowner($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->aircraftowner !== $v) {
			$this->aircraftowner = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::AIRCRAFTOWNER;
		}

		return $this;
	} // setAircraftowner()

	/**
	 * Set the value of [fastestaircraft] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setFastestaircraft($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fastestaircraft !== $v) {
			$this->fastestaircraft = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::FASTESTAIRCRAFT;
		}

		return $this;
	} // setFastestaircraft()

	/**
	 * Set the value of [longestrangeaircraft] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setLongestrangeaircraft($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->longestrangeaircraft !== $v) {
			$this->longestrangeaircraft = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::LONGESTRANGEAIRCRAFT;
		}

		return $this;
	} // setLongestrangeaircraft()

	/**
	 * Set the value of [mostseatsaircraft] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setMostseatsaircraft($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->mostseatsaircraft !== $v) {
			$this->mostseatsaircraft = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::MOSTSEATSAIRCRAFT;
		}

		return $this;
	} // setMostseatsaircraft()

	/**
	 * Set the value of [maxloadaircraft] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setMaxloadaircraft($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->maxloadaircraft !== $v) {
			$this->maxloadaircraft = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::MAXLOADAIRCRAFT;
		}

		return $this;
	} // setMaxloadaircraft()

	/**
	 * Set the value of [missioncountthisyear] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setMissioncountthisyear($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->missioncountthisyear !== $v) {
			$this->missioncountthisyear = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::MISSIONCOUNTTHISYEAR;
		}

		return $this;
	} // setMissioncountthisyear()

	/**
	 * Set the value of [missioncounttotal] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setMissioncounttotal($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->missioncounttotal !== $v) {
			$this->missioncounttotal = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::MISSIONCOUNTTOTAL;
		}

		return $this;
	} // setMissioncounttotal()

	/**
	 * Set the value of [lastmissionflown] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setLastmissionflown($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lastmissionflown !== $v) {
			$this->lastmissionflown = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::LASTMISSIONFLOWN;
		}

		return $this;
	} // setLastmissionflown()

	/**
	 * Set the value of [nextpendingmission] column.
	 * 
	 * @param      string $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setNextpendingmission($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nextpendingmission !== $v) {
			$this->nextpendingmission = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::NEXTPENDINGMISSION;
		}

		return $this;
	} // setNextpendingmission()

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     RpMemberDirectory The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = RpMemberDirectoryPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(RpMemberDirectoryPeer::PERSONID,RpMemberDirectoryPeer::MOP,RpMemberDirectoryPeer::MEMBERID,RpMemberDirectoryPeer::ACTIVE,RpMemberDirectoryPeer::WINGJOBID,RpMemberDirectoryPeer::COORDINATOR,RpMemberDirectoryPeer::COORDINATORID,RpMemberDirectoryPeer::BOARDMEMBER,RpMemberDirectoryPeer::BOARDMEMBERID))) {
				return false;
			}

			if ($this->personid !== 0) {
				return false;
			}

			if ($this->mop !== 0) {
				return false;
			}

			if ($this->memberid !== 0) {
				return false;
			}

			if ($this->active !== 1) {
				return false;
			}

			if ($this->wingjobid !== 0) {
				return false;
			}

			if ($this->coordinator !== 0) {
				return false;
			}

			if ($this->coordinatorid !== 0) {
				return false;
			}

			if ($this->boardmember !== 0) {
				return false;
			}

			if ($this->boardmemberid !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->external_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->personid = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->firstname = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->lastname = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->address_one = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->address_two = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->city = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->state = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->zipcode = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->deceased = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->emailblocked = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->email = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->secondaryemail = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->pageremail = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->countyname = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->areacode = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->dayphone = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->day_comment = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->evephone = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->evening_comment = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->mobilephone = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->mobile_comment = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->pagerphone = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->pager_comment = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->faxphone1 = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->fax_comment1 = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->faxphone2 = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->fax_comment2 = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->otherphone = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->other_comment = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->license_type = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->ifr = ($row[$startcol + 31] !== null) ? (int) $row[$startcol + 31] : null;
			$this->multiengine = ($row[$startcol + 32] !== null) ? (int) $row[$startcol + 32] : null;
			$this->se_instructor = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->hseats = ($row[$startcol + 34] !== null) ? (string) $row[$startcol + 34] : null;
			$this->transplant = ($row[$startcol + 35] !== null) ? (int) $row[$startcol + 35] : null;
			$this->me_instructor = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
			$this->mop_regions_served = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->mop = ($row[$startcol + 38] !== null) ? (int) $row[$startcol + 38] : null;
			$this->insurance_received = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->cfi = ($row[$startcol + 40] !== null) ? (int) $row[$startcol + 40] : null;
			$this->insuranceexpired = ($row[$startcol + 41] !== null) ? (int) $row[$startcol + 41] : null;
			$this->memberid = ($row[$startcol + 42] !== null) ? (int) $row[$startcol + 42] : null;
			$this->flight_status = ($row[$startcol + 43] !== null) ? (string) $row[$startcol + 43] : null;
			$this->renewal_date = ($row[$startcol + 44] !== null) ? (string) $row[$startcol + 44] : null;
			$this->date_of_birth = ($row[$startcol + 45] !== null) ? (string) $row[$startcol + 45] : null;
			$this->birthdaymonth = ($row[$startcol + 46] !== null) ? (int) $row[$startcol + 46] : null;
			$this->disasterresponsestatus = ($row[$startcol + 47] !== null) ? (string) $row[$startcol + 47] : null;
			$this->coordinator_notes = ($row[$startcol + 48] !== null) ? (string) $row[$startcol + 48] : null;
			$this->wingname = ($row[$startcol + 49] !== null) ? (string) $row[$startcol + 49] : null;
			$this->wing_id = ($row[$startcol + 50] !== null) ? (int) $row[$startcol + 50] : null;
			$this->active = ($row[$startcol + 51] !== null) ? (int) $row[$startcol + 51] : null;
			$this->member_class_id = ($row[$startcol + 52] !== null) ? (int) $row[$startcol + 52] : null;
			$this->homebase = ($row[$startcol + 53] !== null) ? (string) $row[$startcol + 53] : null;
			$this->wingjobid = ($row[$startcol + 54] !== null) ? (int) $row[$startcol + 54] : null;
			$this->wingjob = ($row[$startcol + 55] !== null) ? (string) $row[$startcol + 55] : null;
			$this->coordinator = ($row[$startcol + 56] !== null) ? (int) $row[$startcol + 56] : null;
			$this->coordinatorid = ($row[$startcol + 57] !== null) ? (int) $row[$startcol + 57] : null;
			$this->boardmember = ($row[$startcol + 58] !== null) ? (int) $row[$startcol + 58] : null;
			$this->boardmemberid = ($row[$startcol + 59] !== null) ? (int) $row[$startcol + 59] : null;
			$this->notavailable = ($row[$startcol + 60] !== null) ? (int) $row[$startcol + 60] : null;
			$this->noweekday = ($row[$startcol + 61] !== null) ? (int) $row[$startcol + 61] : null;
			$this->nonight = ($row[$startcol + 62] !== null) ? (int) $row[$startcol + 62] : null;
			$this->noweekend = ($row[$startcol + 63] !== null) ? (int) $row[$startcol + 63] : null;
			$this->lastminute = ($row[$startcol + 64] !== null) ? (int) $row[$startcol + 64] : null;
			$this->firstdate = ($row[$startcol + 65] !== null) ? (string) $row[$startcol + 65] : null;
			$this->lastdate = ($row[$startcol + 66] !== null) ? (string) $row[$startcol + 66] : null;
			$this->availabilitycomment = ($row[$startcol + 67] !== null) ? (string) $row[$startcol + 67] : null;
			$this->aircraftowner = ($row[$startcol + 68] !== null) ? (int) $row[$startcol + 68] : null;
			$this->fastestaircraft = ($row[$startcol + 69] !== null) ? (string) $row[$startcol + 69] : null;
			$this->longestrangeaircraft = ($row[$startcol + 70] !== null) ? (string) $row[$startcol + 70] : null;
			$this->mostseatsaircraft = ($row[$startcol + 71] !== null) ? (int) $row[$startcol + 71] : null;
			$this->maxloadaircraft = ($row[$startcol + 72] !== null) ? (string) $row[$startcol + 72] : null;
			$this->missioncountthisyear = ($row[$startcol + 73] !== null) ? (string) $row[$startcol + 73] : null;
			$this->missioncounttotal = ($row[$startcol + 74] !== null) ? (string) $row[$startcol + 74] : null;
			$this->lastmissionflown = ($row[$startcol + 75] !== null) ? (string) $row[$startcol + 75] : null;
			$this->nextpendingmission = ($row[$startcol + 76] !== null) ? (string) $row[$startcol + 76] : null;
			$this->id = ($row[$startcol + 77] !== null) ? (int) $row[$startcol + 77] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 78; // 78 = RpMemberDirectoryPeer::NUM_COLUMNS - RpMemberDirectoryPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating RpMemberDirectory object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RpMemberDirectoryPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = RpMemberDirectoryPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRpMemberDirectory:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RpMemberDirectoryPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			RpMemberDirectoryPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseRpMemberDirectory:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseRpMemberDirectory:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(RpMemberDirectoryPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseRpMemberDirectory:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			RpMemberDirectoryPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = RpMemberDirectoryPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = RpMemberDirectoryPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += RpMemberDirectoryPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = RpMemberDirectoryPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RpMemberDirectoryPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getExternalId();
				break;
			case 1:
				return $this->getPersonid();
				break;
			case 2:
				return $this->getFirstname();
				break;
			case 3:
				return $this->getLastname();
				break;
			case 4:
				return $this->getAddressOne();
				break;
			case 5:
				return $this->getAddressTwo();
				break;
			case 6:
				return $this->getCity();
				break;
			case 7:
				return $this->getState();
				break;
			case 8:
				return $this->getZipcode();
				break;
			case 9:
				return $this->getDeceased();
				break;
			case 10:
				return $this->getEmailblocked();
				break;
			case 11:
				return $this->getEmail();
				break;
			case 12:
				return $this->getSecondaryemail();
				break;
			case 13:
				return $this->getPageremail();
				break;
			case 14:
				return $this->getCountyname();
				break;
			case 15:
				return $this->getAreacode();
				break;
			case 16:
				return $this->getDayphone();
				break;
			case 17:
				return $this->getDayComment();
				break;
			case 18:
				return $this->getEvephone();
				break;
			case 19:
				return $this->getEveningComment();
				break;
			case 20:
				return $this->getMobilephone();
				break;
			case 21:
				return $this->getMobileComment();
				break;
			case 22:
				return $this->getPagerphone();
				break;
			case 23:
				return $this->getPagerComment();
				break;
			case 24:
				return $this->getFaxphone1();
				break;
			case 25:
				return $this->getFaxComment1();
				break;
			case 26:
				return $this->getFaxphone2();
				break;
			case 27:
				return $this->getFaxComment2();
				break;
			case 28:
				return $this->getOtherphone();
				break;
			case 29:
				return $this->getOtherComment();
				break;
			case 30:
				return $this->getLicenseType();
				break;
			case 31:
				return $this->getIfr();
				break;
			case 32:
				return $this->getMultiengine();
				break;
			case 33:
				return $this->getSeInstructor();
				break;
			case 34:
				return $this->getHseats();
				break;
			case 35:
				return $this->getTransplant();
				break;
			case 36:
				return $this->getMeInstructor();
				break;
			case 37:
				return $this->getMopRegionsServed();
				break;
			case 38:
				return $this->getMop();
				break;
			case 39:
				return $this->getInsuranceReceived();
				break;
			case 40:
				return $this->getCfi();
				break;
			case 41:
				return $this->getInsuranceexpired();
				break;
			case 42:
				return $this->getMemberid();
				break;
			case 43:
				return $this->getFlightStatus();
				break;
			case 44:
				return $this->getRenewalDate();
				break;
			case 45:
				return $this->getDateOfBirth();
				break;
			case 46:
				return $this->getBirthdaymonth();
				break;
			case 47:
				return $this->getDisasterresponsestatus();
				break;
			case 48:
				return $this->getCoordinatorNotes();
				break;
			case 49:
				return $this->getWingname();
				break;
			case 50:
				return $this->getWingId();
				break;
			case 51:
				return $this->getActive();
				break;
			case 52:
				return $this->getMemberClassId();
				break;
			case 53:
				return $this->getHomebase();
				break;
			case 54:
				return $this->getWingjobid();
				break;
			case 55:
				return $this->getWingjob();
				break;
			case 56:
				return $this->getCoordinator();
				break;
			case 57:
				return $this->getCoordinatorid();
				break;
			case 58:
				return $this->getBoardmember();
				break;
			case 59:
				return $this->getBoardmemberid();
				break;
			case 60:
				return $this->getNotavailable();
				break;
			case 61:
				return $this->getNoweekday();
				break;
			case 62:
				return $this->getNonight();
				break;
			case 63:
				return $this->getNoweekend();
				break;
			case 64:
				return $this->getLastminute();
				break;
			case 65:
				return $this->getFirstdate();
				break;
			case 66:
				return $this->getLastdate();
				break;
			case 67:
				return $this->getAvailabilitycomment();
				break;
			case 68:
				return $this->getAircraftowner();
				break;
			case 69:
				return $this->getFastestaircraft();
				break;
			case 70:
				return $this->getLongestrangeaircraft();
				break;
			case 71:
				return $this->getMostseatsaircraft();
				break;
			case 72:
				return $this->getMaxloadaircraft();
				break;
			case 73:
				return $this->getMissioncountthisyear();
				break;
			case 74:
				return $this->getMissioncounttotal();
				break;
			case 75:
				return $this->getLastmissionflown();
				break;
			case 76:
				return $this->getNextpendingmission();
				break;
			case 77:
				return $this->getId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = RpMemberDirectoryPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getExternalId(),
			$keys[1] => $this->getPersonid(),
			$keys[2] => $this->getFirstname(),
			$keys[3] => $this->getLastname(),
			$keys[4] => $this->getAddressOne(),
			$keys[5] => $this->getAddressTwo(),
			$keys[6] => $this->getCity(),
			$keys[7] => $this->getState(),
			$keys[8] => $this->getZipcode(),
			$keys[9] => $this->getDeceased(),
			$keys[10] => $this->getEmailblocked(),
			$keys[11] => $this->getEmail(),
			$keys[12] => $this->getSecondaryemail(),
			$keys[13] => $this->getPageremail(),
			$keys[14] => $this->getCountyname(),
			$keys[15] => $this->getAreacode(),
			$keys[16] => $this->getDayphone(),
			$keys[17] => $this->getDayComment(),
			$keys[18] => $this->getEvephone(),
			$keys[19] => $this->getEveningComment(),
			$keys[20] => $this->getMobilephone(),
			$keys[21] => $this->getMobileComment(),
			$keys[22] => $this->getPagerphone(),
			$keys[23] => $this->getPagerComment(),
			$keys[24] => $this->getFaxphone1(),
			$keys[25] => $this->getFaxComment1(),
			$keys[26] => $this->getFaxphone2(),
			$keys[27] => $this->getFaxComment2(),
			$keys[28] => $this->getOtherphone(),
			$keys[29] => $this->getOtherComment(),
			$keys[30] => $this->getLicenseType(),
			$keys[31] => $this->getIfr(),
			$keys[32] => $this->getMultiengine(),
			$keys[33] => $this->getSeInstructor(),
			$keys[34] => $this->getHseats(),
			$keys[35] => $this->getTransplant(),
			$keys[36] => $this->getMeInstructor(),
			$keys[37] => $this->getMopRegionsServed(),
			$keys[38] => $this->getMop(),
			$keys[39] => $this->getInsuranceReceived(),
			$keys[40] => $this->getCfi(),
			$keys[41] => $this->getInsuranceexpired(),
			$keys[42] => $this->getMemberid(),
			$keys[43] => $this->getFlightStatus(),
			$keys[44] => $this->getRenewalDate(),
			$keys[45] => $this->getDateOfBirth(),
			$keys[46] => $this->getBirthdaymonth(),
			$keys[47] => $this->getDisasterresponsestatus(),
			$keys[48] => $this->getCoordinatorNotes(),
			$keys[49] => $this->getWingname(),
			$keys[50] => $this->getWingId(),
			$keys[51] => $this->getActive(),
			$keys[52] => $this->getMemberClassId(),
			$keys[53] => $this->getHomebase(),
			$keys[54] => $this->getWingjobid(),
			$keys[55] => $this->getWingjob(),
			$keys[56] => $this->getCoordinator(),
			$keys[57] => $this->getCoordinatorid(),
			$keys[58] => $this->getBoardmember(),
			$keys[59] => $this->getBoardmemberid(),
			$keys[60] => $this->getNotavailable(),
			$keys[61] => $this->getNoweekday(),
			$keys[62] => $this->getNonight(),
			$keys[63] => $this->getNoweekend(),
			$keys[64] => $this->getLastminute(),
			$keys[65] => $this->getFirstdate(),
			$keys[66] => $this->getLastdate(),
			$keys[67] => $this->getAvailabilitycomment(),
			$keys[68] => $this->getAircraftowner(),
			$keys[69] => $this->getFastestaircraft(),
			$keys[70] => $this->getLongestrangeaircraft(),
			$keys[71] => $this->getMostseatsaircraft(),
			$keys[72] => $this->getMaxloadaircraft(),
			$keys[73] => $this->getMissioncountthisyear(),
			$keys[74] => $this->getMissioncounttotal(),
			$keys[75] => $this->getLastmissionflown(),
			$keys[76] => $this->getNextpendingmission(),
			$keys[77] => $this->getId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = RpMemberDirectoryPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setExternalId($value);
				break;
			case 1:
				$this->setPersonid($value);
				break;
			case 2:
				$this->setFirstname($value);
				break;
			case 3:
				$this->setLastname($value);
				break;
			case 4:
				$this->setAddressOne($value);
				break;
			case 5:
				$this->setAddressTwo($value);
				break;
			case 6:
				$this->setCity($value);
				break;
			case 7:
				$this->setState($value);
				break;
			case 8:
				$this->setZipcode($value);
				break;
			case 9:
				$this->setDeceased($value);
				break;
			case 10:
				$this->setEmailblocked($value);
				break;
			case 11:
				$this->setEmail($value);
				break;
			case 12:
				$this->setSecondaryemail($value);
				break;
			case 13:
				$this->setPageremail($value);
				break;
			case 14:
				$this->setCountyname($value);
				break;
			case 15:
				$this->setAreacode($value);
				break;
			case 16:
				$this->setDayphone($value);
				break;
			case 17:
				$this->setDayComment($value);
				break;
			case 18:
				$this->setEvephone($value);
				break;
			case 19:
				$this->setEveningComment($value);
				break;
			case 20:
				$this->setMobilephone($value);
				break;
			case 21:
				$this->setMobileComment($value);
				break;
			case 22:
				$this->setPagerphone($value);
				break;
			case 23:
				$this->setPagerComment($value);
				break;
			case 24:
				$this->setFaxphone1($value);
				break;
			case 25:
				$this->setFaxComment1($value);
				break;
			case 26:
				$this->setFaxphone2($value);
				break;
			case 27:
				$this->setFaxComment2($value);
				break;
			case 28:
				$this->setOtherphone($value);
				break;
			case 29:
				$this->setOtherComment($value);
				break;
			case 30:
				$this->setLicenseType($value);
				break;
			case 31:
				$this->setIfr($value);
				break;
			case 32:
				$this->setMultiengine($value);
				break;
			case 33:
				$this->setSeInstructor($value);
				break;
			case 34:
				$this->setHseats($value);
				break;
			case 35:
				$this->setTransplant($value);
				break;
			case 36:
				$this->setMeInstructor($value);
				break;
			case 37:
				$this->setMopRegionsServed($value);
				break;
			case 38:
				$this->setMop($value);
				break;
			case 39:
				$this->setInsuranceReceived($value);
				break;
			case 40:
				$this->setCfi($value);
				break;
			case 41:
				$this->setInsuranceexpired($value);
				break;
			case 42:
				$this->setMemberid($value);
				break;
			case 43:
				$this->setFlightStatus($value);
				break;
			case 44:
				$this->setRenewalDate($value);
				break;
			case 45:
				$this->setDateOfBirth($value);
				break;
			case 46:
				$this->setBirthdaymonth($value);
				break;
			case 47:
				$this->setDisasterresponsestatus($value);
				break;
			case 48:
				$this->setCoordinatorNotes($value);
				break;
			case 49:
				$this->setWingname($value);
				break;
			case 50:
				$this->setWingId($value);
				break;
			case 51:
				$this->setActive($value);
				break;
			case 52:
				$this->setMemberClassId($value);
				break;
			case 53:
				$this->setHomebase($value);
				break;
			case 54:
				$this->setWingjobid($value);
				break;
			case 55:
				$this->setWingjob($value);
				break;
			case 56:
				$this->setCoordinator($value);
				break;
			case 57:
				$this->setCoordinatorid($value);
				break;
			case 58:
				$this->setBoardmember($value);
				break;
			case 59:
				$this->setBoardmemberid($value);
				break;
			case 60:
				$this->setNotavailable($value);
				break;
			case 61:
				$this->setNoweekday($value);
				break;
			case 62:
				$this->setNonight($value);
				break;
			case 63:
				$this->setNoweekend($value);
				break;
			case 64:
				$this->setLastminute($value);
				break;
			case 65:
				$this->setFirstdate($value);
				break;
			case 66:
				$this->setLastdate($value);
				break;
			case 67:
				$this->setAvailabilitycomment($value);
				break;
			case 68:
				$this->setAircraftowner($value);
				break;
			case 69:
				$this->setFastestaircraft($value);
				break;
			case 70:
				$this->setLongestrangeaircraft($value);
				break;
			case 71:
				$this->setMostseatsaircraft($value);
				break;
			case 72:
				$this->setMaxloadaircraft($value);
				break;
			case 73:
				$this->setMissioncountthisyear($value);
				break;
			case 74:
				$this->setMissioncounttotal($value);
				break;
			case 75:
				$this->setLastmissionflown($value);
				break;
			case 76:
				$this->setNextpendingmission($value);
				break;
			case 77:
				$this->setId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = RpMemberDirectoryPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setExternalId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setPersonid($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setFirstname($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setLastname($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setAddressOne($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAddressTwo($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCity($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setState($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setZipcode($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setDeceased($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setEmailblocked($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setEmail($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setSecondaryemail($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setPageremail($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCountyname($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setAreacode($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setDayphone($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setDayComment($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setEvephone($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setEveningComment($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setMobilephone($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setMobileComment($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setPagerphone($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setPagerComment($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setFaxphone1($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setFaxComment1($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setFaxphone2($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setFaxComment2($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setOtherphone($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setOtherComment($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setLicenseType($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setIfr($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setMultiengine($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setSeInstructor($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setHseats($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setTransplant($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setMeInstructor($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setMopRegionsServed($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setMop($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setInsuranceReceived($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setCfi($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setInsuranceexpired($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setMemberid($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setFlightStatus($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setRenewalDate($arr[$keys[44]]);
		if (array_key_exists($keys[45], $arr)) $this->setDateOfBirth($arr[$keys[45]]);
		if (array_key_exists($keys[46], $arr)) $this->setBirthdaymonth($arr[$keys[46]]);
		if (array_key_exists($keys[47], $arr)) $this->setDisasterresponsestatus($arr[$keys[47]]);
		if (array_key_exists($keys[48], $arr)) $this->setCoordinatorNotes($arr[$keys[48]]);
		if (array_key_exists($keys[49], $arr)) $this->setWingname($arr[$keys[49]]);
		if (array_key_exists($keys[50], $arr)) $this->setWingId($arr[$keys[50]]);
		if (array_key_exists($keys[51], $arr)) $this->setActive($arr[$keys[51]]);
		if (array_key_exists($keys[52], $arr)) $this->setMemberClassId($arr[$keys[52]]);
		if (array_key_exists($keys[53], $arr)) $this->setHomebase($arr[$keys[53]]);
		if (array_key_exists($keys[54], $arr)) $this->setWingjobid($arr[$keys[54]]);
		if (array_key_exists($keys[55], $arr)) $this->setWingjob($arr[$keys[55]]);
		if (array_key_exists($keys[56], $arr)) $this->setCoordinator($arr[$keys[56]]);
		if (array_key_exists($keys[57], $arr)) $this->setCoordinatorid($arr[$keys[57]]);
		if (array_key_exists($keys[58], $arr)) $this->setBoardmember($arr[$keys[58]]);
		if (array_key_exists($keys[59], $arr)) $this->setBoardmemberid($arr[$keys[59]]);
		if (array_key_exists($keys[60], $arr)) $this->setNotavailable($arr[$keys[60]]);
		if (array_key_exists($keys[61], $arr)) $this->setNoweekday($arr[$keys[61]]);
		if (array_key_exists($keys[62], $arr)) $this->setNonight($arr[$keys[62]]);
		if (array_key_exists($keys[63], $arr)) $this->setNoweekend($arr[$keys[63]]);
		if (array_key_exists($keys[64], $arr)) $this->setLastminute($arr[$keys[64]]);
		if (array_key_exists($keys[65], $arr)) $this->setFirstdate($arr[$keys[65]]);
		if (array_key_exists($keys[66], $arr)) $this->setLastdate($arr[$keys[66]]);
		if (array_key_exists($keys[67], $arr)) $this->setAvailabilitycomment($arr[$keys[67]]);
		if (array_key_exists($keys[68], $arr)) $this->setAircraftowner($arr[$keys[68]]);
		if (array_key_exists($keys[69], $arr)) $this->setFastestaircraft($arr[$keys[69]]);
		if (array_key_exists($keys[70], $arr)) $this->setLongestrangeaircraft($arr[$keys[70]]);
		if (array_key_exists($keys[71], $arr)) $this->setMostseatsaircraft($arr[$keys[71]]);
		if (array_key_exists($keys[72], $arr)) $this->setMaxloadaircraft($arr[$keys[72]]);
		if (array_key_exists($keys[73], $arr)) $this->setMissioncountthisyear($arr[$keys[73]]);
		if (array_key_exists($keys[74], $arr)) $this->setMissioncounttotal($arr[$keys[74]]);
		if (array_key_exists($keys[75], $arr)) $this->setLastmissionflown($arr[$keys[75]]);
		if (array_key_exists($keys[76], $arr)) $this->setNextpendingmission($arr[$keys[76]]);
		if (array_key_exists($keys[77], $arr)) $this->setId($arr[$keys[77]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(RpMemberDirectoryPeer::DATABASE_NAME);

		if ($this->isColumnModified(RpMemberDirectoryPeer::EXTERNAL_ID)) $criteria->add(RpMemberDirectoryPeer::EXTERNAL_ID, $this->external_id);
		if ($this->isColumnModified(RpMemberDirectoryPeer::PERSONID)) $criteria->add(RpMemberDirectoryPeer::PERSONID, $this->personid);
		if ($this->isColumnModified(RpMemberDirectoryPeer::FIRSTNAME)) $criteria->add(RpMemberDirectoryPeer::FIRSTNAME, $this->firstname);
		if ($this->isColumnModified(RpMemberDirectoryPeer::LASTNAME)) $criteria->add(RpMemberDirectoryPeer::LASTNAME, $this->lastname);
		if ($this->isColumnModified(RpMemberDirectoryPeer::ADDRESS_ONE)) $criteria->add(RpMemberDirectoryPeer::ADDRESS_ONE, $this->address_one);
		if ($this->isColumnModified(RpMemberDirectoryPeer::ADDRESS_TWO)) $criteria->add(RpMemberDirectoryPeer::ADDRESS_TWO, $this->address_two);
		if ($this->isColumnModified(RpMemberDirectoryPeer::CITY)) $criteria->add(RpMemberDirectoryPeer::CITY, $this->city);
		if ($this->isColumnModified(RpMemberDirectoryPeer::STATE)) $criteria->add(RpMemberDirectoryPeer::STATE, $this->state);
		if ($this->isColumnModified(RpMemberDirectoryPeer::ZIPCODE)) $criteria->add(RpMemberDirectoryPeer::ZIPCODE, $this->zipcode);
		if ($this->isColumnModified(RpMemberDirectoryPeer::DECEASED)) $criteria->add(RpMemberDirectoryPeer::DECEASED, $this->deceased);
		if ($this->isColumnModified(RpMemberDirectoryPeer::EMAILBLOCKED)) $criteria->add(RpMemberDirectoryPeer::EMAILBLOCKED, $this->emailblocked);
		if ($this->isColumnModified(RpMemberDirectoryPeer::EMAIL)) $criteria->add(RpMemberDirectoryPeer::EMAIL, $this->email);
		if ($this->isColumnModified(RpMemberDirectoryPeer::SECONDARYEMAIL)) $criteria->add(RpMemberDirectoryPeer::SECONDARYEMAIL, $this->secondaryemail);
		if ($this->isColumnModified(RpMemberDirectoryPeer::PAGEREMAIL)) $criteria->add(RpMemberDirectoryPeer::PAGEREMAIL, $this->pageremail);
		if ($this->isColumnModified(RpMemberDirectoryPeer::COUNTYNAME)) $criteria->add(RpMemberDirectoryPeer::COUNTYNAME, $this->countyname);
		if ($this->isColumnModified(RpMemberDirectoryPeer::AREACODE)) $criteria->add(RpMemberDirectoryPeer::AREACODE, $this->areacode);
		if ($this->isColumnModified(RpMemberDirectoryPeer::DAYPHONE)) $criteria->add(RpMemberDirectoryPeer::DAYPHONE, $this->dayphone);
		if ($this->isColumnModified(RpMemberDirectoryPeer::DAY_COMMENT)) $criteria->add(RpMemberDirectoryPeer::DAY_COMMENT, $this->day_comment);
		if ($this->isColumnModified(RpMemberDirectoryPeer::EVEPHONE)) $criteria->add(RpMemberDirectoryPeer::EVEPHONE, $this->evephone);
		if ($this->isColumnModified(RpMemberDirectoryPeer::EVENING_COMMENT)) $criteria->add(RpMemberDirectoryPeer::EVENING_COMMENT, $this->evening_comment);
		if ($this->isColumnModified(RpMemberDirectoryPeer::MOBILEPHONE)) $criteria->add(RpMemberDirectoryPeer::MOBILEPHONE, $this->mobilephone);
		if ($this->isColumnModified(RpMemberDirectoryPeer::MOBILE_COMMENT)) $criteria->add(RpMemberDirectoryPeer::MOBILE_COMMENT, $this->mobile_comment);
		if ($this->isColumnModified(RpMemberDirectoryPeer::PAGERPHONE)) $criteria->add(RpMemberDirectoryPeer::PAGERPHONE, $this->pagerphone);
		if ($this->isColumnModified(RpMemberDirectoryPeer::PAGER_COMMENT)) $criteria->add(RpMemberDirectoryPeer::PAGER_COMMENT, $this->pager_comment);
		if ($this->isColumnModified(RpMemberDirectoryPeer::FAXPHONE1)) $criteria->add(RpMemberDirectoryPeer::FAXPHONE1, $this->faxphone1);
		if ($this->isColumnModified(RpMemberDirectoryPeer::FAX_COMMENT1)) $criteria->add(RpMemberDirectoryPeer::FAX_COMMENT1, $this->fax_comment1);
		if ($this->isColumnModified(RpMemberDirectoryPeer::FAXPHONE2)) $criteria->add(RpMemberDirectoryPeer::FAXPHONE2, $this->faxphone2);
		if ($this->isColumnModified(RpMemberDirectoryPeer::FAX_COMMENT2)) $criteria->add(RpMemberDirectoryPeer::FAX_COMMENT2, $this->fax_comment2);
		if ($this->isColumnModified(RpMemberDirectoryPeer::OTHERPHONE)) $criteria->add(RpMemberDirectoryPeer::OTHERPHONE, $this->otherphone);
		if ($this->isColumnModified(RpMemberDirectoryPeer::OTHER_COMMENT)) $criteria->add(RpMemberDirectoryPeer::OTHER_COMMENT, $this->other_comment);
		if ($this->isColumnModified(RpMemberDirectoryPeer::LICENSE_TYPE)) $criteria->add(RpMemberDirectoryPeer::LICENSE_TYPE, $this->license_type);
		if ($this->isColumnModified(RpMemberDirectoryPeer::IFR)) $criteria->add(RpMemberDirectoryPeer::IFR, $this->ifr);
		if ($this->isColumnModified(RpMemberDirectoryPeer::MULTIENGINE)) $criteria->add(RpMemberDirectoryPeer::MULTIENGINE, $this->multiengine);
		if ($this->isColumnModified(RpMemberDirectoryPeer::SE_INSTRUCTOR)) $criteria->add(RpMemberDirectoryPeer::SE_INSTRUCTOR, $this->se_instructor);
		if ($this->isColumnModified(RpMemberDirectoryPeer::HSEATS)) $criteria->add(RpMemberDirectoryPeer::HSEATS, $this->hseats);
		if ($this->isColumnModified(RpMemberDirectoryPeer::TRANSPLANT)) $criteria->add(RpMemberDirectoryPeer::TRANSPLANT, $this->transplant);
		if ($this->isColumnModified(RpMemberDirectoryPeer::ME_INSTRUCTOR)) $criteria->add(RpMemberDirectoryPeer::ME_INSTRUCTOR, $this->me_instructor);
		if ($this->isColumnModified(RpMemberDirectoryPeer::MOP_REGIONS_SERVED)) $criteria->add(RpMemberDirectoryPeer::MOP_REGIONS_SERVED, $this->mop_regions_served);
		if ($this->isColumnModified(RpMemberDirectoryPeer::MOP)) $criteria->add(RpMemberDirectoryPeer::MOP, $this->mop);
		if ($this->isColumnModified(RpMemberDirectoryPeer::INSURANCE_RECEIVED)) $criteria->add(RpMemberDirectoryPeer::INSURANCE_RECEIVED, $this->insurance_received);
		if ($this->isColumnModified(RpMemberDirectoryPeer::CFI)) $criteria->add(RpMemberDirectoryPeer::CFI, $this->cfi);
		if ($this->isColumnModified(RpMemberDirectoryPeer::INSURANCEEXPIRED)) $criteria->add(RpMemberDirectoryPeer::INSURANCEEXPIRED, $this->insuranceexpired);
		if ($this->isColumnModified(RpMemberDirectoryPeer::MEMBERID)) $criteria->add(RpMemberDirectoryPeer::MEMBERID, $this->memberid);
		if ($this->isColumnModified(RpMemberDirectoryPeer::FLIGHT_STATUS)) $criteria->add(RpMemberDirectoryPeer::FLIGHT_STATUS, $this->flight_status);
		if ($this->isColumnModified(RpMemberDirectoryPeer::RENEWAL_DATE)) $criteria->add(RpMemberDirectoryPeer::RENEWAL_DATE, $this->renewal_date);
		if ($this->isColumnModified(RpMemberDirectoryPeer::DATE_OF_BIRTH)) $criteria->add(RpMemberDirectoryPeer::DATE_OF_BIRTH, $this->date_of_birth);
		if ($this->isColumnModified(RpMemberDirectoryPeer::BIRTHDAYMONTH)) $criteria->add(RpMemberDirectoryPeer::BIRTHDAYMONTH, $this->birthdaymonth);
		if ($this->isColumnModified(RpMemberDirectoryPeer::DISASTERRESPONSESTATUS)) $criteria->add(RpMemberDirectoryPeer::DISASTERRESPONSESTATUS, $this->disasterresponsestatus);
		if ($this->isColumnModified(RpMemberDirectoryPeer::COORDINATOR_NOTES)) $criteria->add(RpMemberDirectoryPeer::COORDINATOR_NOTES, $this->coordinator_notes);
		if ($this->isColumnModified(RpMemberDirectoryPeer::WINGNAME)) $criteria->add(RpMemberDirectoryPeer::WINGNAME, $this->wingname);
		if ($this->isColumnModified(RpMemberDirectoryPeer::WING_ID)) $criteria->add(RpMemberDirectoryPeer::WING_ID, $this->wing_id);
		if ($this->isColumnModified(RpMemberDirectoryPeer::ACTIVE)) $criteria->add(RpMemberDirectoryPeer::ACTIVE, $this->active);
		if ($this->isColumnModified(RpMemberDirectoryPeer::MEMBER_CLASS_ID)) $criteria->add(RpMemberDirectoryPeer::MEMBER_CLASS_ID, $this->member_class_id);
		if ($this->isColumnModified(RpMemberDirectoryPeer::HOMEBASE)) $criteria->add(RpMemberDirectoryPeer::HOMEBASE, $this->homebase);
		if ($this->isColumnModified(RpMemberDirectoryPeer::WINGJOBID)) $criteria->add(RpMemberDirectoryPeer::WINGJOBID, $this->wingjobid);
		if ($this->isColumnModified(RpMemberDirectoryPeer::WINGJOB)) $criteria->add(RpMemberDirectoryPeer::WINGJOB, $this->wingjob);
		if ($this->isColumnModified(RpMemberDirectoryPeer::COORDINATOR)) $criteria->add(RpMemberDirectoryPeer::COORDINATOR, $this->coordinator);
		if ($this->isColumnModified(RpMemberDirectoryPeer::COORDINATORID)) $criteria->add(RpMemberDirectoryPeer::COORDINATORID, $this->coordinatorid);
		if ($this->isColumnModified(RpMemberDirectoryPeer::BOARDMEMBER)) $criteria->add(RpMemberDirectoryPeer::BOARDMEMBER, $this->boardmember);
		if ($this->isColumnModified(RpMemberDirectoryPeer::BOARDMEMBERID)) $criteria->add(RpMemberDirectoryPeer::BOARDMEMBERID, $this->boardmemberid);
		if ($this->isColumnModified(RpMemberDirectoryPeer::NOTAVAILABLE)) $criteria->add(RpMemberDirectoryPeer::NOTAVAILABLE, $this->notavailable);
		if ($this->isColumnModified(RpMemberDirectoryPeer::NOWEEKDAY)) $criteria->add(RpMemberDirectoryPeer::NOWEEKDAY, $this->noweekday);
		if ($this->isColumnModified(RpMemberDirectoryPeer::NONIGHT)) $criteria->add(RpMemberDirectoryPeer::NONIGHT, $this->nonight);
		if ($this->isColumnModified(RpMemberDirectoryPeer::NOWEEKEND)) $criteria->add(RpMemberDirectoryPeer::NOWEEKEND, $this->noweekend);
		if ($this->isColumnModified(RpMemberDirectoryPeer::LASTMINUTE)) $criteria->add(RpMemberDirectoryPeer::LASTMINUTE, $this->lastminute);
		if ($this->isColumnModified(RpMemberDirectoryPeer::FIRSTDATE)) $criteria->add(RpMemberDirectoryPeer::FIRSTDATE, $this->firstdate);
		if ($this->isColumnModified(RpMemberDirectoryPeer::LASTDATE)) $criteria->add(RpMemberDirectoryPeer::LASTDATE, $this->lastdate);
		if ($this->isColumnModified(RpMemberDirectoryPeer::AVAILABILITYCOMMENT)) $criteria->add(RpMemberDirectoryPeer::AVAILABILITYCOMMENT, $this->availabilitycomment);
		if ($this->isColumnModified(RpMemberDirectoryPeer::AIRCRAFTOWNER)) $criteria->add(RpMemberDirectoryPeer::AIRCRAFTOWNER, $this->aircraftowner);
		if ($this->isColumnModified(RpMemberDirectoryPeer::FASTESTAIRCRAFT)) $criteria->add(RpMemberDirectoryPeer::FASTESTAIRCRAFT, $this->fastestaircraft);
		if ($this->isColumnModified(RpMemberDirectoryPeer::LONGESTRANGEAIRCRAFT)) $criteria->add(RpMemberDirectoryPeer::LONGESTRANGEAIRCRAFT, $this->longestrangeaircraft);
		if ($this->isColumnModified(RpMemberDirectoryPeer::MOSTSEATSAIRCRAFT)) $criteria->add(RpMemberDirectoryPeer::MOSTSEATSAIRCRAFT, $this->mostseatsaircraft);
		if ($this->isColumnModified(RpMemberDirectoryPeer::MAXLOADAIRCRAFT)) $criteria->add(RpMemberDirectoryPeer::MAXLOADAIRCRAFT, $this->maxloadaircraft);
		if ($this->isColumnModified(RpMemberDirectoryPeer::MISSIONCOUNTTHISYEAR)) $criteria->add(RpMemberDirectoryPeer::MISSIONCOUNTTHISYEAR, $this->missioncountthisyear);
		if ($this->isColumnModified(RpMemberDirectoryPeer::MISSIONCOUNTTOTAL)) $criteria->add(RpMemberDirectoryPeer::MISSIONCOUNTTOTAL, $this->missioncounttotal);
		if ($this->isColumnModified(RpMemberDirectoryPeer::LASTMISSIONFLOWN)) $criteria->add(RpMemberDirectoryPeer::LASTMISSIONFLOWN, $this->lastmissionflown);
		if ($this->isColumnModified(RpMemberDirectoryPeer::NEXTPENDINGMISSION)) $criteria->add(RpMemberDirectoryPeer::NEXTPENDINGMISSION, $this->nextpendingmission);
		if ($this->isColumnModified(RpMemberDirectoryPeer::ID)) $criteria->add(RpMemberDirectoryPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(RpMemberDirectoryPeer::DATABASE_NAME);

		$criteria->add(RpMemberDirectoryPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of RpMemberDirectory (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setExternalId($this->external_id);

		$copyObj->setPersonid($this->personid);

		$copyObj->setFirstname($this->firstname);

		$copyObj->setLastname($this->lastname);

		$copyObj->setAddressOne($this->address_one);

		$copyObj->setAddressTwo($this->address_two);

		$copyObj->setCity($this->city);

		$copyObj->setState($this->state);

		$copyObj->setZipcode($this->zipcode);

		$copyObj->setDeceased($this->deceased);

		$copyObj->setEmailblocked($this->emailblocked);

		$copyObj->setEmail($this->email);

		$copyObj->setSecondaryemail($this->secondaryemail);

		$copyObj->setPageremail($this->pageremail);

		$copyObj->setCountyname($this->countyname);

		$copyObj->setAreacode($this->areacode);

		$copyObj->setDayphone($this->dayphone);

		$copyObj->setDayComment($this->day_comment);

		$copyObj->setEvephone($this->evephone);

		$copyObj->setEveningComment($this->evening_comment);

		$copyObj->setMobilephone($this->mobilephone);

		$copyObj->setMobileComment($this->mobile_comment);

		$copyObj->setPagerphone($this->pagerphone);

		$copyObj->setPagerComment($this->pager_comment);

		$copyObj->setFaxphone1($this->faxphone1);

		$copyObj->setFaxComment1($this->fax_comment1);

		$copyObj->setFaxphone2($this->faxphone2);

		$copyObj->setFaxComment2($this->fax_comment2);

		$copyObj->setOtherphone($this->otherphone);

		$copyObj->setOtherComment($this->other_comment);

		$copyObj->setLicenseType($this->license_type);

		$copyObj->setIfr($this->ifr);

		$copyObj->setMultiengine($this->multiengine);

		$copyObj->setSeInstructor($this->se_instructor);

		$copyObj->setHseats($this->hseats);

		$copyObj->setTransplant($this->transplant);

		$copyObj->setMeInstructor($this->me_instructor);

		$copyObj->setMopRegionsServed($this->mop_regions_served);

		$copyObj->setMop($this->mop);

		$copyObj->setInsuranceReceived($this->insurance_received);

		$copyObj->setCfi($this->cfi);

		$copyObj->setInsuranceexpired($this->insuranceexpired);

		$copyObj->setMemberid($this->memberid);

		$copyObj->setFlightStatus($this->flight_status);

		$copyObj->setRenewalDate($this->renewal_date);

		$copyObj->setDateOfBirth($this->date_of_birth);

		$copyObj->setBirthdaymonth($this->birthdaymonth);

		$copyObj->setDisasterresponsestatus($this->disasterresponsestatus);

		$copyObj->setCoordinatorNotes($this->coordinator_notes);

		$copyObj->setWingname($this->wingname);

		$copyObj->setWingId($this->wing_id);

		$copyObj->setActive($this->active);

		$copyObj->setMemberClassId($this->member_class_id);

		$copyObj->setHomebase($this->homebase);

		$copyObj->setWingjobid($this->wingjobid);

		$copyObj->setWingjob($this->wingjob);

		$copyObj->setCoordinator($this->coordinator);

		$copyObj->setCoordinatorid($this->coordinatorid);

		$copyObj->setBoardmember($this->boardmember);

		$copyObj->setBoardmemberid($this->boardmemberid);

		$copyObj->setNotavailable($this->notavailable);

		$copyObj->setNoweekday($this->noweekday);

		$copyObj->setNonight($this->nonight);

		$copyObj->setNoweekend($this->noweekend);

		$copyObj->setLastminute($this->lastminute);

		$copyObj->setFirstdate($this->firstdate);

		$copyObj->setLastdate($this->lastdate);

		$copyObj->setAvailabilitycomment($this->availabilitycomment);

		$copyObj->setAircraftowner($this->aircraftowner);

		$copyObj->setFastestaircraft($this->fastestaircraft);

		$copyObj->setLongestrangeaircraft($this->longestrangeaircraft);

		$copyObj->setMostseatsaircraft($this->mostseatsaircraft);

		$copyObj->setMaxloadaircraft($this->maxloadaircraft);

		$copyObj->setMissioncountthisyear($this->missioncountthisyear);

		$copyObj->setMissioncounttotal($this->missioncounttotal);

		$copyObj->setLastmissionflown($this->lastmissionflown);

		$copyObj->setNextpendingmission($this->nextpendingmission);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     RpMemberDirectory Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     RpMemberDirectoryPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new RpMemberDirectoryPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseRpMemberDirectory:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseRpMemberDirectory::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseRpMemberDirectory
