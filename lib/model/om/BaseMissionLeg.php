<?php

/**
 * Base class that represents a row from the 'mission_leg' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue May 24 06:33:27 2011
 *
 * @package    lib.model.om
 */
abstract class BaseMissionLeg extends BaseObject  implements Persistent {


  const PEER = 'MissionLegPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        MissionLegPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the mission_id field.
	 * @var        int
	 */
	protected $mission_id;

	/**
	 * The value for the leg_number field.
	 * @var        int
	 */
	protected $leg_number;

	/**
	 * The value for the from_airport_id field.
	 * @var        int
	 */
	protected $from_airport_id;

	/**
	 * The value for the to_airport_id field.
	 * @var        int
	 */
	protected $to_airport_id;

	/**
	 * The value for the reverse_from field.
	 * @var        int
	 */
	protected $reverse_from;

	/**
	 * The value for the pass_on_board field.
	 * @var        int
	 */
	protected $pass_on_board;

	/**
	 * The value for the baggage_weight field.
	 * @var        int
	 */
	protected $baggage_weight;

	/**
	 * The value for the baggage_desc field.
	 * @var        string
	 */
	protected $baggage_desc;

	/**
	 * The value for the coordinator_id field.
	 * @var        int
	 */
	protected $coordinator_id;

	/**
	 * The value for the public_c_note field.
	 * @var        string
	 */
	protected $public_c_note;

	/**
	 * The value for the private_c_note field.
	 * @var        string
	 */
	protected $private_c_note;

	/**
	 * The value for the copilot_wanted field.
	 * @var        int
	 */
	protected $copilot_wanted;

	/**
	 * The value for the pilot_id field.
	 * @var        int
	 */
	protected $pilot_id;

	/**
	 * The value for the copilot_id field.
	 * @var        int
	 */
	protected $copilot_id;

	/**
	 * The value for the miss_assis_id field.
	 * @var        int
	 */
	protected $miss_assis_id;

	/**
	 * The value for the backup_pilot_id field.
	 * @var        int
	 */
	protected $backup_pilot_id;

	/**
	 * The value for the backup_copilot_id field.
	 * @var        int
	 */
	protected $backup_copilot_id;

	/**
	 * The value for the backup_miss_assis_id field.
	 * @var        int
	 */
	protected $backup_miss_assis_id;

	/**
	 * The value for the cancelled field.
	 * @var        string
	 */
	protected $cancelled;

	/**
	 * The value for the cancel_comment field.
	 * @var        string
	 */
	protected $cancel_comment;

	/**
	 * The value for the waiver_received field.
	 * @var        string
	 */
	protected $waiver_received;

	/**
	 * The value for the web_coordinated field.
	 * @var        int
	 */
	protected $web_coordinated;

	/**
	 * The value for the mission_report_id field.
	 * @var        int
	 */
	protected $mission_report_id;

	/**
	 * The value for the pilot_aircraft_id field.
	 * @var        int
	 */
	protected $pilot_aircraft_id;

	/**
	 * The value for the fbo_id field.
	 * @var        int
	 */
	protected $fbo_id;

	/**
	 * The value for the fbo_address_new field.
	 * @var        string
	 */
	protected $fbo_address_new;

	/**
	 * The value for the fbo_dest_id field.
	 * @var        int
	 */
	protected $fbo_dest_id;

	/**
	 * The value for the share_afa_org_id field.
	 * @var        int
	 */
	protected $share_afa_org_id;

	/**
	 * The value for the transportation field.
	 * @var        string
	 */
	protected $transportation;

	/**
	 * The value for the ground_origin field.
	 * @var        string
	 */
	protected $ground_origin;

	/**
	 * The value for the ground_destination field.
	 * @var        string
	 */
	protected $ground_destination;

	/**
	 * The value for the flight_time field.
	 * @var        string
	 */
	protected $flight_time;

	/**
	 * The value for the airline_id field.
	 * @var        int
	 */
	protected $airline_id;

	/**
	 * The value for the fund_id field.
	 * @var        int
	 */
	protected $fund_id;

	/**
	 * The value for the confirm_code field.
	 * @var        string
	 */
	protected $confirm_code;

	/**
	 * The value for the flight_cost field.
	 * @var        int
	 */
	protected $flight_cost;

	/**
	 * The value for the comm_origin field.
	 * @var        string
	 */
	protected $comm_origin;

	/**
	 * The value for the comm_dest field.
	 * @var        string
	 */
	protected $comm_dest;

	/**
	 * The value for the flight_number field.
	 * @var        string
	 */
	protected $flight_number;

	/**
	 * The value for the departure field.
	 * @var        string
	 */
	protected $departure;

	/**
	 * The value for the arrival field.
	 * @var        string
	 */
	protected $arrival;

	/**
	 * The value for the prefix field.
	 * @var        string
	 */
	protected $prefix;

	/**
	 * The value for the cancel_mission_leg field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $cancel_mission_leg;

	/**
	 * The value for the copied_mission_leg field.
	 * @var        string
	 */
	protected $copied_mission_leg;

	/**
	 * @var        Mission
	 */
	protected $aMission;

	/**
	 * @var        Airport
	 */
	protected $aAirportRelatedByFromAirportId;

	/**
	 * @var        Airport
	 */
	protected $aAirportRelatedByToAirportId;

	/**
	 * @var        Coordinator
	 */
	protected $aCoordinator;

	/**
	 * @var        Pilot
	 */
	protected $aPilotRelatedByPilotId;

	/**
	 * @var        Member
	 */
	protected $aMemberRelatedByCopilotId;

	/**
	 * @var        Pilot
	 */
	protected $aPilotRelatedByBackupPilotId;

	/**
	 * @var        Member
	 */
	protected $aMemberRelatedByBackupCopilotId;

	/**
	 * @var        MissionReport
	 */
	protected $aMissionReport;

	/**
	 * @var        PilotAircraft
	 */
	protected $aPilotAircraft;

	/**
	 * @var        Fbo
	 */
	protected $aFbo;

	/**
	 * @var        AfaLeg one-to-one related AfaLeg object
	 */
	protected $singleAfaLeg;

	/**
	 * @var        array MissionPhoto[] Collection to store aggregation of MissionPhoto objects.
	 */
	protected $collMissionPhotos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collMissionPhotos.
	 */
	private $lastMissionPhotoCriteria = null;

	/**
	 * @var        array PilotRequest[] Collection to store aggregation of PilotRequest objects.
	 */
	protected $collPilotRequests;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPilotRequests.
	 */
	private $lastPilotRequestCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseMissionLeg object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->cancel_mission_leg = 1;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [mission_id] column value.
	 * 
	 * @return     int
	 */
	public function getMissionId()
	{
		return $this->mission_id;
	}

	/**
	 * Get the [leg_number] column value.
	 * 
	 * @return     int
	 */
	public function getLegNumber()
	{
		return $this->leg_number;
	}

	/**
	 * Get the [from_airport_id] column value.
	 * 
	 * @return     int
	 */
	public function getFromAirportId()
	{
		return $this->from_airport_id;
	}

	/**
	 * Get the [to_airport_id] column value.
	 * 
	 * @return     int
	 */
	public function getToAirportId()
	{
		return $this->to_airport_id;
	}

	/**
	 * Get the [reverse_from] column value.
	 * 
	 * @return     int
	 */
	public function getReverseFrom()
	{
		return $this->reverse_from;
	}

	/**
	 * Get the [pass_on_board] column value.
	 * 
	 * @return     int
	 */
	public function getPassOnBoard()
	{
		return $this->pass_on_board;
	}

	/**
	 * Get the [baggage_weight] column value.
	 * 
	 * @return     int
	 */
	public function getBaggageWeight()
	{
		return $this->baggage_weight;
	}

	/**
	 * Get the [baggage_desc] column value.
	 * 
	 * @return     string
	 */
	public function getBaggageDesc()
	{
		return $this->baggage_desc;
	}

	/**
	 * Get the [coordinator_id] column value.
	 * 
	 * @return     int
	 */
	public function getCoordinatorId()
	{
		return $this->coordinator_id;
	}

	/**
	 * Get the [public_c_note] column value.
	 * 
	 * @return     string
	 */
	public function getPublicCNote()
	{
		return $this->public_c_note;
	}

	/**
	 * Get the [private_c_note] column value.
	 * 
	 * @return     string
	 */
	public function getPrivateCNote()
	{
		return $this->private_c_note;
	}

	/**
	 * Get the [copilot_wanted] column value.
	 * 
	 * @return     int
	 */
	public function getCopilotWanted()
	{
		return $this->copilot_wanted;
	}

	/**
	 * Get the [pilot_id] column value.
	 * 
	 * @return     int
	 */
	public function getPilotId()
	{
		return $this->pilot_id;
	}

	/**
	 * Get the [copilot_id] column value.
	 * 
	 * @return     int
	 */
	public function getCopilotId()
	{
		return $this->copilot_id;
	}

	/**
	 * Get the [miss_assis_id] column value.
	 * 
	 * @return     int
	 */
	public function getMissAssisId()
	{
		return $this->miss_assis_id;
	}

	/**
	 * Get the [backup_pilot_id] column value.
	 * 
	 * @return     int
	 */
	public function getBackupPilotId()
	{
		return $this->backup_pilot_id;
	}

	/**
	 * Get the [backup_copilot_id] column value.
	 * 
	 * @return     int
	 */
	public function getBackupCopilotId()
	{
		return $this->backup_copilot_id;
	}

	/**
	 * Get the [backup_miss_assis_id] column value.
	 * 
	 * @return     int
	 */
	public function getBackupMissAssisId()
	{
		return $this->backup_miss_assis_id;
	}

	/**
	 * Get the [cancelled] column value.
	 * 
	 * @return     string
	 */
	public function getCancelled()
	{
		return $this->cancelled;
	}

	/**
	 * Get the [cancel_comment] column value.
	 * 
	 * @return     string
	 */
	public function getCancelComment()
	{
		return $this->cancel_comment;
	}

	/**
	 * Get the [optionally formatted] temporal [waiver_received] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getWaiverReceived($format = 'Y-m-d H:i:s')
	{
		if ($this->waiver_received === null) {
			return null;
		}


		if ($this->waiver_received === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->waiver_received);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->waiver_received, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [web_coordinated] column value.
	 * 
	 * @return     int
	 */
	public function getWebCoordinated()
	{
		return $this->web_coordinated;
	}

	/**
	 * Get the [mission_report_id] column value.
	 * 
	 * @return     int
	 */
	public function getMissionReportId()
	{
		return $this->mission_report_id;
	}

	/**
	 * Get the [pilot_aircraft_id] column value.
	 * 
	 * @return     int
	 */
	public function getPilotAircraftId()
	{
		return $this->pilot_aircraft_id;
	}

	/**
	 * Get the [fbo_id] column value.
	 * 
	 * @return     int
	 */
	public function getFboId()
	{
		return $this->fbo_id;
	}

	/**
	 * Get the [fbo_address_new] column value.
	 * 
	 * @return     string
	 */
	public function getFboAddressNew()
	{
		return $this->fbo_address_new;
	}

	/**
	 * Get the [fbo_dest_id] column value.
	 * 
	 * @return     int
	 */
	public function getFboDestId()
	{
		return $this->fbo_dest_id;
	}

	/**
	 * Get the [share_afa_org_id] column value.
	 * 
	 * @return     int
	 */
	public function getShareAfaOrgId()
	{
		return $this->share_afa_org_id;
	}

	/**
	 * Get the [transportation] column value.
	 * 
	 * @return     string
	 */
	public function getTransportation()
	{
		return $this->transportation;
	}

	/**
	 * Get the [ground_origin] column value.
	 * 
	 * @return     string
	 */
	public function getGroundOrigin()
	{
		return $this->ground_origin;
	}

	/**
	 * Get the [ground_destination] column value.
	 * 
	 * @return     string
	 */
	public function getGroundDestination()
	{
		return $this->ground_destination;
	}

	/**
	 * Get the [optionally formatted] temporal [flight_time] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFlightTime($format = 'H:i:s')
	{
		if ($this->flight_time === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->flight_time);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->flight_time, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [airline_id] column value.
	 * 
	 * @return     int
	 */
	public function getAirlineId()
	{
		return $this->airline_id;
	}

	/**
	 * Get the [fund_id] column value.
	 * 
	 * @return     int
	 */
	public function getFundId()
	{
		return $this->fund_id;
	}

	/**
	 * Get the [confirm_code] column value.
	 * 
	 * @return     string
	 */
	public function getConfirmCode()
	{
		return $this->confirm_code;
	}

	/**
	 * Get the [flight_cost] column value.
	 * 
	 * @return     int
	 */
	public function getFlightCost()
	{
		return $this->flight_cost;
	}

	/**
	 * Get the [comm_origin] column value.
	 * 
	 * @return     string
	 */
	public function getCommOrigin()
	{
		return $this->comm_origin;
	}

	/**
	 * Get the [comm_dest] column value.
	 * 
	 * @return     string
	 */
	public function getCommDest()
	{
		return $this->comm_dest;
	}

	/**
	 * Get the [flight_number] column value.
	 * 
	 * @return     string
	 */
	public function getFlightNumber()
	{
		return $this->flight_number;
	}

	/**
	 * Get the [optionally formatted] temporal [departure] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDeparture($format = 'H:i:s')
	{
		if ($this->departure === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->departure);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->departure, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [arrival] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getArrival($format = 'H:i:s')
	{
		if ($this->arrival === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->arrival);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->arrival, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [prefix] column value.
	 * 
	 * @return     string
	 */
	public function getPrefix()
	{
		return $this->prefix;
	}

	/**
	 * Get the [cancel_mission_leg] column value.
	 * 
	 * @return     int
	 */
	public function getCancelMissionLeg()
	{
		return $this->cancel_mission_leg;
	}

	/**
	 * Get the [copied_mission_leg] column value.
	 * 
	 * @return     string
	 */
	public function getCopiedMissionLeg()
	{
		return $this->copied_mission_leg;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = MissionLegPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [mission_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setMissionId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->mission_id !== $v) {
			$this->mission_id = $v;
			$this->modifiedColumns[] = MissionLegPeer::MISSION_ID;
		}

		if ($this->aMission !== null && $this->aMission->getId() !== $v) {
			$this->aMission = null;
		}

		return $this;
	} // setMissionId()

	/**
	 * Set the value of [leg_number] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setLegNumber($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->leg_number !== $v) {
			$this->leg_number = $v;
			$this->modifiedColumns[] = MissionLegPeer::LEG_NUMBER;
		}

		return $this;
	} // setLegNumber()

	/**
	 * Set the value of [from_airport_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setFromAirportId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->from_airport_id !== $v) {
			$this->from_airport_id = $v;
			$this->modifiedColumns[] = MissionLegPeer::FROM_AIRPORT_ID;
		}

		if ($this->aAirportRelatedByFromAirportId !== null && $this->aAirportRelatedByFromAirportId->getId() !== $v) {
			$this->aAirportRelatedByFromAirportId = null;
		}

		return $this;
	} // setFromAirportId()

	/**
	 * Set the value of [to_airport_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setToAirportId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->to_airport_id !== $v) {
			$this->to_airport_id = $v;
			$this->modifiedColumns[] = MissionLegPeer::TO_AIRPORT_ID;
		}

		if ($this->aAirportRelatedByToAirportId !== null && $this->aAirportRelatedByToAirportId->getId() !== $v) {
			$this->aAirportRelatedByToAirportId = null;
		}

		return $this;
	} // setToAirportId()

	/**
	 * Set the value of [reverse_from] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setReverseFrom($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->reverse_from !== $v) {
			$this->reverse_from = $v;
			$this->modifiedColumns[] = MissionLegPeer::REVERSE_FROM;
		}

		return $this;
	} // setReverseFrom()

	/**
	 * Set the value of [pass_on_board] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setPassOnBoard($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->pass_on_board !== $v) {
			$this->pass_on_board = $v;
			$this->modifiedColumns[] = MissionLegPeer::PASS_ON_BOARD;
		}

		return $this;
	} // setPassOnBoard()

	/**
	 * Set the value of [baggage_weight] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setBaggageWeight($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->baggage_weight !== $v) {
			$this->baggage_weight = $v;
			$this->modifiedColumns[] = MissionLegPeer::BAGGAGE_WEIGHT;
		}

		return $this;
	} // setBaggageWeight()

	/**
	 * Set the value of [baggage_desc] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setBaggageDesc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->baggage_desc !== $v) {
			$this->baggage_desc = $v;
			$this->modifiedColumns[] = MissionLegPeer::BAGGAGE_DESC;
		}

		return $this;
	} // setBaggageDesc()

	/**
	 * Set the value of [coordinator_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setCoordinatorId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->coordinator_id !== $v) {
			$this->coordinator_id = $v;
			$this->modifiedColumns[] = MissionLegPeer::COORDINATOR_ID;
		}

		if ($this->aCoordinator !== null && $this->aCoordinator->getId() !== $v) {
			$this->aCoordinator = null;
		}

		return $this;
	} // setCoordinatorId()

	/**
	 * Set the value of [public_c_note] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setPublicCNote($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->public_c_note !== $v) {
			$this->public_c_note = $v;
			$this->modifiedColumns[] = MissionLegPeer::PUBLIC_C_NOTE;
		}

		return $this;
	} // setPublicCNote()

	/**
	 * Set the value of [private_c_note] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setPrivateCNote($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->private_c_note !== $v) {
			$this->private_c_note = $v;
			$this->modifiedColumns[] = MissionLegPeer::PRIVATE_C_NOTE;
		}

		return $this;
	} // setPrivateCNote()

	/**
	 * Set the value of [copilot_wanted] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setCopilotWanted($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->copilot_wanted !== $v) {
			$this->copilot_wanted = $v;
			$this->modifiedColumns[] = MissionLegPeer::COPILOT_WANTED;
		}

		return $this;
	} // setCopilotWanted()

	/**
	 * Set the value of [pilot_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setPilotId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->pilot_id !== $v) {
			$this->pilot_id = $v;
			$this->modifiedColumns[] = MissionLegPeer::PILOT_ID;
		}

		if ($this->aPilotRelatedByPilotId !== null && $this->aPilotRelatedByPilotId->getId() !== $v) {
			$this->aPilotRelatedByPilotId = null;
		}

		return $this;
	} // setPilotId()

	/**
	 * Set the value of [copilot_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setCopilotId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->copilot_id !== $v) {
			$this->copilot_id = $v;
			$this->modifiedColumns[] = MissionLegPeer::COPILOT_ID;
		}

		if ($this->aMemberRelatedByCopilotId !== null && $this->aMemberRelatedByCopilotId->getId() !== $v) {
			$this->aMemberRelatedByCopilotId = null;
		}

		return $this;
	} // setCopilotId()

	/**
	 * Set the value of [miss_assis_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setMissAssisId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->miss_assis_id !== $v) {
			$this->miss_assis_id = $v;
			$this->modifiedColumns[] = MissionLegPeer::MISS_ASSIS_ID;
		}

		return $this;
	} // setMissAssisId()

	/**
	 * Set the value of [backup_pilot_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setBackupPilotId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->backup_pilot_id !== $v) {
			$this->backup_pilot_id = $v;
			$this->modifiedColumns[] = MissionLegPeer::BACKUP_PILOT_ID;
		}

		if ($this->aPilotRelatedByBackupPilotId !== null && $this->aPilotRelatedByBackupPilotId->getId() !== $v) {
			$this->aPilotRelatedByBackupPilotId = null;
		}

		return $this;
	} // setBackupPilotId()

	/**
	 * Set the value of [backup_copilot_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setBackupCopilotId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->backup_copilot_id !== $v) {
			$this->backup_copilot_id = $v;
			$this->modifiedColumns[] = MissionLegPeer::BACKUP_COPILOT_ID;
		}

		if ($this->aMemberRelatedByBackupCopilotId !== null && $this->aMemberRelatedByBackupCopilotId->getId() !== $v) {
			$this->aMemberRelatedByBackupCopilotId = null;
		}

		return $this;
	} // setBackupCopilotId()

	/**
	 * Set the value of [backup_miss_assis_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setBackupMissAssisId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->backup_miss_assis_id !== $v) {
			$this->backup_miss_assis_id = $v;
			$this->modifiedColumns[] = MissionLegPeer::BACKUP_MISS_ASSIS_ID;
		}

		return $this;
	} // setBackupMissAssisId()

	/**
	 * Set the value of [cancelled] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setCancelled($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cancelled !== $v) {
			$this->cancelled = $v;
			$this->modifiedColumns[] = MissionLegPeer::CANCELLED;
		}

		return $this;
	} // setCancelled()

	/**
	 * Set the value of [cancel_comment] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setCancelComment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cancel_comment !== $v) {
			$this->cancel_comment = $v;
			$this->modifiedColumns[] = MissionLegPeer::CANCEL_COMMENT;
		}

		return $this;
	} // setCancelComment()

	/**
	 * Sets the value of [waiver_received] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setWaiverReceived($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->waiver_received !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->waiver_received !== null && $tmpDt = new DateTime($this->waiver_received)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->waiver_received = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = MissionLegPeer::WAIVER_RECEIVED;
			}
		} // if either are not null

		return $this;
	} // setWaiverReceived()

	/**
	 * Set the value of [web_coordinated] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setWebCoordinated($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->web_coordinated !== $v) {
			$this->web_coordinated = $v;
			$this->modifiedColumns[] = MissionLegPeer::WEB_COORDINATED;
		}

		return $this;
	} // setWebCoordinated()

	/**
	 * Set the value of [mission_report_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setMissionReportId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->mission_report_id !== $v) {
			$this->mission_report_id = $v;
			$this->modifiedColumns[] = MissionLegPeer::MISSION_REPORT_ID;
		}

		if ($this->aMissionReport !== null && $this->aMissionReport->getId() !== $v) {
			$this->aMissionReport = null;
		}

		return $this;
	} // setMissionReportId()

	/**
	 * Set the value of [pilot_aircraft_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setPilotAircraftId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->pilot_aircraft_id !== $v) {
			$this->pilot_aircraft_id = $v;
			$this->modifiedColumns[] = MissionLegPeer::PILOT_AIRCRAFT_ID;
		}

		if ($this->aPilotAircraft !== null && $this->aPilotAircraft->getId() !== $v) {
			$this->aPilotAircraft = null;
		}

		return $this;
	} // setPilotAircraftId()

	/**
	 * Set the value of [fbo_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setFboId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fbo_id !== $v) {
			$this->fbo_id = $v;
			$this->modifiedColumns[] = MissionLegPeer::FBO_ID;
		}

		if ($this->aFbo !== null && $this->aFbo->getId() !== $v) {
			$this->aFbo = null;
		}

		return $this;
	} // setFboId()

	/**
	 * Set the value of [fbo_address_new] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setFboAddressNew($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fbo_address_new !== $v) {
			$this->fbo_address_new = $v;
			$this->modifiedColumns[] = MissionLegPeer::FBO_ADDRESS_NEW;
		}

		return $this;
	} // setFboAddressNew()

	/**
	 * Set the value of [fbo_dest_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setFboDestId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fbo_dest_id !== $v) {
			$this->fbo_dest_id = $v;
			$this->modifiedColumns[] = MissionLegPeer::FBO_DEST_ID;
		}

		return $this;
	} // setFboDestId()

	/**
	 * Set the value of [share_afa_org_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setShareAfaOrgId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->share_afa_org_id !== $v) {
			$this->share_afa_org_id = $v;
			$this->modifiedColumns[] = MissionLegPeer::SHARE_AFA_ORG_ID;
		}

		return $this;
	} // setShareAfaOrgId()

	/**
	 * Set the value of [transportation] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setTransportation($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->transportation !== $v) {
			$this->transportation = $v;
			$this->modifiedColumns[] = MissionLegPeer::TRANSPORTATION;
		}

		return $this;
	} // setTransportation()

	/**
	 * Set the value of [ground_origin] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setGroundOrigin($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ground_origin !== $v) {
			$this->ground_origin = $v;
			$this->modifiedColumns[] = MissionLegPeer::GROUND_ORIGIN;
		}

		return $this;
	} // setGroundOrigin()

	/**
	 * Set the value of [ground_destination] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setGroundDestination($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ground_destination !== $v) {
			$this->ground_destination = $v;
			$this->modifiedColumns[] = MissionLegPeer::GROUND_DESTINATION;
		}

		return $this;
	} // setGroundDestination()

	/**
	 * Sets the value of [flight_time] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setFlightTime($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->flight_time !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->flight_time !== null && $tmpDt = new DateTime($this->flight_time)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->flight_time = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = MissionLegPeer::FLIGHT_TIME;
			}
		} // if either are not null

		return $this;
	} // setFlightTime()

	/**
	 * Set the value of [airline_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setAirlineId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->airline_id !== $v) {
			$this->airline_id = $v;
			$this->modifiedColumns[] = MissionLegPeer::AIRLINE_ID;
		}

		return $this;
	} // setAirlineId()

	/**
	 * Set the value of [fund_id] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setFundId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fund_id !== $v) {
			$this->fund_id = $v;
			$this->modifiedColumns[] = MissionLegPeer::FUND_ID;
		}

		return $this;
	} // setFundId()

	/**
	 * Set the value of [confirm_code] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setConfirmCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->confirm_code !== $v) {
			$this->confirm_code = $v;
			$this->modifiedColumns[] = MissionLegPeer::CONFIRM_CODE;
		}

		return $this;
	} // setConfirmCode()

	/**
	 * Set the value of [flight_cost] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setFlightCost($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->flight_cost !== $v) {
			$this->flight_cost = $v;
			$this->modifiedColumns[] = MissionLegPeer::FLIGHT_COST;
		}

		return $this;
	} // setFlightCost()

	/**
	 * Set the value of [comm_origin] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setCommOrigin($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comm_origin !== $v) {
			$this->comm_origin = $v;
			$this->modifiedColumns[] = MissionLegPeer::COMM_ORIGIN;
		}

		return $this;
	} // setCommOrigin()

	/**
	 * Set the value of [comm_dest] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setCommDest($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->comm_dest !== $v) {
			$this->comm_dest = $v;
			$this->modifiedColumns[] = MissionLegPeer::COMM_DEST;
		}

		return $this;
	} // setCommDest()

	/**
	 * Set the value of [flight_number] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setFlightNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->flight_number !== $v) {
			$this->flight_number = $v;
			$this->modifiedColumns[] = MissionLegPeer::FLIGHT_NUMBER;
		}

		return $this;
	} // setFlightNumber()

	/**
	 * Sets the value of [departure] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setDeparture($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->departure !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->departure !== null && $tmpDt = new DateTime($this->departure)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->departure = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = MissionLegPeer::DEPARTURE;
			}
		} // if either are not null

		return $this;
	} // setDeparture()

	/**
	 * Sets the value of [arrival] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setArrival($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->arrival !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->arrival !== null && $tmpDt = new DateTime($this->arrival)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->arrival = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = MissionLegPeer::ARRIVAL;
			}
		} // if either are not null

		return $this;
	} // setArrival()

	/**
	 * Set the value of [prefix] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setPrefix($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->prefix !== $v) {
			$this->prefix = $v;
			$this->modifiedColumns[] = MissionLegPeer::PREFIX;
		}

		return $this;
	} // setPrefix()

	/**
	 * Set the value of [cancel_mission_leg] column.
	 * 
	 * @param      int $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setCancelMissionLeg($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cancel_mission_leg !== $v || $v === 1) {
			$this->cancel_mission_leg = $v;
			$this->modifiedColumns[] = MissionLegPeer::CANCEL_MISSION_LEG;
		}

		return $this;
	} // setCancelMissionLeg()

	/**
	 * Set the value of [copied_mission_leg] column.
	 * 
	 * @param      string $v new value
	 * @return     MissionLeg The current object (for fluent API support)
	 */
	public function setCopiedMissionLeg($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->copied_mission_leg !== $v) {
			$this->copied_mission_leg = $v;
			$this->modifiedColumns[] = MissionLegPeer::COPIED_MISSION_LEG;
		}

		return $this;
	} // setCopiedMissionLeg()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(MissionLegPeer::CANCEL_MISSION_LEG))) {
				return false;
			}

			if ($this->cancel_mission_leg !== 1) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->mission_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->leg_number = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->from_airport_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->to_airport_id = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->reverse_from = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->pass_on_board = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->baggage_weight = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->baggage_desc = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->coordinator_id = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->public_c_note = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->private_c_note = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->copilot_wanted = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->pilot_id = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->copilot_id = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->miss_assis_id = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->backup_pilot_id = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->backup_copilot_id = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->backup_miss_assis_id = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->cancelled = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->cancel_comment = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->waiver_received = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->web_coordinated = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->mission_report_id = ($row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
			$this->pilot_aircraft_id = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
			$this->fbo_id = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
			$this->fbo_address_new = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->fbo_dest_id = ($row[$startcol + 27] !== null) ? (int) $row[$startcol + 27] : null;
			$this->share_afa_org_id = ($row[$startcol + 28] !== null) ? (int) $row[$startcol + 28] : null;
			$this->transportation = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->ground_origin = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->ground_destination = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->flight_time = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->airline_id = ($row[$startcol + 33] !== null) ? (int) $row[$startcol + 33] : null;
			$this->fund_id = ($row[$startcol + 34] !== null) ? (int) $row[$startcol + 34] : null;
			$this->confirm_code = ($row[$startcol + 35] !== null) ? (string) $row[$startcol + 35] : null;
			$this->flight_cost = ($row[$startcol + 36] !== null) ? (int) $row[$startcol + 36] : null;
			$this->comm_origin = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
			$this->comm_dest = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
			$this->flight_number = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
			$this->departure = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
			$this->arrival = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
			$this->prefix = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
			$this->cancel_mission_leg = ($row[$startcol + 43] !== null) ? (int) $row[$startcol + 43] : null;
			$this->copied_mission_leg = ($row[$startcol + 44] !== null) ? (string) $row[$startcol + 44] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 45; // 45 = MissionLegPeer::NUM_COLUMNS - MissionLegPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating MissionLeg object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aMission !== null && $this->mission_id !== $this->aMission->getId()) {
			$this->aMission = null;
		}
		if ($this->aAirportRelatedByFromAirportId !== null && $this->from_airport_id !== $this->aAirportRelatedByFromAirportId->getId()) {
			$this->aAirportRelatedByFromAirportId = null;
		}
		if ($this->aAirportRelatedByToAirportId !== null && $this->to_airport_id !== $this->aAirportRelatedByToAirportId->getId()) {
			$this->aAirportRelatedByToAirportId = null;
		}
		if ($this->aCoordinator !== null && $this->coordinator_id !== $this->aCoordinator->getId()) {
			$this->aCoordinator = null;
		}
		if ($this->aPilotRelatedByPilotId !== null && $this->pilot_id !== $this->aPilotRelatedByPilotId->getId()) {
			$this->aPilotRelatedByPilotId = null;
		}
		if ($this->aMemberRelatedByCopilotId !== null && $this->copilot_id !== $this->aMemberRelatedByCopilotId->getId()) {
			$this->aMemberRelatedByCopilotId = null;
		}
		if ($this->aPilotRelatedByBackupPilotId !== null && $this->backup_pilot_id !== $this->aPilotRelatedByBackupPilotId->getId()) {
			$this->aPilotRelatedByBackupPilotId = null;
		}
		if ($this->aMemberRelatedByBackupCopilotId !== null && $this->backup_copilot_id !== $this->aMemberRelatedByBackupCopilotId->getId()) {
			$this->aMemberRelatedByBackupCopilotId = null;
		}
		if ($this->aMissionReport !== null && $this->mission_report_id !== $this->aMissionReport->getId()) {
			$this->aMissionReport = null;
		}
		if ($this->aPilotAircraft !== null && $this->pilot_aircraft_id !== $this->aPilotAircraft->getId()) {
			$this->aPilotAircraft = null;
		}
		if ($this->aFbo !== null && $this->fbo_id !== $this->aFbo->getId()) {
			$this->aFbo = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = MissionLegPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aMission = null;
			$this->aAirportRelatedByFromAirportId = null;
			$this->aAirportRelatedByToAirportId = null;
			$this->aCoordinator = null;
			$this->aPilotRelatedByPilotId = null;
			$this->aMemberRelatedByCopilotId = null;
			$this->aPilotRelatedByBackupPilotId = null;
			$this->aMemberRelatedByBackupCopilotId = null;
			$this->aMissionReport = null;
			$this->aPilotAircraft = null;
			$this->aFbo = null;
			$this->singleAfaLeg = null;

			$this->collMissionPhotos = null;
			$this->lastMissionPhotoCriteria = null;

			$this->collPilotRequests = null;
			$this->lastPilotRequestCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMissionLeg:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			MissionLegPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseMissionLeg:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseMissionLeg:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(MissionLegPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseMissionLeg:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			MissionLegPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aMission !== null) {
				if ($this->aMission->isModified() || $this->aMission->isNew()) {
					$affectedRows += $this->aMission->save($con);
				}
				$this->setMission($this->aMission);
			}

			if ($this->aAirportRelatedByFromAirportId !== null) {
				if ($this->aAirportRelatedByFromAirportId->isModified() || $this->aAirportRelatedByFromAirportId->isNew()) {
					$affectedRows += $this->aAirportRelatedByFromAirportId->save($con);
				}
				$this->setAirportRelatedByFromAirportId($this->aAirportRelatedByFromAirportId);
			}

			if ($this->aAirportRelatedByToAirportId !== null) {
				if ($this->aAirportRelatedByToAirportId->isModified() || $this->aAirportRelatedByToAirportId->isNew()) {
					$affectedRows += $this->aAirportRelatedByToAirportId->save($con);
				}
				$this->setAirportRelatedByToAirportId($this->aAirportRelatedByToAirportId);
			}

			if ($this->aCoordinator !== null) {
				if ($this->aCoordinator->isModified() || $this->aCoordinator->isNew()) {
					$affectedRows += $this->aCoordinator->save($con);
				}
				$this->setCoordinator($this->aCoordinator);
			}

			if ($this->aPilotRelatedByPilotId !== null) {
				if ($this->aPilotRelatedByPilotId->isModified() || $this->aPilotRelatedByPilotId->isNew()) {
					$affectedRows += $this->aPilotRelatedByPilotId->save($con);
				}
				$this->setPilotRelatedByPilotId($this->aPilotRelatedByPilotId);
			}

			if ($this->aMemberRelatedByCopilotId !== null) {
				if ($this->aMemberRelatedByCopilotId->isModified() || $this->aMemberRelatedByCopilotId->isNew()) {
					$affectedRows += $this->aMemberRelatedByCopilotId->save($con);
				}
				$this->setMemberRelatedByCopilotId($this->aMemberRelatedByCopilotId);
			}

			if ($this->aPilotRelatedByBackupPilotId !== null) {
				if ($this->aPilotRelatedByBackupPilotId->isModified() || $this->aPilotRelatedByBackupPilotId->isNew()) {
					$affectedRows += $this->aPilotRelatedByBackupPilotId->save($con);
				}
				$this->setPilotRelatedByBackupPilotId($this->aPilotRelatedByBackupPilotId);
			}

			if ($this->aMemberRelatedByBackupCopilotId !== null) {
				if ($this->aMemberRelatedByBackupCopilotId->isModified() || $this->aMemberRelatedByBackupCopilotId->isNew()) {
					$affectedRows += $this->aMemberRelatedByBackupCopilotId->save($con);
				}
				$this->setMemberRelatedByBackupCopilotId($this->aMemberRelatedByBackupCopilotId);
			}

			if ($this->aMissionReport !== null) {
				if ($this->aMissionReport->isModified() || $this->aMissionReport->isNew()) {
					$affectedRows += $this->aMissionReport->save($con);
				}
				$this->setMissionReport($this->aMissionReport);
			}

			if ($this->aPilotAircraft !== null) {
				if ($this->aPilotAircraft->isModified() || $this->aPilotAircraft->isNew()) {
					$affectedRows += $this->aPilotAircraft->save($con);
				}
				$this->setPilotAircraft($this->aPilotAircraft);
			}

			if ($this->aFbo !== null) {
				if ($this->aFbo->isModified() || $this->aFbo->isNew()) {
					$affectedRows += $this->aFbo->save($con);
				}
				$this->setFbo($this->aFbo);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = MissionLegPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = MissionLegPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += MissionLegPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->singleAfaLeg !== null) {
				if (!$this->singleAfaLeg->isDeleted()) {
						$affectedRows += $this->singleAfaLeg->save($con);
				}
			}

			if ($this->collMissionPhotos !== null) {
				foreach ($this->collMissionPhotos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPilotRequests !== null) {
				foreach ($this->collPilotRequests as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aMission !== null) {
				if (!$this->aMission->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMission->getValidationFailures());
				}
			}

			if ($this->aAirportRelatedByFromAirportId !== null) {
				if (!$this->aAirportRelatedByFromAirportId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAirportRelatedByFromAirportId->getValidationFailures());
				}
			}

			if ($this->aAirportRelatedByToAirportId !== null) {
				if (!$this->aAirportRelatedByToAirportId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAirportRelatedByToAirportId->getValidationFailures());
				}
			}

			if ($this->aCoordinator !== null) {
				if (!$this->aCoordinator->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCoordinator->getValidationFailures());
				}
			}

			if ($this->aPilotRelatedByPilotId !== null) {
				if (!$this->aPilotRelatedByPilotId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPilotRelatedByPilotId->getValidationFailures());
				}
			}

			if ($this->aMemberRelatedByCopilotId !== null) {
				if (!$this->aMemberRelatedByCopilotId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMemberRelatedByCopilotId->getValidationFailures());
				}
			}

			if ($this->aPilotRelatedByBackupPilotId !== null) {
				if (!$this->aPilotRelatedByBackupPilotId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPilotRelatedByBackupPilotId->getValidationFailures());
				}
			}

			if ($this->aMemberRelatedByBackupCopilotId !== null) {
				if (!$this->aMemberRelatedByBackupCopilotId->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMemberRelatedByBackupCopilotId->getValidationFailures());
				}
			}

			if ($this->aMissionReport !== null) {
				if (!$this->aMissionReport->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMissionReport->getValidationFailures());
				}
			}

			if ($this->aPilotAircraft !== null) {
				if (!$this->aPilotAircraft->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPilotAircraft->getValidationFailures());
				}
			}

			if ($this->aFbo !== null) {
				if (!$this->aFbo->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aFbo->getValidationFailures());
				}
			}


			if (($retval = MissionLegPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->singleAfaLeg !== null) {
					if (!$this->singleAfaLeg->validate($columns)) {
						$failureMap = array_merge($failureMap, $this->singleAfaLeg->getValidationFailures());
					}
				}

				if ($this->collMissionPhotos !== null) {
					foreach ($this->collMissionPhotos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPilotRequests !== null) {
					foreach ($this->collPilotRequests as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MissionLegPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getMissionId();
				break;
			case 2:
				return $this->getLegNumber();
				break;
			case 3:
				return $this->getFromAirportId();
				break;
			case 4:
				return $this->getToAirportId();
				break;
			case 5:
				return $this->getReverseFrom();
				break;
			case 6:
				return $this->getPassOnBoard();
				break;
			case 7:
				return $this->getBaggageWeight();
				break;
			case 8:
				return $this->getBaggageDesc();
				break;
			case 9:
				return $this->getCoordinatorId();
				break;
			case 10:
				return $this->getPublicCNote();
				break;
			case 11:
				return $this->getPrivateCNote();
				break;
			case 12:
				return $this->getCopilotWanted();
				break;
			case 13:
				return $this->getPilotId();
				break;
			case 14:
				return $this->getCopilotId();
				break;
			case 15:
				return $this->getMissAssisId();
				break;
			case 16:
				return $this->getBackupPilotId();
				break;
			case 17:
				return $this->getBackupCopilotId();
				break;
			case 18:
				return $this->getBackupMissAssisId();
				break;
			case 19:
				return $this->getCancelled();
				break;
			case 20:
				return $this->getCancelComment();
				break;
			case 21:
				return $this->getWaiverReceived();
				break;
			case 22:
				return $this->getWebCoordinated();
				break;
			case 23:
				return $this->getMissionReportId();
				break;
			case 24:
				return $this->getPilotAircraftId();
				break;
			case 25:
				return $this->getFboId();
				break;
			case 26:
				return $this->getFboAddressNew();
				break;
			case 27:
				return $this->getFboDestId();
				break;
			case 28:
				return $this->getShareAfaOrgId();
				break;
			case 29:
				return $this->getTransportation();
				break;
			case 30:
				return $this->getGroundOrigin();
				break;
			case 31:
				return $this->getGroundDestination();
				break;
			case 32:
				return $this->getFlightTime();
				break;
			case 33:
				return $this->getAirlineId();
				break;
			case 34:
				return $this->getFundId();
				break;
			case 35:
				return $this->getConfirmCode();
				break;
			case 36:
				return $this->getFlightCost();
				break;
			case 37:
				return $this->getCommOrigin();
				break;
			case 38:
				return $this->getCommDest();
				break;
			case 39:
				return $this->getFlightNumber();
				break;
			case 40:
				return $this->getDeparture();
				break;
			case 41:
				return $this->getArrival();
				break;
			case 42:
				return $this->getPrefix();
				break;
			case 43:
				return $this->getCancelMissionLeg();
				break;
			case 44:
				return $this->getCopiedMissionLeg();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = MissionLegPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getMissionId(),
			$keys[2] => $this->getLegNumber(),
			$keys[3] => $this->getFromAirportId(),
			$keys[4] => $this->getToAirportId(),
			$keys[5] => $this->getReverseFrom(),
			$keys[6] => $this->getPassOnBoard(),
			$keys[7] => $this->getBaggageWeight(),
			$keys[8] => $this->getBaggageDesc(),
			$keys[9] => $this->getCoordinatorId(),
			$keys[10] => $this->getPublicCNote(),
			$keys[11] => $this->getPrivateCNote(),
			$keys[12] => $this->getCopilotWanted(),
			$keys[13] => $this->getPilotId(),
			$keys[14] => $this->getCopilotId(),
			$keys[15] => $this->getMissAssisId(),
			$keys[16] => $this->getBackupPilotId(),
			$keys[17] => $this->getBackupCopilotId(),
			$keys[18] => $this->getBackupMissAssisId(),
			$keys[19] => $this->getCancelled(),
			$keys[20] => $this->getCancelComment(),
			$keys[21] => $this->getWaiverReceived(),
			$keys[22] => $this->getWebCoordinated(),
			$keys[23] => $this->getMissionReportId(),
			$keys[24] => $this->getPilotAircraftId(),
			$keys[25] => $this->getFboId(),
			$keys[26] => $this->getFboAddressNew(),
			$keys[27] => $this->getFboDestId(),
			$keys[28] => $this->getShareAfaOrgId(),
			$keys[29] => $this->getTransportation(),
			$keys[30] => $this->getGroundOrigin(),
			$keys[31] => $this->getGroundDestination(),
			$keys[32] => $this->getFlightTime(),
			$keys[33] => $this->getAirlineId(),
			$keys[34] => $this->getFundId(),
			$keys[35] => $this->getConfirmCode(),
			$keys[36] => $this->getFlightCost(),
			$keys[37] => $this->getCommOrigin(),
			$keys[38] => $this->getCommDest(),
			$keys[39] => $this->getFlightNumber(),
			$keys[40] => $this->getDeparture(),
			$keys[41] => $this->getArrival(),
			$keys[42] => $this->getPrefix(),
			$keys[43] => $this->getCancelMissionLeg(),
			$keys[44] => $this->getCopiedMissionLeg(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = MissionLegPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setMissionId($value);
				break;
			case 2:
				$this->setLegNumber($value);
				break;
			case 3:
				$this->setFromAirportId($value);
				break;
			case 4:
				$this->setToAirportId($value);
				break;
			case 5:
				$this->setReverseFrom($value);
				break;
			case 6:
				$this->setPassOnBoard($value);
				break;
			case 7:
				$this->setBaggageWeight($value);
				break;
			case 8:
				$this->setBaggageDesc($value);
				break;
			case 9:
				$this->setCoordinatorId($value);
				break;
			case 10:
				$this->setPublicCNote($value);
				break;
			case 11:
				$this->setPrivateCNote($value);
				break;
			case 12:
				$this->setCopilotWanted($value);
				break;
			case 13:
				$this->setPilotId($value);
				break;
			case 14:
				$this->setCopilotId($value);
				break;
			case 15:
				$this->setMissAssisId($value);
				break;
			case 16:
				$this->setBackupPilotId($value);
				break;
			case 17:
				$this->setBackupCopilotId($value);
				break;
			case 18:
				$this->setBackupMissAssisId($value);
				break;
			case 19:
				$this->setCancelled($value);
				break;
			case 20:
				$this->setCancelComment($value);
				break;
			case 21:
				$this->setWaiverReceived($value);
				break;
			case 22:
				$this->setWebCoordinated($value);
				break;
			case 23:
				$this->setMissionReportId($value);
				break;
			case 24:
				$this->setPilotAircraftId($value);
				break;
			case 25:
				$this->setFboId($value);
				break;
			case 26:
				$this->setFboAddressNew($value);
				break;
			case 27:
				$this->setFboDestId($value);
				break;
			case 28:
				$this->setShareAfaOrgId($value);
				break;
			case 29:
				$this->setTransportation($value);
				break;
			case 30:
				$this->setGroundOrigin($value);
				break;
			case 31:
				$this->setGroundDestination($value);
				break;
			case 32:
				$this->setFlightTime($value);
				break;
			case 33:
				$this->setAirlineId($value);
				break;
			case 34:
				$this->setFundId($value);
				break;
			case 35:
				$this->setConfirmCode($value);
				break;
			case 36:
				$this->setFlightCost($value);
				break;
			case 37:
				$this->setCommOrigin($value);
				break;
			case 38:
				$this->setCommDest($value);
				break;
			case 39:
				$this->setFlightNumber($value);
				break;
			case 40:
				$this->setDeparture($value);
				break;
			case 41:
				$this->setArrival($value);
				break;
			case 42:
				$this->setPrefix($value);
				break;
			case 43:
				$this->setCancelMissionLeg($value);
				break;
			case 44:
				$this->setCopiedMissionLeg($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = MissionLegPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setMissionId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setLegNumber($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setFromAirportId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setToAirportId($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setReverseFrom($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setPassOnBoard($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setBaggageWeight($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setBaggageDesc($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCoordinatorId($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPublicCNote($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setPrivateCNote($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setCopilotWanted($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setPilotId($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCopilotId($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setMissAssisId($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setBackupPilotId($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setBackupCopilotId($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setBackupMissAssisId($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setCancelled($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCancelComment($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setWaiverReceived($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setWebCoordinated($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setMissionReportId($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setPilotAircraftId($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setFboId($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setFboAddressNew($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setFboDestId($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setShareAfaOrgId($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setTransportation($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setGroundOrigin($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setGroundDestination($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setFlightTime($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setAirlineId($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setFundId($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setConfirmCode($arr[$keys[35]]);
		if (array_key_exists($keys[36], $arr)) $this->setFlightCost($arr[$keys[36]]);
		if (array_key_exists($keys[37], $arr)) $this->setCommOrigin($arr[$keys[37]]);
		if (array_key_exists($keys[38], $arr)) $this->setCommDest($arr[$keys[38]]);
		if (array_key_exists($keys[39], $arr)) $this->setFlightNumber($arr[$keys[39]]);
		if (array_key_exists($keys[40], $arr)) $this->setDeparture($arr[$keys[40]]);
		if (array_key_exists($keys[41], $arr)) $this->setArrival($arr[$keys[41]]);
		if (array_key_exists($keys[42], $arr)) $this->setPrefix($arr[$keys[42]]);
		if (array_key_exists($keys[43], $arr)) $this->setCancelMissionLeg($arr[$keys[43]]);
		if (array_key_exists($keys[44], $arr)) $this->setCopiedMissionLeg($arr[$keys[44]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(MissionLegPeer::DATABASE_NAME);

		if ($this->isColumnModified(MissionLegPeer::ID)) $criteria->add(MissionLegPeer::ID, $this->id);
		if ($this->isColumnModified(MissionLegPeer::MISSION_ID)) $criteria->add(MissionLegPeer::MISSION_ID, $this->mission_id);
		if ($this->isColumnModified(MissionLegPeer::LEG_NUMBER)) $criteria->add(MissionLegPeer::LEG_NUMBER, $this->leg_number);
		if ($this->isColumnModified(MissionLegPeer::FROM_AIRPORT_ID)) $criteria->add(MissionLegPeer::FROM_AIRPORT_ID, $this->from_airport_id);
		if ($this->isColumnModified(MissionLegPeer::TO_AIRPORT_ID)) $criteria->add(MissionLegPeer::TO_AIRPORT_ID, $this->to_airport_id);
		if ($this->isColumnModified(MissionLegPeer::REVERSE_FROM)) $criteria->add(MissionLegPeer::REVERSE_FROM, $this->reverse_from);
		if ($this->isColumnModified(MissionLegPeer::PASS_ON_BOARD)) $criteria->add(MissionLegPeer::PASS_ON_BOARD, $this->pass_on_board);
		if ($this->isColumnModified(MissionLegPeer::BAGGAGE_WEIGHT)) $criteria->add(MissionLegPeer::BAGGAGE_WEIGHT, $this->baggage_weight);
		if ($this->isColumnModified(MissionLegPeer::BAGGAGE_DESC)) $criteria->add(MissionLegPeer::BAGGAGE_DESC, $this->baggage_desc);
		if ($this->isColumnModified(MissionLegPeer::COORDINATOR_ID)) $criteria->add(MissionLegPeer::COORDINATOR_ID, $this->coordinator_id);
		if ($this->isColumnModified(MissionLegPeer::PUBLIC_C_NOTE)) $criteria->add(MissionLegPeer::PUBLIC_C_NOTE, $this->public_c_note);
		if ($this->isColumnModified(MissionLegPeer::PRIVATE_C_NOTE)) $criteria->add(MissionLegPeer::PRIVATE_C_NOTE, $this->private_c_note);
		if ($this->isColumnModified(MissionLegPeer::COPILOT_WANTED)) $criteria->add(MissionLegPeer::COPILOT_WANTED, $this->copilot_wanted);
		if ($this->isColumnModified(MissionLegPeer::PILOT_ID)) $criteria->add(MissionLegPeer::PILOT_ID, $this->pilot_id);
		if ($this->isColumnModified(MissionLegPeer::COPILOT_ID)) $criteria->add(MissionLegPeer::COPILOT_ID, $this->copilot_id);
		if ($this->isColumnModified(MissionLegPeer::MISS_ASSIS_ID)) $criteria->add(MissionLegPeer::MISS_ASSIS_ID, $this->miss_assis_id);
		if ($this->isColumnModified(MissionLegPeer::BACKUP_PILOT_ID)) $criteria->add(MissionLegPeer::BACKUP_PILOT_ID, $this->backup_pilot_id);
		if ($this->isColumnModified(MissionLegPeer::BACKUP_COPILOT_ID)) $criteria->add(MissionLegPeer::BACKUP_COPILOT_ID, $this->backup_copilot_id);
		if ($this->isColumnModified(MissionLegPeer::BACKUP_MISS_ASSIS_ID)) $criteria->add(MissionLegPeer::BACKUP_MISS_ASSIS_ID, $this->backup_miss_assis_id);
		if ($this->isColumnModified(MissionLegPeer::CANCELLED)) $criteria->add(MissionLegPeer::CANCELLED, $this->cancelled);
		if ($this->isColumnModified(MissionLegPeer::CANCEL_COMMENT)) $criteria->add(MissionLegPeer::CANCEL_COMMENT, $this->cancel_comment);
		if ($this->isColumnModified(MissionLegPeer::WAIVER_RECEIVED)) $criteria->add(MissionLegPeer::WAIVER_RECEIVED, $this->waiver_received);
		if ($this->isColumnModified(MissionLegPeer::WEB_COORDINATED)) $criteria->add(MissionLegPeer::WEB_COORDINATED, $this->web_coordinated);
		if ($this->isColumnModified(MissionLegPeer::MISSION_REPORT_ID)) $criteria->add(MissionLegPeer::MISSION_REPORT_ID, $this->mission_report_id);
		if ($this->isColumnModified(MissionLegPeer::PILOT_AIRCRAFT_ID)) $criteria->add(MissionLegPeer::PILOT_AIRCRAFT_ID, $this->pilot_aircraft_id);
		if ($this->isColumnModified(MissionLegPeer::FBO_ID)) $criteria->add(MissionLegPeer::FBO_ID, $this->fbo_id);
		if ($this->isColumnModified(MissionLegPeer::FBO_ADDRESS_NEW)) $criteria->add(MissionLegPeer::FBO_ADDRESS_NEW, $this->fbo_address_new);
		if ($this->isColumnModified(MissionLegPeer::FBO_DEST_ID)) $criteria->add(MissionLegPeer::FBO_DEST_ID, $this->fbo_dest_id);
		if ($this->isColumnModified(MissionLegPeer::SHARE_AFA_ORG_ID)) $criteria->add(MissionLegPeer::SHARE_AFA_ORG_ID, $this->share_afa_org_id);
		if ($this->isColumnModified(MissionLegPeer::TRANSPORTATION)) $criteria->add(MissionLegPeer::TRANSPORTATION, $this->transportation);
		if ($this->isColumnModified(MissionLegPeer::GROUND_ORIGIN)) $criteria->add(MissionLegPeer::GROUND_ORIGIN, $this->ground_origin);
		if ($this->isColumnModified(MissionLegPeer::GROUND_DESTINATION)) $criteria->add(MissionLegPeer::GROUND_DESTINATION, $this->ground_destination);
		if ($this->isColumnModified(MissionLegPeer::FLIGHT_TIME)) $criteria->add(MissionLegPeer::FLIGHT_TIME, $this->flight_time);
		if ($this->isColumnModified(MissionLegPeer::AIRLINE_ID)) $criteria->add(MissionLegPeer::AIRLINE_ID, $this->airline_id);
		if ($this->isColumnModified(MissionLegPeer::FUND_ID)) $criteria->add(MissionLegPeer::FUND_ID, $this->fund_id);
		if ($this->isColumnModified(MissionLegPeer::CONFIRM_CODE)) $criteria->add(MissionLegPeer::CONFIRM_CODE, $this->confirm_code);
		if ($this->isColumnModified(MissionLegPeer::FLIGHT_COST)) $criteria->add(MissionLegPeer::FLIGHT_COST, $this->flight_cost);
		if ($this->isColumnModified(MissionLegPeer::COMM_ORIGIN)) $criteria->add(MissionLegPeer::COMM_ORIGIN, $this->comm_origin);
		if ($this->isColumnModified(MissionLegPeer::COMM_DEST)) $criteria->add(MissionLegPeer::COMM_DEST, $this->comm_dest);
		if ($this->isColumnModified(MissionLegPeer::FLIGHT_NUMBER)) $criteria->add(MissionLegPeer::FLIGHT_NUMBER, $this->flight_number);
		if ($this->isColumnModified(MissionLegPeer::DEPARTURE)) $criteria->add(MissionLegPeer::DEPARTURE, $this->departure);
		if ($this->isColumnModified(MissionLegPeer::ARRIVAL)) $criteria->add(MissionLegPeer::ARRIVAL, $this->arrival);
		if ($this->isColumnModified(MissionLegPeer::PREFIX)) $criteria->add(MissionLegPeer::PREFIX, $this->prefix);
		if ($this->isColumnModified(MissionLegPeer::CANCEL_MISSION_LEG)) $criteria->add(MissionLegPeer::CANCEL_MISSION_LEG, $this->cancel_mission_leg);
		if ($this->isColumnModified(MissionLegPeer::COPIED_MISSION_LEG)) $criteria->add(MissionLegPeer::COPIED_MISSION_LEG, $this->copied_mission_leg);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(MissionLegPeer::DATABASE_NAME);

		$criteria->add(MissionLegPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of MissionLeg (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setMissionId($this->mission_id);

		$copyObj->setLegNumber($this->leg_number);

		$copyObj->setFromAirportId($this->from_airport_id);

		$copyObj->setToAirportId($this->to_airport_id);

		$copyObj->setReverseFrom($this->reverse_from);

		$copyObj->setPassOnBoard($this->pass_on_board);

		$copyObj->setBaggageWeight($this->baggage_weight);

		$copyObj->setBaggageDesc($this->baggage_desc);

		$copyObj->setCoordinatorId($this->coordinator_id);

		$copyObj->setPublicCNote($this->public_c_note);

		$copyObj->setPrivateCNote($this->private_c_note);

		$copyObj->setCopilotWanted($this->copilot_wanted);

		$copyObj->setPilotId($this->pilot_id);

		$copyObj->setCopilotId($this->copilot_id);

		$copyObj->setMissAssisId($this->miss_assis_id);

		$copyObj->setBackupPilotId($this->backup_pilot_id);

		$copyObj->setBackupCopilotId($this->backup_copilot_id);

		$copyObj->setBackupMissAssisId($this->backup_miss_assis_id);

		$copyObj->setCancelled($this->cancelled);

		$copyObj->setCancelComment($this->cancel_comment);

		$copyObj->setWaiverReceived($this->waiver_received);

		$copyObj->setWebCoordinated($this->web_coordinated);

		$copyObj->setMissionReportId($this->mission_report_id);

		$copyObj->setPilotAircraftId($this->pilot_aircraft_id);

		$copyObj->setFboId($this->fbo_id);

		$copyObj->setFboAddressNew($this->fbo_address_new);

		$copyObj->setFboDestId($this->fbo_dest_id);

		$copyObj->setShareAfaOrgId($this->share_afa_org_id);

		$copyObj->setTransportation($this->transportation);

		$copyObj->setGroundOrigin($this->ground_origin);

		$copyObj->setGroundDestination($this->ground_destination);

		$copyObj->setFlightTime($this->flight_time);

		$copyObj->setAirlineId($this->airline_id);

		$copyObj->setFundId($this->fund_id);

		$copyObj->setConfirmCode($this->confirm_code);

		$copyObj->setFlightCost($this->flight_cost);

		$copyObj->setCommOrigin($this->comm_origin);

		$copyObj->setCommDest($this->comm_dest);

		$copyObj->setFlightNumber($this->flight_number);

		$copyObj->setDeparture($this->departure);

		$copyObj->setArrival($this->arrival);

		$copyObj->setPrefix($this->prefix);

		$copyObj->setCancelMissionLeg($this->cancel_mission_leg);

		$copyObj->setCopiedMissionLeg($this->copied_mission_leg);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			$relObj = $this->getAfaLeg();
			if ($relObj) {
				$copyObj->setAfaLeg($relObj->copy($deepCopy));
			}

			foreach ($this->getMissionPhotos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addMissionPhoto($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPilotRequests() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPilotRequest($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     MissionLeg Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     MissionLegPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new MissionLegPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Mission object.
	 *
	 * @param      Mission $v
	 * @return     MissionLeg The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMission(Mission $v = null)
	{
		if ($v === null) {
			$this->setMissionId(NULL);
		} else {
			$this->setMissionId($v->getId());
		}

		$this->aMission = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Mission object, it will not be re-added.
		if ($v !== null) {
			$v->addMissionLeg($this);
		}

		return $this;
	}


	/**
	 * Get the associated Mission object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Mission The associated Mission object.
	 * @throws     PropelException
	 */
	public function getMission(PropelPDO $con = null)
	{
		if ($this->aMission === null && ($this->mission_id !== null)) {
			$c = new Criteria(MissionPeer::DATABASE_NAME);
			$c->add(MissionPeer::ID, $this->mission_id);
			$this->aMission = MissionPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMission->addMissionLegs($this);
			 */
		}
		return $this->aMission;
	}

	/**
	 * Declares an association between this object and a Airport object.
	 *
	 * @param      Airport $v
	 * @return     MissionLeg The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAirportRelatedByFromAirportId(Airport $v = null)
	{
		if ($v === null) {
			$this->setFromAirportId(NULL);
		} else {
			$this->setFromAirportId($v->getId());
		}

		$this->aAirportRelatedByFromAirportId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Airport object, it will not be re-added.
		if ($v !== null) {
			$v->addMissionLegRelatedByFromAirportId($this);
		}

		return $this;
	}


	/**
	 * Get the associated Airport object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Airport The associated Airport object.
	 * @throws     PropelException
	 */
	public function getAirportRelatedByFromAirportId(PropelPDO $con = null)
	{
		if ($this->aAirportRelatedByFromAirportId === null && ($this->from_airport_id !== null)) {
			$c = new Criteria(AirportPeer::DATABASE_NAME);
			$c->add(AirportPeer::ID, $this->from_airport_id);
			$this->aAirportRelatedByFromAirportId = AirportPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAirportRelatedByFromAirportId->addMissionLegsRelatedByFromAirportId($this);
			 */
		}
		return $this->aAirportRelatedByFromAirportId;
	}

	/**
	 * Declares an association between this object and a Airport object.
	 *
	 * @param      Airport $v
	 * @return     MissionLeg The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAirportRelatedByToAirportId(Airport $v = null)
	{
		if ($v === null) {
			$this->setToAirportId(NULL);
		} else {
			$this->setToAirportId($v->getId());
		}

		$this->aAirportRelatedByToAirportId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Airport object, it will not be re-added.
		if ($v !== null) {
			$v->addMissionLegRelatedByToAirportId($this);
		}

		return $this;
	}


	/**
	 * Get the associated Airport object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Airport The associated Airport object.
	 * @throws     PropelException
	 */
	public function getAirportRelatedByToAirportId(PropelPDO $con = null)
	{
		if ($this->aAirportRelatedByToAirportId === null && ($this->to_airport_id !== null)) {
			$c = new Criteria(AirportPeer::DATABASE_NAME);
			$c->add(AirportPeer::ID, $this->to_airport_id);
			$this->aAirportRelatedByToAirportId = AirportPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAirportRelatedByToAirportId->addMissionLegsRelatedByToAirportId($this);
			 */
		}
		return $this->aAirportRelatedByToAirportId;
	}

	/**
	 * Declares an association between this object and a Coordinator object.
	 *
	 * @param      Coordinator $v
	 * @return     MissionLeg The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCoordinator(Coordinator $v = null)
	{
		if ($v === null) {
			$this->setCoordinatorId(NULL);
		} else {
			$this->setCoordinatorId($v->getId());
		}

		$this->aCoordinator = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Coordinator object, it will not be re-added.
		if ($v !== null) {
			$v->addMissionLeg($this);
		}

		return $this;
	}


	/**
	 * Get the associated Coordinator object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Coordinator The associated Coordinator object.
	 * @throws     PropelException
	 */
	public function getCoordinator(PropelPDO $con = null)
	{
		if ($this->aCoordinator === null && ($this->coordinator_id !== null)) {
			$c = new Criteria(CoordinatorPeer::DATABASE_NAME);
			$c->add(CoordinatorPeer::ID, $this->coordinator_id);
			$this->aCoordinator = CoordinatorPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCoordinator->addMissionLegs($this);
			 */
		}
		return $this->aCoordinator;
	}

	/**
	 * Declares an association between this object and a Pilot object.
	 *
	 * @param      Pilot $v
	 * @return     MissionLeg The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPilotRelatedByPilotId(Pilot $v = null)
	{
		if ($v === null) {
			$this->setPilotId(NULL);
		} else {
			$this->setPilotId($v->getId());
		}

		$this->aPilotRelatedByPilotId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Pilot object, it will not be re-added.
		if ($v !== null) {
			$v->addMissionLegRelatedByPilotId($this);
		}

		return $this;
	}


	/**
	 * Get the associated Pilot object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Pilot The associated Pilot object.
	 * @throws     PropelException
	 */
	public function getPilotRelatedByPilotId(PropelPDO $con = null)
	{
		if ($this->aPilotRelatedByPilotId === null && ($this->pilot_id !== null)) {
			$c = new Criteria(PilotPeer::DATABASE_NAME);
			$c->add(PilotPeer::ID, $this->pilot_id);
			$this->aPilotRelatedByPilotId = PilotPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPilotRelatedByPilotId->addMissionLegsRelatedByPilotId($this);
			 */
		}
		return $this->aPilotRelatedByPilotId;
	}

	/**
	 * Declares an association between this object and a Member object.
	 *
	 * @param      Member $v
	 * @return     MissionLeg The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMemberRelatedByCopilotId(Member $v = null)
	{
		if ($v === null) {
			$this->setCopilotId(NULL);
		} else {
			$this->setCopilotId($v->getId());
		}

		$this->aMemberRelatedByCopilotId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Member object, it will not be re-added.
		if ($v !== null) {
			$v->addMissionLegRelatedByCopilotId($this);
		}

		return $this;
	}


	/**
	 * Get the associated Member object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Member The associated Member object.
	 * @throws     PropelException
	 */
	public function getMemberRelatedByCopilotId(PropelPDO $con = null)
	{
		if ($this->aMemberRelatedByCopilotId === null && ($this->copilot_id !== null)) {
			$c = new Criteria(MemberPeer::DATABASE_NAME);
			$c->add(MemberPeer::ID, $this->copilot_id);
			$this->aMemberRelatedByCopilotId = MemberPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMemberRelatedByCopilotId->addMissionLegsRelatedByCopilotId($this);
			 */
		}
		return $this->aMemberRelatedByCopilotId;
	}

	/**
	 * Declares an association between this object and a Pilot object.
	 *
	 * @param      Pilot $v
	 * @return     MissionLeg The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPilotRelatedByBackupPilotId(Pilot $v = null)
	{
		if ($v === null) {
			$this->setBackupPilotId(NULL);
		} else {
			$this->setBackupPilotId($v->getId());
		}

		$this->aPilotRelatedByBackupPilotId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Pilot object, it will not be re-added.
		if ($v !== null) {
			$v->addMissionLegRelatedByBackupPilotId($this);
		}

		return $this;
	}


	/**
	 * Get the associated Pilot object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Pilot The associated Pilot object.
	 * @throws     PropelException
	 */
	public function getPilotRelatedByBackupPilotId(PropelPDO $con = null)
	{
		if ($this->aPilotRelatedByBackupPilotId === null && ($this->backup_pilot_id !== null)) {
			$c = new Criteria(PilotPeer::DATABASE_NAME);
			$c->add(PilotPeer::ID, $this->backup_pilot_id);
			$this->aPilotRelatedByBackupPilotId = PilotPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPilotRelatedByBackupPilotId->addMissionLegsRelatedByBackupPilotId($this);
			 */
		}
		return $this->aPilotRelatedByBackupPilotId;
	}

	/**
	 * Declares an association between this object and a Member object.
	 *
	 * @param      Member $v
	 * @return     MissionLeg The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMemberRelatedByBackupCopilotId(Member $v = null)
	{
		if ($v === null) {
			$this->setBackupCopilotId(NULL);
		} else {
			$this->setBackupCopilotId($v->getId());
		}

		$this->aMemberRelatedByBackupCopilotId = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Member object, it will not be re-added.
		if ($v !== null) {
			$v->addMissionLegRelatedByBackupCopilotId($this);
		}

		return $this;
	}


	/**
	 * Get the associated Member object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Member The associated Member object.
	 * @throws     PropelException
	 */
	public function getMemberRelatedByBackupCopilotId(PropelPDO $con = null)
	{
		if ($this->aMemberRelatedByBackupCopilotId === null && ($this->backup_copilot_id !== null)) {
			$c = new Criteria(MemberPeer::DATABASE_NAME);
			$c->add(MemberPeer::ID, $this->backup_copilot_id);
			$this->aMemberRelatedByBackupCopilotId = MemberPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMemberRelatedByBackupCopilotId->addMissionLegsRelatedByBackupCopilotId($this);
			 */
		}
		return $this->aMemberRelatedByBackupCopilotId;
	}

	/**
	 * Declares an association between this object and a MissionReport object.
	 *
	 * @param      MissionReport $v
	 * @return     MissionLeg The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMissionReport(MissionReport $v = null)
	{
		if ($v === null) {
			$this->setMissionReportId(NULL);
		} else {
			$this->setMissionReportId($v->getId());
		}

		$this->aMissionReport = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the MissionReport object, it will not be re-added.
		if ($v !== null) {
			$v->addMissionLeg($this);
		}

		return $this;
	}


	/**
	 * Get the associated MissionReport object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     MissionReport The associated MissionReport object.
	 * @throws     PropelException
	 */
	public function getMissionReport(PropelPDO $con = null)
	{
		if ($this->aMissionReport === null && ($this->mission_report_id !== null)) {
			$c = new Criteria(MissionReportPeer::DATABASE_NAME);
			$c->add(MissionReportPeer::ID, $this->mission_report_id);
			$this->aMissionReport = MissionReportPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aMissionReport->addMissionLegs($this);
			 */
		}
		return $this->aMissionReport;
	}

	/**
	 * Declares an association between this object and a PilotAircraft object.
	 *
	 * @param      PilotAircraft $v
	 * @return     MissionLeg The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPilotAircraft(PilotAircraft $v = null)
	{
		if ($v === null) {
			$this->setPilotAircraftId(NULL);
		} else {
			$this->setPilotAircraftId($v->getId());
		}

		$this->aPilotAircraft = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the PilotAircraft object, it will not be re-added.
		if ($v !== null) {
			$v->addMissionLeg($this);
		}

		return $this;
	}


	/**
	 * Get the associated PilotAircraft object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     PilotAircraft The associated PilotAircraft object.
	 * @throws     PropelException
	 */
	public function getPilotAircraft(PropelPDO $con = null)
	{
		if ($this->aPilotAircraft === null && ($this->pilot_aircraft_id !== null)) {
			$c = new Criteria(PilotAircraftPeer::DATABASE_NAME);
			$c->add(PilotAircraftPeer::ID, $this->pilot_aircraft_id);
			$this->aPilotAircraft = PilotAircraftPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPilotAircraft->addMissionLegs($this);
			 */
		}
		return $this->aPilotAircraft;
	}

	/**
	 * Declares an association between this object and a Fbo object.
	 *
	 * @param      Fbo $v
	 * @return     MissionLeg The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setFbo(Fbo $v = null)
	{
		if ($v === null) {
			$this->setFboId(NULL);
		} else {
			$this->setFboId($v->getId());
		}

		$this->aFbo = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Fbo object, it will not be re-added.
		if ($v !== null) {
			$v->addMissionLeg($this);
		}

		return $this;
	}


	/**
	 * Get the associated Fbo object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Fbo The associated Fbo object.
	 * @throws     PropelException
	 */
	public function getFbo(PropelPDO $con = null)
	{
		if ($this->aFbo === null && ($this->fbo_id !== null)) {
			$c = new Criteria(FboPeer::DATABASE_NAME);
			$c->add(FboPeer::ID, $this->fbo_id);
			$this->aFbo = FboPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aFbo->addMissionLegs($this);
			 */
		}
		return $this->aFbo;
	}

	/**
	 * Gets a single AfaLeg object, which is related to this object by a one-to-one relationship.
	 *
	 * @param      PropelPDO $con
	 * @return     AfaLeg
	 * @throws     PropelException
	 */
	public function getAfaLeg(PropelPDO $con = null)
	{

		if ($this->singleAfaLeg === null && !$this->isNew()) {
			$this->singleAfaLeg = AfaLegPeer::retrieveByPK($this->id, $con);
		}

		return $this->singleAfaLeg;
	}

	/**
	 * Sets a single AfaLeg object as related to this object by a one-to-one relationship.
	 *
	 * @param      AfaLeg $l AfaLeg
	 * @return     MissionLeg The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAfaLeg(AfaLeg $v)
	{
		$this->singleAfaLeg = $v;

		// Make sure that that the passed-in AfaLeg isn't already associated with this object
		if ($v->getMissionLeg() === null) {
			$v->setMissionLeg($this);
		}

		return $this;
	}

	/**
	 * Clears out the collMissionPhotos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addMissionPhotos()
	 */
	public function clearMissionPhotos()
	{
		$this->collMissionPhotos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collMissionPhotos collection (array).
	 *
	 * By default this just sets the collMissionPhotos collection to an empty array (like clearcollMissionPhotos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initMissionPhotos()
	{
		$this->collMissionPhotos = array();
	}

	/**
	 * Gets an array of MissionPhoto objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this MissionLeg has previously been saved, it will retrieve
	 * related MissionPhotos from storage. If this MissionLeg is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array MissionPhoto[]
	 * @throws     PropelException
	 */
	public function getMissionPhotos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionLegPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionPhotos === null) {
			if ($this->isNew()) {
			   $this->collMissionPhotos = array();
			} else {

				$criteria->add(MissionPhotoPeer::LEG_ID, $this->id);

				MissionPhotoPeer::addSelectColumns($criteria);
				$this->collMissionPhotos = MissionPhotoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(MissionPhotoPeer::LEG_ID, $this->id);

				MissionPhotoPeer::addSelectColumns($criteria);
				if (!isset($this->lastMissionPhotoCriteria) || !$this->lastMissionPhotoCriteria->equals($criteria)) {
					$this->collMissionPhotos = MissionPhotoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastMissionPhotoCriteria = $criteria;
		return $this->collMissionPhotos;
	}

	/**
	 * Returns the number of related MissionPhoto objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related MissionPhoto objects.
	 * @throws     PropelException
	 */
	public function countMissionPhotos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionLegPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collMissionPhotos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(MissionPhotoPeer::LEG_ID, $this->id);

				$count = MissionPhotoPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(MissionPhotoPeer::LEG_ID, $this->id);

				if (!isset($this->lastMissionPhotoCriteria) || !$this->lastMissionPhotoCriteria->equals($criteria)) {
					$count = MissionPhotoPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collMissionPhotos);
				}
			} else {
				$count = count($this->collMissionPhotos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a MissionPhoto object to this object
	 * through the MissionPhoto foreign key attribute.
	 *
	 * @param      MissionPhoto $l MissionPhoto
	 * @return     void
	 * @throws     PropelException
	 */
	public function addMissionPhoto(MissionPhoto $l)
	{
		if ($this->collMissionPhotos === null) {
			$this->initMissionPhotos();
		}
		if (!in_array($l, $this->collMissionPhotos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collMissionPhotos, $l);
			$l->setMissionLeg($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this MissionLeg is new, it will return
	 * an empty collection; or if this MissionLeg has previously
	 * been saved, it will retrieve related MissionPhotos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in MissionLeg.
	 */
	public function getMissionPhotosJoinMission($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionLegPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collMissionPhotos === null) {
			if ($this->isNew()) {
				$this->collMissionPhotos = array();
			} else {

				$criteria->add(MissionPhotoPeer::LEG_ID, $this->id);

				$this->collMissionPhotos = MissionPhotoPeer::doSelectJoinMission($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(MissionPhotoPeer::LEG_ID, $this->id);

			if (!isset($this->lastMissionPhotoCriteria) || !$this->lastMissionPhotoCriteria->equals($criteria)) {
				$this->collMissionPhotos = MissionPhotoPeer::doSelectJoinMission($criteria, $con, $join_behavior);
			}
		}
		$this->lastMissionPhotoCriteria = $criteria;

		return $this->collMissionPhotos;
	}

	/**
	 * Clears out the collPilotRequests collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPilotRequests()
	 */
	public function clearPilotRequests()
	{
		$this->collPilotRequests = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPilotRequests collection (array).
	 *
	 * By default this just sets the collPilotRequests collection to an empty array (like clearcollPilotRequests());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPilotRequests()
	{
		$this->collPilotRequests = array();
	}

	/**
	 * Gets an array of PilotRequest objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this MissionLeg has previously been saved, it will retrieve
	 * related PilotRequests from storage. If this MissionLeg is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array PilotRequest[]
	 * @throws     PropelException
	 */
	public function getPilotRequests($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionLegPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilotRequests === null) {
			if ($this->isNew()) {
			   $this->collPilotRequests = array();
			} else {

				$criteria->add(PilotRequestPeer::LEG_ID, $this->id);

				PilotRequestPeer::addSelectColumns($criteria);
				$this->collPilotRequests = PilotRequestPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PilotRequestPeer::LEG_ID, $this->id);

				PilotRequestPeer::addSelectColumns($criteria);
				if (!isset($this->lastPilotRequestCriteria) || !$this->lastPilotRequestCriteria->equals($criteria)) {
					$this->collPilotRequests = PilotRequestPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPilotRequestCriteria = $criteria;
		return $this->collPilotRequests;
	}

	/**
	 * Returns the number of related PilotRequest objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PilotRequest objects.
	 * @throws     PropelException
	 */
	public function countPilotRequests(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionLegPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPilotRequests === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PilotRequestPeer::LEG_ID, $this->id);

				$count = PilotRequestPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PilotRequestPeer::LEG_ID, $this->id);

				if (!isset($this->lastPilotRequestCriteria) || !$this->lastPilotRequestCriteria->equals($criteria)) {
					$count = PilotRequestPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collPilotRequests);
				}
			} else {
				$count = count($this->collPilotRequests);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a PilotRequest object to this object
	 * through the PilotRequest foreign key attribute.
	 *
	 * @param      PilotRequest $l PilotRequest
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPilotRequest(PilotRequest $l)
	{
		if ($this->collPilotRequests === null) {
			$this->initPilotRequests();
		}
		if (!in_array($l, $this->collPilotRequests, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPilotRequests, $l);
			$l->setMissionLeg($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this MissionLeg is new, it will return
	 * an empty collection; or if this MissionLeg has previously
	 * been saved, it will retrieve related PilotRequests from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in MissionLeg.
	 */
	public function getPilotRequestsJoinMember($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionLegPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilotRequests === null) {
			if ($this->isNew()) {
				$this->collPilotRequests = array();
			} else {

				$criteria->add(PilotRequestPeer::LEG_ID, $this->id);

				$this->collPilotRequests = PilotRequestPeer::doSelectJoinMember($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PilotRequestPeer::LEG_ID, $this->id);

			if (!isset($this->lastPilotRequestCriteria) || !$this->lastPilotRequestCriteria->equals($criteria)) {
				$this->collPilotRequests = PilotRequestPeer::doSelectJoinMember($criteria, $con, $join_behavior);
			}
		}
		$this->lastPilotRequestCriteria = $criteria;

		return $this->collPilotRequests;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this MissionLeg is new, it will return
	 * an empty collection; or if this MissionLeg has previously
	 * been saved, it will retrieve related PilotRequests from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in MissionLeg.
	 */
	public function getPilotRequestsJoinCamp($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(MissionLegPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPilotRequests === null) {
			if ($this->isNew()) {
				$this->collPilotRequests = array();
			} else {

				$criteria->add(PilotRequestPeer::LEG_ID, $this->id);

				$this->collPilotRequests = PilotRequestPeer::doSelectJoinCamp($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(PilotRequestPeer::LEG_ID, $this->id);

			if (!isset($this->lastPilotRequestCriteria) || !$this->lastPilotRequestCriteria->equals($criteria)) {
				$this->collPilotRequests = PilotRequestPeer::doSelectJoinCamp($criteria, $con, $join_behavior);
			}
		}
		$this->lastPilotRequestCriteria = $criteria;

		return $this->collPilotRequests;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->singleAfaLeg) {
				$this->singleAfaLeg->clearAllReferences($deep);
			}
			if ($this->collMissionPhotos) {
				foreach ((array) $this->collMissionPhotos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPilotRequests) {
				foreach ((array) $this->collPilotRequests as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->singleAfaLeg = null;
		$this->collMissionPhotos = null;
		$this->collPilotRequests = null;
			$this->aMission = null;
			$this->aAirportRelatedByFromAirportId = null;
			$this->aAirportRelatedByToAirportId = null;
			$this->aCoordinator = null;
			$this->aPilotRelatedByPilotId = null;
			$this->aMemberRelatedByCopilotId = null;
			$this->aPilotRelatedByBackupPilotId = null;
			$this->aMemberRelatedByBackupCopilotId = null;
			$this->aMissionReport = null;
			$this->aPilotAircraft = null;
			$this->aFbo = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseMissionLeg:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseMissionLeg::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseMissionLeg
