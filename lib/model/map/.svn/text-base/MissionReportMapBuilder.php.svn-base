<?php


/**
 * This class adds structure of 'mission_report' table to 'propel' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 01/05/11 08:19:47
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class MissionReportMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.MissionReportMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(MissionReportPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(MissionReportPeer::TABLE_NAME);
		$tMap->setPhpName('MissionReport');
		$tMap->setClassname('MissionReport');

		$tMap->setUseIdGenerator(true);

		$tMap->addPrimaryKey('ID', 'Id', 'INTEGER', true, 4);

		$tMap->addColumn('REPORT_DATE', 'ReportDate', 'TIMESTAMP', false, null);

		$tMap->addColumn('MISSION_DATE', 'MissionDate', 'TIMESTAMP', false, null);

		$tMap->addColumn('COPILOT_NAME', 'CopilotName', 'VARCHAR', false, 50);

		$tMap->addColumn('MEMBER_COPILOT', 'MemberCopilot', 'TINYINT', false, 1);

		$tMap->addForeignKey('AIRCRAFT_ID', 'AircraftId', 'INTEGER', 'aircraft', 'ID', false, 4);

		$tMap->addColumn('N_NUMBER', 'NNumber', 'VARCHAR', false, 8);

		$tMap->addColumn('MAKEMODEL', 'Makemodel', 'VARCHAR', false, 60);

		$tMap->addColumn('HOBBS_TIME', 'HobbsTime', 'TIME', false, null);

		$tMap->addColumn('PASSENGER_NAMES', 'PassengerNames', 'VARCHAR', false, 255);

		$tMap->addColumn('MISSION_COMMENTS', 'MissionComments', 'LONGVARCHAR', false, null);

		$tMap->addColumn('EXPENSE_REPORT', 'ExpenseReport', 'LONGVARCHAR', false, null);

		$tMap->addColumn('APPROVED', 'Approved', 'TINYINT', false, 1);

		$tMap->addColumn('PICKUP_AIRPORT_IDENT', 'PickupAirportIdent', 'VARCHAR', false, 25);

		$tMap->addColumn('DROPOFF_AIRPORT_IDENT', 'DropoffAirportIdent', 'VARCHAR', false, 25);

		$tMap->addColumn('ROUTING', 'Routing', 'VARCHAR', false, 40);

		$tMap->addColumn('COMMERCIAL_TICKET_COST', 'CommercialTicketCost', 'INTEGER', false, 8);

		$tMap->addColumn('AIRLINE_REF_NUMBER', 'AirlineRefNumber', 'VARCHAR', false, 40);

		$tMap->addColumn('AIRLINE_OWRT', 'AirlineOwrt', 'VARCHAR', false, 2);

		$tMap->addColumn('MILEAGE', 'Mileage', 'INTEGER', false, 4);

		$tMap->addColumn('PHOTO1', 'Photo1', 'VARCHAR', false, 255);

		$tMap->addColumn('PHOTO2', 'Photo2', 'VARCHAR', false, 255);

		$tMap->addColumn('PHOTO3', 'Photo3', 'VARCHAR', false, 255);

		$tMap->addColumn('PHOTO4', 'Photo4', 'VARCHAR', false, 255);

		$tMap->addColumn('PHOTO5', 'Photo5', 'VARCHAR', false, 255);

	} // doBuild()

} // MissionReportMapBuilder
