<?php


/**
 * This class adds structure of 'mission_leg' table to 'propel' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 04/20/11 01:49:10
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class MissionLegMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.MissionLegMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(MissionLegPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(MissionLegPeer::TABLE_NAME);
		$tMap->setPhpName('MissionLeg');
		$tMap->setClassname('MissionLeg');

		$tMap->setUseIdGenerator(true);

		$tMap->addPrimaryKey('ID', 'Id', 'INTEGER', true, 4);

		$tMap->addForeignKey('MISSION_ID', 'MissionId', 'INTEGER', 'mission', 'ID', true, 4);

		$tMap->addColumn('LEG_NUMBER', 'LegNumber', 'INTEGER', true, 2);

		$tMap->addForeignKey('FROM_AIRPORT_ID', 'FromAirportId', 'INTEGER', 'airport', 'ID', false, 11);

		$tMap->addForeignKey('TO_AIRPORT_ID', 'ToAirportId', 'INTEGER', 'airport', 'ID', false, 11);

		$tMap->addColumn('REVERSE_FROM', 'ReverseFrom', 'INTEGER', false, 11);

		$tMap->addColumn('PASS_ON_BOARD', 'PassOnBoard', 'TINYINT', true, 1);

		$tMap->addColumn('BAGGAGE_WEIGHT', 'BaggageWeight', 'INTEGER', false, 2);

		$tMap->addColumn('BAGGAGE_DESC', 'BaggageDesc', 'VARCHAR', false, 50);

		$tMap->addForeignKey('COORDINATOR_ID', 'CoordinatorId', 'INTEGER', 'coordinator', 'ID', false, 4);

		$tMap->addColumn('PUBLIC_C_NOTE', 'PublicCNote', 'VARCHAR', false, 255);

		$tMap->addColumn('PRIVATE_C_NOTE', 'PrivateCNote', 'VARCHAR', false, 255);

		$tMap->addColumn('COPILOT_WANTED', 'CopilotWanted', 'TINYINT', false, 1);

		$tMap->addForeignKey('PILOT_ID', 'PilotId', 'INTEGER', 'pilot', 'ID', false, 4);

		$tMap->addForeignKey('COPILOT_ID', 'CopilotId', 'INTEGER', 'member', 'ID', false, 4);

		$tMap->addColumn('MISS_ASSIS_ID', 'MissAssisId', 'INTEGER', false, 11);

		$tMap->addForeignKey('BACKUP_PILOT_ID', 'BackupPilotId', 'INTEGER', 'pilot', 'ID', false, 4);

		$tMap->addForeignKey('BACKUP_COPILOT_ID', 'BackupCopilotId', 'INTEGER', 'member', 'ID', false, 4);

		$tMap->addColumn('BACKUP_MISS_ASSIS_ID', 'BackupMissAssisId', 'INTEGER', false, 11);

		$tMap->addColumn('CANCELLED', 'Cancelled', 'VARCHAR', false, 25);

		$tMap->addColumn('CANCEL_COMMENT', 'CancelComment', 'VARCHAR', false, 60);

		$tMap->addColumn('WAIVER_RECEIVED', 'WaiverReceived', 'TIMESTAMP', false, null);

		$tMap->addColumn('WEB_COORDINATED', 'WebCoordinated', 'TINYINT', true, 1);

		$tMap->addForeignKey('MISSION_REPORT_ID', 'MissionReportId', 'INTEGER', 'mission_report', 'ID', false, 4);

		$tMap->addForeignKey('PILOT_AIRCRAFT_ID', 'PilotAircraftId', 'INTEGER', 'pilot_aircraft', 'ID', false, 4);

		$tMap->addForeignKey('FBO_ID', 'FboId', 'INTEGER', 'fbo', 'ID', false, 4);

		$tMap->addColumn('FBO_ADDRESS_NEW', 'FboAddressNew', 'VARCHAR', false, 100);

		$tMap->addColumn('FBO_DEST_ID', 'FboDestId', 'INTEGER', false, 4);

		$tMap->addColumn('SHARE_AFA_ORG_ID', 'ShareAfaOrgId', 'INTEGER', false, 4);

		$tMap->addColumn('TRANSPORTATION', 'Transportation', 'VARCHAR', true, 20);

		$tMap->addColumn('GROUND_ORIGIN', 'GroundOrigin', 'VARCHAR', false, 10);

		$tMap->addColumn('GROUND_DESTINATION', 'GroundDestination', 'VARCHAR', false, 10);

		$tMap->addColumn('FLIGHT_TIME', 'FlightTime', 'TIME', false, null);

		$tMap->addColumn('AIRLINE_ID', 'AirlineId', 'INTEGER', false, 11);

		$tMap->addColumn('FUND_ID', 'FundId', 'INTEGER', false, 11);

		$tMap->addColumn('CONFIRM_CODE', 'ConfirmCode', 'VARCHAR', false, 50);

		$tMap->addColumn('FLIGHT_COST', 'FlightCost', 'INTEGER', false, 11);

		$tMap->addColumn('COMM_ORIGIN', 'CommOrigin', 'VARCHAR', false, 50);

		$tMap->addColumn('COMM_DEST', 'CommDest', 'VARCHAR', false, 50);

		$tMap->addColumn('FLIGHT_NUMBER', 'FlightNumber', 'VARCHAR', false, 50);

		$tMap->addColumn('DEPARTURE', 'Departure', 'TIME', false, null);

		$tMap->addColumn('ARRIVAL', 'Arrival', 'TIME', false, null);

		$tMap->addColumn('PREFIX', 'Prefix', 'VARCHAR', true, 10);

		$tMap->addColumn('CANCEL_MISSION_LEG', 'CancelMissionLeg', 'INTEGER', true, 5);

	} // doBuild()

} // MissionLegMapBuilder
