<?php


/**
 * This class adds structure of 'member' table to 'propel' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 01/05/11 08:19:44
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class MemberMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.MemberMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(MemberPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(MemberPeer::TABLE_NAME);
		$tMap->setPhpName('Member');
		$tMap->setClassname('Member');

		$tMap->setUseIdGenerator(true);

		$tMap->addPrimaryKey('ID', 'Id', 'INTEGER', true, 4);

		$tMap->addForeignKey('PERSON_ID', 'PersonId', 'INTEGER', 'person', 'ID', true, 4);

		$tMap->addColumn('EXTERNAL_ID', 'ExternalId', 'INTEGER', false, 4);

		$tMap->addForeignKey('WING_ID', 'WingId', 'INTEGER', 'wing', 'ID', false, 4);

		$tMap->addForeignKey('MEMBER_CLASS_ID', 'MemberClassId', 'INTEGER', 'member_class', 'ID', true, 4);

		$tMap->addForeignKey('MASTER_MEMBER_ID', 'MasterMemberId', 'INTEGER', 'member', 'ID', false, 4);

		$tMap->addColumn('JOIN_DATE', 'JoinDate', 'DATE', true, null);

		$tMap->addColumn('ACTIVE', 'Active', 'TINYINT', true, 1);

		$tMap->addColumn('INACTIVE_REASON', 'InactiveReason', 'VARCHAR', false, 15);

		$tMap->addColumn('INACTIVE_COMMENT', 'InactiveComment', 'VARCHAR', false, 40);

		$tMap->addColumn('FLIGHT_STATUS', 'FlightStatus', 'VARCHAR', true, 20);

		$tMap->addColumn('CO_PILOT', 'CoPilot', 'TINYINT', true, 1);

		$tMap->addColumn('CONTACT', 'Contact', 'VARCHAR', false, 10);

		$tMap->addColumn('DATE_OF_BIRTH', 'DateOfBirth', 'DATE', false, null);

		$tMap->addColumn('WEIGHT', 'Weight', 'INTEGER', false, 4);

		$tMap->addColumn('SPOUSE_NAME', 'SpouseName', 'VARCHAR', false, 50);

		$tMap->addColumn('LANGUAGES', 'Languages', 'VARCHAR', false, 50);

		$tMap->addColumn('COORDINATOR_NOTES', 'CoordinatorNotes', 'VARCHAR', false, 255);

		$tMap->addColumn('RENEWED_DATE', 'RenewedDate', 'DATE', false, null);

		$tMap->addColumn('RENEWAL_DATE', 'RenewalDate', 'DATE', false, null);

		$tMap->addColumn('RENEWAL_NOTICE1', 'RenewalNotice1', 'DATE', false, null);

		$tMap->addColumn('RENEWAL_NOTICE2', 'RenewalNotice2', 'DATE', false, null);

		$tMap->addColumn('RENEWAL_NOTICE3', 'RenewalNotice3', 'DATE', false, null);

		$tMap->addColumn('RENEWAL_NOTICE4', 'RenewalNotice4', 'DATE', false, null);

		$tMap->addColumn('REVIEW_DONE', 'ReviewDone', 'DATE', false, null);

		$tMap->addColumn('ED_NEW_MEMBER_NOTIFY', 'EdNewMemberNotify', 'DATE', false, null);

		$tMap->addColumn('WN_NEW_MEMBERN_NTIFY', 'WnNewMembernNtify', 'DATE', false, null);

		$tMap->addColumn('NO_WING_CONTACT_ACK', 'NoWingContactAck', 'TINYINT', true, 1);

		$tMap->addColumn('HOLD_HARMLESS_RECEIVED', 'HoldHarmlessReceived', 'TINYINT', true, 1);

		$tMap->addColumn('MEMBER_WELCOMED', 'MemberWelcomed', 'DATE', false, null);

		$tMap->addColumn('BADGE_MADE', 'BadgeMade', 'DATE', false, null);

		$tMap->addColumn('NOTEBOOK_SENT', 'NotebookSent', 'DATE', false, null);

		$tMap->addColumn('CLOTHING_SENT', 'ClothingSent', 'DATE', false, null);

		$tMap->addColumn('S_MOD_MEMBER_NOTIFY', 'SModMemberNotify', 'VARCHAR', false, 255);

		$tMap->addColumn('W_MOD_MEMBER_NOTIFY', 'WModMemberNotify', 'VARCHAR', false, 255);

		$tMap->addColumn('RENEW_MARK', 'RenewMark', 'TINYINT', true, 1);

		$tMap->addColumn('RENEWAL_SENT_DATE', 'RenewalSentDate', 'TINYINT', false, 4);

		$tMap->addColumn('S_LATE_RENEWAL_NOTIFY', 'SLateRenewalNotify', 'TINYINT', true, 1);

		$tMap->addColumn('W_LATE_RENEWAL_NOTIFY', 'WLateRenewalNotify', 'TINYINT', true, 1);

		$tMap->addColumn('S_INACTIVE_NOTIFY', 'SInactiveNotify', 'TINYINT', true, 1);

		$tMap->addColumn('W_INACTIVE_NOTIFY', 'WInactiveNotify', 'TINYINT', true, 1);

		$tMap->addColumn('W_NOT_ORIENTED_NOTIFY_DATE1', 'WNotOrientedNotifyDate1', 'DATE', false, null);

		$tMap->addColumn('W_NOT_ORIENTED_NOTIFY_DATE2', 'WNotOrientedNotifyDate2', 'DATE', false, null);

		$tMap->addColumn('EMERGENCY_CONTACT_NAME', 'EmergencyContactName', 'VARCHAR', false, 40);

		$tMap->addColumn('EMERGENCY_CONTACT_PHONE', 'EmergencyContactPhone', 'VARCHAR', false, 40);

		$tMap->addColumn('DRIVERS_LICENSE_STATE', 'DriversLicenseState', 'VARCHAR', false, 2);

		$tMap->addColumn('DRIVERS_LICENSE_NUMBER', 'DriversLicenseNumber', 'VARCHAR', false, 25);

		$tMap->addColumn('HEIGHT', 'Height', 'INTEGER', false, 11);

		$tMap->addForeignKey('SECONDARY_WING_ID', 'SecondaryWingId', 'INTEGER', 'wing', 'ID', false, 4);

	} // doBuild()

} // MemberMapBuilder
