<?php


/**
 * This class adds structure of 'mission' table to 'propel' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Wed Mar 30 02:30:09 2011
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class MissionMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.MissionMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(MissionPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(MissionPeer::TABLE_NAME);
		$tMap->setPhpName('Mission');
		$tMap->setClassname('Mission');

		$tMap->setUseIdGenerator(true);

		$tMap->addPrimaryKey('ID', 'Id', 'INTEGER', true, 4);

		$tMap->addColumn('EXTERNAL_ID', 'ExternalId', 'INTEGER', false, 4);

		$tMap->addForeignKey('REQUEST_ID', 'RequestId', 'INTEGER', 'mission_request', 'ID', false, 4);

		$tMap->addForeignKey('ITINERARY_ID', 'ItineraryId', 'INTEGER', 'itinerary', 'ID', false, 11);

		$tMap->addForeignKey('MISSION_TYPE_ID', 'MissionTypeId', 'INTEGER', 'mission_type', 'ID', true, 4);

		$tMap->addColumn('MISSION_DATE', 'MissionDate', 'TIMESTAMP', false, null);

		$tMap->addColumn('DATE_REQUESTED', 'DateRequested', 'TIMESTAMP', true, null);

		$tMap->addForeignKey('PASSENGER_ID', 'PassengerId', 'INTEGER', 'passenger', 'ID', false, 4);

		$tMap->addForeignKey('REQUESTER_ID', 'RequesterId', 'INTEGER', 'requester', 'ID', false, 4);

		$tMap->addForeignKey('AGENCY_ID', 'AgencyId', 'INTEGER', 'agency', 'ID', false, 4);

		$tMap->addForeignKey('OTHER_REQUESTER_ID', 'OtherRequesterId', 'INTEGER', 'requester', 'ID', false, 4);

		$tMap->addForeignKey('OTHER_AGENCY_ID', 'OtherAgencyId', 'INTEGER', 'agency', 'ID', false, 4);

		$tMap->addForeignKey('CAMP_ID', 'CampId', 'INTEGER', 'camp', 'ID', false, 4);

		$tMap->addForeignKey('COORDINATOR_ID', 'CoordinatorId', 'INTEGER', 'coordinator', 'ID', false, 4);

		$tMap->addColumn('APPT_DATE', 'ApptDate', 'TIMESTAMP', false, null);

		$tMap->addColumn('FLIGHT_TIME', 'FlightTime', 'VARCHAR', false, 60);

		$tMap->addColumn('TREATMENT', 'Treatment', 'VARCHAR', false, 30);

		$tMap->addColumn('COMMENT', 'Comment', 'VARCHAR', false, 100);

		$tMap->addColumn('APPOINTMENT', 'Appointment', 'VARCHAR', false, 50);

		$tMap->addColumn('MISSION_SPECIFIC_COMMENTS', 'MissionSpecificComments', 'VARCHAR', false, 255);

		$tMap->addColumn('START', 'Start', 'INTEGER', true, 2);

		$tMap->addColumn('APOINT_TIME', 'ApointTime', 'VARCHAR', false, 50);

		$tMap->addColumn('MISSION_COUNT', 'MissionCount', 'INTEGER', true, 1);

		$tMap->addColumn('B_WEIGHT', 'BWeight', 'INTEGER', true, 4);

		$tMap->addColumn('B_TYPE', 'BType', 'VARCHAR', false, 2);

		$tMap->addColumn('B_DESC', 'BDesc', 'VARCHAR', false, 255);

		$tMap->addColumn('CANCEL_MISSION', 'CancelMission', 'TINYINT', false, 4);

	} // doBuild()

} // MissionMapBuilder
