<?php


/**
 * This class adds structure of 'user_filter' table to 'propel' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 01/05/11 08:19:52
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class UserFilterMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.UserFilterMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(UserFilterPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(UserFilterPeer::TABLE_NAME);
		$tMap->setPhpName('UserFilter');
		$tMap->setClassname('UserFilter');

		$tMap->setUseIdGenerator(true);

		$tMap->addPrimaryKey('ID', 'Id', 'INTEGER', true, 11);

		$tMap->addColumn('PERSON_ID', 'PersonId', 'INTEGER', true, 11);

		$tMap->addColumn('DATE_RANGE1', 'DateRange1', 'TIMESTAMP', false, null);

		$tMap->addColumn('DATE_RANGE2', 'DateRange2', 'TIMESTAMP', false, null);

		$tMap->addColumn('DAY1', 'Day1', 'VARCHAR', false, 20);

		$tMap->addColumn('DAY2', 'Day2', 'VARCHAR', false, 20);

		$tMap->addColumn('DAY3', 'Day3', 'VARCHAR', false, 20);

		$tMap->addColumn('DAY4', 'Day4', 'VARCHAR', false, 20);

		$tMap->addColumn('DAY5', 'Day5', 'VARCHAR', false, 20);

		$tMap->addColumn('DAY6', 'Day6', 'VARCHAR', false, 20);

		$tMap->addColumn('DAY7', 'Day7', 'VARCHAR', false, 20);

		$tMap->addColumn('WING', 'Wing', 'VARCHAR', false, 50);

		$tMap->addColumn('IDENT', 'Ident', 'VARCHAR', false, 4);

		$tMap->addColumn('CITY', 'City', 'VARCHAR', false, 50);

		$tMap->addColumn('ZIPCODE', 'Zipcode', 'VARCHAR', false, 10);

		$tMap->addColumn('STATE', 'State', 'VARCHAR', false, 10);

		$tMap->addColumn('ORGIN', 'Orgin', 'TINYINT', false, 4);

		$tMap->addColumn('DEST', 'Dest', 'TINYINT', false, 4);

		$tMap->addColumn('IS_PILOT', 'IsPilot', 'TINYINT', false, 4);

		$tMap->addColumn('IS_MA', 'IsMa', 'TINYINT', false, 4);

		$tMap->addColumn('IFR_BACKUP', 'IfrBackup', 'TINYINT', false, 4);

		$tMap->addColumn('FILLED', 'Filled', 'TINYINT', false, 4);

		$tMap->addColumn('OPEN', 'Open', 'TINYINT', false, 4);

		$tMap->addColumn('MAX_PASSENGER', 'MaxPassenger', 'INTEGER', false, 11);

		$tMap->addColumn('MAX_WEIGHT', 'MaxWeight', 'INTEGER', false, 11);

		$tMap->addColumn('MAX_DISTANCE', 'MaxDistance', 'INTEGER', false, 11);

		$tMap->addColumn('MAX_EFFCIENCY', 'MaxEffciency', 'INTEGER', false, 11);

		$tMap->addColumn('AVAILABILITY', 'Availability', 'TINYINT', false, 4);

		$tMap->addColumn('ALLTYPE', 'Alltype', 'TINYINT', false, 4);

	} // doBuild()

} // UserFilterMapBuilder
