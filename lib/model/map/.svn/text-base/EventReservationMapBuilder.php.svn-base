<?php


/**
 * This class adds structure of 'event_reservation' table to 'propel' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 04/25/11 05:29:33
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class EventReservationMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.EventReservationMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(EventReservationPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(EventReservationPeer::TABLE_NAME);
		$tMap->setPhpName('EventReservation');
		$tMap->setClassname('EventReservation');

		$tMap->setUseIdGenerator(true);

		$tMap->addPrimaryKey('ID', 'Id', 'INTEGER', true, 4);

		$tMap->addForeignKey('EVENT_ID', 'EventId', 'INTEGER', 'event', 'ID', false, 4);

		$tMap->addForeignKey('MEMBER_ID', 'MemberId', 'INTEGER', 'member', 'ID', false, 4);

		$tMap->addColumn('RESERVATION_DATE', 'ReservationDate', 'TIMESTAMP', false, null);

		$tMap->addColumn('FIRST_NAME', 'FirstName', 'VARCHAR', true, 60);

		$tMap->addColumn('LAST_NAME', 'LastName', 'VARCHAR', true, 60);

		$tMap->addColumn('ADDRESS', 'Address', 'VARCHAR', false, 40);

		$tMap->addColumn('CITY', 'City', 'VARCHAR', true, 30);

		$tMap->addColumn('STATE', 'State', 'VARCHAR', true, 2);

		$tMap->addColumn('ZIPCODE', 'Zipcode', 'VARCHAR', true, 10);

		$tMap->addColumn('PHONE', 'Phone', 'VARCHAR', false, 16);

		$tMap->addColumn('EMAIL', 'Email', 'VARCHAR', true, 60);

		$tMap->addColumn('ADULT_GUESTS', 'AdultGuests', 'INTEGER', false, 4);

		$tMap->addColumn('CHILD_GUESTS', 'ChildGuests', 'INTEGER', false, 4);

		$tMap->addColumn('GUEST_NAMES', 'GuestNames', 'VARCHAR', false, 125);

		$tMap->addColumn('AMT_PAID', 'AmtPaid', 'INTEGER', false, 8);

		$tMap->addColumn('METHOD_OF_PAYMENT', 'MethodOfPayment', 'VARCHAR', false, 10);

		$tMap->addColumn('PAYMENT_DATE', 'PaymentDate', 'TIMESTAMP', false, null);

		$tMap->addColumn('AUTH_NUMBER', 'AuthNumber', 'VARCHAR', false, 10);

		$tMap->addColumn('STATUS', 'Status', 'VARCHAR', false, 10);

		$tMap->addColumn('COMMENTS', 'Comments', 'VARCHAR', false, 255);

		$tMap->addColumn('COLLECT_SECURE_INFO', 'CollectSecureInfo', 'TINYINT', false, 1);

		$tMap->addColumn('ADDL_INFO_FIELDS', 'AddlInfoFields', 'VARCHAR', false, 500);

		$tMap->addColumn('NOVAPOINTE_TRANS_ID', 'NovapointeTransId', 'VARCHAR', false, 12);

	} // doBuild()

} // EventReservationMapBuilder
