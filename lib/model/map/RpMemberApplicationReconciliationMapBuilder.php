<?php


/**
 * This class adds structure of 'rp_member_application_reconciliation' table to 'propel' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue May 24 06:33:32 2011
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class RpMemberApplicationReconciliationMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.RpMemberApplicationReconciliationMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(RpMemberApplicationReconciliationPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(RpMemberApplicationReconciliationPeer::TABLE_NAME);
		$tMap->setPhpName('RpMemberApplicationReconciliation');
		$tMap->setClassname('RpMemberApplicationReconciliation');

		$tMap->setUseIdGenerator(true);

		$tMap->addColumn('FIRST_NAME', 'FirstName', 'VARCHAR', true, 40);

		$tMap->addColumn('LAST_NAME', 'LastName', 'VARCHAR', true, 40);

		$tMap->addColumn('EXTERNAL_ID', 'ExternalId', 'INTEGER', false, 4);

		$tMap->addColumn('RENEWAL', 'Renewal', 'TINYINT', false, 1);

		$tMap->addColumn('DUES_AMOUNT_PAID', 'DuesAmountPaid', 'FLOAT', true, null);

		$tMap->addColumn('METHOD_OF_PAYMENT', 'MethodOfPayment', 'VARCHAR', false, 20);

		$tMap->addColumn('CHECK_NUMBER', 'CheckNumber', 'INTEGER', false, 4);

		$tMap->addColumn('DONATION_AMOUNT_PAID', 'DonationAmountPaid', 'FLOAT', false, null);

		$tMap->addColumn('APPLICATION_DATE', 'ApplicationDate', 'TIMESTAMP', true, null);

		$tMap->addColumn('APPLICATIONDATEDISPLAY', 'Applicationdatedisplay', 'VARCHAR', false, 10);

		$tMap->addColumn('PROCESSEDDATE', 'Processeddate', 'VARCHAR', false, 10);

		$tMap->addColumn('CCARD_APPROVAL_NUMBER', 'CcardApprovalNumber', 'VARCHAR', false, 20);

		$tMap->addColumn('PAYMENT_TRANSACTION_ID', 'PaymentTransactionId', 'INTEGER', false, 4);

		$tMap->addColumn('MEMBER_CLASS_ID', 'MemberClassId', 'INTEGER', true, 4);

		$tMap->addColumn('MEMBERCLASS', 'Memberclass', 'VARCHAR', true, 20);

		$tMap->addColumn('MASTER_MEMBER_ID', 'MasterMemberId', 'INTEGER', false, 4);

		$tMap->addColumn('MASTERMEMBEREXTERNALID', 'Mastermemberexternalid', 'INTEGER', false, 4);

		$tMap->addColumn('MASTERMEMBERFIRSTNAME', 'Mastermemberfirstname', 'VARCHAR', false, 40);

		$tMap->addColumn('MASTERMEMBERLASTNAME', 'Mastermemberlastname', 'VARCHAR', false, 40);

		$tMap->addColumn('RENEWAL_DATE', 'RenewalDate', 'DATE', false, null);

		$tMap->addPrimaryKey('ID', 'Id', 'INTEGER', true, null);

	} // doBuild()

} // RpMemberApplicationReconciliationMapBuilder
