<?php


/**
 * This class adds structure of 'pilot' table to 'propel' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue May 24 06:33:30 2011
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class PilotMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.PilotMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(PilotPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(PilotPeer::TABLE_NAME);
		$tMap->setPhpName('Pilot');
		$tMap->setClassname('Pilot');

		$tMap->setUseIdGenerator(true);

		$tMap->addPrimaryKey('ID', 'Id', 'INTEGER', true, 4);

		$tMap->addForeignKey('MEMBER_ID', 'MemberId', 'INTEGER', 'member', 'ID', true, 11);

		$tMap->addForeignKey('PRIMARY_AIRPORT_ID', 'PrimaryAirportId', 'INTEGER', 'airport', 'ID', false, 4);

		$tMap->addColumn('SECONDARY_HOME_BASES', 'SecondaryHomeBases', 'VARCHAR', false, 30);

		$tMap->addColumn('TOTAL_HOURS', 'TotalHours', 'INTEGER', false, 4);

		$tMap->addColumn('LICENSE_TYPE', 'LicenseType', 'VARCHAR', true, 10);

		$tMap->addColumn('IFR', 'Ifr', 'TINYINT', true, 1);

		$tMap->addColumn('MULTI_ENGINE', 'MultiEngine', 'TINYINT', true, 1);

		$tMap->addColumn('SE_INSTRUCTOR', 'SeInstructor', 'VARCHAR', false, 5);

		$tMap->addColumn('ME_INSTRUCTOR', 'MeInstructor', 'VARCHAR', false, 5);

		$tMap->addColumn('OTHER_RATINGS', 'OtherRatings', 'VARCHAR', false, 50);

		$tMap->addColumn('INSURANCE_RECEIVED', 'InsuranceReceived', 'TIMESTAMP', false, null);

		$tMap->addForeignKey('ORIENTED_MEMBER_ID', 'OrientedMemberId', 'INTEGER', 'pilot', 'ID', false, 4);

		$tMap->addColumn('ORIENTED_DATE', 'OrientedDate', 'TIMESTAMP', false, null);

		$tMap->addColumn('MOP_ACTIVE_STATUS', 'MopActiveStatus', 'INTEGER', true, 5);

		$tMap->addForeignKey('MOP_ORIENTED_MEMBER_ID', 'MopOrientedMemberId', 'INTEGER', 'pilot', 'ID', false, 4);

		$tMap->addColumn('MOP_ORIENTED_DATE', 'MopOrientedDate', 'TIMESTAMP', false, null);

		$tMap->addColumn('MOP_REGIONS_SERVED', 'MopRegionsServed', 'VARCHAR', false, 125);

		$tMap->addColumn('MOP_SERVED_BY', 'MopServedBy', 'VARCHAR', true, 500);

		$tMap->addColumn('MOP_QUALIFICATIONS', 'MopQualifications', 'VARCHAR', false, 125);

		$tMap->addColumn('HSEATS', 'Hseats', 'VARCHAR', false, 30);

		$tMap->addColumn('TRANSPLANT', 'Transplant', 'TINYINT', false, 1);

	} // doBuild()

} // PilotMapBuilder
