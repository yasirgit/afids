<?php


/**
 * This class adds structure of 'airport' table to 'propel' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue May 24 06:33:24 2011
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class AirportMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.AirportMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(AirportPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(AirportPeer::TABLE_NAME);
		$tMap->setPhpName('Airport');
		$tMap->setClassname('Airport');

		$tMap->setUseIdGenerator(true);

		$tMap->addPrimaryKey('ID', 'Id', 'INTEGER', true, 11);

		$tMap->addColumn('IDENT', 'Ident', 'VARCHAR', false, 4);

		$tMap->addColumn('NAME', 'Name', 'VARCHAR', false, 30);

		$tMap->addColumn('CITY', 'City', 'VARCHAR', false, 30);

		$tMap->addColumn('STATE', 'State', 'VARCHAR', false, 2);

		$tMap->addColumn('LATITUDE', 'Latitude', 'FLOAT', true, 15);

		$tMap->addColumn('LONGITUDE', 'Longitude', 'FLOAT', true, 15);

		$tMap->addColumn('RUNWAY_LENGTH', 'RunwayLength', 'INTEGER', false, 2);

		$tMap->addForeignKey('WING_ID', 'WingId', 'INTEGER', 'wing', 'ID', false, 4);

		$tMap->addColumn('GMT_OFFSET', 'GmtOffset', 'INTEGER', false, 4);

		$tMap->addColumn('DST_OFFSET', 'DstOffset', 'INTEGER', false, 4);

		$tMap->addColumn('ZIPCODE', 'Zipcode', 'VARCHAR', false, 5);

		$tMap->addColumn('CLOSED', 'Closed', 'TINYINT', false, 1);

		$tMap->addColumn('FAA_SITE_NUMBER', 'FaaSiteNumber', 'VARCHAR', false, 18);

		$tMap->addColumn('ATCT', 'Atct', 'TINYINT', false, 4);

		$tMap->addColumn('IS_PRIVATE', 'IsPrivate', 'TINYINT', false, 4);

		$tMap->addColumn('NON_COMMERCIAL_LANDING_FEE', 'NonCommercialLandingFee', 'TINYINT', false, 4);

		$tMap->addColumn('ELEVATION', 'Elevation', 'INTEGER', false, 11);

	} // doBuild()

} // AirportMapBuilder
