<?php


/**
 * This class adds structure of 'mission_backup' table to 'propel' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue May 24 06:33:27 2011
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class MissionBackupMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.MissionBackupMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(MissionBackupPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(MissionBackupPeer::TABLE_NAME);
		$tMap->setPhpName('MissionBackup');
		$tMap->setClassname('MissionBackup');

		$tMap->setUseIdGenerator(true);

		$tMap->addPrimaryKey('ID', 'Id', 'INTEGER', true, 4);

		$tMap->addColumn('EXTERNAL_ID', 'ExternalId', 'INTEGER', false, 4);

		$tMap->addColumn('REQUEST_ID', 'RequestId', 'INTEGER', false, 4);

		$tMap->addColumn('ITINERARY_ID', 'ItineraryId', 'INTEGER', false, 11);

		$tMap->addColumn('MISSION_TYPE_ID', 'MissionTypeId', 'INTEGER', true, 4);

		$tMap->addColumn('MISSION_DATE', 'MissionDate', 'TIMESTAMP', false, null);

		$tMap->addColumn('DATE_REQUESTED', 'DateRequested', 'TIMESTAMP', true, null);

		$tMap->addColumn('PASSENGER_ID', 'PassengerId', 'INTEGER', false, 4);

		$tMap->addColumn('REQUESTER_ID', 'RequesterId', 'INTEGER', false, 4);

		$tMap->addColumn('AGENCY_ID', 'AgencyId', 'INTEGER', false, 4);

		$tMap->addColumn('OTHER_REQUESTER_ID', 'OtherRequesterId', 'INTEGER', false, 4);

		$tMap->addColumn('OTHER_AGENCY_ID', 'OtherAgencyId', 'INTEGER', false, 4);

		$tMap->addColumn('CAMP_ID', 'CampId', 'INTEGER', false, 4);

		$tMap->addColumn('COORDINATOR_ID', 'CoordinatorId', 'INTEGER', false, 4);

		$tMap->addColumn('APPT_DATE', 'ApptDate', 'TIMESTAMP', false, null);

		$tMap->addColumn('FLIGHT_TIME', 'FlightTime', 'VARCHAR', false, 60);

		$tMap->addColumn('TREATMENT', 'Treatment', 'VARCHAR', false, 30);

		$tMap->addColumn('COMMENT', 'Comment', 'VARCHAR', false, 100);

		$tMap->addColumn('APPOINTMENT', 'Appointment', 'VARCHAR', false, 50);

		$tMap->addColumn('MISSION_SPECIFIC_COMMENTS', 'MissionSpecificComments', 'VARCHAR', false, 255);

	} // doBuild()

} // MissionBackupMapBuilder
