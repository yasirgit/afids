<?php

/**
 * eventReservation actions.
 *
 * @package    angelflight
 * @subpackage eventReservation
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 12474 2008-10-31 10:41:27Z fabien $
 */
class eventReservationActions extends sfActions
{
  public function executeIndex(sfWebRequest $request)
  {
    $this->event_reservation_list = EventReservationPeer::doSelect(new Criteria());
  }

  public function executeNew(sfWebRequest $request)
  {
    $this->form = new EventReservationForm();
  }

  public function executeCreate(sfWebRequest $request)
  {
    $this->forward404Unless($request->isMethod('post'));

    $this->form = new EventReservationForm();

    $this->processForm($request, $this->form);

    $this->setTemplate('new');
  }

  public function executeEdit(sfWebRequest $request)
  {
    $this->forward404Unless($event_reservation = EventReservationPeer::retrieveByPk($request->getParameter('id')), sprintf('Object event_reservation does not exist (%s).', $request->getParameter('id')));
    $this->form = new EventReservationForm($event_reservation);
  }

  public function executeUpdate(sfWebRequest $request)
  {
    $this->forward404Unless($request->isMethod('post') || $request->isMethod('put'));
    $this->forward404Unless($event_reservation = EventReservationPeer::retrieveByPk($request->getParameter('id')), sprintf('Object event_reservation does not exist (%s).', $request->getParameter('id')));
    $this->form = new EventReservationForm($event_reservation);

    $this->processForm($request, $this->form);

    $this->setTemplate('edit');
  }

  public function executeDelete(sfWebRequest $request)
  {
    $request->checkCSRFProtection();

    $this->forward404Unless($event_reservation = EventReservationPeer::retrieveByPk($request->getParameter('id')), sprintf('Object event_reservation does not exist (%s).', $request->getParameter('id')));
    $event_reservation->delete();

    $this->redirect('eventReservation/index');
  }

  protected function processForm(sfWebRequest $request, sfForm $form)
  {
    $form->bind($request->getParameter($form->getName()), $request->getFiles($form->getName()));
    if ($form->isValid())
    {
      $event_reservation = $form->save();

      $this->redirect('eventReservation/edit?id='.$event_reservation->getId());
    }
  }

  public function  executeEventSignup(sfWebRequest $request)
  {
    //$this->event = EventPeer::retrieveByPK($request->getParameter('id'));
    $this->form1 = new EventReservationForm1();
    $this->adult_rate = $this->event->getAdultCost();
    $this->child_reate = $this->event->getChildCost();

    if($request->isMethod('post'))
    {
     
      $this->form1->bind($request->getParameter('event_reservation1'));
      
      if($this->form1->isValid())
      {         
          $eventReservation = $this->getUser()->getAttribute('eventReservation');
          //$eventReservation = array();
          $eventReservation['event_id'] = $request->getParameter('event_id');
          $eventReservation['country'] = $request->getParameter('country');
          $eventReservation['first_name'] = $request->getParameter('event_reservation1[first_name]');
          $eventReservation['last_name'] = $request->getParameter('event_reservation1[last_name]');
          $eventReservation['address'] = $request->getParameter('event_reservation1[address]');
          $eventReservation['city'] = $request->getParameter('event_reservation1[city]');
          $eventReservation['state'] = $request->getParameter('state');
          $eventReservation['zipcode'] = $request->getParameter('event_reservation1[zipcode]');
          $eventReservation['phone'] = $request->getParameter('event_reservation1[phone]');
          $eventReservation['email'] = $request->getParameter('event_reservation1[email]');
          $eventReservation['adult_guests'] = $request->getParameter('event_reservation1[adult_guests]');
          $eventReservation['child_guests'] = $request->getParameter('event_reservation1[child_guests]');
         
          $this->getUser()->setAttribute('eventReservation', $eventReservation);
          $this->redirect('eventReservation/step2');
          
     }
   }
   $this->date_widget = new widgetFormDate(array('format_date' => array('js' => 'mm/dd/yy', 'php' => 'm/d/Y')), array('class' => 'text'));
  

  }

  public function  executeStep2(sfWebRequest $request)
  {   
    $eventReservation = $this->getUser()->getAttribute('eventReservation');
    $this->event = EventPeer::retrieveByPK($eventReservation['event_id']);
    $this->setTemplate('eventSignup');

    $this->yourname = $eventReservation['first_name'];
    $adult_guests = $eventReservation['adult_guests'];
    $child_guests = $eventReservation['child_guests'];
    $this->total_guests = $adult_guests + $child_guests ;    
    
     if($request->isMethod('post'))
    {
        $all_guest = $request->getParameter('guest');
        $flag = 0;
        foreach($all_guest as $guest){
           if(empty ($guest)){
                $this->getUser()->setFlash('warning','You have to filled all guests name.' ) ;
                $flag = 1;
                break;
           }
        }
        if($flag == 0){
             $all_guests = serialize($all_guest);             
             $eventReservation['guest_names'] = $all_guests;
             $this->getUser()->setAttribute('eventReservation', $eventReservation);
             $this->redirect('eventReservation/step3');
        }
    }   
    
    $this->form1 = new EventReservationForm1();
    $this->date_widget = new widgetFormDate(array('format_date' => array('js' => 'mm/dd/yy', 'php' => 'm/d/Y')), array('class' => 'text'));
    
  }
  
  public function  executeStep3(sfWebRequest $request)
  {
    $eventReservation = $this->getUser()->getAttribute('eventReservation');
    $this->event = EventPeer::retrieveByPK($eventReservation['event_id']);    
    $this->setTemplate('eventSignup');

     //find out total amount
        $adult_per_cost = $this->event->getAdultCost();
        $child_per_cost = $this->event->getChildCost();
        $adult_guests = $eventReservation['adult_guests'];
        $child_guests = $eventReservation['child_guests'];

        $total_adult_cost = $adult_per_cost * $adult_guests;
        $total_child_cost = $child_per_cost * $child_guests;

        $this->total = $adult_per_cost + $total_adult_cost + $total_child_cost ;

    //end total

    if($request->isMethod('post'))
    {
        $card_number = $request->getParameter('credit_card_no');
        $expiration_date = $request->getParameter('expiration');
        $security_code = $request->getParameter('security_code');
        
        if(empty ($card_number) || empty ($expiration_date) || empty ($security_code) ){
            $this->getUser()->setFlash('warning','You have to fill all Card information.' );
        }
        else{
            $eventReservation['credit_card_no'] = $card_number;
            $eventReservation['expiration'] = $expiration_date;
            $eventReservation['security_code'] = $security_code;           
            $this->getUser()->setAttribute('eventReservation', $eventReservation);
            $this->redirect('eventReservation/check');            
        }

    }
    
    $this->form1 = new EventReservationForm1();
    $this->date_widget = new widgetFormDate(array('change_month' => true,'change_year' => true, 'format_date' => array('js' => 'mm/yy', 'php' => 'm/Y')), array('class' => 'text narrow'));
    
  }
  
  public function  executeCheck(sfWebRequest $request)
  {
    $eventReservation = $this->getUser()->getAttribute('eventReservation');
    $event = EventPeer::retrieveByPK($eventReservation['event_id']);

    $card_number = $eventReservation['credit_card_no'];
    $expiration_date = $eventReservation['expiration'];
    $security_code = $eventReservation['security_code'];

    
    //transection check
    list($month,$year) = explode('/', $expiration_date);
    $cardnumber = str_replace('-', '', $card_number);   
    $ccardcode = $security_code;
    
    //find out total amount
    $adult_per_cost = $event->getAdultCost();
    $child_per_cost = $event->getChildCost();
    $adult_guests = $eventReservation['adult_guests'];
    $child_guests = $eventReservation['child_guests'];

    $total_adult_cost = $adult_per_cost * $adult_guests;
    $total_child_cost = $child_per_cost * $child_guests;

    $total = $adult_per_cost + $total_adult_cost + $total_child_cost ;
    //end total    
    $payment = new afids_paymentGateway;
    
    $payment->gateway_name = "novapointe";
    $payment->transaction_type = "sale";
    
    $item_data = "&total=" .$total;
    $item_data.= "&tax=". 0;
    $item_data.= "&bill_first_name=" . $eventReservation['first_name'];
    $item_data.= "&bill_last_name=" . $eventReservation['last_name'];
    $item_data.= "&bill_address1=" . $eventReservation['address'];
    //$item_data.= "&bill_address2=" . null;
    $item_data.= "&bill_city=" . $eventReservation['city'];
    $item_data.= "&bill_state=" . $eventReservation['state'];
    $item_data.= "&bill_zip=" . $eventReservation['zipcode'];
    $item_data.= "&bill_country=" . $eventReservation['country'];
    $item_data.= "&bill_phone=" . $eventReservation['phone'];
    $item_data.= "&ccard=" . $cardnumber;
    $item_data.= "&expmonth=" . $month;
    $item_data.= "&expyear=" . $year;
    $item_data.= "&cvv2=" . $ccardcode;    

    $payment->item_data = $item_data;
    $payment->shipping_code = "USPS";

    $data = json_decode($payment->submitPayment());    

    if ($data->http_result == 'success' && $data->transaction_result == 'success') {

        # send email
        $this->getComponent('mail', 'EventReservationSuccessMail', array('first_name' => $eventReservation['first_name'],'email' => $eventReservation['email'] ,'event_name' => $event->getEventName(),'date' => $event->getEventDate(),'time' => $event->getEventTime(), 'location' => $event->getLocation() ,'Adult_guest' => $eventReservation['adult_guests'],'child_guest' => $eventReservation['child_guests'],'total_amount' => $total ));

        //saving date to event_reservation table 
        $date = date();
        //find out member              
          $query = "select member.id from member,person where member.person_id=person.id and person.first_name ='".trim($eventReservation['first_name'])."' and person.last_name='".trim($eventReservation['last_name'])."' and person.city='".trim($eventReservation['city'])."' and person.state='".trim($eventReservation['state'])."' and person.zipcode='".trim($eventReservation['zipcode'])."' and person.email='".trim($eventReservation['email'])."' limit 1";
          $conn = Propel::getConnection();          
          $statement = $conn->prepare($query);
          $statement->execute();
          $row = $statement->fetch(PDO::FETCH_ASSOC);
          if( !empty($row) ) {
            $member_id = $row['id'];
          }
          else $member_id = NULL;
        //end find member

        $event_reservaton = new EventReservation();
        $event_reservaton->setEventId($eventReservation['event_id']);
        $event_reservaton->setMemberId($member_id);
        $event_reservaton->setReservationDate($date);
        $event_reservaton->setFirstName($eventReservation['first_name']);
        $event_reservaton->setLastName($eventReservation['last_name']);
        $event_reservaton->setAddress($eventReservation['address']);
        $event_reservaton->setCity($eventReservation['city']);
        $event_reservaton->setState($eventReservation['state']);
        $event_reservaton->setZipcode($eventReservation['zipcode']);
        $event_reservaton->setPhone($eventReservation['phone']);
        $event_reservaton->setEmail($eventReservation['email']);
        $event_reservaton->setAdultGuests($eventReservation['adult_guests']);
        $event_reservaton->setChildGuests($eventReservation['child_guests']);
        $event_reservaton->setGuestNames($eventReservation['guest_names']);
        $event_reservaton->setAmtPaid($total);
        $event_reservaton->setPaymentDate($date);
        $event_reservaton->setAuthNumber($data->ccard_approval_number);
        $event_reservaton->setStatus('success');
        $event_reservaton->setNovapointeTransId($data->transaction_id);

        $event_reservaton->save();

        //decrement max person
        $remaning_people = $event->getMaxPersons();
        $remaning_people = $remaning_people - 1;
        
        $event->setMaxPersons($remaning_people);
        $event->save();

        //end 
        
        //end of event event_reservation entry
        
        $this->redirect('eventReservation/thankyou');
    } else {
        $this->getUser()->setFlash('warning', 'Event reservation Transaction failed. Please check your credit card information.');
        $this->redirect('eventReservation/step3');
    }
    //transection check end    
  }
  public function executeThankyou(sfWebRequest $request)
  { }


}
